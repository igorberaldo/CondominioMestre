
libertyMestre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008300  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef4  08008410  08008410  00018410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009304  08009304  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08009304  08009304  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009304  08009304  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009304  08009304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009308  08009308  00019308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800930c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002df4  200000b0  080093bc  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002ea4  080093bc  00022ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc97  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003abb  00000000  00000000  0003cd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f0  00000000  00000000  00040830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001770  00000000  00000000  00042120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000047b5  00000000  00000000  00043890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013aa3  00000000  00000000  00048045  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a532  00000000  00000000  0005bae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f601a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bb0  00000000  00000000  000f6098  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	080083f8 	.word	0x080083f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	080083f8 	.word	0x080083f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f003 fbc0 	bl	80038e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f854 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8f8 	bl	8000360 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000170:	f000 f8c0 	bl	80002f4 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000174:	f000 f890 	bl	8000298 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  configNetwork();
 8000178:	f001 fc12 	bl	80019a0 <configNetwork>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800017c:	f005 fb38 	bl	80057f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethernetTask */
  ethernetTaskHandle = osThreadNew(StartEthernet, NULL, &ethernetTask_attributes);
 8000180:	4a15      	ldr	r2, [pc, #84]	; (80001d8 <main+0x78>)
 8000182:	2100      	movs	r1, #0
 8000184:	4815      	ldr	r0, [pc, #84]	; (80001dc <main+0x7c>)
 8000186:	f005 fb99 	bl	80058bc <osThreadNew>
 800018a:	4602      	mov	r2, r0
 800018c:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <main+0x80>)
 800018e:	601a      	str	r2, [r3, #0]

  /* creation of readInput1Task */
  readInput1TaskHandle = osThreadNew(StartReadInput1, NULL, &readInput1Task_attributes);
 8000190:	4a14      	ldr	r2, [pc, #80]	; (80001e4 <main+0x84>)
 8000192:	2100      	movs	r1, #0
 8000194:	4814      	ldr	r0, [pc, #80]	; (80001e8 <main+0x88>)
 8000196:	f005 fb91 	bl	80058bc <osThreadNew>
 800019a:	4602      	mov	r2, r0
 800019c:	4b13      	ldr	r3, [pc, #76]	; (80001ec <main+0x8c>)
 800019e:	601a      	str	r2, [r3, #0]

  /* creation of readInput2Task */
  readInput2TaskHandle = osThreadNew(StartReadInput2, NULL, &readInput2Task_attributes);
 80001a0:	4a13      	ldr	r2, [pc, #76]	; (80001f0 <main+0x90>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	4813      	ldr	r0, [pc, #76]	; (80001f4 <main+0x94>)
 80001a6:	f005 fb89 	bl	80058bc <osThreadNew>
 80001aa:	4602      	mov	r2, r0
 80001ac:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <main+0x98>)
 80001ae:	601a      	str	r2, [r3, #0]

  /* creation of readInput3Task */
  readInput3TaskHandle = osThreadNew(StartReadInput3, NULL, &readInput3Task_attributes);
 80001b0:	4a12      	ldr	r2, [pc, #72]	; (80001fc <main+0x9c>)
 80001b2:	2100      	movs	r1, #0
 80001b4:	4812      	ldr	r0, [pc, #72]	; (8000200 <main+0xa0>)
 80001b6:	f005 fb81 	bl	80058bc <osThreadNew>
 80001ba:	4602      	mov	r2, r0
 80001bc:	4b11      	ldr	r3, [pc, #68]	; (8000204 <main+0xa4>)
 80001be:	601a      	str	r2, [r3, #0]

  /* creation of readInput4Task */
  readInput4TaskHandle = osThreadNew(StartReadInput4, NULL, &readInput4Task_attributes);
 80001c0:	4a11      	ldr	r2, [pc, #68]	; (8000208 <main+0xa8>)
 80001c2:	2100      	movs	r1, #0
 80001c4:	4811      	ldr	r0, [pc, #68]	; (800020c <main+0xac>)
 80001c6:	f005 fb79 	bl	80058bc <osThreadNew>
 80001ca:	4602      	mov	r2, r0
 80001cc:	4b10      	ldr	r3, [pc, #64]	; (8000210 <main+0xb0>)
 80001ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001d0:	f005 fb40 	bl	8005854 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d4:	e7fe      	b.n	80001d4 <main+0x74>
 80001d6:	bf00      	nop
 80001d8:	08009238 	.word	0x08009238
 80001dc:	08001d41 	.word	0x08001d41
 80001e0:	20002ca4 	.word	0x20002ca4
 80001e4:	0800925c 	.word	0x0800925c
 80001e8:	08001d8d 	.word	0x08001d8d
 80001ec:	20001c90 	.word	0x20001c90
 80001f0:	08009280 	.word	0x08009280
 80001f4:	08001de5 	.word	0x08001de5
 80001f8:	20002ca0 	.word	0x20002ca0
 80001fc:	080092a4 	.word	0x080092a4
 8000200:	08001e3d 	.word	0x08001e3d
 8000204:	20002c9c 	.word	0x20002c9c
 8000208:	080092c8 	.word	0x080092c8
 800020c:	08001ea1 	.word	0x08001ea1
 8000210:	20001c6c 	.word	0x20001c6c

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b090      	sub	sp, #64	; 0x40
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f007 ffd7 	bl	80081d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023e:	2310      	movs	r3, #16
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000246:	2300      	movs	r3, #0
 8000248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800024a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800024e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	4618      	mov	r0, r3
 8000256:	f004 f969 	bl	800452c <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000260:	f001 fe5c 	bl	8001f1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2302      	movs	r3, #2
 800026a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2102      	movs	r1, #2
 800027e:	4618      	mov	r0, r3
 8000280:	f004 fbd4 	bl	8004a2c <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800028a:	f001 fe47 	bl	8001f1c <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	; 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <MX_I2C2_Init+0x50>)
 800029e:	4a13      	ldr	r2, [pc, #76]	; (80002ec <MX_I2C2_Init+0x54>)
 80002a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_I2C2_Init+0x50>)
 80002a4:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <MX_I2C2_Init+0x58>)
 80002a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_I2C2_Init+0x50>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_I2C2_Init+0x50>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_I2C2_Init+0x50>)
 80002b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <MX_I2C2_Init+0x50>)
 80002be:	2200      	movs	r2, #0
 80002c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_I2C2_Init+0x50>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <MX_I2C2_Init+0x50>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_I2C2_Init+0x50>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002d4:	4804      	ldr	r0, [pc, #16]	; (80002e8 <MX_I2C2_Init+0x50>)
 80002d6:	f003 fff1 	bl	80042bc <HAL_I2C_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002e0:	f001 fe1c 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20001c18 	.word	0x20001c18
 80002ec:	40005800 	.word	0x40005800
 80002f0:	000186a0 	.word	0x000186a0

080002f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_SPI2_Init+0x64>)
 80002fa:	4a18      	ldr	r2, [pc, #96]	; (800035c <MX_SPI2_Init+0x68>)
 80002fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <MX_SPI2_Init+0x64>)
 8000300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000304:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000306:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_SPI2_Init+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_SPI2_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_SPI2_Init+0x64>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_SPI2_Init+0x64>)
 800031a:	2200      	movs	r2, #0
 800031c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_SPI2_Init+0x64>)
 8000320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000324:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_SPI2_Init+0x64>)
 8000328:	2218      	movs	r2, #24
 800032a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <MX_SPI2_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_SPI2_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <MX_SPI2_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_SPI2_Init+0x64>)
 8000340:	220a      	movs	r2, #10
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_SPI2_Init+0x64>)
 8000346:	f004 fd3d 	bl	8004dc4 <HAL_SPI_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000350:	f001 fde4 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20001bc0 	.word	0x20001bc0
 800035c:	40003800 	.word	0x40003800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b08a      	sub	sp, #40	; 0x28
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000374:	4b55      	ldr	r3, [pc, #340]	; (80004cc <MX_GPIO_Init+0x16c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a54      	ldr	r2, [pc, #336]	; (80004cc <MX_GPIO_Init+0x16c>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b52      	ldr	r3, [pc, #328]	; (80004cc <MX_GPIO_Init+0x16c>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0310 	and.w	r3, r3, #16
 8000388:	613b      	str	r3, [r7, #16]
 800038a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038c:	4b4f      	ldr	r3, [pc, #316]	; (80004cc <MX_GPIO_Init+0x16c>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a4e      	ldr	r2, [pc, #312]	; (80004cc <MX_GPIO_Init+0x16c>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b4c      	ldr	r3, [pc, #304]	; (80004cc <MX_GPIO_Init+0x16c>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b49      	ldr	r3, [pc, #292]	; (80004cc <MX_GPIO_Init+0x16c>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a48      	ldr	r2, [pc, #288]	; (80004cc <MX_GPIO_Init+0x16c>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b46      	ldr	r3, [pc, #280]	; (80004cc <MX_GPIO_Init+0x16c>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003bc:	4b43      	ldr	r3, [pc, #268]	; (80004cc <MX_GPIO_Init+0x16c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a42      	ldr	r2, [pc, #264]	; (80004cc <MX_GPIO_Init+0x16c>)
 80003c2:	f043 0308 	orr.w	r3, r3, #8
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b40      	ldr	r3, [pc, #256]	; (80004cc <MX_GPIO_Init+0x16c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0308 	and.w	r3, r3, #8
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT1_OP9_Pin|OUT1_OP10_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80003da:	483d      	ldr	r0, [pc, #244]	; (80004d0 <MX_GPIO_Init+0x170>)
 80003dc:	f003 ff55 	bl	800428a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_LED1_GPIO_Port, ON_LED1_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2102      	movs	r1, #2
 80003e4:	483b      	ldr	r0, [pc, #236]	; (80004d4 <MX_GPIO_Init+0x174>)
 80003e6:	f003 ff50 	bl	800428a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ON_BUZZ_Pin|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f241 0101 	movw	r1, #4097	; 0x1001
 80003f0:	4839      	ldr	r0, [pc, #228]	; (80004d8 <MX_GPIO_Init+0x178>)
 80003f2:	f003 ff4a 	bl	800428a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rst_GPIO_Port, Rst_Pin, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003fc:	4837      	ldr	r0, [pc, #220]	; (80004dc <MX_GPIO_Init+0x17c>)
 80003fe:	f003 ff44 	bl	800428a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_OP9_Pin OUT1_OP10_Pin */
  GPIO_InitStruct.Pin = OUT1_OP9_Pin|OUT1_OP10_Pin;
 8000402:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2302      	movs	r3, #2
 8000412:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	4619      	mov	r1, r3
 800041a:	482d      	ldr	r0, [pc, #180]	; (80004d0 <MX_GPIO_Init+0x170>)
 800041c:	f003 fdc4 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_LED1_Pin */
  GPIO_InitStruct.Pin = ON_LED1_Pin;
 8000420:	2302      	movs	r3, #2
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000424:	2301      	movs	r3, #1
 8000426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042c:	2302      	movs	r3, #2
 800042e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ON_LED1_GPIO_Port, &GPIO_InitStruct);
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	4619      	mov	r1, r3
 8000436:	4827      	ldr	r0, [pc, #156]	; (80004d4 <MX_GPIO_Init+0x174>)
 8000438:	f003 fdb6 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP4_Pin OUT1_OP3_Pin OUT1_OP2_Pin OUT1_OP1_Pin
                           OUT1_OP8_Pin OUT1_OP7_Pin OUT1_OP6_Pin OUT1_OP5_Pin */
  GPIO_InitStruct.Pin = OUT1_OP4_Pin|OUT1_OP3_Pin|OUT1_OP2_Pin|OUT1_OP1_Pin
 800043c:	23ff      	movs	r3, #255	; 0xff
 800043e:	617b      	str	r3, [r7, #20]
                          |OUT1_OP8_Pin|OUT1_OP7_Pin|OUT1_OP6_Pin|OUT1_OP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	4619      	mov	r1, r3
 800044e:	4823      	ldr	r0, [pc, #140]	; (80004dc <MX_GPIO_Init+0x17c>)
 8000450:	f003 fdaa 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_BUZZ_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = ON_BUZZ_Pin|GPIO_W5500_CS_Pin;
 8000454:	f241 0301 	movw	r3, #4097	; 0x1001
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045a:	2301      	movs	r3, #1
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	2302      	movs	r3, #2
 8000464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4619      	mov	r1, r3
 800046c:	481a      	ldr	r0, [pc, #104]	; (80004d8 <MX_GPIO_Init+0x178>)
 800046e:	f003 fd9b 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP12_Pin OUT1_OP11_Pin OUT1_OP15_Pin OUT1_OP16_Pin
                           OUT1_OP14_Pin OUT1_OP13_Pin */
  GPIO_InitStruct.Pin = OUT1_OP12_Pin|OUT1_OP11_Pin|OUT1_OP15_Pin|OUT1_OP16_Pin
 8000472:	237e      	movs	r3, #126	; 0x7e
 8000474:	617b      	str	r3, [r7, #20]
                          |OUT1_OP14_Pin|OUT1_OP13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000476:	2300      	movs	r3, #0
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	4619      	mov	r1, r3
 8000484:	4814      	ldr	r0, [pc, #80]	; (80004d8 <MX_GPIO_Init+0x178>)
 8000486:	f003 fd8f 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rst_Pin */
  GPIO_InitStruct.Pin = Rst_Pin;
 800048a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800048e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000490:	2301      	movs	r3, #1
 8000492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000494:	2301      	movs	r3, #1
 8000496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	2302      	movs	r3, #2
 800049a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Rst_GPIO_Port, &GPIO_InitStruct);
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	4619      	mov	r1, r3
 80004a2:	480e      	ldr	r0, [pc, #56]	; (80004dc <MX_GPIO_Init+0x17c>)
 80004a4:	f003 fd80 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80004a8:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <MX_GPIO_Init+0x180>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	627b      	str	r3, [r7, #36]	; 0x24
 80004ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
 80004b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004bc:	627b      	str	r3, [r7, #36]	; 0x24
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <MX_GPIO_Init+0x180>)
 80004c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c2:	6053      	str	r3, [r2, #4]

}
 80004c4:	bf00      	nop
 80004c6:	3728      	adds	r7, #40	; 0x28
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40011000 	.word	0x40011000
 80004d4:	40011400 	.word	0x40011400
 80004d8:	40010c00 	.word	0x40010c00
 80004dc:	40010800 	.word	0x40010800
 80004e0:	40010000 	.word	0x40010000

080004e4 <W5500_rxtx>:

/* USER CODE BEGIN 4 */
uint8_t W5500_rxtx(uint8_t data)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af02      	add	r7, sp, #8
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	uint8_t rxdata;

	HAL_SPI_TransmitReceive(&hspi2, &data, &rxdata, 1, 50);
 80004ee:	f107 020f 	add.w	r2, r7, #15
 80004f2:	1df9      	adds	r1, r7, #7
 80004f4:	2332      	movs	r3, #50	; 0x32
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	2301      	movs	r3, #1
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <W5500_rxtx+0x28>)
 80004fc:	f004 fce6 	bl	8004ecc <HAL_SPI_TransmitReceive>

	return (rxdata);
 8000500:	7bfb      	ldrb	r3, [r7, #15]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20001bc0 	.word	0x20001bc0

08000510 <wizchip_select>:
/////////////////////////////////////////////////////////////////
// SPI Callback function for accessing WIZCHIP                 //
// WIZCHIP user should implement with your host spi peripheral //
/////////////////////////////////////////////////////////////////
void  wizchip_select(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	W5500_select();
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051a:	4802      	ldr	r0, [pc, #8]	; (8000524 <wizchip_select+0x14>)
 800051c:	f003 feb5 	bl	800428a <HAL_GPIO_WritePin>
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40010c00 	.word	0x40010c00

08000528 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	W5500_release();
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000532:	4802      	ldr	r0, [pc, #8]	; (800053c <wizchip_deselect+0x14>)
 8000534:	f003 fea9 	bl	800428a <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40010c00 	.word	0x40010c00

08000540 <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	W5500_tx(wb);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ffc9 	bl	80004e4 <W5500_rxtx>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <wizchip_read>:

uint8_t wizchip_read()
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
   return W5500_rx();
 800055e:	20ff      	movs	r0, #255	; 0xff
 8000560:	f7ff ffc0 	bl	80004e4 <W5500_rxtx>
 8000564:	4603      	mov	r3, r0
}
 8000566:	4618      	mov	r0, r3
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
   uint8_t tmpstr[6];

	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000572:	4906      	ldr	r1, [pc, #24]	; (800058c <network_init+0x20>)
 8000574:	2000      	movs	r0, #0
 8000576:	f002 fe05 	bl	8003184 <ctlnetwork>

	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 800057a:	463b      	mov	r3, r7
 800057c:	4619      	mov	r1, r3
 800057e:	2008      	movs	r0, #8
 8000580:	f002 fd22 	bl	8002fc8 <ctlwizchip>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000000 	.word	0x20000000

08000590 <HTTP_reset>:
#define len(some) (sizeof(some)/sizeof(some[0]))

//http server

void HTTP_reset(uint8_t sockn)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    sentsize[sockn]=0;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HTTP_reset+0x28>)
 800059e:	2100      	movs	r1, #0
 80005a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	http_state[sockn]=HTTP_IDLE;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <HTTP_reset+0x2c>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	54d1      	strb	r1, [r2, r3]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20002ca8 	.word	0x20002ca8
 80005bc:	20001c94 	.word	0x20001c94

080005c0 <tcp_http_mt>:

int32_t tcp_http_mt(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	b089      	sub	sp, #36	; 0x24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint32_t size = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
   uint8_t flagHtmlGen = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	76fb      	strb	r3, [r7, #27]
   char *url,*p;
   uint16_t blocklen=0;
 80005d8:	2300      	movs	r3, #0
 80005da:	833b      	strh	r3, [r7, #24]

   switch(getSn_SR(sn))
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	3301      	adds	r3, #1
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fa1b 	bl	8002a24 <WIZCHIP_READ>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b1c      	cmp	r3, #28
 80005f2:	f201 8073 	bhi.w	80016dc <tcp_http_mt+0x111c>
 80005f6:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <tcp_http_mt+0x3c>)
 80005f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fc:	080016b9 	.word	0x080016b9
 8000600:	080016dd 	.word	0x080016dd
 8000604:	080016dd 	.word	0x080016dd
 8000608:	080016dd 	.word	0x080016dd
 800060c:	080016dd 	.word	0x080016dd
 8000610:	080016dd 	.word	0x080016dd
 8000614:	080016dd 	.word	0x080016dd
 8000618:	080016dd 	.word	0x080016dd
 800061c:	080016dd 	.word	0x080016dd
 8000620:	080016dd 	.word	0x080016dd
 8000624:	080016dd 	.word	0x080016dd
 8000628:	080016dd 	.word	0x080016dd
 800062c:	080016dd 	.word	0x080016dd
 8000630:	080016dd 	.word	0x080016dd
 8000634:	080016dd 	.word	0x080016dd
 8000638:	080016dd 	.word	0x080016dd
 800063c:	080016dd 	.word	0x080016dd
 8000640:	080016dd 	.word	0x080016dd
 8000644:	080016dd 	.word	0x080016dd
 8000648:	0800169b 	.word	0x0800169b
 800064c:	080016dd 	.word	0x080016dd
 8000650:	080016dd 	.word	0x080016dd
 8000654:	080016dd 	.word	0x080016dd
 8000658:	08000671 	.word	0x08000671
 800065c:	080016dd 	.word	0x080016dd
 8000660:	080016dd 	.word	0x080016dd
 8000664:	080016dd 	.word	0x080016dd
 8000668:	080016dd 	.word	0x080016dd
 800066c:	0800167d 	.word	0x0800167d
   {
      case SOCK_ESTABLISHED :

         if(getSn_IR(sn) & Sn_IR_CON)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	3301      	adds	r3, #1
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800067c:	4618      	mov	r0, r3
 800067e:	f002 f9d1 	bl	8002a24 <WIZCHIP_READ>
 8000682:	4603      	mov	r3, r0
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d009      	beq.n	80006a0 <tcp_http_mt+0xe0>
         {
            setSn_IR(sn,Sn_IR_CON);
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	3301      	adds	r3, #1
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f002 f9f2 	bl	8002a84 <WIZCHIP_WRITE>
         }

         if((size = getSn_RX_RSR(sn)) > 0)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fafb 	bl	8002c9e <getSn_RX_RSR>
 80006a8:	4603      	mov	r3, r0
 80006aa:	61fb      	str	r3, [r7, #28]
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	f001 8019 	beq.w	80016e6 <tcp_http_mt+0x1126>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006ba:	d902      	bls.n	80006c2 <tcp_http_mt+0x102>
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	61fb      	str	r3, [r7, #28]
            ret = recv(sn,buf,size);
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	6839      	ldr	r1, [r7, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 f8f4 	bl	80028b8 <recv>
 80006d0:	6178      	str	r0, [r7, #20]

            HTTP_reset(sn);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff5b 	bl	8000590 <HTTP_reset>

            if(ret <= 0)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	dc02      	bgt.n	80006e6 <tcp_http_mt+0x126>
            return ret;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	f001 b808 	b.w	80016f6 <tcp_http_mt+0x1136>

            url =(char*) buf + 4;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	3304      	adds	r3, #4
 80006ea:	613b      	str	r3, [r7, #16]

            if((http_state[sn]==HTTP_IDLE)&&(memcmp(buf, "GET ", 4)==0)&&((p = strchr(url, ' '))))// extract URL from request header
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4acd      	ldr	r2, [pc, #820]	; (8000a24 <tcp_http_mt+0x464>)
 80006f0:	5cd3      	ldrb	r3, [r2, r3]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f040 87f7 	bne.w	80016e6 <tcp_http_mt+0x1126>
 80006f8:	2204      	movs	r2, #4
 80006fa:	49cb      	ldr	r1, [pc, #812]	; (8000a28 <tcp_http_mt+0x468>)
 80006fc:	6838      	ldr	r0, [r7, #0]
 80006fe:	f007 fd37 	bl	8008170 <memcmp>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	f040 87ee 	bne.w	80016e6 <tcp_http_mt+0x1126>
 800070a:	2120      	movs	r1, #32
 800070c:	6938      	ldr	r0, [r7, #16]
 800070e:	f007 fd6a 	bl	80081e6 <strchr>
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2b00      	cmp	r3, #0
 8000718:	f000 87e5 	beq.w	80016e6 <tcp_http_mt+0x1126>
            {
              *(p++) = 0;//making zeroed url string
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	60fa      	str	r2, [r7, #12]
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]

				if ((url != NULL)&&(strncmp("/favicon.ico",url,12) != 0))
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	2b00      	cmp	r3, #0
 800072a:	f000 879d 	beq.w	8001668 <tcp_http_mt+0x10a8>
 800072e:	220c      	movs	r2, #12
 8000730:	6939      	ldr	r1, [r7, #16]
 8000732:	48be      	ldr	r0, [pc, #760]	; (8000a2c <tcp_http_mt+0x46c>)
 8000734:	f007 fd6c 	bl	8008210 <strncmp>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	f000 8794 	beq.w	8001668 <tcp_http_mt+0x10a8>
				{
					flagHtmlGen = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	76fb      	strb	r3, [r7, #27]
					if (strncmp("/ip:",url,4) == 0)
 8000744:	2204      	movs	r2, #4
 8000746:	6939      	ldr	r1, [r7, #16]
 8000748:	48b9      	ldr	r0, [pc, #740]	; (8000a30 <tcp_http_mt+0x470>)
 800074a:	f007 fd61 	bl	8008210 <strncmp>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10e      	bne.n	8000772 <tcp_http_mt+0x1b2>
					{
						memset(config_data, 0, sizeof(config_data));
 8000754:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000758:	2100      	movs	r1, #0
 800075a:	48b6      	ldr	r0, [pc, #728]	; (8000a34 <tcp_http_mt+0x474>)
 800075c:	f007 fd3b 	bl	80081d6 <memset>
						strcpy(config_data, url);
 8000760:	6939      	ldr	r1, [r7, #16]
 8000762:	48b4      	ldr	r0, [pc, #720]	; (8000a34 <tcp_http_mt+0x474>)
 8000764:	f007 fd4c 	bl	8008200 <strcpy>
						save_to_flash(config_data);
 8000768:	48b2      	ldr	r0, [pc, #712]	; (8000a34 <tcp_http_mt+0x474>)
 800076a:	f000 ffe1 	bl	8001730 <save_to_flash>
						configNetwork();
 800076e:	f001 f917 	bl	80019a0 <configNetwork>
					}

					//Gera��o da HTML
					if(flagHtmlGen == 1)
 8000772:	7efb      	ldrb	r3, [r7, #27]
 8000774:	2b01      	cmp	r3, #1
 8000776:	f040 8780 	bne.w	800167a <tcp_http_mt+0x10ba>
					{
						if(strncmp("/rede", url, 4) == 0)
 800077a:	2204      	movs	r2, #4
 800077c:	6939      	ldr	r1, [r7, #16]
 800077e:	48ae      	ldr	r0, [pc, #696]	; (8000a38 <tcp_http_mt+0x478>)
 8000780:	f007 fd46 	bl	8008210 <strncmp>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	f040 8180 	bne.w	8000a8c <tcp_http_mt+0x4cc>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	4aab      	ldr	r2, [pc, #684]	; (8000a3c <tcp_http_mt+0x47c>)
 8000790:	4614      	mov	r4, r2
 8000792:	469c      	mov	ip, r3
 8000794:	f104 0e20 	add.w	lr, r4, #32
 8000798:	4665      	mov	r5, ip
 800079a:	4626      	mov	r6, r4
 800079c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800079e:	6028      	str	r0, [r5, #0]
 80007a0:	6069      	str	r1, [r5, #4]
 80007a2:	60aa      	str	r2, [r5, #8]
 80007a4:	60eb      	str	r3, [r5, #12]
 80007a6:	3410      	adds	r4, #16
 80007a8:	f10c 0c10 	add.w	ip, ip, #16
 80007ac:	4574      	cmp	r4, lr
 80007ae:	d1f3      	bne.n	8000798 <tcp_http_mt+0x1d8>
 80007b0:	4665      	mov	r5, ip
 80007b2:	4623      	mov	r3, r4
 80007b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007b6:	6028      	str	r0, [r5, #0]
 80007b8:	6069      	str	r1, [r5, #4]
 80007ba:	60aa      	str	r2, [r5, #8]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 80007c0:	6838      	ldr	r0, [r7, #0]
 80007c2:	f7ff fcc5 	bl	8000150 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a9c      	ldr	r2, [pc, #624]	; (8000a40 <tcp_http_mt+0x480>)
 80007d0:	461c      	mov	r4, r3
 80007d2:	4613      	mov	r3, r2
 80007d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007d6:	6020      	str	r0, [r4, #0]
 80007d8:	6061      	str	r1, [r4, #4]
 80007da:	60a2      	str	r2, [r4, #8]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Mestre Config</title>");
 80007e0:	6838      	ldr	r0, [r7, #0]
 80007e2:	f7ff fcb5 	bl	8000150 <strlen>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461a      	mov	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	4413      	add	r3, r2
 80007ee:	4a95      	ldr	r2, [pc, #596]	; (8000a44 <tcp_http_mt+0x484>)
 80007f0:	461d      	mov	r5, r3
 80007f2:	4614      	mov	r4, r2
 80007f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f6:	6028      	str	r0, [r5, #0]
 80007f8:	6069      	str	r1, [r5, #4]
 80007fa:	60aa      	str	r2, [r5, #8]
 80007fc:	60eb      	str	r3, [r5, #12]
 80007fe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000800:	6128      	str	r0, [r5, #16]
 8000802:	6169      	str	r1, [r5, #20]
 8000804:	61aa      	str	r2, [r5, #24]
 8000806:	7823      	ldrb	r3, [r4, #0]
 8000808:	772b      	strb	r3, [r5, #28]
							strcat((char*)buf, "</head>");
 800080a:	6838      	ldr	r0, [r7, #0]
 800080c:	f7ff fca0 	bl	8000150 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	4413      	add	r3, r2
 8000818:	498b      	ldr	r1, [pc, #556]	; (8000a48 <tcp_http_mt+0x488>)
 800081a:	461a      	mov	r2, r3
 800081c:	460b      	mov	r3, r1
 800081e:	cb03      	ldmia	r3!, {r0, r1}
 8000820:	6010      	str	r0, [r2, #0]
 8000822:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 8000824:	6838      	ldr	r0, [r7, #0]
 8000826:	f7ff fc93 	bl	8000150 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	4413      	add	r3, r2
 8000832:	4a86      	ldr	r2, [pc, #536]	; (8000a4c <tcp_http_mt+0x48c>)
 8000834:	6810      	ldr	r0, [r2, #0]
 8000836:	6018      	str	r0, [r3, #0]
 8000838:	8891      	ldrh	r1, [r2, #4]
 800083a:	7992      	ldrb	r2, [r2, #6]
 800083c:	8099      	strh	r1, [r3, #4]
 800083e:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<b><center>Configuracao da Placa de rede</b></center><br>");
 8000840:	6838      	ldr	r0, [r7, #0]
 8000842:	f7ff fc85 	bl	8000150 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	4413      	add	r3, r2
 800084e:	4a80      	ldr	r2, [pc, #512]	; (8000a50 <tcp_http_mt+0x490>)
 8000850:	4614      	mov	r4, r2
 8000852:	469c      	mov	ip, r3
 8000854:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000858:	4665      	mov	r5, ip
 800085a:	4626      	mov	r6, r4
 800085c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800085e:	6028      	str	r0, [r5, #0]
 8000860:	6069      	str	r1, [r5, #4]
 8000862:	60aa      	str	r2, [r5, #8]
 8000864:	60eb      	str	r3, [r5, #12]
 8000866:	3410      	adds	r4, #16
 8000868:	f10c 0c10 	add.w	ip, ip, #16
 800086c:	4574      	cmp	r4, lr
 800086e:	d1f3      	bne.n	8000858 <tcp_http_mt+0x298>
 8000870:	4662      	mov	r2, ip
 8000872:	4623      	mov	r3, r4
 8000874:	cb03      	ldmia	r3!, {r0, r1}
 8000876:	6010      	str	r0, [r2, #0]
 8000878:	6051      	str	r1, [r2, #4]
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "<center><form action=''>");
 800087e:	6838      	ldr	r0, [r7, #0]
 8000880:	f7ff fc66 	bl	8000150 <strlen>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	4413      	add	r3, r2
 800088c:	4a71      	ldr	r2, [pc, #452]	; (8000a54 <tcp_http_mt+0x494>)
 800088e:	461d      	mov	r5, r3
 8000890:	4614      	mov	r4, r2
 8000892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000894:	6028      	str	r0, [r5, #0]
 8000896:	6069      	str	r1, [r5, #4]
 8000898:	60aa      	str	r2, [r5, #8]
 800089a:	60eb      	str	r3, [r5, #12]
 800089c:	cc03      	ldmia	r4!, {r0, r1}
 800089e:	6128      	str	r0, [r5, #16]
 80008a0:	6169      	str	r1, [r5, #20]
 80008a2:	7823      	ldrb	r3, [r4, #0]
 80008a4:	762b      	strb	r3, [r5, #24]
							strcat((char*)buf, "IP: <input type='text' id='ip'>		Mascara: <input type='text' id='mascara'><br><br>");
 80008a6:	6838      	ldr	r0, [r7, #0]
 80008a8:	f7ff fc52 	bl	8000150 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a68      	ldr	r2, [pc, #416]	; (8000a58 <tcp_http_mt+0x498>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	4611      	mov	r1, r2
 80008ba:	2353      	movs	r3, #83	; 0x53
 80008bc:	461a      	mov	r2, r3
 80008be:	f007 fc66 	bl	800818e <memcpy>
							strcat((char*)buf, "Porta: <input type='text' id='porta'>		Gateway: <input type='text' id='gateway'><br><br>");
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f7ff fc44 	bl	8000150 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a62      	ldr	r2, [pc, #392]	; (8000a5c <tcp_http_mt+0x49c>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	4611      	mov	r1, r2
 80008d6:	2359      	movs	r3, #89	; 0x59
 80008d8:	461a      	mov	r2, r3
 80008da:	f007 fc58 	bl	800818e <memcpy>
							strcat((char*)buf, "DNS 1: <input type='text' id='dns1'>		DNS 2: <input type='text' id='dns2'><br><br>");
 80008de:	6838      	ldr	r0, [r7, #0]
 80008e0:	f7ff fc36 	bl	8000150 <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	4a5c      	ldr	r2, [pc, #368]	; (8000a60 <tcp_http_mt+0x4a0>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	4611      	mov	r1, r2
 80008f2:	2353      	movs	r3, #83	; 0x53
 80008f4:	461a      	mov	r2, r3
 80008f6:	f007 fc4a 	bl	800818e <memcpy>
							strcat((char*)buf, "DHCP: <button>On</button>  <button>Off</button>");
 80008fa:	6838      	ldr	r0, [r7, #0]
 80008fc:	f7ff fc28 	bl	8000150 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a56      	ldr	r2, [pc, #344]	; (8000a64 <tcp_http_mt+0x4a4>)
 800090a:	4614      	mov	r4, r2
 800090c:	469c      	mov	ip, r3
 800090e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000912:	4665      	mov	r5, ip
 8000914:	4626      	mov	r6, r4
 8000916:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000918:	6028      	str	r0, [r5, #0]
 800091a:	6069      	str	r1, [r5, #4]
 800091c:	60aa      	str	r2, [r5, #8]
 800091e:	60eb      	str	r3, [r5, #12]
 8000920:	3410      	adds	r4, #16
 8000922:	f10c 0c10 	add.w	ip, ip, #16
 8000926:	4574      	cmp	r4, lr
 8000928:	d1f3      	bne.n	8000912 <tcp_http_mt+0x352>
							strcat((char*)buf, "</center></form>");
 800092a:	6838      	ldr	r0, [r7, #0]
 800092c:	f7ff fc10 	bl	8000150 <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a4b      	ldr	r2, [pc, #300]	; (8000a68 <tcp_http_mt+0x4a8>)
 800093a:	461d      	mov	r5, r3
 800093c:	4614      	mov	r4, r2
 800093e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000940:	6028      	str	r0, [r5, #0]
 8000942:	6069      	str	r1, [r5, #4]
 8000944:	60aa      	str	r2, [r5, #8]
 8000946:	60eb      	str	r3, [r5, #12]
 8000948:	7823      	ldrb	r3, [r4, #0]
 800094a:	742b      	strb	r3, [r5, #16]

							strcat((char*)buf, "<script>function configNet() {");
 800094c:	6838      	ldr	r0, [r7, #0]
 800094e:	f7ff fbff 	bl	8000150 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	4413      	add	r3, r2
 800095a:	4a44      	ldr	r2, [pc, #272]	; (8000a6c <tcp_http_mt+0x4ac>)
 800095c:	461d      	mov	r5, r3
 800095e:	4614      	mov	r4, r2
 8000960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000962:	6028      	str	r0, [r5, #0]
 8000964:	6069      	str	r1, [r5, #4]
 8000966:	60aa      	str	r2, [r5, #8]
 8000968:	60eb      	str	r3, [r5, #12]
 800096a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800096c:	6128      	str	r0, [r5, #16]
 800096e:	6169      	str	r1, [r5, #20]
 8000970:	61aa      	str	r2, [r5, #24]
 8000972:	8823      	ldrh	r3, [r4, #0]
 8000974:	78a2      	ldrb	r2, [r4, #2]
 8000976:	83ab      	strh	r3, [r5, #28]
 8000978:	4613      	mov	r3, r2
 800097a:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "window.open('http://192.168.0.231/ip:' + document.getElementById('ip').value + ',mask:' + document.getElementById('mascara').value + ',port:' +");
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f7ff fbe7 	bl	8000150 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	4413      	add	r3, r2
 800098a:	4a39      	ldr	r2, [pc, #228]	; (8000a70 <tcp_http_mt+0x4b0>)
 800098c:	4618      	mov	r0, r3
 800098e:	4611      	mov	r1, r2
 8000990:	2390      	movs	r3, #144	; 0x90
 8000992:	461a      	mov	r2, r3
 8000994:	f007 fbfb 	bl	800818e <memcpy>
							strcat((char*)buf, "document.getElementById('porta').value + ',gateway:' + document.getElementById('gateway').value + ',dns1:' + document.getElementById('dns1').value +");
 8000998:	6838      	ldr	r0, [r7, #0]
 800099a:	f7ff fbd9 	bl	8000150 <strlen>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a33      	ldr	r2, [pc, #204]	; (8000a74 <tcp_http_mt+0x4b4>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	4611      	mov	r1, r2
 80009ac:	2395      	movs	r3, #149	; 0x95
 80009ae:	461a      	mov	r2, r3
 80009b0:	f007 fbed 	bl	800818e <memcpy>
							strcat((char*)buf, "',dns2:' + document.getElementById('dns2').value, '_self');}</script>");
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f7ff fbcb 	bl	8000150 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a2d      	ldr	r2, [pc, #180]	; (8000a78 <tcp_http_mt+0x4b8>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	4611      	mov	r1, r2
 80009c8:	2346      	movs	r3, #70	; 0x46
 80009ca:	461a      	mov	r2, r3
 80009cc:	f007 fbdf 	bl	800818e <memcpy>

							strcat((char*)buf, "<center><button onClick = 'configNet()'>Salvar</button><br><br><a href='http://192.168.0.231'>Voltar</a><br></center>");
 80009d0:	6838      	ldr	r0, [r7, #0]
 80009d2:	f7ff fbbd 	bl	8000150 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	4413      	add	r3, r2
 80009de:	4a27      	ldr	r2, [pc, #156]	; (8000a7c <tcp_http_mt+0x4bc>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	4611      	mov	r1, r2
 80009e4:	2376      	movs	r3, #118	; 0x76
 80009e6:	461a      	mov	r2, r3
 80009e8:	f007 fbd1 	bl	800818e <memcpy>

							strcat((char*)buf, "</body>");
 80009ec:	6838      	ldr	r0, [r7, #0]
 80009ee:	f7ff fbaf 	bl	8000150 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	4921      	ldr	r1, [pc, #132]	; (8000a80 <tcp_http_mt+0x4c0>)
 80009fc:	461a      	mov	r2, r3
 80009fe:	460b      	mov	r3, r1
 8000a00:	cb03      	ldmia	r3!, {r0, r1}
 8000a02:	6010      	str	r0, [r2, #0]
 8000a04:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8000a06:	6838      	ldr	r0, [r7, #0]
 8000a08:	f7ff fba2 	bl	8000150 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	461a      	mov	r2, r3
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	491b      	ldr	r1, [pc, #108]	; (8000a84 <tcp_http_mt+0x4c4>)
 8000a16:	461a      	mov	r2, r3
 8000a18:	460b      	mov	r3, r1
 8000a1a:	cb03      	ldmia	r3!, {r0, r1}
 8000a1c:	6010      	str	r0, [r2, #0]
 8000a1e:	6051      	str	r1, [r2, #4]
 8000a20:	e032      	b.n	8000a88 <tcp_http_mt+0x4c8>
 8000a22:	bf00      	nop
 8000a24:	20001c94 	.word	0x20001c94
 8000a28:	08008460 	.word	0x08008460
 8000a2c:	08008468 	.word	0x08008468
 8000a30:	08008478 	.word	0x08008478
 8000a34:	20002cc8 	.word	0x20002cc8
 8000a38:	08008480 	.word	0x08008480
 8000a3c:	08008488 	.word	0x08008488
 8000a40:	080084b8 	.word	0x080084b8
 8000a44:	080084c8 	.word	0x080084c8
 8000a48:	080084e8 	.word	0x080084e8
 8000a4c:	080084f0 	.word	0x080084f0
 8000a50:	080084f8 	.word	0x080084f8
 8000a54:	08008534 	.word	0x08008534
 8000a58:	08008550 	.word	0x08008550
 8000a5c:	080085a4 	.word	0x080085a4
 8000a60:	08008600 	.word	0x08008600
 8000a64:	08008654 	.word	0x08008654
 8000a68:	08008684 	.word	0x08008684
 8000a6c:	08008698 	.word	0x08008698
 8000a70:	080086b8 	.word	0x080086b8
 8000a74:	08008748 	.word	0x08008748
 8000a78:	080087e0 	.word	0x080087e0
 8000a7c:	08008828 	.word	0x08008828
 8000a80:	080088a0 	.word	0x080088a0
 8000a84:	080088a8 	.word	0x080088a8
 8000a88:	f000 bdd0 	b.w	800162c <tcp_http_mt+0x106c>
						}
						else if(strncmp("/interfaces", url, 6) == 0)
 8000a8c:	2206      	movs	r2, #6
 8000a8e:	6939      	ldr	r1, [r7, #16]
 8000a90:	48ce      	ldr	r0, [pc, #824]	; (8000dcc <tcp_http_mt+0x80c>)
 8000a92:	f007 fbbd 	bl	8008210 <strncmp>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f040 84e9 	bne.w	8001470 <tcp_http_mt+0xeb0>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	4acb      	ldr	r2, [pc, #812]	; (8000dd0 <tcp_http_mt+0x810>)
 8000aa2:	4614      	mov	r4, r2
 8000aa4:	469c      	mov	ip, r3
 8000aa6:	f104 0e20 	add.w	lr, r4, #32
 8000aaa:	4665      	mov	r5, ip
 8000aac:	4626      	mov	r6, r4
 8000aae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ab0:	6028      	str	r0, [r5, #0]
 8000ab2:	6069      	str	r1, [r5, #4]
 8000ab4:	60aa      	str	r2, [r5, #8]
 8000ab6:	60eb      	str	r3, [r5, #12]
 8000ab8:	3410      	adds	r4, #16
 8000aba:	f10c 0c10 	add.w	ip, ip, #16
 8000abe:	4574      	cmp	r4, lr
 8000ac0:	d1f3      	bne.n	8000aaa <tcp_http_mt+0x4ea>
 8000ac2:	4665      	mov	r5, ip
 8000ac4:	4623      	mov	r3, r4
 8000ac6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ac8:	6028      	str	r0, [r5, #0]
 8000aca:	6069      	str	r1, [r5, #4]
 8000acc:	60aa      	str	r2, [r5, #8]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head><title>Escrava Config</title>");
 8000ad2:	6838      	ldr	r0, [r7, #0]
 8000ad4:	f7ff fb3c 	bl	8000150 <strlen>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4abc      	ldr	r2, [pc, #752]	; (8000dd4 <tcp_http_mt+0x814>)
 8000ae2:	4614      	mov	r4, r2
 8000ae4:	469c      	mov	ip, r3
 8000ae6:	f104 0e20 	add.w	lr, r4, #32
 8000aea:	4665      	mov	r5, ip
 8000aec:	4626      	mov	r6, r4
 8000aee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000af0:	6028      	str	r0, [r5, #0]
 8000af2:	6069      	str	r1, [r5, #4]
 8000af4:	60aa      	str	r2, [r5, #8]
 8000af6:	60eb      	str	r3, [r5, #12]
 8000af8:	3410      	adds	r4, #16
 8000afa:	f10c 0c10 	add.w	ip, ip, #16
 8000afe:	4574      	cmp	r4, lr
 8000b00:	d1f3      	bne.n	8000aea <tcp_http_mt+0x52a>
 8000b02:	4662      	mov	r2, ip
 8000b04:	4623      	mov	r3, r4
 8000b06:	cb03      	ldmia	r3!, {r0, r1}
 8000b08:	6010      	str	r0, [r2, #0]
 8000b0a:	6051      	str	r1, [r2, #4]
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "<center><table border='1'><tr>");
 8000b10:	6838      	ldr	r0, [r7, #0]
 8000b12:	f7ff fb1d 	bl	8000150 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4aae      	ldr	r2, [pc, #696]	; (8000dd8 <tcp_http_mt+0x818>)
 8000b20:	461d      	mov	r5, r3
 8000b22:	4614      	mov	r4, r2
 8000b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b26:	6028      	str	r0, [r5, #0]
 8000b28:	6069      	str	r1, [r5, #4]
 8000b2a:	60aa      	str	r2, [r5, #8]
 8000b2c:	60eb      	str	r3, [r5, #12]
 8000b2e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000b30:	6128      	str	r0, [r5, #16]
 8000b32:	6169      	str	r1, [r5, #20]
 8000b34:	61aa      	str	r2, [r5, #24]
 8000b36:	8823      	ldrh	r3, [r4, #0]
 8000b38:	78a2      	ldrb	r2, [r4, #2]
 8000b3a:	83ab      	strh	r3, [r5, #28]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "<td><b>Entrada / IP da placa destino</b></td>");
 8000b40:	6838      	ldr	r0, [r7, #0]
 8000b42:	f7ff fb05 	bl	8000150 <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	461a      	mov	r2, r3
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4aa3      	ldr	r2, [pc, #652]	; (8000ddc <tcp_http_mt+0x81c>)
 8000b50:	4614      	mov	r4, r2
 8000b52:	469c      	mov	ip, r3
 8000b54:	f104 0e20 	add.w	lr, r4, #32
 8000b58:	4665      	mov	r5, ip
 8000b5a:	4626      	mov	r6, r4
 8000b5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b5e:	6028      	str	r0, [r5, #0]
 8000b60:	6069      	str	r1, [r5, #4]
 8000b62:	60aa      	str	r2, [r5, #8]
 8000b64:	60eb      	str	r3, [r5, #12]
 8000b66:	3410      	adds	r4, #16
 8000b68:	f10c 0c10 	add.w	ip, ip, #16
 8000b6c:	4574      	cmp	r4, lr
 8000b6e:	d1f3      	bne.n	8000b58 <tcp_http_mt+0x598>
 8000b70:	4665      	mov	r5, ip
 8000b72:	4623      	mov	r3, r4
 8000b74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b76:	6028      	str	r0, [r5, #0]
 8000b78:	6069      	str	r1, [r5, #4]
 8000b7a:	60aa      	str	r2, [r5, #8]
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><b>Rele da placa destino</b></td></tr>");
 8000b80:	6838      	ldr	r0, [r7, #0]
 8000b82:	f7ff fae5 	bl	8000150 <strlen>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a94      	ldr	r2, [pc, #592]	; (8000de0 <tcp_http_mt+0x820>)
 8000b90:	4614      	mov	r4, r2
 8000b92:	469c      	mov	ip, r3
 8000b94:	f104 0e20 	add.w	lr, r4, #32
 8000b98:	4665      	mov	r5, ip
 8000b9a:	4626      	mov	r6, r4
 8000b9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b9e:	6028      	str	r0, [r5, #0]
 8000ba0:	6069      	str	r1, [r5, #4]
 8000ba2:	60aa      	str	r2, [r5, #8]
 8000ba4:	60eb      	str	r3, [r5, #12]
 8000ba6:	3410      	adds	r4, #16
 8000ba8:	f10c 0c10 	add.w	ip, ip, #16
 8000bac:	4574      	cmp	r4, lr
 8000bae:	d1f3      	bne.n	8000b98 <tcp_http_mt+0x5d8>
 8000bb0:	4662      	mov	r2, ip
 8000bb2:	4623      	mov	r3, r4
 8000bb4:	cb03      	ldmia	r3!, {r0, r1}
 8000bb6:	6010      	str	r0, [r2, #0]
 8000bb8:	6051      	str	r1, [r2, #4]
 8000bba:	8819      	ldrh	r1, [r3, #0]
 8000bbc:	789b      	ldrb	r3, [r3, #2]
 8000bbe:	8111      	strh	r1, [r2, #8]
 8000bc0:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>1:  <input type='text' name='ipDestino1'></td>");
 8000bc2:	6838      	ldr	r0, [r7, #0]
 8000bc4:	f7ff fac4 	bl	8000150 <strlen>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a84      	ldr	r2, [pc, #528]	; (8000de4 <tcp_http_mt+0x824>)
 8000bd2:	4614      	mov	r4, r2
 8000bd4:	469c      	mov	ip, r3
 8000bd6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000bda:	4665      	mov	r5, ip
 8000bdc:	4626      	mov	r6, r4
 8000bde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000be0:	6028      	str	r0, [r5, #0]
 8000be2:	6069      	str	r1, [r5, #4]
 8000be4:	60aa      	str	r2, [r5, #8]
 8000be6:	60eb      	str	r3, [r5, #12]
 8000be8:	3410      	adds	r4, #16
 8000bea:	f10c 0c10 	add.w	ip, ip, #16
 8000bee:	4574      	cmp	r4, lr
 8000bf0:	d1f3      	bne.n	8000bda <tcp_http_mt+0x61a>
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	4622      	mov	r2, r4
 8000bf6:	6810      	ldr	r0, [r2, #0]
 8000bf8:	6018      	str	r0, [r3, #0]
 8000bfa:	8891      	ldrh	r1, [r2, #4]
 8000bfc:	7992      	ldrb	r2, [r2, #6]
 8000bfe:	8099      	strh	r1, [r3, #4]
 8000c00:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino1'></td></tr>");
 8000c02:	6838      	ldr	r0, [r7, #0]
 8000c04:	f7ff faa4 	bl	8000150 <strlen>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a75      	ldr	r2, [pc, #468]	; (8000de8 <tcp_http_mt+0x828>)
 8000c12:	4614      	mov	r4, r2
 8000c14:	469c      	mov	ip, r3
 8000c16:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c1a:	4665      	mov	r5, ip
 8000c1c:	4626      	mov	r6, r4
 8000c1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c20:	6028      	str	r0, [r5, #0]
 8000c22:	6069      	str	r1, [r5, #4]
 8000c24:	60aa      	str	r2, [r5, #8]
 8000c26:	60eb      	str	r3, [r5, #12]
 8000c28:	3410      	adds	r4, #16
 8000c2a:	f10c 0c10 	add.w	ip, ip, #16
 8000c2e:	4574      	cmp	r4, lr
 8000c30:	d1f3      	bne.n	8000c1a <tcp_http_mt+0x65a>
 8000c32:	4663      	mov	r3, ip
 8000c34:	4622      	mov	r2, r4
 8000c36:	6810      	ldr	r0, [r2, #0]
 8000c38:	6018      	str	r0, [r3, #0]
 8000c3a:	8892      	ldrh	r2, [r2, #4]
 8000c3c:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>2:  <input type='text' name='ipDestino2'></td>");
 8000c3e:	6838      	ldr	r0, [r7, #0]
 8000c40:	f7ff fa86 	bl	8000150 <strlen>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a67      	ldr	r2, [pc, #412]	; (8000dec <tcp_http_mt+0x82c>)
 8000c4e:	4614      	mov	r4, r2
 8000c50:	469c      	mov	ip, r3
 8000c52:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c56:	4665      	mov	r5, ip
 8000c58:	4626      	mov	r6, r4
 8000c5a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c5c:	6028      	str	r0, [r5, #0]
 8000c5e:	6069      	str	r1, [r5, #4]
 8000c60:	60aa      	str	r2, [r5, #8]
 8000c62:	60eb      	str	r3, [r5, #12]
 8000c64:	3410      	adds	r4, #16
 8000c66:	f10c 0c10 	add.w	ip, ip, #16
 8000c6a:	4574      	cmp	r4, lr
 8000c6c:	d1f3      	bne.n	8000c56 <tcp_http_mt+0x696>
 8000c6e:	4663      	mov	r3, ip
 8000c70:	4622      	mov	r2, r4
 8000c72:	6810      	ldr	r0, [r2, #0]
 8000c74:	6018      	str	r0, [r3, #0]
 8000c76:	8891      	ldrh	r1, [r2, #4]
 8000c78:	7992      	ldrb	r2, [r2, #6]
 8000c7a:	8099      	strh	r1, [r3, #4]
 8000c7c:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino2'></td></tr>");
 8000c7e:	6838      	ldr	r0, [r7, #0]
 8000c80:	f7ff fa66 	bl	8000150 <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a58      	ldr	r2, [pc, #352]	; (8000df0 <tcp_http_mt+0x830>)
 8000c8e:	4614      	mov	r4, r2
 8000c90:	469c      	mov	ip, r3
 8000c92:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c96:	4665      	mov	r5, ip
 8000c98:	4626      	mov	r6, r4
 8000c9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c9c:	6028      	str	r0, [r5, #0]
 8000c9e:	6069      	str	r1, [r5, #4]
 8000ca0:	60aa      	str	r2, [r5, #8]
 8000ca2:	60eb      	str	r3, [r5, #12]
 8000ca4:	3410      	adds	r4, #16
 8000ca6:	f10c 0c10 	add.w	ip, ip, #16
 8000caa:	4574      	cmp	r4, lr
 8000cac:	d1f3      	bne.n	8000c96 <tcp_http_mt+0x6d6>
 8000cae:	4663      	mov	r3, ip
 8000cb0:	4622      	mov	r2, r4
 8000cb2:	6810      	ldr	r0, [r2, #0]
 8000cb4:	6018      	str	r0, [r3, #0]
 8000cb6:	8892      	ldrh	r2, [r2, #4]
 8000cb8:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>3:  <input type='text' name='ipDestino3'></td>");
 8000cba:	6838      	ldr	r0, [r7, #0]
 8000cbc:	f7ff fa48 	bl	8000150 <strlen>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a4a      	ldr	r2, [pc, #296]	; (8000df4 <tcp_http_mt+0x834>)
 8000cca:	4614      	mov	r4, r2
 8000ccc:	469c      	mov	ip, r3
 8000cce:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000cd2:	4665      	mov	r5, ip
 8000cd4:	4626      	mov	r6, r4
 8000cd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cd8:	6028      	str	r0, [r5, #0]
 8000cda:	6069      	str	r1, [r5, #4]
 8000cdc:	60aa      	str	r2, [r5, #8]
 8000cde:	60eb      	str	r3, [r5, #12]
 8000ce0:	3410      	adds	r4, #16
 8000ce2:	f10c 0c10 	add.w	ip, ip, #16
 8000ce6:	4574      	cmp	r4, lr
 8000ce8:	d1f3      	bne.n	8000cd2 <tcp_http_mt+0x712>
 8000cea:	4663      	mov	r3, ip
 8000cec:	4622      	mov	r2, r4
 8000cee:	6810      	ldr	r0, [r2, #0]
 8000cf0:	6018      	str	r0, [r3, #0]
 8000cf2:	8891      	ldrh	r1, [r2, #4]
 8000cf4:	7992      	ldrb	r2, [r2, #6]
 8000cf6:	8099      	strh	r1, [r3, #4]
 8000cf8:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino3'></td></tr>");
 8000cfa:	6838      	ldr	r0, [r7, #0]
 8000cfc:	f7ff fa28 	bl	8000150 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <tcp_http_mt+0x838>)
 8000d0a:	4614      	mov	r4, r2
 8000d0c:	469c      	mov	ip, r3
 8000d0e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d12:	4665      	mov	r5, ip
 8000d14:	4626      	mov	r6, r4
 8000d16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d18:	6028      	str	r0, [r5, #0]
 8000d1a:	6069      	str	r1, [r5, #4]
 8000d1c:	60aa      	str	r2, [r5, #8]
 8000d1e:	60eb      	str	r3, [r5, #12]
 8000d20:	3410      	adds	r4, #16
 8000d22:	f10c 0c10 	add.w	ip, ip, #16
 8000d26:	4574      	cmp	r4, lr
 8000d28:	d1f3      	bne.n	8000d12 <tcp_http_mt+0x752>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	4622      	mov	r2, r4
 8000d2e:	6810      	ldr	r0, [r2, #0]
 8000d30:	6018      	str	r0, [r3, #0]
 8000d32:	8892      	ldrh	r2, [r2, #4]
 8000d34:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>4:  <input type='text' name='ipDestino4'></td>");
 8000d36:	6838      	ldr	r0, [r7, #0]
 8000d38:	f7ff fa0a 	bl	8000150 <strlen>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <tcp_http_mt+0x83c>)
 8000d46:	4614      	mov	r4, r2
 8000d48:	469c      	mov	ip, r3
 8000d4a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d4e:	4665      	mov	r5, ip
 8000d50:	4626      	mov	r6, r4
 8000d52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d54:	6028      	str	r0, [r5, #0]
 8000d56:	6069      	str	r1, [r5, #4]
 8000d58:	60aa      	str	r2, [r5, #8]
 8000d5a:	60eb      	str	r3, [r5, #12]
 8000d5c:	3410      	adds	r4, #16
 8000d5e:	f10c 0c10 	add.w	ip, ip, #16
 8000d62:	4574      	cmp	r4, lr
 8000d64:	d1f3      	bne.n	8000d4e <tcp_http_mt+0x78e>
 8000d66:	4663      	mov	r3, ip
 8000d68:	4622      	mov	r2, r4
 8000d6a:	6810      	ldr	r0, [r2, #0]
 8000d6c:	6018      	str	r0, [r3, #0]
 8000d6e:	8891      	ldrh	r1, [r2, #4]
 8000d70:	7992      	ldrb	r2, [r2, #6]
 8000d72:	8099      	strh	r1, [r3, #4]
 8000d74:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino4'></td></tr>");
 8000d76:	6838      	ldr	r0, [r7, #0]
 8000d78:	f7ff f9ea 	bl	8000150 <strlen>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <tcp_http_mt+0x840>)
 8000d86:	4614      	mov	r4, r2
 8000d88:	469c      	mov	ip, r3
 8000d8a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d8e:	4665      	mov	r5, ip
 8000d90:	4626      	mov	r6, r4
 8000d92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d94:	6028      	str	r0, [r5, #0]
 8000d96:	6069      	str	r1, [r5, #4]
 8000d98:	60aa      	str	r2, [r5, #8]
 8000d9a:	60eb      	str	r3, [r5, #12]
 8000d9c:	3410      	adds	r4, #16
 8000d9e:	f10c 0c10 	add.w	ip, ip, #16
 8000da2:	4574      	cmp	r4, lr
 8000da4:	d1f3      	bne.n	8000d8e <tcp_http_mt+0x7ce>
 8000da6:	4663      	mov	r3, ip
 8000da8:	4622      	mov	r2, r4
 8000daa:	6810      	ldr	r0, [r2, #0]
 8000dac:	6018      	str	r0, [r3, #0]
 8000dae:	8892      	ldrh	r2, [r2, #4]
 8000db0:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>5:  <input type='text' name='ipDestino5'></td>");
 8000db2:	6838      	ldr	r0, [r7, #0]
 8000db4:	f7ff f9cc 	bl	8000150 <strlen>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <tcp_http_mt+0x844>)
 8000dc2:	4614      	mov	r4, r2
 8000dc4:	469c      	mov	ip, r3
 8000dc6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000dca:	e01d      	b.n	8000e08 <tcp_http_mt+0x848>
 8000dcc:	080088b0 	.word	0x080088b0
 8000dd0:	08008488 	.word	0x08008488
 8000dd4:	080088bc 	.word	0x080088bc
 8000dd8:	080088e8 	.word	0x080088e8
 8000ddc:	08008908 	.word	0x08008908
 8000de0:	08008938 	.word	0x08008938
 8000de4:	08008964 	.word	0x08008964
 8000de8:	0800899c 	.word	0x0800899c
 8000dec:	080089d4 	.word	0x080089d4
 8000df0:	08008a0c 	.word	0x08008a0c
 8000df4:	08008a44 	.word	0x08008a44
 8000df8:	08008a7c 	.word	0x08008a7c
 8000dfc:	08008ab4 	.word	0x08008ab4
 8000e00:	08008aec 	.word	0x08008aec
 8000e04:	08008b24 	.word	0x08008b24
 8000e08:	4665      	mov	r5, ip
 8000e0a:	4626      	mov	r6, r4
 8000e0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e0e:	6028      	str	r0, [r5, #0]
 8000e10:	6069      	str	r1, [r5, #4]
 8000e12:	60aa      	str	r2, [r5, #8]
 8000e14:	60eb      	str	r3, [r5, #12]
 8000e16:	3410      	adds	r4, #16
 8000e18:	f10c 0c10 	add.w	ip, ip, #16
 8000e1c:	4574      	cmp	r4, lr
 8000e1e:	d1f3      	bne.n	8000e08 <tcp_http_mt+0x848>
 8000e20:	4663      	mov	r3, ip
 8000e22:	4622      	mov	r2, r4
 8000e24:	6810      	ldr	r0, [r2, #0]
 8000e26:	6018      	str	r0, [r3, #0]
 8000e28:	8891      	ldrh	r1, [r2, #4]
 8000e2a:	7992      	ldrb	r2, [r2, #6]
 8000e2c:	8099      	strh	r1, [r3, #4]
 8000e2e:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino5'></td></tr>");
 8000e30:	6838      	ldr	r0, [r7, #0]
 8000e32:	f7ff f98d 	bl	8000150 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4acb      	ldr	r2, [pc, #812]	; (800116c <tcp_http_mt+0xbac>)
 8000e40:	4614      	mov	r4, r2
 8000e42:	469c      	mov	ip, r3
 8000e44:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e48:	4665      	mov	r5, ip
 8000e4a:	4626      	mov	r6, r4
 8000e4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e4e:	6028      	str	r0, [r5, #0]
 8000e50:	6069      	str	r1, [r5, #4]
 8000e52:	60aa      	str	r2, [r5, #8]
 8000e54:	60eb      	str	r3, [r5, #12]
 8000e56:	3410      	adds	r4, #16
 8000e58:	f10c 0c10 	add.w	ip, ip, #16
 8000e5c:	4574      	cmp	r4, lr
 8000e5e:	d1f3      	bne.n	8000e48 <tcp_http_mt+0x888>
 8000e60:	4663      	mov	r3, ip
 8000e62:	4622      	mov	r2, r4
 8000e64:	6810      	ldr	r0, [r2, #0]
 8000e66:	6018      	str	r0, [r3, #0]
 8000e68:	8892      	ldrh	r2, [r2, #4]
 8000e6a:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>6:  <input type='text' name='ipDestino6'></td>");
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f7ff f96f 	bl	8000150 <strlen>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4abd      	ldr	r2, [pc, #756]	; (8001170 <tcp_http_mt+0xbb0>)
 8000e7c:	4614      	mov	r4, r2
 8000e7e:	469c      	mov	ip, r3
 8000e80:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e84:	4665      	mov	r5, ip
 8000e86:	4626      	mov	r6, r4
 8000e88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e8a:	6028      	str	r0, [r5, #0]
 8000e8c:	6069      	str	r1, [r5, #4]
 8000e8e:	60aa      	str	r2, [r5, #8]
 8000e90:	60eb      	str	r3, [r5, #12]
 8000e92:	3410      	adds	r4, #16
 8000e94:	f10c 0c10 	add.w	ip, ip, #16
 8000e98:	4574      	cmp	r4, lr
 8000e9a:	d1f3      	bne.n	8000e84 <tcp_http_mt+0x8c4>
 8000e9c:	4663      	mov	r3, ip
 8000e9e:	4622      	mov	r2, r4
 8000ea0:	6810      	ldr	r0, [r2, #0]
 8000ea2:	6018      	str	r0, [r3, #0]
 8000ea4:	8891      	ldrh	r1, [r2, #4]
 8000ea6:	7992      	ldrb	r2, [r2, #6]
 8000ea8:	8099      	strh	r1, [r3, #4]
 8000eaa:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino6'></td></tr>");
 8000eac:	6838      	ldr	r0, [r7, #0]
 8000eae:	f7ff f94f 	bl	8000150 <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4aae      	ldr	r2, [pc, #696]	; (8001174 <tcp_http_mt+0xbb4>)
 8000ebc:	4614      	mov	r4, r2
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000ec4:	4665      	mov	r5, ip
 8000ec6:	4626      	mov	r6, r4
 8000ec8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000eca:	6028      	str	r0, [r5, #0]
 8000ecc:	6069      	str	r1, [r5, #4]
 8000ece:	60aa      	str	r2, [r5, #8]
 8000ed0:	60eb      	str	r3, [r5, #12]
 8000ed2:	3410      	adds	r4, #16
 8000ed4:	f10c 0c10 	add.w	ip, ip, #16
 8000ed8:	4574      	cmp	r4, lr
 8000eda:	d1f3      	bne.n	8000ec4 <tcp_http_mt+0x904>
 8000edc:	4663      	mov	r3, ip
 8000ede:	4622      	mov	r2, r4
 8000ee0:	6810      	ldr	r0, [r2, #0]
 8000ee2:	6018      	str	r0, [r3, #0]
 8000ee4:	8892      	ldrh	r2, [r2, #4]
 8000ee6:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>7:  <input type='text' name='ipDestino7'></td>");
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f7ff f931 	bl	8000150 <strlen>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4aa0      	ldr	r2, [pc, #640]	; (8001178 <tcp_http_mt+0xbb8>)
 8000ef8:	4614      	mov	r4, r2
 8000efa:	469c      	mov	ip, r3
 8000efc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f00:	4665      	mov	r5, ip
 8000f02:	4626      	mov	r6, r4
 8000f04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f06:	6028      	str	r0, [r5, #0]
 8000f08:	6069      	str	r1, [r5, #4]
 8000f0a:	60aa      	str	r2, [r5, #8]
 8000f0c:	60eb      	str	r3, [r5, #12]
 8000f0e:	3410      	adds	r4, #16
 8000f10:	f10c 0c10 	add.w	ip, ip, #16
 8000f14:	4574      	cmp	r4, lr
 8000f16:	d1f3      	bne.n	8000f00 <tcp_http_mt+0x940>
 8000f18:	4663      	mov	r3, ip
 8000f1a:	4622      	mov	r2, r4
 8000f1c:	6810      	ldr	r0, [r2, #0]
 8000f1e:	6018      	str	r0, [r3, #0]
 8000f20:	8891      	ldrh	r1, [r2, #4]
 8000f22:	7992      	ldrb	r2, [r2, #6]
 8000f24:	8099      	strh	r1, [r3, #4]
 8000f26:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino7'></td></tr>");
 8000f28:	6838      	ldr	r0, [r7, #0]
 8000f2a:	f7ff f911 	bl	8000150 <strlen>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a91      	ldr	r2, [pc, #580]	; (800117c <tcp_http_mt+0xbbc>)
 8000f38:	4614      	mov	r4, r2
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f40:	4665      	mov	r5, ip
 8000f42:	4626      	mov	r6, r4
 8000f44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f46:	6028      	str	r0, [r5, #0]
 8000f48:	6069      	str	r1, [r5, #4]
 8000f4a:	60aa      	str	r2, [r5, #8]
 8000f4c:	60eb      	str	r3, [r5, #12]
 8000f4e:	3410      	adds	r4, #16
 8000f50:	f10c 0c10 	add.w	ip, ip, #16
 8000f54:	4574      	cmp	r4, lr
 8000f56:	d1f3      	bne.n	8000f40 <tcp_http_mt+0x980>
 8000f58:	4663      	mov	r3, ip
 8000f5a:	4622      	mov	r2, r4
 8000f5c:	6810      	ldr	r0, [r2, #0]
 8000f5e:	6018      	str	r0, [r3, #0]
 8000f60:	8892      	ldrh	r2, [r2, #4]
 8000f62:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>8:  <input type='text' name='ipDestino8'></td>");
 8000f64:	6838      	ldr	r0, [r7, #0]
 8000f66:	f7ff f8f3 	bl	8000150 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a83      	ldr	r2, [pc, #524]	; (8001180 <tcp_http_mt+0xbc0>)
 8000f74:	4614      	mov	r4, r2
 8000f76:	469c      	mov	ip, r3
 8000f78:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f7c:	4665      	mov	r5, ip
 8000f7e:	4626      	mov	r6, r4
 8000f80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f82:	6028      	str	r0, [r5, #0]
 8000f84:	6069      	str	r1, [r5, #4]
 8000f86:	60aa      	str	r2, [r5, #8]
 8000f88:	60eb      	str	r3, [r5, #12]
 8000f8a:	3410      	adds	r4, #16
 8000f8c:	f10c 0c10 	add.w	ip, ip, #16
 8000f90:	4574      	cmp	r4, lr
 8000f92:	d1f3      	bne.n	8000f7c <tcp_http_mt+0x9bc>
 8000f94:	4663      	mov	r3, ip
 8000f96:	4622      	mov	r2, r4
 8000f98:	6810      	ldr	r0, [r2, #0]
 8000f9a:	6018      	str	r0, [r3, #0]
 8000f9c:	8891      	ldrh	r1, [r2, #4]
 8000f9e:	7992      	ldrb	r2, [r2, #6]
 8000fa0:	8099      	strh	r1, [r3, #4]
 8000fa2:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino8'></td></tr>");
 8000fa4:	6838      	ldr	r0, [r7, #0]
 8000fa6:	f7ff f8d3 	bl	8000150 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a74      	ldr	r2, [pc, #464]	; (8001184 <tcp_http_mt+0xbc4>)
 8000fb4:	4614      	mov	r4, r2
 8000fb6:	469c      	mov	ip, r3
 8000fb8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000fbc:	4665      	mov	r5, ip
 8000fbe:	4626      	mov	r6, r4
 8000fc0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fc2:	6028      	str	r0, [r5, #0]
 8000fc4:	6069      	str	r1, [r5, #4]
 8000fc6:	60aa      	str	r2, [r5, #8]
 8000fc8:	60eb      	str	r3, [r5, #12]
 8000fca:	3410      	adds	r4, #16
 8000fcc:	f10c 0c10 	add.w	ip, ip, #16
 8000fd0:	4574      	cmp	r4, lr
 8000fd2:	d1f3      	bne.n	8000fbc <tcp_http_mt+0x9fc>
 8000fd4:	4663      	mov	r3, ip
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	6810      	ldr	r0, [r2, #0]
 8000fda:	6018      	str	r0, [r3, #0]
 8000fdc:	8892      	ldrh	r2, [r2, #4]
 8000fde:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>9:  <input type='text' name='ipDestino9'></td>");
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f7ff f8b5 	bl	8000150 <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a66      	ldr	r2, [pc, #408]	; (8001188 <tcp_http_mt+0xbc8>)
 8000ff0:	4614      	mov	r4, r2
 8000ff2:	469c      	mov	ip, r3
 8000ff4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000ff8:	4665      	mov	r5, ip
 8000ffa:	4626      	mov	r6, r4
 8000ffc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ffe:	6028      	str	r0, [r5, #0]
 8001000:	6069      	str	r1, [r5, #4]
 8001002:	60aa      	str	r2, [r5, #8]
 8001004:	60eb      	str	r3, [r5, #12]
 8001006:	3410      	adds	r4, #16
 8001008:	f10c 0c10 	add.w	ip, ip, #16
 800100c:	4574      	cmp	r4, lr
 800100e:	d1f3      	bne.n	8000ff8 <tcp_http_mt+0xa38>
 8001010:	4663      	mov	r3, ip
 8001012:	4622      	mov	r2, r4
 8001014:	6810      	ldr	r0, [r2, #0]
 8001016:	6018      	str	r0, [r3, #0]
 8001018:	8891      	ldrh	r1, [r2, #4]
 800101a:	7992      	ldrb	r2, [r2, #6]
 800101c:	8099      	strh	r1, [r3, #4]
 800101e:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino9'></td></tr>");
 8001020:	6838      	ldr	r0, [r7, #0]
 8001022:	f7ff f895 	bl	8000150 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	4a57      	ldr	r2, [pc, #348]	; (800118c <tcp_http_mt+0xbcc>)
 8001030:	4614      	mov	r4, r2
 8001032:	469c      	mov	ip, r3
 8001034:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001038:	4665      	mov	r5, ip
 800103a:	4626      	mov	r6, r4
 800103c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800103e:	6028      	str	r0, [r5, #0]
 8001040:	6069      	str	r1, [r5, #4]
 8001042:	60aa      	str	r2, [r5, #8]
 8001044:	60eb      	str	r3, [r5, #12]
 8001046:	3410      	adds	r4, #16
 8001048:	f10c 0c10 	add.w	ip, ip, #16
 800104c:	4574      	cmp	r4, lr
 800104e:	d1f3      	bne.n	8001038 <tcp_http_mt+0xa78>
 8001050:	4663      	mov	r3, ip
 8001052:	4622      	mov	r2, r4
 8001054:	6810      	ldr	r0, [r2, #0]
 8001056:	6018      	str	r0, [r3, #0]
 8001058:	8892      	ldrh	r2, [r2, #4]
 800105a:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>10: <input type='text' name='ipDestino10'></td>");
 800105c:	6838      	ldr	r0, [r7, #0]
 800105e:	f7ff f877 	bl	8000150 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	4413      	add	r3, r2
 800106a:	4a49      	ldr	r2, [pc, #292]	; (8001190 <tcp_http_mt+0xbd0>)
 800106c:	4614      	mov	r4, r2
 800106e:	469c      	mov	ip, r3
 8001070:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001074:	4665      	mov	r5, ip
 8001076:	4626      	mov	r6, r4
 8001078:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800107a:	6028      	str	r0, [r5, #0]
 800107c:	6069      	str	r1, [r5, #4]
 800107e:	60aa      	str	r2, [r5, #8]
 8001080:	60eb      	str	r3, [r5, #12]
 8001082:	3410      	adds	r4, #16
 8001084:	f10c 0c10 	add.w	ip, ip, #16
 8001088:	4574      	cmp	r4, lr
 800108a:	d1f3      	bne.n	8001074 <tcp_http_mt+0xab4>
 800108c:	4662      	mov	r2, ip
 800108e:	4623      	mov	r3, r4
 8001090:	cb03      	ldmia	r3!, {r0, r1}
 8001092:	6010      	str	r0, [r2, #0]
 8001094:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino10'></td></tr>");
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f7ff f85a 	bl	8000150 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <tcp_http_mt+0xbd4>)
 80010a6:	4614      	mov	r4, r2
 80010a8:	469c      	mov	ip, r3
 80010aa:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010ae:	4665      	mov	r5, ip
 80010b0:	4626      	mov	r6, r4
 80010b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010b4:	6028      	str	r0, [r5, #0]
 80010b6:	6069      	str	r1, [r5, #4]
 80010b8:	60aa      	str	r2, [r5, #8]
 80010ba:	60eb      	str	r3, [r5, #12]
 80010bc:	3410      	adds	r4, #16
 80010be:	f10c 0c10 	add.w	ip, ip, #16
 80010c2:	4574      	cmp	r4, lr
 80010c4:	d1f3      	bne.n	80010ae <tcp_http_mt+0xaee>
 80010c6:	4663      	mov	r3, ip
 80010c8:	4622      	mov	r2, r4
 80010ca:	6810      	ldr	r0, [r2, #0]
 80010cc:	6018      	str	r0, [r3, #0]
 80010ce:	8891      	ldrh	r1, [r2, #4]
 80010d0:	7992      	ldrb	r2, [r2, #6]
 80010d2:	8099      	strh	r1, [r3, #4]
 80010d4:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>11: <input type='text' name='ipDestino11'></td>");
 80010d6:	6838      	ldr	r0, [r7, #0]
 80010d8:	f7ff f83a 	bl	8000150 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <tcp_http_mt+0xbd8>)
 80010e6:	4614      	mov	r4, r2
 80010e8:	469c      	mov	ip, r3
 80010ea:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010ee:	4665      	mov	r5, ip
 80010f0:	4626      	mov	r6, r4
 80010f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010f4:	6028      	str	r0, [r5, #0]
 80010f6:	6069      	str	r1, [r5, #4]
 80010f8:	60aa      	str	r2, [r5, #8]
 80010fa:	60eb      	str	r3, [r5, #12]
 80010fc:	3410      	adds	r4, #16
 80010fe:	f10c 0c10 	add.w	ip, ip, #16
 8001102:	4574      	cmp	r4, lr
 8001104:	d1f3      	bne.n	80010ee <tcp_http_mt+0xb2e>
 8001106:	4662      	mov	r2, ip
 8001108:	4623      	mov	r3, r4
 800110a:	cb03      	ldmia	r3!, {r0, r1}
 800110c:	6010      	str	r0, [r2, #0]
 800110e:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino11'></td></tr>");
 8001110:	6838      	ldr	r0, [r7, #0]
 8001112:	f7ff f81d 	bl	8000150 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	4413      	add	r3, r2
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <tcp_http_mt+0xbdc>)
 8001120:	4614      	mov	r4, r2
 8001122:	469c      	mov	ip, r3
 8001124:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001128:	4665      	mov	r5, ip
 800112a:	4626      	mov	r6, r4
 800112c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800112e:	6028      	str	r0, [r5, #0]
 8001130:	6069      	str	r1, [r5, #4]
 8001132:	60aa      	str	r2, [r5, #8]
 8001134:	60eb      	str	r3, [r5, #12]
 8001136:	3410      	adds	r4, #16
 8001138:	f10c 0c10 	add.w	ip, ip, #16
 800113c:	4574      	cmp	r4, lr
 800113e:	d1f3      	bne.n	8001128 <tcp_http_mt+0xb68>
 8001140:	4663      	mov	r3, ip
 8001142:	4622      	mov	r2, r4
 8001144:	6810      	ldr	r0, [r2, #0]
 8001146:	6018      	str	r0, [r3, #0]
 8001148:	8891      	ldrh	r1, [r2, #4]
 800114a:	7992      	ldrb	r2, [r2, #6]
 800114c:	8099      	strh	r1, [r3, #4]
 800114e:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>12: <input type='text' name='ipDestino12'></td>");
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f7fe fffd 	bl	8000150 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <tcp_http_mt+0xbe0>)
 8001160:	4614      	mov	r4, r2
 8001162:	469c      	mov	ip, r3
 8001164:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001168:	e01c      	b.n	80011a4 <tcp_http_mt+0xbe4>
 800116a:	bf00      	nop
 800116c:	08008b5c 	.word	0x08008b5c
 8001170:	08008b94 	.word	0x08008b94
 8001174:	08008bcc 	.word	0x08008bcc
 8001178:	08008c04 	.word	0x08008c04
 800117c:	08008c3c 	.word	0x08008c3c
 8001180:	08008c74 	.word	0x08008c74
 8001184:	08008cac 	.word	0x08008cac
 8001188:	08008ce4 	.word	0x08008ce4
 800118c:	08008d1c 	.word	0x08008d1c
 8001190:	08008d54 	.word	0x08008d54
 8001194:	08008d8c 	.word	0x08008d8c
 8001198:	08008dc4 	.word	0x08008dc4
 800119c:	08008dfc 	.word	0x08008dfc
 80011a0:	08008e34 	.word	0x08008e34
 80011a4:	4665      	mov	r5, ip
 80011a6:	4626      	mov	r6, r4
 80011a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011aa:	6028      	str	r0, [r5, #0]
 80011ac:	6069      	str	r1, [r5, #4]
 80011ae:	60aa      	str	r2, [r5, #8]
 80011b0:	60eb      	str	r3, [r5, #12]
 80011b2:	3410      	adds	r4, #16
 80011b4:	f10c 0c10 	add.w	ip, ip, #16
 80011b8:	4574      	cmp	r4, lr
 80011ba:	d1f3      	bne.n	80011a4 <tcp_http_mt+0xbe4>
 80011bc:	4662      	mov	r2, ip
 80011be:	4623      	mov	r3, r4
 80011c0:	cb03      	ldmia	r3!, {r0, r1}
 80011c2:	6010      	str	r0, [r2, #0]
 80011c4:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino12'></td></tr>");
 80011c6:	6838      	ldr	r0, [r7, #0]
 80011c8:	f7fe ffc2 	bl	8000150 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a9a      	ldr	r2, [pc, #616]	; (8001440 <tcp_http_mt+0xe80>)
 80011d6:	4614      	mov	r4, r2
 80011d8:	469c      	mov	ip, r3
 80011da:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011de:	4665      	mov	r5, ip
 80011e0:	4626      	mov	r6, r4
 80011e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011e4:	6028      	str	r0, [r5, #0]
 80011e6:	6069      	str	r1, [r5, #4]
 80011e8:	60aa      	str	r2, [r5, #8]
 80011ea:	60eb      	str	r3, [r5, #12]
 80011ec:	3410      	adds	r4, #16
 80011ee:	f10c 0c10 	add.w	ip, ip, #16
 80011f2:	4574      	cmp	r4, lr
 80011f4:	d1f3      	bne.n	80011de <tcp_http_mt+0xc1e>
 80011f6:	4663      	mov	r3, ip
 80011f8:	4622      	mov	r2, r4
 80011fa:	6810      	ldr	r0, [r2, #0]
 80011fc:	6018      	str	r0, [r3, #0]
 80011fe:	8891      	ldrh	r1, [r2, #4]
 8001200:	7992      	ldrb	r2, [r2, #6]
 8001202:	8099      	strh	r1, [r3, #4]
 8001204:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>13: <input type='text' name='ipDestino13'></td>");
 8001206:	6838      	ldr	r0, [r7, #0]
 8001208:	f7fe ffa2 	bl	8000150 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a8b      	ldr	r2, [pc, #556]	; (8001444 <tcp_http_mt+0xe84>)
 8001216:	4614      	mov	r4, r2
 8001218:	469c      	mov	ip, r3
 800121a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800121e:	4665      	mov	r5, ip
 8001220:	4626      	mov	r6, r4
 8001222:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001224:	6028      	str	r0, [r5, #0]
 8001226:	6069      	str	r1, [r5, #4]
 8001228:	60aa      	str	r2, [r5, #8]
 800122a:	60eb      	str	r3, [r5, #12]
 800122c:	3410      	adds	r4, #16
 800122e:	f10c 0c10 	add.w	ip, ip, #16
 8001232:	4574      	cmp	r4, lr
 8001234:	d1f3      	bne.n	800121e <tcp_http_mt+0xc5e>
 8001236:	4662      	mov	r2, ip
 8001238:	4623      	mov	r3, r4
 800123a:	cb03      	ldmia	r3!, {r0, r1}
 800123c:	6010      	str	r0, [r2, #0]
 800123e:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino13'></td></tr>");
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f7fe ff85 	bl	8000150 <strlen>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	4413      	add	r3, r2
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <tcp_http_mt+0xe88>)
 8001250:	4614      	mov	r4, r2
 8001252:	469c      	mov	ip, r3
 8001254:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001258:	4665      	mov	r5, ip
 800125a:	4626      	mov	r6, r4
 800125c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800125e:	6028      	str	r0, [r5, #0]
 8001260:	6069      	str	r1, [r5, #4]
 8001262:	60aa      	str	r2, [r5, #8]
 8001264:	60eb      	str	r3, [r5, #12]
 8001266:	3410      	adds	r4, #16
 8001268:	f10c 0c10 	add.w	ip, ip, #16
 800126c:	4574      	cmp	r4, lr
 800126e:	d1f3      	bne.n	8001258 <tcp_http_mt+0xc98>
 8001270:	4663      	mov	r3, ip
 8001272:	4622      	mov	r2, r4
 8001274:	6810      	ldr	r0, [r2, #0]
 8001276:	6018      	str	r0, [r3, #0]
 8001278:	8891      	ldrh	r1, [r2, #4]
 800127a:	7992      	ldrb	r2, [r2, #6]
 800127c:	8099      	strh	r1, [r3, #4]
 800127e:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>14: <input type='text' name='ipDestino14'></td>");
 8001280:	6838      	ldr	r0, [r7, #0]
 8001282:	f7fe ff65 	bl	8000150 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	4a6f      	ldr	r2, [pc, #444]	; (800144c <tcp_http_mt+0xe8c>)
 8001290:	4614      	mov	r4, r2
 8001292:	469c      	mov	ip, r3
 8001294:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001298:	4665      	mov	r5, ip
 800129a:	4626      	mov	r6, r4
 800129c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800129e:	6028      	str	r0, [r5, #0]
 80012a0:	6069      	str	r1, [r5, #4]
 80012a2:	60aa      	str	r2, [r5, #8]
 80012a4:	60eb      	str	r3, [r5, #12]
 80012a6:	3410      	adds	r4, #16
 80012a8:	f10c 0c10 	add.w	ip, ip, #16
 80012ac:	4574      	cmp	r4, lr
 80012ae:	d1f3      	bne.n	8001298 <tcp_http_mt+0xcd8>
 80012b0:	4662      	mov	r2, ip
 80012b2:	4623      	mov	r3, r4
 80012b4:	cb03      	ldmia	r3!, {r0, r1}
 80012b6:	6010      	str	r0, [r2, #0]
 80012b8:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino14'></td></tr>");
 80012ba:	6838      	ldr	r0, [r7, #0]
 80012bc:	f7fe ff48 	bl	8000150 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a61      	ldr	r2, [pc, #388]	; (8001450 <tcp_http_mt+0xe90>)
 80012ca:	4614      	mov	r4, r2
 80012cc:	469c      	mov	ip, r3
 80012ce:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80012d2:	4665      	mov	r5, ip
 80012d4:	4626      	mov	r6, r4
 80012d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012d8:	6028      	str	r0, [r5, #0]
 80012da:	6069      	str	r1, [r5, #4]
 80012dc:	60aa      	str	r2, [r5, #8]
 80012de:	60eb      	str	r3, [r5, #12]
 80012e0:	3410      	adds	r4, #16
 80012e2:	f10c 0c10 	add.w	ip, ip, #16
 80012e6:	4574      	cmp	r4, lr
 80012e8:	d1f3      	bne.n	80012d2 <tcp_http_mt+0xd12>
 80012ea:	4663      	mov	r3, ip
 80012ec:	4622      	mov	r2, r4
 80012ee:	6810      	ldr	r0, [r2, #0]
 80012f0:	6018      	str	r0, [r3, #0]
 80012f2:	8891      	ldrh	r1, [r2, #4]
 80012f4:	7992      	ldrb	r2, [r2, #6]
 80012f6:	8099      	strh	r1, [r3, #4]
 80012f8:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>15: <input type='text' name='ipDestino15'></td>");
 80012fa:	6838      	ldr	r0, [r7, #0]
 80012fc:	f7fe ff28 	bl	8000150 <strlen>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a52      	ldr	r2, [pc, #328]	; (8001454 <tcp_http_mt+0xe94>)
 800130a:	4614      	mov	r4, r2
 800130c:	469c      	mov	ip, r3
 800130e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001312:	4665      	mov	r5, ip
 8001314:	4626      	mov	r6, r4
 8001316:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001318:	6028      	str	r0, [r5, #0]
 800131a:	6069      	str	r1, [r5, #4]
 800131c:	60aa      	str	r2, [r5, #8]
 800131e:	60eb      	str	r3, [r5, #12]
 8001320:	3410      	adds	r4, #16
 8001322:	f10c 0c10 	add.w	ip, ip, #16
 8001326:	4574      	cmp	r4, lr
 8001328:	d1f3      	bne.n	8001312 <tcp_http_mt+0xd52>
 800132a:	4662      	mov	r2, ip
 800132c:	4623      	mov	r3, r4
 800132e:	cb03      	ldmia	r3!, {r0, r1}
 8001330:	6010      	str	r0, [r2, #0]
 8001332:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino15'></td></tr>");
 8001334:	6838      	ldr	r0, [r7, #0]
 8001336:	f7fe ff0b 	bl	8000150 <strlen>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	4413      	add	r3, r2
 8001342:	4a45      	ldr	r2, [pc, #276]	; (8001458 <tcp_http_mt+0xe98>)
 8001344:	4614      	mov	r4, r2
 8001346:	469c      	mov	ip, r3
 8001348:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800134c:	4665      	mov	r5, ip
 800134e:	4626      	mov	r6, r4
 8001350:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001352:	6028      	str	r0, [r5, #0]
 8001354:	6069      	str	r1, [r5, #4]
 8001356:	60aa      	str	r2, [r5, #8]
 8001358:	60eb      	str	r3, [r5, #12]
 800135a:	3410      	adds	r4, #16
 800135c:	f10c 0c10 	add.w	ip, ip, #16
 8001360:	4574      	cmp	r4, lr
 8001362:	d1f3      	bne.n	800134c <tcp_http_mt+0xd8c>
 8001364:	4663      	mov	r3, ip
 8001366:	4622      	mov	r2, r4
 8001368:	6810      	ldr	r0, [r2, #0]
 800136a:	6018      	str	r0, [r3, #0]
 800136c:	8891      	ldrh	r1, [r2, #4]
 800136e:	7992      	ldrb	r2, [r2, #6]
 8001370:	8099      	strh	r1, [r3, #4]
 8001372:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>16: <input type='text' name='ipDestino16'></td>");
 8001374:	6838      	ldr	r0, [r7, #0]
 8001376:	f7fe feeb 	bl	8000150 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	4a36      	ldr	r2, [pc, #216]	; (800145c <tcp_http_mt+0xe9c>)
 8001384:	4614      	mov	r4, r2
 8001386:	469c      	mov	ip, r3
 8001388:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800138c:	4665      	mov	r5, ip
 800138e:	4626      	mov	r6, r4
 8001390:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001392:	6028      	str	r0, [r5, #0]
 8001394:	6069      	str	r1, [r5, #4]
 8001396:	60aa      	str	r2, [r5, #8]
 8001398:	60eb      	str	r3, [r5, #12]
 800139a:	3410      	adds	r4, #16
 800139c:	f10c 0c10 	add.w	ip, ip, #16
 80013a0:	4574      	cmp	r4, lr
 80013a2:	d1f3      	bne.n	800138c <tcp_http_mt+0xdcc>
 80013a4:	4662      	mov	r2, ip
 80013a6:	4623      	mov	r3, r4
 80013a8:	cb03      	ldmia	r3!, {r0, r1}
 80013aa:	6010      	str	r0, [r2, #0]
 80013ac:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino16'></td></tr>");
 80013ae:	6838      	ldr	r0, [r7, #0]
 80013b0:	f7fe fece 	bl	8000150 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a28      	ldr	r2, [pc, #160]	; (8001460 <tcp_http_mt+0xea0>)
 80013be:	4614      	mov	r4, r2
 80013c0:	469c      	mov	ip, r3
 80013c2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80013c6:	4665      	mov	r5, ip
 80013c8:	4626      	mov	r6, r4
 80013ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013cc:	6028      	str	r0, [r5, #0]
 80013ce:	6069      	str	r1, [r5, #4]
 80013d0:	60aa      	str	r2, [r5, #8]
 80013d2:	60eb      	str	r3, [r5, #12]
 80013d4:	3410      	adds	r4, #16
 80013d6:	f10c 0c10 	add.w	ip, ip, #16
 80013da:	4574      	cmp	r4, lr
 80013dc:	d1f3      	bne.n	80013c6 <tcp_http_mt+0xe06>
 80013de:	4663      	mov	r3, ip
 80013e0:	4622      	mov	r2, r4
 80013e2:	6810      	ldr	r0, [r2, #0]
 80013e4:	6018      	str	r0, [r3, #0]
 80013e6:	8891      	ldrh	r1, [r2, #4]
 80013e8:	7992      	ldrb	r2, [r2, #6]
 80013ea:	8099      	strh	r1, [r3, #4]
 80013ec:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "</table><br><button>Salvar</button><br><br><a href='http://192.168.0.231'>Voltar</a><br></center>");
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f7fe feae 	bl	8000150 <strlen>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <tcp_http_mt+0xea4>)
 80013fe:	4618      	mov	r0, r3
 8001400:	4611      	mov	r1, r2
 8001402:	2362      	movs	r3, #98	; 0x62
 8001404:	461a      	mov	r2, r3
 8001406:	f006 fec2 	bl	800818e <memcpy>

							strcat((char*)buf, "</body>");
 800140a:	6838      	ldr	r0, [r7, #0]
 800140c:	f7fe fea0 	bl	8000150 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	461a      	mov	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4913      	ldr	r1, [pc, #76]	; (8001468 <tcp_http_mt+0xea8>)
 800141a:	461a      	mov	r2, r3
 800141c:	460b      	mov	r3, r1
 800141e:	cb03      	ldmia	r3!, {r0, r1}
 8001420:	6010      	str	r0, [r2, #0]
 8001422:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f7fe fe93 	bl	8000150 <strlen>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	490e      	ldr	r1, [pc, #56]	; (800146c <tcp_http_mt+0xeac>)
 8001434:	461a      	mov	r2, r3
 8001436:	460b      	mov	r3, r1
 8001438:	cb03      	ldmia	r3!, {r0, r1}
 800143a:	6010      	str	r0, [r2, #0]
 800143c:	6051      	str	r1, [r2, #4]
 800143e:	e0f5      	b.n	800162c <tcp_http_mt+0x106c>
 8001440:	08008e6c 	.word	0x08008e6c
 8001444:	08008ea4 	.word	0x08008ea4
 8001448:	08008edc 	.word	0x08008edc
 800144c:	08008f14 	.word	0x08008f14
 8001450:	08008f4c 	.word	0x08008f4c
 8001454:	08008f84 	.word	0x08008f84
 8001458:	08008fbc 	.word	0x08008fbc
 800145c:	08008ff4 	.word	0x08008ff4
 8001460:	0800902c 	.word	0x0800902c
 8001464:	08009064 	.word	0x08009064
 8001468:	080088a0 	.word	0x080088a0
 800146c:	080088a8 	.word	0x080088a8
						}
						else
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4aa3      	ldr	r2, [pc, #652]	; (8001700 <tcp_http_mt+0x1140>)
 8001474:	4614      	mov	r4, r2
 8001476:	469c      	mov	ip, r3
 8001478:	f104 0e20 	add.w	lr, r4, #32
 800147c:	4665      	mov	r5, ip
 800147e:	4626      	mov	r6, r4
 8001480:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001482:	6028      	str	r0, [r5, #0]
 8001484:	6069      	str	r1, [r5, #4]
 8001486:	60aa      	str	r2, [r5, #8]
 8001488:	60eb      	str	r3, [r5, #12]
 800148a:	3410      	adds	r4, #16
 800148c:	f10c 0c10 	add.w	ip, ip, #16
 8001490:	4574      	cmp	r4, lr
 8001492:	d1f3      	bne.n	800147c <tcp_http_mt+0xebc>
 8001494:	4665      	mov	r5, ip
 8001496:	4623      	mov	r3, r4
 8001498:	cb07      	ldmia	r3!, {r0, r1, r2}
 800149a:	6028      	str	r0, [r5, #0]
 800149c:	6069      	str	r1, [r5, #4]
 800149e:	60aa      	str	r2, [r5, #8]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f7fe fe53 	bl	8000150 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a94      	ldr	r2, [pc, #592]	; (8001704 <tcp_http_mt+0x1144>)
 80014b4:	461c      	mov	r4, r3
 80014b6:	4613      	mov	r3, r2
 80014b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014ba:	6020      	str	r0, [r4, #0]
 80014bc:	6061      	str	r1, [r4, #4]
 80014be:	60a2      	str	r2, [r4, #8]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Escrava Config</title>");
 80014c4:	6838      	ldr	r0, [r7, #0]
 80014c6:	f7fe fe43 	bl	8000150 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a8d      	ldr	r2, [pc, #564]	; (8001708 <tcp_http_mt+0x1148>)
 80014d4:	461d      	mov	r5, r3
 80014d6:	4614      	mov	r4, r2
 80014d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014da:	6028      	str	r0, [r5, #0]
 80014dc:	6069      	str	r1, [r5, #4]
 80014de:	60aa      	str	r2, [r5, #8]
 80014e0:	60eb      	str	r3, [r5, #12]
 80014e2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80014e4:	6128      	str	r0, [r5, #16]
 80014e6:	6169      	str	r1, [r5, #20]
 80014e8:	61aa      	str	r2, [r5, #24]
 80014ea:	8823      	ldrh	r3, [r4, #0]
 80014ec:	83ab      	strh	r3, [r5, #28]
							strcat((char*)buf, "</head>");
 80014ee:	6838      	ldr	r0, [r7, #0]
 80014f0:	f7fe fe2e 	bl	8000150 <strlen>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4983      	ldr	r1, [pc, #524]	; (800170c <tcp_http_mt+0x114c>)
 80014fe:	461a      	mov	r2, r3
 8001500:	460b      	mov	r3, r1
 8001502:	cb03      	ldmia	r3!, {r0, r1}
 8001504:	6010      	str	r0, [r2, #0]
 8001506:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 8001508:	6838      	ldr	r0, [r7, #0]
 800150a:	f7fe fe21 	bl	8000150 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	4a7e      	ldr	r2, [pc, #504]	; (8001710 <tcp_http_mt+0x1150>)
 8001518:	6810      	ldr	r0, [r2, #0]
 800151a:	6018      	str	r0, [r3, #0]
 800151c:	8891      	ldrh	r1, [r2, #4]
 800151e:	7992      	ldrb	r2, [r2, #6]
 8001520:	8099      	strh	r1, [r3, #4]
 8001522:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<div class = 'entradas'>");
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f7fe fe13 	bl	8000150 <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	4413      	add	r3, r2
 8001532:	4a78      	ldr	r2, [pc, #480]	; (8001714 <tcp_http_mt+0x1154>)
 8001534:	461d      	mov	r5, r3
 8001536:	4614      	mov	r4, r2
 8001538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153a:	6028      	str	r0, [r5, #0]
 800153c:	6069      	str	r1, [r5, #4]
 800153e:	60aa      	str	r2, [r5, #8]
 8001540:	60eb      	str	r3, [r5, #12]
 8001542:	cc03      	ldmia	r4!, {r0, r1}
 8001544:	6128      	str	r0, [r5, #16]
 8001546:	6169      	str	r1, [r5, #20]
 8001548:	7823      	ldrb	r3, [r4, #0]
 800154a:	762b      	strb	r3, [r5, #24]

							strcat((char*)buf, "<b><center>Menus para configuracao</b><br><br>");
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f7fe fdff 	bl	8000150 <strlen>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	4a6f      	ldr	r2, [pc, #444]	; (8001718 <tcp_http_mt+0x1158>)
 800155c:	4615      	mov	r5, r2
 800155e:	469c      	mov	ip, r3
 8001560:	f105 0e20 	add.w	lr, r5, #32
 8001564:	4664      	mov	r4, ip
 8001566:	462e      	mov	r6, r5
 8001568:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800156a:	6020      	str	r0, [r4, #0]
 800156c:	6061      	str	r1, [r4, #4]
 800156e:	60a2      	str	r2, [r4, #8]
 8001570:	60e3      	str	r3, [r4, #12]
 8001572:	3510      	adds	r5, #16
 8001574:	f10c 0c10 	add.w	ip, ip, #16
 8001578:	4575      	cmp	r5, lr
 800157a:	d1f3      	bne.n	8001564 <tcp_http_mt+0xfa4>
 800157c:	4664      	mov	r4, ip
 800157e:	462b      	mov	r3, r5
 8001580:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001582:	6020      	str	r0, [r4, #0]
 8001584:	6061      	str	r1, [r4, #4]
 8001586:	60a2      	str	r2, [r4, #8]
 8001588:	881a      	ldrh	r2, [r3, #0]
 800158a:	789b      	ldrb	r3, [r3, #2]
 800158c:	81a2      	strh	r2, [r4, #12]
 800158e:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "<a href='http://192.168.0.231/rede'>Configurar rede</a><br><br>");
 8001590:	6838      	ldr	r0, [r7, #0]
 8001592:	f7fe fddd 	bl	8000150 <strlen>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	4413      	add	r3, r2
 800159e:	4a5f      	ldr	r2, [pc, #380]	; (800171c <tcp_http_mt+0x115c>)
 80015a0:	4614      	mov	r4, r2
 80015a2:	469c      	mov	ip, r3
 80015a4:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 80015a8:	4665      	mov	r5, ip
 80015aa:	4626      	mov	r6, r4
 80015ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80015ae:	6028      	str	r0, [r5, #0]
 80015b0:	6069      	str	r1, [r5, #4]
 80015b2:	60aa      	str	r2, [r5, #8]
 80015b4:	60eb      	str	r3, [r5, #12]
 80015b6:	3410      	adds	r4, #16
 80015b8:	f10c 0c10 	add.w	ip, ip, #16
 80015bc:	4574      	cmp	r4, lr
 80015be:	d1f3      	bne.n	80015a8 <tcp_http_mt+0xfe8>
							strcat((char*)buf, "<a href='http://192.168.0.231/interfaces'>Configurar interfaces\n</a><br>");
 80015c0:	6838      	ldr	r0, [r7, #0]
 80015c2:	f7fe fdc5 	bl	8000150 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a54      	ldr	r2, [pc, #336]	; (8001720 <tcp_http_mt+0x1160>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	4611      	mov	r1, r2
 80015d4:	2349      	movs	r3, #73	; 0x49
 80015d6:	461a      	mov	r2, r3
 80015d8:	f006 fdd9 	bl	800818e <memcpy>

							strcat((char*)buf, "</div>");
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f7fe fdb7 	bl	8000150 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a4e      	ldr	r2, [pc, #312]	; (8001724 <tcp_http_mt+0x1164>)
 80015ec:	6810      	ldr	r0, [r2, #0]
 80015ee:	6018      	str	r0, [r3, #0]
 80015f0:	8891      	ldrh	r1, [r2, #4]
 80015f2:	7992      	ldrb	r2, [r2, #6]
 80015f4:	8099      	strh	r1, [r3, #4]
 80015f6:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "</body>");
 80015f8:	6838      	ldr	r0, [r7, #0]
 80015fa:	f7fe fda9 	bl	8000150 <strlen>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	4413      	add	r3, r2
 8001606:	4948      	ldr	r1, [pc, #288]	; (8001728 <tcp_http_mt+0x1168>)
 8001608:	461a      	mov	r2, r3
 800160a:	460b      	mov	r3, r1
 800160c:	cb03      	ldmia	r3!, {r0, r1}
 800160e:	6010      	str	r0, [r2, #0]
 8001610:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8001612:	6838      	ldr	r0, [r7, #0]
 8001614:	f7fe fd9c 	bl	8000150 <strlen>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4942      	ldr	r1, [pc, #264]	; (800172c <tcp_http_mt+0x116c>)
 8001622:	461a      	mov	r2, r3
 8001624:	460b      	mov	r3, r1
 8001626:	cb03      	ldmia	r3!, {r0, r1}
 8001628:	6010      	str	r0, [r2, #0]
 800162a:	6051      	str	r1, [r2, #4]
						}

						blocklen = strlen((char*)buf);
 800162c:	6838      	ldr	r0, [r7, #0]
 800162e:	f7fe fd8f 	bl	8000150 <strlen>
 8001632:	4603      	mov	r3, r0
 8001634:	833b      	strh	r3, [r7, #24]

						ret = send(sn,buf,blocklen);
 8001636:	8b3a      	ldrh	r2, [r7, #24]
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	6839      	ldr	r1, [r7, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f001 f841 	bl	80026c4 <send>
 8001642:	6178      	str	r0, [r7, #20]
						if(ret < 0)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	da05      	bge.n	8001656 <tcp_http_mt+0x1096>
						{
							close(sn);
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 ff01 	bl	8002454 <close>
							return ret;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	e04f      	b.n	80016f6 <tcp_http_mt+0x1136>
						}
						else
						{
							HTTP_reset(sn);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff99 	bl	8000590 <HTTP_reset>
							disconnect(sn);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 ffb9 	bl	80025d8 <disconnect>
					if(flagHtmlGen == 1)
 8001666:	e008      	b.n	800167a <tcp_http_mt+0x10ba>
						}
					}
				}
				else
				{
					HTTP_reset(sn);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff90 	bl	8000590 <HTTP_reset>
					disconnect(sn);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 ffb0 	bl	80025d8 <disconnect>
				}

        	  }
         }
         break;
 8001678:	e035      	b.n	80016e6 <tcp_http_mt+0x1126>
 800167a:	e034      	b.n	80016e6 <tcp_http_mt+0x1126>
      case SOCK_CLOSE_WAIT :

    	  HTTP_reset(sn);
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff86 	bl	8000590 <HTTP_reset>

         if((ret=disconnect(sn)) != SOCK_OK)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	4618      	mov	r0, r3
 8001688:	f000 ffa6 	bl	80025d8 <disconnect>
 800168c:	4603      	mov	r3, r0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d029      	beq.n	80016ea <tcp_http_mt+0x112a>
         return ret;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	e02d      	b.n	80016f6 <tcp_http_mt+0x1136>

         break;
      case SOCK_INIT :

    	  HTTP_reset(sn);
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff77 	bl	8000590 <HTTP_reset>

         if( (ret = listen(sn)) != SOCK_OK) return ret;
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 ff31 	bl	800250c <listen>
 80016aa:	4603      	mov	r3, r0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d01c      	beq.n	80016ee <tcp_http_mt+0x112e>
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	e01e      	b.n	80016f6 <tcp_http_mt+0x1136>
         break;
      case SOCK_CLOSED:

    	  HTTP_reset(sn);
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff68 	bl	8000590 <HTTP_reset>

         if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)
 80016c0:	88ba      	ldrh	r2, [r7, #4]
 80016c2:	79f8      	ldrb	r0, [r7, #7]
 80016c4:	2300      	movs	r3, #0
 80016c6:	2101      	movs	r1, #1
 80016c8:	f000 fdcc 	bl	8002264 <socket>
 80016cc:	4603      	mov	r3, r0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d00c      	beq.n	80016f2 <tcp_http_mt+0x1132>
         return ret;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	e00c      	b.n	80016f6 <tcp_http_mt+0x1136>

         break;

      default:
    	  HTTP_reset(sn);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff56 	bl	8000590 <HTTP_reset>
         break;
 80016e4:	e006      	b.n	80016f4 <tcp_http_mt+0x1134>
         break;
 80016e6:	bf00      	nop
 80016e8:	e004      	b.n	80016f4 <tcp_http_mt+0x1134>
         break;
 80016ea:	bf00      	nop
 80016ec:	e002      	b.n	80016f4 <tcp_http_mt+0x1134>
         break;
 80016ee:	bf00      	nop
 80016f0:	e000      	b.n	80016f4 <tcp_http_mt+0x1134>
         break;
 80016f2:	bf00      	nop
   }
   return 1;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fe:	bf00      	nop
 8001700:	08008488 	.word	0x08008488
 8001704:	080084b8 	.word	0x080084b8
 8001708:	080090c8 	.word	0x080090c8
 800170c:	080084e8 	.word	0x080084e8
 8001710:	080084f0 	.word	0x080084f0
 8001714:	080090e8 	.word	0x080090e8
 8001718:	08009104 	.word	0x08009104
 800171c:	08009134 	.word	0x08009134
 8001720:	08009174 	.word	0x08009174
 8001724:	080091c0 	.word	0x080091c0
 8001728:	080088a0 	.word	0x080088a0
 800172c:	080088a8 	.word	0x080088a8

08001730 <save_to_flash>:

void save_to_flash(uint8_t *data)
{
 8001730:	b5b0      	push	{r4, r5, r7, lr}
 8001732:	b08e      	sub	sp, #56	; 0x38
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	466b      	mov	r3, sp
 800173a:	461d      	mov	r5, r3
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7fe fd07 	bl	8000150 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	089c      	lsrs	r4, r3, #2
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7fe fd02 	bl	8000150 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf14      	ite	ne
 8001756:	2301      	movne	r3, #1
 8001758:	2300      	moveq	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	18e0      	adds	r0, r4, r3
 800175e:	4603      	mov	r3, r0
 8001760:	3b01      	subs	r3, #1
 8001762:	637b      	str	r3, [r7, #52]	; 0x34
 8001764:	4601      	mov	r1, r0
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f04f 0400 	mov.w	r4, #0
 8001772:	0154      	lsls	r4, r2, #5
 8001774:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001778:	014b      	lsls	r3, r1, #5
 800177a:	4601      	mov	r1, r0
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	f04f 0400 	mov.w	r4, #0
 8001788:	0154      	lsls	r4, r2, #5
 800178a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800178e:	014b      	lsls	r3, r1, #5
 8001790:	0083      	lsls	r3, r0, #2
 8001792:	3303      	adds	r3, #3
 8001794:	3307      	adds	r3, #7
 8001796:	08db      	lsrs	r3, r3, #3
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	ebad 0d03 	sub.w	sp, sp, r3
 800179e:	466b      	mov	r3, sp
 80017a0:	3303      	adds	r3, #3
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 80017a8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80017aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fccf 	bl	8000150 <strlen>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	4620      	mov	r0, r4
 80017ba:	f006 fd0c 	bl	80081d6 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 80017be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f006 fd1c 	bl	8008200 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 80017c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fcc0 	bl	8000150 <strlen>
 80017d0:	4603      	mov	r3, r0
 80017d2:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fcba 	bl	8000150 <strlen>
 80017dc:	4603      	mov	r3, r0
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf14      	ite	ne
 80017e6:	2301      	movne	r3, #1
 80017e8:	2300      	moveq	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7fe fcad 	bl	8000150 <strlen>
 80017f6:	4603      	mov	r3, r0
 80017f8:	0adb      	lsrs	r3, r3, #11
									+ (int)((strlen((char*)data)%page_size) != 0);
 80017fa:	b29c      	uxth	r4, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7fe fca7 	bl	8000150 <strlen>
 8001802:	4603      	mov	r3, r0
 8001804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	b29b      	uxth	r3, r3
 8001814:	4423      	add	r3, r4
 8001816:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8001818:	857b      	strh	r3, [r7, #42]	; 0x2a
	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 800181a:	f002 fa09 	bl	8003c30 <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 800181e:	f002 fa3d 	bl	8003c9c <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.PageAddress = FLASH_STORAGE;
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <save_to_flash+0x178>)
 8001828:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.NbPages = pages;
 800182a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800182c:	b29b      	uxth	r3, r3
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8001838:	f107 0214 	add.w	r2, r7, #20
 800183c:	f107 0318 	add.w	r3, r7, #24
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fb08 	bl	8003e58 <HAL_FLASHEx_Erase>
 8001848:	4603      	mov	r3, r0
 800184a:	72fb      	strb	r3, [r7, #11]
	  while(index < data_length)
 800184c:	e01f      	b.n	800188e <save_to_flash+0x15e>
	  {
		  if (status == HAL_OK)
 800184e:	7afb      	ldrb	r3, [r7, #11]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d11b      	bne.n	800188e <save_to_flash+0x15e>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800185c:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	f04f 0400 	mov.w	r4, #0
 800186c:	461a      	mov	r2, r3
 800186e:	4623      	mov	r3, r4
 8001870:	2002      	movs	r0, #2
 8001872:	f002 f96d 	bl	8003b50 <HAL_FLASH_Program>
 8001876:	4603      	mov	r3, r0
 8001878:	72fb      	strb	r3, [r7, #11]
			  if(status == HAL_OK)
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d105      	bne.n	800188e <save_to_flash+0x15e>
			  {
				  write_cnt += 4;
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	3304      	adds	r3, #4
 8001886:	613b      	str	r3, [r7, #16]
				  index++;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3301      	adds	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
	  while(index < data_length)
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	429a      	cmp	r2, r3
 8001894:	d3db      	bcc.n	800184e <save_to_flash+0x11e>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 8001896:	f002 fa1d 	bl	8003cd4 <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 800189a:	f002 f9ef 	bl	8003c7c <HAL_FLASH_Lock>
 800189e:	46ad      	mov	sp, r5
}
 80018a0:	bf00      	nop
 80018a2:	3738      	adds	r7, #56	; 0x38
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bdb0      	pop	{r4, r5, r7, pc}
 80018a8:	0800a000 	.word	0x0800a000

080018ac <read_flash>:

void read_flash(uint8_t* data)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80018be:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d020      	beq.n	8001910 <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 80018ce:	68f9      	ldr	r1, [r7, #12]
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	0a19      	lsrs	r1, r3, #8
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3301      	adds	r3, #1
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	0c19      	lsrs	r1, r3, #16
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	3302      	adds	r3, #2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	0e19      	lsrs	r1, r3, #24
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	3303      	adds	r3, #3
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	b2ca      	uxtb	r2, r1
 8001908:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	3304      	adds	r3, #4
 800190e:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001916:	d1cf      	bne.n	80018b8 <read_flash+0xc>
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <strremove>:

char *strremove(char *str, const char *sub) {
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
    char *p, *q, *r;
    if ((q = r = strstr(str, sub)) != NULL) {
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f006 fc80 	bl	8008234 <strstr>
 8001934:	6138      	str	r0, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d029      	beq.n	8001994 <strremove+0x72>
        size_t len = strlen(sub);
 8001940:	6838      	ldr	r0, [r7, #0]
 8001942:	f7fe fc05 	bl	8000150 <strlen>
 8001946:	60f8      	str	r0, [r7, #12]
        while ((r = strstr(p = r + len, sub)) != NULL) {
 8001948:	e00e      	b.n	8001968 <strremove+0x46>
            memmove(q, p, r - p);
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	461a      	mov	r2, r3
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	6978      	ldr	r0, [r7, #20]
 8001956:	f006 fc25 	bl	80081a4 <memmove>
            q += r - p;
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	461a      	mov	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
        while ((r = strstr(p = r + len, sub)) != NULL) {
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4413      	add	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	6839      	ldr	r1, [r7, #0]
 8001972:	68b8      	ldr	r0, [r7, #8]
 8001974:	f006 fc5e 	bl	8008234 <strstr>
 8001978:	6138      	str	r0, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e4      	bne.n	800194a <strremove+0x28>
        }
        memmove(q, p, strlen(p) + 1);
 8001980:	68b8      	ldr	r0, [r7, #8]
 8001982:	f7fe fbe5 	bl	8000150 <strlen>
 8001986:	4603      	mov	r3, r0
 8001988:	3301      	adds	r3, #1
 800198a:	461a      	mov	r2, r3
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f006 fc08 	bl	80081a4 <memmove>
    }
    return str;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <configNetwork>:

void configNetwork()
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b0a9      	sub	sp, #164	; 0xa4
 80019a4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80019a6:	4ba2      	ldr	r3, [pc, #648]	; (8001c30 <configNetwork+0x290>)
 80019a8:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80019ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	read_flash(config_data);
 80019b2:	48a0      	ldr	r0, [pc, #640]	; (8001c34 <configNetwork+0x294>)
 80019b4:	f7ff ff7a 	bl	80018ac <read_flash>
	if(config_data[0] == '/' && config_data[1] == 'i' && config_data[2] == 'p')
 80019b8:	4b9e      	ldr	r3, [pc, #632]	; (8001c34 <configNetwork+0x294>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b2f      	cmp	r3, #47	; 0x2f
 80019be:	f040 8186 	bne.w	8001cce <configNetwork+0x32e>
 80019c2:	4b9c      	ldr	r3, [pc, #624]	; (8001c34 <configNetwork+0x294>)
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	2b69      	cmp	r3, #105	; 0x69
 80019c8:	f040 8181 	bne.w	8001cce <configNetwork+0x32e>
 80019cc:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <configNetwork+0x294>)
 80019ce:	789b      	ldrb	r3, [r3, #2]
 80019d0:	2b70      	cmp	r3, #112	; 0x70
 80019d2:	f040 817c 	bne.w	8001cce <configNetwork+0x32e>
	{
		strremove(config_data, "/ip:");
 80019d6:	4998      	ldr	r1, [pc, #608]	; (8001c38 <configNetwork+0x298>)
 80019d8:	4896      	ldr	r0, [pc, #600]	; (8001c34 <configNetwork+0x294>)
 80019da:	f7ff ffa2 	bl	8001922 <strremove>
		strremove(config_data, "mask:");
 80019de:	4997      	ldr	r1, [pc, #604]	; (8001c3c <configNetwork+0x29c>)
 80019e0:	4894      	ldr	r0, [pc, #592]	; (8001c34 <configNetwork+0x294>)
 80019e2:	f7ff ff9e 	bl	8001922 <strremove>
		strremove(config_data, "port:");
 80019e6:	4996      	ldr	r1, [pc, #600]	; (8001c40 <configNetwork+0x2a0>)
 80019e8:	4892      	ldr	r0, [pc, #584]	; (8001c34 <configNetwork+0x294>)
 80019ea:	f7ff ff9a 	bl	8001922 <strremove>
		strremove(config_data, "gateway:");
 80019ee:	4995      	ldr	r1, [pc, #596]	; (8001c44 <configNetwork+0x2a4>)
 80019f0:	4890      	ldr	r0, [pc, #576]	; (8001c34 <configNetwork+0x294>)
 80019f2:	f7ff ff96 	bl	8001922 <strremove>
		strremove(config_data, "dns1:");
 80019f6:	4994      	ldr	r1, [pc, #592]	; (8001c48 <configNetwork+0x2a8>)
 80019f8:	488e      	ldr	r0, [pc, #568]	; (8001c34 <configNetwork+0x294>)
 80019fa:	f7ff ff92 	bl	8001922 <strremove>
		strremove(config_data, "dns2:");
 80019fe:	4993      	ldr	r1, [pc, #588]	; (8001c4c <configNetwork+0x2ac>)
 8001a00:	488c      	ldr	r0, [pc, #560]	; (8001c34 <configNetwork+0x294>)
 8001a02:	f7ff ff8e 	bl	8001922 <strremove>

		char *p, *ipPointer, *maskPointer, *portPointer, *gatewayPointer, *dns1Pointer, *dns2Pointer;
		p = strtok(config_data, ",");
 8001a06:	4992      	ldr	r1, [pc, #584]	; (8001c50 <configNetwork+0x2b0>)
 8001a08:	488a      	ldr	r0, [pc, #552]	; (8001c34 <configNetwork+0x294>)
 8001a0a:	f006 fc2d 	bl	8008268 <strtok>
 8001a0e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

		for(int i = 0; p != NULL; i++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a18:	e03b      	b.n	8001a92 <configNetwork+0xf2>
		{
			switch(i)
 8001a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d82b      	bhi.n	8001a7a <configNetwork+0xda>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <configNetwork+0x88>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a4b 	.word	0x08001a4b
 8001a30:	08001a55 	.word	0x08001a55
 8001a34:	08001a5d 	.word	0x08001a5d
 8001a38:	08001a67 	.word	0x08001a67
 8001a3c:	08001a71 	.word	0x08001a71
			{
			case 0:
				ipPointer = p;
 8001a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				break;
 8001a48:	e018      	b.n	8001a7c <configNetwork+0xdc>
			case 1:
				maskPointer = p;
 8001a4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				break;
 8001a52:	e013      	b.n	8001a7c <configNetwork+0xdc>
			case 2:
				portPointer = p;
 8001a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a58:	663b      	str	r3, [r7, #96]	; 0x60
				break;
 8001a5a:	e00f      	b.n	8001a7c <configNetwork+0xdc>
			case 3:
				gatewayPointer = p;
 8001a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				break;
 8001a64:	e00a      	b.n	8001a7c <configNetwork+0xdc>
			case 4:
				dns1Pointer = p;
 8001a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				break;
 8001a6e:	e005      	b.n	8001a7c <configNetwork+0xdc>
			case 5:
				dns2Pointer = p;
 8001a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				break;
 8001a78:	e000      	b.n	8001a7c <configNetwork+0xdc>
			default:
				break;
 8001a7a:	bf00      	nop
			}
			p = strtok(NULL, ",");
 8001a7c:	4974      	ldr	r1, [pc, #464]	; (8001c50 <configNetwork+0x2b0>)
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f006 fbf2 	bl	8008268 <strtok>
 8001a84:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		for(int i = 0; p != NULL; i++)
 8001a88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1bf      	bne.n	8001a1a <configNetwork+0x7a>
		}

		char *ip[4], *mask[4], *gateway[4], *dns1[4], *dns2[4];
		p = strtok(ipPointer, ".");
 8001a9a:	496e      	ldr	r1, [pc, #440]	; (8001c54 <configNetwork+0x2b4>)
 8001a9c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001aa0:	f006 fbe2 	bl	8008268 <strtok>
 8001aa4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

		for(int i = 0; p != NULL; i++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001aac:	e011      	b.n	8001ad2 <configNetwork+0x132>
		{
			ip[i] = p;
 8001aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001abc:	f843 2c60 	str.w	r2, [r3, #-96]
			p = strtok(NULL, ".");
 8001ac0:	4964      	ldr	r1, [pc, #400]	; (8001c54 <configNetwork+0x2b4>)
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f006 fbd0 	bl	8008268 <strtok>
 8001ac8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		for(int i = 0; p != NULL; i++)
 8001acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ace:	3301      	adds	r3, #1
 8001ad0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ad2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1e9      	bne.n	8001aae <configNetwork+0x10e>
		}

		p = strtok(ipPointer, ".");
 8001ada:	495e      	ldr	r1, [pc, #376]	; (8001c54 <configNetwork+0x2b4>)
 8001adc:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001ae0:	f006 fbc2 	bl	8008268 <strtok>
 8001ae4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

		for(int i = 0; p != NULL; i++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	67bb      	str	r3, [r7, #120]	; 0x78
 8001aec:	e011      	b.n	8001b12 <configNetwork+0x172>
		{
			ip[i] = p;
 8001aee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001af6:	4413      	add	r3, r2
 8001af8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001afc:	f843 2c60 	str.w	r2, [r3, #-96]
			p = strtok(NULL, ".");
 8001b00:	4954      	ldr	r1, [pc, #336]	; (8001c54 <configNetwork+0x2b4>)
 8001b02:	2000      	movs	r0, #0
 8001b04:	f006 fbb0 	bl	8008268 <strtok>
 8001b08:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		for(int i = 0; p != NULL; i++)
 8001b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b0e:	3301      	adds	r3, #1
 8001b10:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1e9      	bne.n	8001aee <configNetwork+0x14e>
		}

		p = strtok(ipPointer, ".");
 8001b1a:	494e      	ldr	r1, [pc, #312]	; (8001c54 <configNetwork+0x2b4>)
 8001b1c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001b20:	f006 fba2 	bl	8008268 <strtok>
 8001b24:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

		for(int i = 0; p != NULL; i++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b2c:	e011      	b.n	8001b52 <configNetwork+0x1b2>
		{
			ip[i] = p;
 8001b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001b36:	4413      	add	r3, r2
 8001b38:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b3c:	f843 2c60 	str.w	r2, [r3, #-96]
			p = strtok(NULL, ".");
 8001b40:	4944      	ldr	r1, [pc, #272]	; (8001c54 <configNetwork+0x2b4>)
 8001b42:	2000      	movs	r0, #0
 8001b44:	f006 fb90 	bl	8008268 <strtok>
 8001b48:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		for(int i = 0; p != NULL; i++)
 8001b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b4e:	3301      	adds	r3, #1
 8001b50:	677b      	str	r3, [r7, #116]	; 0x74
 8001b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1e9      	bne.n	8001b2e <configNetwork+0x18e>
		}

		p = strtok(maskPointer, ".");
 8001b5a:	493e      	ldr	r1, [pc, #248]	; (8001c54 <configNetwork+0x2b4>)
 8001b5c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001b60:	f006 fb82 	bl	8008268 <strtok>
 8001b64:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

		for(int i = 0; p != NULL; i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	673b      	str	r3, [r7, #112]	; 0x70
 8001b6c:	e011      	b.n	8001b92 <configNetwork+0x1f2>
		{
			mask[i] = p;
 8001b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001b76:	4413      	add	r3, r2
 8001b78:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b7c:	f843 2c70 	str.w	r2, [r3, #-112]
			p = strtok(NULL, ".");
 8001b80:	4934      	ldr	r1, [pc, #208]	; (8001c54 <configNetwork+0x2b4>)
 8001b82:	2000      	movs	r0, #0
 8001b84:	f006 fb70 	bl	8008268 <strtok>
 8001b88:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		for(int i = 0; p != NULL; i++)
 8001b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b8e:	3301      	adds	r3, #1
 8001b90:	673b      	str	r3, [r7, #112]	; 0x70
 8001b92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1e9      	bne.n	8001b6e <configNetwork+0x1ce>
		}

		p = strtok(gatewayPointer, ".");
 8001b9a:	492e      	ldr	r1, [pc, #184]	; (8001c54 <configNetwork+0x2b4>)
 8001b9c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001ba0:	f006 fb62 	bl	8008268 <strtok>
 8001ba4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

		for(int i = 0; p != NULL; i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bac:	e011      	b.n	8001bd2 <configNetwork+0x232>
		{
			gateway[i] = p;
 8001bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bbc:	f843 2c80 	str.w	r2, [r3, #-128]
			p = strtok(NULL, ".");
 8001bc0:	4924      	ldr	r1, [pc, #144]	; (8001c54 <configNetwork+0x2b4>)
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f006 fb50 	bl	8008268 <strtok>
 8001bc8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		for(int i = 0; p != NULL; i++)
 8001bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bce:	3301      	adds	r3, #1
 8001bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1e9      	bne.n	8001bae <configNetwork+0x20e>
		}

		p = strtok(dns1Pointer, ".");
 8001bda:	491e      	ldr	r1, [pc, #120]	; (8001c54 <configNetwork+0x2b4>)
 8001bdc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001be0:	f006 fb42 	bl	8008268 <strtok>
 8001be4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

		for(int i = 0; p != NULL; i++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bec:	e011      	b.n	8001c12 <configNetwork+0x272>
		{
			dns1[i] = p;
 8001bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bfc:	f843 2c90 	str.w	r2, [r3, #-144]
			p = strtok(NULL, ".");
 8001c00:	4914      	ldr	r1, [pc, #80]	; (8001c54 <configNetwork+0x2b4>)
 8001c02:	2000      	movs	r0, #0
 8001c04:	f006 fb30 	bl	8008268 <strtok>
 8001c08:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		for(int i = 0; p != NULL; i++)
 8001c0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c0e:	3301      	adds	r3, #1
 8001c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1e9      	bne.n	8001bee <configNetwork+0x24e>
		}

		p = strtok(dns2Pointer, ".");
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <configNetwork+0x2b4>)
 8001c1c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001c20:	f006 fb22 	bl	8008268 <strtok>
 8001c24:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

		for(int i = 0; p != NULL; i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	667b      	str	r3, [r7, #100]	; 0x64
 8001c2c:	e026      	b.n	8001c7c <configNetwork+0x2dc>
 8001c2e:	bf00      	nop
 8001c30:	080091fc 	.word	0x080091fc
 8001c34:	20002cc8 	.word	0x20002cc8
 8001c38:	08008478 	.word	0x08008478
 8001c3c:	080091c8 	.word	0x080091c8
 8001c40:	080091d0 	.word	0x080091d0
 8001c44:	080091d8 	.word	0x080091d8
 8001c48:	080091e4 	.word	0x080091e4
 8001c4c:	080091ec 	.word	0x080091ec
 8001c50:	080091f4 	.word	0x080091f4
 8001c54:	080091f8 	.word	0x080091f8
		{
			dns2[i] = p;
 8001c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001c60:	4413      	add	r3, r2
 8001c62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c66:	f843 2ca0 	str.w	r2, [r3, #-160]
			p = strtok(NULL, ".");
 8001c6a:	492e      	ldr	r1, [pc, #184]	; (8001d24 <configNetwork+0x384>)
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f006 fafb 	bl	8008268 <strtok>
 8001c72:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		for(int i = 0; p != NULL; i++)
 8001c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c78:	3301      	adds	r3, #1
 8001c7a:	667b      	str	r3, [r7, #100]	; 0x64
 8001c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e9      	bne.n	8001c58 <configNetwork+0x2b8>
		}

	  	gWIZNETINFO.ip[0] = 192;
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <configNetwork+0x388>)
 8001c86:	22c0      	movs	r2, #192	; 0xc0
 8001c88:	719a      	strb	r2, [r3, #6]
	  	gWIZNETINFO.ip[1] = 168;
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <configNetwork+0x388>)
 8001c8c:	22a8      	movs	r2, #168	; 0xa8
 8001c8e:	71da      	strb	r2, [r3, #7]
	  	gWIZNETINFO.ip[2] = 0;
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <configNetwork+0x388>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	721a      	strb	r2, [r3, #8]
	  	gWIZNETINFO.ip[3] = 235;
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <configNetwork+0x388>)
 8001c98:	22eb      	movs	r2, #235	; 0xeb
 8001c9a:	725a      	strb	r2, [r3, #9]
	  	gWIZNETINFO.dns[3] = dns1[3];
	  	gWIZNETINFO.sn[0] = mask[0];
	  	gWIZNETINFO.sn[1] = mask[1];
	  	gWIZNETINFO.sn[2] = mask[2];
	  	gWIZNETINFO.sn[3] = mask[3];*/
	  	gWIZNETINFO.mac[0] =  gWIZNETINFO.mac[0] + 0x01;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <configNetwork+0x388>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <configNetwork+0x388>)
 8001ca6:	701a      	strb	r2, [r3, #0]

	  	HAL_GPIO_WritePin(Rst_GPIO_Port, Rst_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cae:	481f      	ldr	r0, [pc, #124]	; (8001d2c <configNetwork+0x38c>)
 8001cb0:	f002 faeb 	bl	800428a <HAL_GPIO_WritePin>
	  	HAL_Delay(500);
 8001cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cb8:	f001 fe48 	bl	800394c <HAL_Delay>
	  	HAL_GPIO_WritePin(Rst_GPIO_Port, Rst_Pin, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc2:	481a      	ldr	r0, [pc, #104]	; (8001d2c <configNetwork+0x38c>)
 8001cc4:	f002 fae1 	bl	800428a <HAL_GPIO_WritePin>
	  	HAL_Delay(50);
 8001cc8:	2032      	movs	r0, #50	; 0x32
 8001cca:	f001 fe3f 	bl	800394c <HAL_Delay>
	}

	/* Chip selection call back */
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8001cce:	4918      	ldr	r1, [pc, #96]	; (8001d30 <configNetwork+0x390>)
 8001cd0:	4818      	ldr	r0, [pc, #96]	; (8001d34 <configNetwork+0x394>)
 8001cd2:	f001 f92b 	bl	8002f2c <reg_wizchip_cs_cbfunc>

	/* SPI Read & Write callback function */
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8001cd6:	4918      	ldr	r1, [pc, #96]	; (8001d38 <configNetwork+0x398>)
 8001cd8:	4818      	ldr	r0, [pc, #96]	; (8001d3c <configNetwork+0x39c>)
 8001cda:	f001 f94b 	bl	8002f74 <reg_wizchip_spi_cbfunc>

	///////////////////////////////////////////////////////////////////////
	/* WIZCHIP SOCKET Buffer initialize */
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8001cde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f001 f96f 	bl	8002fc8 <ctlwizchip>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d100      	bne.n	8001cf4 <configNetwork+0x354>
	{
		//init fail
		while(1);
 8001cf2:	e7fe      	b.n	8001cf2 <configNetwork+0x352>
	}

	/* Network initialization */
 	network_init();
 8001cf4:	f7fe fc3a 	bl	800056c <network_init>

	//all connections inactive
	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001cfe:	e009      	b.n	8001d14 <configNetwork+0x374>
		HTTP_reset(i);
 8001d00:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc43 	bl	8000590 <HTTP_reset>
	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 8001d0a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001d14:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001d18:	2b07      	cmp	r3, #7
 8001d1a:	d9f1      	bls.n	8001d00 <configNetwork+0x360>
}
 8001d1c:	bf00      	nop
 8001d1e:	37a4      	adds	r7, #164	; 0xa4
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd90      	pop	{r4, r7, pc}
 8001d24:	080091f8 	.word	0x080091f8
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	40010800 	.word	0x40010800
 8001d30:	08000529 	.word	0x08000529
 8001d34:	08000511 	.word	0x08000511
 8001d38:	08000541 	.word	0x08000541
 8001d3c:	0800055b 	.word	0x0800055b

08001d40 <StartEthernet>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEthernet */
void StartEthernet(void *argument)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t i;
  /* Infinite loop */
  for(;;)
  {
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 8001d48:	2304      	movs	r3, #4
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e008      	b.n	8001d60 <StartEthernet+0x20>
	  {
	  	tcp_http_mt(i, gDATABUF, 80);
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2250      	movs	r2, #80	; 0x50
 8001d52:	490d      	ldr	r1, [pc, #52]	; (8001d88 <StartEthernet+0x48>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fc33 	bl	80005c0 <tcp_http_mt>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b07      	cmp	r3, #7
 8001d64:	d9f3      	bls.n	8001d4e <StartEthernet+0xe>
	  }
	  //4 sockets para modbus TCP
	  for(i=0;i<4;i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e009      	b.n	8001d80 <StartEthernet+0x40>
	  {
	  	tcp_http_mt(i, gDATABUF, 502);
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8001d72:	4905      	ldr	r1, [pc, #20]	; (8001d88 <StartEthernet+0x48>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fc23 	bl	80005c0 <tcp_http_mt>
	  for(i=0;i<4;i++)
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d9f2      	bls.n	8001d6c <StartEthernet+0x2c>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 8001d86:	e7df      	b.n	8001d48 <StartEthernet+0x8>
 8001d88:	20001c9c 	.word	0x20001c9c

08001d8c <StartReadInput1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput1 */
void StartReadInput1(void *argument)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput1 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[0] = HAL_GPIO_ReadPin(OUT1_OP1_GPIO_Port, OUT1_OP1_Pin);
 8001d94:	2108      	movs	r1, #8
 8001d96:	4811      	ldr	r0, [pc, #68]	; (8001ddc <StartReadInput1+0x50>)
 8001d98:	f002 fa60 	bl	800425c <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <StartReadInput1+0x54>)
 8001da2:	701a      	strb	r2, [r3, #0]
	  inputs[1] = HAL_GPIO_ReadPin(OUT1_OP2_GPIO_Port, OUT1_OP2_Pin);
 8001da4:	2104      	movs	r1, #4
 8001da6:	480d      	ldr	r0, [pc, #52]	; (8001ddc <StartReadInput1+0x50>)
 8001da8:	f002 fa58 	bl	800425c <HAL_GPIO_ReadPin>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <StartReadInput1+0x54>)
 8001db2:	705a      	strb	r2, [r3, #1]
	  inputs[2] = HAL_GPIO_ReadPin(OUT1_OP3_GPIO_Port, OUT1_OP3_Pin);
 8001db4:	2102      	movs	r1, #2
 8001db6:	4809      	ldr	r0, [pc, #36]	; (8001ddc <StartReadInput1+0x50>)
 8001db8:	f002 fa50 	bl	800425c <HAL_GPIO_ReadPin>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <StartReadInput1+0x54>)
 8001dc2:	709a      	strb	r2, [r3, #2]
	  inputs[3] = HAL_GPIO_ReadPin(OUT1_OP4_GPIO_Port, OUT1_OP4_Pin);
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <StartReadInput1+0x50>)
 8001dc8:	f002 fa48 	bl	800425c <HAL_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <StartReadInput1+0x54>)
 8001dd2:	70da      	strb	r2, [r3, #3]
    osDelay(1);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f003 fe1b 	bl	8005a10 <osDelay>
	  inputs[0] = HAL_GPIO_ReadPin(OUT1_OP1_GPIO_Port, OUT1_OP1_Pin);
 8001dda:	e7db      	b.n	8001d94 <StartReadInput1+0x8>
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	200000cc 	.word	0x200000cc

08001de4 <StartReadInput2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput2 */
void StartReadInput2(void *argument)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput2 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[4] = HAL_GPIO_ReadPin(OUT1_OP5_GPIO_Port, OUT1_OP5_Pin);
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	4811      	ldr	r0, [pc, #68]	; (8001e34 <StartReadInput2+0x50>)
 8001df0:	f002 fa34 	bl	800425c <HAL_GPIO_ReadPin>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <StartReadInput2+0x54>)
 8001dfa:	711a      	strb	r2, [r3, #4]
	  inputs[5] = HAL_GPIO_ReadPin(OUT1_OP6_GPIO_Port, OUT1_OP6_Pin);
 8001dfc:	2140      	movs	r1, #64	; 0x40
 8001dfe:	480d      	ldr	r0, [pc, #52]	; (8001e34 <StartReadInput2+0x50>)
 8001e00:	f002 fa2c 	bl	800425c <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <StartReadInput2+0x54>)
 8001e0a:	715a      	strb	r2, [r3, #5]
	  inputs[6] = HAL_GPIO_ReadPin(OUT1_OP7_GPIO_Port, OUT1_OP7_Pin);
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	4809      	ldr	r0, [pc, #36]	; (8001e34 <StartReadInput2+0x50>)
 8001e10:	f002 fa24 	bl	800425c <HAL_GPIO_ReadPin>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <StartReadInput2+0x54>)
 8001e1a:	719a      	strb	r2, [r3, #6]
	  inputs[7] = HAL_GPIO_ReadPin(OUT1_OP8_GPIO_Port, OUT1_OP8_Pin);
 8001e1c:	2110      	movs	r1, #16
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <StartReadInput2+0x50>)
 8001e20:	f002 fa1c 	bl	800425c <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <StartReadInput2+0x54>)
 8001e2a:	71da      	strb	r2, [r3, #7]
    osDelay(1);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f003 fdef 	bl	8005a10 <osDelay>
	  inputs[4] = HAL_GPIO_ReadPin(OUT1_OP5_GPIO_Port, OUT1_OP5_Pin);
 8001e32:	e7db      	b.n	8001dec <StartReadInput2+0x8>
 8001e34:	40010800 	.word	0x40010800
 8001e38:	200000cc 	.word	0x200000cc

08001e3c <StartReadInput3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput3 */
void StartReadInput3(void *argument)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput3 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[8] = HAL_GPIO_ReadPin(OUT1_OP8_GPIO_Port, OUT1_OP9_Pin);
 8001e44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e48:	4811      	ldr	r0, [pc, #68]	; (8001e90 <StartReadInput3+0x54>)
 8001e4a:	f002 fa07 	bl	800425c <HAL_GPIO_ReadPin>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <StartReadInput3+0x58>)
 8001e54:	721a      	strb	r2, [r3, #8]
	  inputs[9] = HAL_GPIO_ReadPin(OUT1_OP9_GPIO_Port, OUT1_OP10_Pin);
 8001e56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e5a:	480f      	ldr	r0, [pc, #60]	; (8001e98 <StartReadInput3+0x5c>)
 8001e5c:	f002 f9fe 	bl	800425c <HAL_GPIO_ReadPin>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <StartReadInput3+0x58>)
 8001e66:	725a      	strb	r2, [r3, #9]
	  inputs[10] = HAL_GPIO_ReadPin(OUT1_OP10_GPIO_Port, OUT1_OP11_Pin);
 8001e68:	2104      	movs	r1, #4
 8001e6a:	480b      	ldr	r0, [pc, #44]	; (8001e98 <StartReadInput3+0x5c>)
 8001e6c:	f002 f9f6 	bl	800425c <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <StartReadInput3+0x58>)
 8001e76:	729a      	strb	r2, [r3, #10]
	  inputs[11] = HAL_GPIO_ReadPin(OUT1_OP11_GPIO_Port, OUT1_OP12_Pin);
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4808      	ldr	r0, [pc, #32]	; (8001e9c <StartReadInput3+0x60>)
 8001e7c:	f002 f9ee 	bl	800425c <HAL_GPIO_ReadPin>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <StartReadInput3+0x58>)
 8001e86:	72da      	strb	r2, [r3, #11]
    osDelay(1);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f003 fdc1 	bl	8005a10 <osDelay>
	  inputs[8] = HAL_GPIO_ReadPin(OUT1_OP8_GPIO_Port, OUT1_OP9_Pin);
 8001e8e:	e7d9      	b.n	8001e44 <StartReadInput3+0x8>
 8001e90:	40010800 	.word	0x40010800
 8001e94:	200000cc 	.word	0x200000cc
 8001e98:	40011000 	.word	0x40011000
 8001e9c:	40010c00 	.word	0x40010c00

08001ea0 <StartReadInput4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput4 */
void StartReadInput4(void *argument)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput4 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[12] = HAL_GPIO_ReadPin(OUT1_OP13_GPIO_Port, OUT1_OP13_Pin);
 8001ea8:	2140      	movs	r1, #64	; 0x40
 8001eaa:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <StartReadInput4+0x50>)
 8001eac:	f002 f9d6 	bl	800425c <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <StartReadInput4+0x54>)
 8001eb6:	731a      	strb	r2, [r3, #12]
	  inputs[13] = HAL_GPIO_ReadPin(OUT1_OP14_GPIO_Port, OUT1_OP14_Pin);
 8001eb8:	2120      	movs	r1, #32
 8001eba:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <StartReadInput4+0x50>)
 8001ebc:	f002 f9ce 	bl	800425c <HAL_GPIO_ReadPin>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <StartReadInput4+0x54>)
 8001ec6:	735a      	strb	r2, [r3, #13]
	  inputs[14] = HAL_GPIO_ReadPin(OUT1_OP15_GPIO_Port, OUT1_OP15_Pin);
 8001ec8:	2108      	movs	r1, #8
 8001eca:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <StartReadInput4+0x50>)
 8001ecc:	f002 f9c6 	bl	800425c <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <StartReadInput4+0x54>)
 8001ed6:	739a      	strb	r2, [r3, #14]
	  inputs[15] = HAL_GPIO_ReadPin(OUT1_OP16_GPIO_Port, OUT1_OP16_Pin);
 8001ed8:	2110      	movs	r1, #16
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <StartReadInput4+0x50>)
 8001edc:	f002 f9be 	bl	800425c <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <StartReadInput4+0x54>)
 8001ee6:	73da      	strb	r2, [r3, #15]
    osDelay(1);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f003 fd91 	bl	8005a10 <osDelay>
	  inputs[12] = HAL_GPIO_ReadPin(OUT1_OP13_GPIO_Port, OUT1_OP13_Pin);
 8001eee:	e7db      	b.n	8001ea8 <StartReadInput4+0x8>
 8001ef0:	40010c00 	.word	0x40010c00
 8001ef4:	200000cc 	.word	0x200000cc

08001ef8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f0a:	f001 fd03 	bl	8003914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40012c00 	.word	0x40012c00

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_MspInit+0x68>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <HAL_MspInit+0x68>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6193      	str	r3, [r2, #24]
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_MspInit+0x68>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_MspInit+0x68>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <HAL_MspInit+0x68>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_MspInit+0x68>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	210f      	movs	r1, #15
 8001f62:	f06f 0001 	mvn.w	r0, #1
 8001f66:	f001 fdc8 	bl	8003afa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_MspInit+0x6c>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_MspInit+0x6c>)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010000 	.word	0x40010000

08001f98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a16      	ldr	r2, [pc, #88]	; (800200c <HAL_I2C_MspInit+0x74>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d124      	bne.n	8002002 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_I2C_MspInit+0x78>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a14      	ldr	r2, [pc, #80]	; (8002010 <HAL_I2C_MspInit+0x78>)
 8001fbe:	f043 0308 	orr.w	r3, r3, #8
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_I2C_MspInit+0x78>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fd0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd6:	2312      	movs	r3, #18
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480b      	ldr	r0, [pc, #44]	; (8002014 <HAL_I2C_MspInit+0x7c>)
 8001fe6:	f001 ffdf 	bl	8003fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_I2C_MspInit+0x78>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <HAL_I2C_MspInit+0x78>)
 8001ff0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_I2C_MspInit+0x78>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40005800 	.word	0x40005800
 8002010:	40021000 	.word	0x40021000
 8002014:	40010c00 	.word	0x40010c00

08002018 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <HAL_SPI_MspInit+0x8c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d131      	bne.n	800209c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_SPI_MspInit+0x90>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	4a1a      	ldr	r2, [pc, #104]	; (80020a8 <HAL_SPI_MspInit+0x90>)
 800203e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002042:	61d3      	str	r3, [r2, #28]
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_SPI_MspInit+0x90>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_SPI_MspInit+0x90>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <HAL_SPI_MspInit+0x90>)
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_SPI_MspInit+0x90>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8002068:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800206c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	4619      	mov	r1, r3
 800207c:	480b      	ldr	r0, [pc, #44]	; (80020ac <HAL_SPI_MspInit+0x94>)
 800207e:	f001 ff93 	bl	8003fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8002082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	4619      	mov	r1, r3
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <HAL_SPI_MspInit+0x94>)
 8002098:	f001 ff86 	bl	8003fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800209c:	bf00      	nop
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40003800 	.word	0x40003800
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010c00 	.word	0x40010c00

080020b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	; 0x30
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	2019      	movs	r0, #25
 80020c6:	f001 fd18 	bl	8003afa <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80020ca:	2019      	movs	r0, #25
 80020cc:	f001 fd31 	bl	8003b32 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <HAL_InitTick+0x9c>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_InitTick+0x9c>)
 80020d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_InitTick+0x9c>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020e8:	f107 0210 	add.w	r2, r7, #16
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f002 fe18 	bl	8004d28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020f8:	f002 fe02 	bl	8004d00 <HAL_RCC_GetPCLK2Freq>
 80020fc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	4a13      	ldr	r2, [pc, #76]	; (8002150 <HAL_InitTick+0xa0>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0c9b      	lsrs	r3, r3, #18
 8002108:	3b01      	subs	r3, #1
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_InitTick+0xa4>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_InitTick+0xa8>)
 8002110:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_InitTick+0xa4>)
 8002114:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002118:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800211a:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <HAL_InitTick+0xa4>)
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_InitTick+0xa4>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_InitTick+0xa4>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <HAL_InitTick+0xa4>)
 800212e:	f003 f915 	bl	800535c <HAL_TIM_Base_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d104      	bne.n	8002142 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002138:	4806      	ldr	r0, [pc, #24]	; (8002154 <HAL_InitTick+0xa4>)
 800213a:	f003 f967 	bl	800540c <HAL_TIM_Base_Start_IT>
 800213e:	4603      	mov	r3, r0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3730      	adds	r7, #48	; 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	431bde83 	.word	0x431bde83
 8002154:	20002df4 	.word	0x20002df4
 8002158:	40012c00 	.word	0x40012c00

0800215c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <HardFault_Handler+0x4>

0800216e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <MemManage_Handler+0x4>

08002174 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <BusFault_Handler+0x4>

0800217a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <UsageFault_Handler+0x4>

08002180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <TIM1_UP_IRQHandler+0x10>)
 8002192:	f003 f98d 	bl	80054b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20002df4 	.word	0x20002df4

080021a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <_sbrk+0x5c>)
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <_sbrk+0x60>)
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <_sbrk+0x64>)
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <_sbrk+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d207      	bcs.n	80021e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d0:	f005 ffa4 	bl	800811c <__errno>
 80021d4:	4602      	mov	r2, r0
 80021d6:	230c      	movs	r3, #12
 80021d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	e009      	b.n	80021f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <_sbrk+0x64>)
 80021f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20005000 	.word	0x20005000
 8002200:	00000400 	.word	0x00000400
 8002204:	200000dc 	.word	0x200000dc
 8002208:	20002ea8 	.word	0x20002ea8

0800220c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002218:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800221a:	e003      	b.n	8002224 <LoopCopyDataInit>

0800221c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800221e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002220:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002222:	3104      	adds	r1, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002224:	480a      	ldr	r0, [pc, #40]	; (8002250 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002228:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800222a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800222c:	d3f6      	bcc.n	800221c <CopyDataInit>
  ldr r2, =_sbss
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002230:	e002      	b.n	8002238 <LoopFillZerobss>

08002232 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002234:	f842 3b04 	str.w	r3, [r2], #4

08002238 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800223a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800223c:	d3f9      	bcc.n	8002232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800223e:	f7ff ffe5 	bl	800220c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002242:	f005 ff71 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002246:	f7fd ff8b 	bl	8000160 <main>
  bx lr
 800224a:	4770      	bx	lr
  ldr r3, =_sidata
 800224c:	0800930c 	.word	0x0800930c
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002254:	200000b0 	.word	0x200000b0
  ldr r2, =_sbss
 8002258:	200000b0 	.word	0x200000b0
  ldr r3, = _ebss
 800225c:	20002ea4 	.word	0x20002ea4

08002260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC1_2_IRQHandler>
	...

08002264 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4604      	mov	r4, r0
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4623      	mov	r3, r4
 8002274:	71fb      	strb	r3, [r7, #7]
 8002276:	4603      	mov	r3, r0
 8002278:	71bb      	strb	r3, [r7, #6]
 800227a:	460b      	mov	r3, r1
 800227c:	80bb      	strh	r3, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d902      	bls.n	800228e <socket+0x2a>
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	e0d3      	b.n	8002436 <socket+0x1d2>
	switch(protocol)
 800228e:	79bb      	ldrb	r3, [r7, #6]
 8002290:	2b01      	cmp	r3, #1
 8002292:	db03      	blt.n	800229c <socket+0x38>
 8002294:	2b02      	cmp	r3, #2
 8002296:	dd04      	ble.n	80022a2 <socket+0x3e>
 8002298:	2b04      	cmp	r3, #4
 800229a:	d002      	beq.n	80022a2 <socket+0x3e>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800229c:	f06f 0304 	mvn.w	r3, #4
 80022a0:	e0c9      	b.n	8002436 <socket+0x1d2>
         break;
 80022a2:	bf00      	nop
	}
	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	f003 0306 	and.w	r3, r3, #6
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <socket+0x50>
 80022ae:	f06f 0305 	mvn.w	r3, #5
 80022b2:	e0c0      	b.n	8002436 <socket+0x1d2>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif

	if(flag != 0)
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d025      	beq.n	8002306 <socket+0xa2>
	{
   	switch(protocol)
 80022ba:	79bb      	ldrb	r3, [r7, #6]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d002      	beq.n	80022c6 <socket+0x62>
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d008      	beq.n	80022d6 <socket+0x72>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80022c4:	e024      	b.n	8002310 <socket+0xac>
   	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d11c      	bne.n	800230a <socket+0xa6>
 80022d0:	f06f 0305 	mvn.w	r3, #5
 80022d4:	e0af      	b.n	8002436 <socket+0x1d2>
   	      if(flag & SF_IGMP_VER2)
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <socket+0x8a>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80022e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db02      	blt.n	80022ee <socket+0x8a>
 80022e8:	f06f 0305 	mvn.w	r3, #5
 80022ec:	e0a3      	b.n	8002436 <socket+0x1d2>
      	      if(flag & SF_UNI_BLOCK)
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <socket+0xaa>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80022f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db06      	blt.n	800230e <socket+0xaa>
 8002300:	f06f 0305 	mvn.w	r3, #5
 8002304:	e097      	b.n	8002436 <socket+0x1d2>
   	}
   }
 8002306:	bf00      	nop
 8002308:	e002      	b.n	8002310 <socket+0xac>
   	      break;
 800230a:	bf00      	nop
 800230c:	e000      	b.n	8002310 <socket+0xac>
   	      break;
 800230e:	bf00      	nop
	close(sn);
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f89e 	bl	8002454 <close>
	setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	3301      	adds	r3, #1
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4618      	mov	r0, r3
 8002322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002326:	f023 030f 	bic.w	r3, r3, #15
 800232a:	b25a      	sxtb	r2, r3
 800232c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002330:	4313      	orrs	r3, r2
 8002332:	b25b      	sxtb	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4619      	mov	r1, r3
 8002338:	f000 fba4 	bl	8002a84 <WIZCHIP_WRITE>
	if(!port)
 800233c:	88bb      	ldrh	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d110      	bne.n	8002364 <socket+0x100>
	{
	   port = sock_any_port++;
 8002342:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <socket+0x1dc>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	b291      	uxth	r1, r2
 800234a:	4a3d      	ldr	r2, [pc, #244]	; (8002440 <socket+0x1dc>)
 800234c:	8011      	strh	r1, [r2, #0]
 800234e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002350:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <socket+0x1dc>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002358:	4293      	cmp	r3, r2
 800235a:	d103      	bne.n	8002364 <socket+0x100>
 800235c:	4b38      	ldr	r3, [pc, #224]	; (8002440 <socket+0x1dc>)
 800235e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002362:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	3301      	adds	r3, #1
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002370:	461a      	mov	r2, r3
 8002372:	88bb      	ldrh	r3, [r7, #4]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	b29b      	uxth	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f000 fb81 	bl	8002a84 <WIZCHIP_WRITE>
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	3301      	adds	r3, #1
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238e:	461a      	mov	r2, r3
 8002390:	88bb      	ldrh	r3, [r7, #4]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f000 fb74 	bl	8002a84 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	3301      	adds	r3, #1
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023a8:	2101      	movs	r1, #1
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fb6a 	bl	8002a84 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80023b0:	bf00      	nop
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	3301      	adds	r3, #1
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fb30 	bl	8002a24 <WIZCHIP_READ>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f3      	bne.n	80023b2 <socket+0x14e>
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	f003 0201 	and.w	r2, r3, #1
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <socket+0x1e0>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	b21b      	sxth	r3, r3
 80023de:	4313      	orrs	r3, r2
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <socket+0x1e0>)
 80023e6:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	2201      	movs	r2, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <socket+0x1e4>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	4013      	ands	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	b29a      	uxth	r2, r3
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <socket+0x1e4>)
 8002404:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	4a10      	ldr	r2, [pc, #64]	; (800244c <socket+0x1e8>)
 800240a:	2100      	movs	r1, #0
 800240c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = 0;
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <socket+0x1ec>)
 8002414:	2100      	movs	r1, #0
 8002416:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002418:	bf00      	nop
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	3301      	adds	r3, #1
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fafc 	bl	8002a24 <WIZCHIP_READ>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f3      	beq.n	800241a <socket+0x1b6>
   return (int8_t)sn;
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}
 800243e:	bf00      	nop
 8002440:	2000001c 	.word	0x2000001c
 8002444:	200000e0 	.word	0x200000e0
 8002448:	200000e2 	.word	0x200000e2
 800244c:	200000e4 	.word	0x200000e4
 8002450:	200000f4 	.word	0x200000f4

08002454 <close>:

int8_t close(uint8_t sn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d902      	bls.n	800246a <close+0x16>
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	e046      	b.n	80024f8 <close+0xa4>

	setSn_CR(sn,Sn_CR_CLOSE);
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	3301      	adds	r3, #1
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002476:	2110      	movs	r1, #16
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fb03 	bl	8002a84 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800247e:	bf00      	nop
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	3301      	adds	r3, #1
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fac9 	bl	8002a24 <WIZCHIP_READ>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f3      	bne.n	8002480 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	3301      	adds	r3, #1
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80024a4:	211f      	movs	r1, #31
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 faec 	bl	8002a84 <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2201      	movs	r2, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <close+0xac>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b21b      	sxth	r3, r3
 80024c0:	4013      	ands	r3, r2
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <close+0xac>)
 80024c8:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <close+0xb0>)
 80024ce:	2100      	movs	r1, #0
 80024d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <close+0xb4>)
 80024d8:	2100      	movs	r1, #0
 80024da:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80024dc:	bf00      	nop
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	3301      	adds	r3, #1
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fa9a 	bl	8002a24 <WIZCHIP_READ>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f3      	bne.n	80024de <close+0x8a>
	return SOCK_OK;
 80024f6:	2301      	movs	r3, #1
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200000e2 	.word	0x200000e2
 8002504:	200000e4 	.word	0x200000e4
 8002508:	200000f4 	.word	0x200000f4

0800250c <listen>:

int8_t listen(uint8_t sn)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d902      	bls.n	8002522 <listen+0x16>
 800251c:	f04f 33ff 	mov.w	r3, #4294967295
 8002520:	e055      	b.n	80025ce <listen+0xc2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	3301      	adds	r3, #1
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fa7a 	bl	8002a24 <WIZCHIP_READ>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	2b01      	cmp	r3, #1
 8002538:	d002      	beq.n	8002540 <listen+0x34>
 800253a:	f06f 0304 	mvn.w	r3, #4
 800253e:	e046      	b.n	80025ce <listen+0xc2>
	CHECK_SOCKINIT();
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	3301      	adds	r3, #1
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fa69 	bl	8002a24 <WIZCHIP_READ>
 8002552:	4603      	mov	r3, r0
 8002554:	2b13      	cmp	r3, #19
 8002556:	d002      	beq.n	800255e <listen+0x52>
 8002558:	f06f 0302 	mvn.w	r3, #2
 800255c:	e037      	b.n	80025ce <listen+0xc2>
	setSn_CR(sn,Sn_CR_LISTEN);
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	3301      	adds	r3, #1
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800256a:	2102      	movs	r1, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fa89 	bl	8002a84 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8002572:	bf00      	nop
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	3301      	adds	r3, #1
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fa4f 	bl	8002a24 <WIZCHIP_READ>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f3      	bne.n	8002574 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800258c:	e012      	b.n	80025b4 <listen+0xa8>
   {
      if(getSn_CR(sn) == SOCK_CLOSED)
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	3301      	adds	r3, #1
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fa42 	bl	8002a24 <WIZCHIP_READ>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <listen+0xa8>
      {
         close(sn);
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff53 	bl	8002454 <close>
         return SOCKERR_SOCKCLOSED;
 80025ae:	f06f 0303 	mvn.w	r3, #3
 80025b2:	e00c      	b.n	80025ce <listen+0xc2>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	3301      	adds	r3, #1
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fa2f 	bl	8002a24 <WIZCHIP_READ>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b14      	cmp	r3, #20
 80025ca:	d1e0      	bne.n	800258e <listen+0x82>
      }
   }
   return SOCK_OK;
 80025cc:	2301      	movs	r3, #1
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <disconnect>:

   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d902      	bls.n	80025ee <disconnect+0x16>
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ec:	e062      	b.n	80026b4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	3301      	adds	r3, #1
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fa14 	bl	8002a24 <WIZCHIP_READ>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	2b01      	cmp	r3, #1
 8002604:	d002      	beq.n	800260c <disconnect+0x34>
 8002606:	f06f 0304 	mvn.w	r3, #4
 800260a:	e053      	b.n	80026b4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	3301      	adds	r3, #1
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002618:	2108      	movs	r1, #8
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fa32 	bl	8002a84 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002620:	bf00      	nop
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	3301      	adds	r3, #1
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f9f8 	bl	8002a24 <WIZCHIP_READ>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f3      	bne.n	8002622 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2201      	movs	r2, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	b21b      	sxth	r3, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	b21a      	sxth	r2, r3
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <disconnect+0xe4>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b21b      	sxth	r3, r3
 800264e:	4013      	ands	r3, r2
 8002650:	b21b      	sxth	r3, r3
 8002652:	b29a      	uxth	r2, r3
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <disconnect+0xe4>)
 8002656:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <disconnect+0xe8>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	fa42 f303 	asr.w	r3, r2, r3
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d016      	beq.n	800269a <disconnect+0xc2>
 800266c:	2300      	movs	r3, #0
 800266e:	e021      	b.n	80026b4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3301      	adds	r3, #1
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f9d1 	bl	8002a24 <WIZCHIP_READ>
 8002682:	4603      	mov	r3, r0
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <disconnect+0xc2>
	   {
	      close(sn);
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fee0 	bl	8002454 <close>
	      return SOCKERR_TIMEOUT;
 8002694:	f06f 030c 	mvn.w	r3, #12
 8002698:	e00c      	b.n	80026b4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	3301      	adds	r3, #1
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f9bc 	bl	8002a24 <WIZCHIP_READ>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1de      	bne.n	8002670 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200000e2 	.word	0x200000e2
 80026c0:	200000e0 	.word	0x200000e0

080026c4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
 80026d0:	4613      	mov	r3, r2
 80026d2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80026d8:	2300      	movs	r3, #0
 80026da:	81bb      	strh	r3, [r7, #12]

   CHECK_SOCKNUM();
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d902      	bls.n	80026e8 <send+0x24>
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	e0de      	b.n	80028a6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	3301      	adds	r3, #1
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 f997 	bl	8002a24 <WIZCHIP_READ>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d002      	beq.n	8002706 <send+0x42>
 8002700:	f06f 0304 	mvn.w	r3, #4
 8002704:	e0cf      	b.n	80028a6 <send+0x1e2>
   CHECK_SOCKDATA();
 8002706:	88bb      	ldrh	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <send+0x4e>
 800270c:	f06f 030d 	mvn.w	r3, #13
 8002710:	e0c9      	b.n	80028a6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	3301      	adds	r3, #1
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f980 	bl	8002a24 <WIZCHIP_READ>
 8002724:	4603      	mov	r3, r0
 8002726:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	2b17      	cmp	r3, #23
 800272c:	d005      	beq.n	800273a <send+0x76>
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b1c      	cmp	r3, #28
 8002732:	d002      	beq.n	800273a <send+0x76>
 8002734:	f06f 0306 	mvn.w	r3, #6
 8002738:	e0b5      	b.n	80028a6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800273a:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <send+0x1ec>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	fa42 f303 	asr.w	r3, r2, r3
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d039      	beq.n	80027c2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	3301      	adds	r3, #1
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f962 	bl	8002a24 <WIZCHIP_READ>
 8002760:	4603      	mov	r3, r0
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d019      	beq.n	80027a6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	3301      	adds	r3, #1
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800277e:	2110      	movs	r1, #16
 8002780:	4618      	mov	r0, r3
 8002782:	f000 f97f 	bl	8002a84 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2201      	movs	r2, #1
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	b21b      	sxth	r3, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	b21a      	sxth	r2, r3
 8002794:	4b46      	ldr	r3, [pc, #280]	; (80028b0 <send+0x1ec>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b21b      	sxth	r3, r3
 800279a:	4013      	ands	r3, r2
 800279c:	b21b      	sxth	r3, r3
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <send+0x1ec>)
 80027a2:	801a      	strh	r2, [r3, #0]
 80027a4:	e00d      	b.n	80027c2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <send+0xfa>
      {
         close(sn);
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fe4e 	bl	8002454 <close>
         return SOCKERR_TIMEOUT;
 80027b8:	f06f 030c 	mvn.w	r3, #12
 80027bc:	e073      	b.n	80028a6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80027be:	2300      	movs	r3, #0
 80027c0:	e071      	b.n	80028a6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	3301      	adds	r3, #1
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f928 	bl	8002a24 <WIZCHIP_READ>
 80027d4:	4603      	mov	r3, r0
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	029b      	lsls	r3, r3, #10
 80027da:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80027dc:	88ba      	ldrh	r2, [r7, #4]
 80027de:	89bb      	ldrh	r3, [r7, #12]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d901      	bls.n	80027e8 <send+0x124>
 80027e4:	89bb      	ldrh	r3, [r7, #12]
 80027e6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fa0c 	bl	8002c08 <getSn_TX_FSR>
 80027f0:	4603      	mov	r3, r0
 80027f2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	3301      	adds	r3, #1
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f90f 	bl	8002a24 <WIZCHIP_READ>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b17      	cmp	r3, #23
 800280e:	d009      	beq.n	8002824 <send+0x160>
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b1c      	cmp	r3, #28
 8002814:	d006      	beq.n	8002824 <send+0x160>
      {
         close(sn);
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fe1b 	bl	8002454 <close>
         return SOCKERR_SOCKSTATUS;
 800281e:	f06f 0306 	mvn.w	r3, #6
 8002822:	e040      	b.n	80028a6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <send+0x1f0>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	fa42 f303 	asr.w	r3, r2, r3
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <send+0x180>
 8002838:	88ba      	ldrh	r2, [r7, #4]
 800283a:	89bb      	ldrh	r3, [r7, #12]
 800283c:	429a      	cmp	r2, r3
 800283e:	d901      	bls.n	8002844 <send+0x180>
 8002840:	2300      	movs	r3, #0
 8002842:	e030      	b.n	80028a6 <send+0x1e2>
      if(len <= freesize) break;
 8002844:	88ba      	ldrh	r2, [r7, #4]
 8002846:	89bb      	ldrh	r3, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d900      	bls.n	800284e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800284c:	e7cc      	b.n	80027e8 <send+0x124>
      if(len <= freesize) break;
 800284e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002850:	88ba      	ldrh	r2, [r7, #4]
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	6839      	ldr	r1, [r7, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fa6c 	bl	8002d34 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	3301      	adds	r3, #1
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002868:	2120      	movs	r1, #32
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f90a 	bl	8002a84 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002870:	bf00      	nop
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	3301      	adds	r3, #1
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f8d0 	bl	8002a24 <WIZCHIP_READ>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f3      	bne.n	8002872 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	2201      	movs	r2, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	b21a      	sxth	r2, r3
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <send+0x1ec>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b21b      	sxth	r3, r3
 800289a:	4313      	orrs	r3, r2
 800289c:	b21b      	sxth	r3, r3
 800289e:	b29a      	uxth	r2, r3
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <send+0x1ec>)
 80028a2:	801a      	strh	r2, [r3, #0]
   return len;
 80028a4:	88bb      	ldrh	r3, [r7, #4]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200000e2 	.word	0x200000e2
 80028b4:	200000e0 	.word	0x200000e0

080028b8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	81bb      	strh	r3, [r7, #12]
   CHECK_SOCKNUM();
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d902      	bls.n	80028dc <recv+0x24>
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e09c      	b.n	8002a16 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	3301      	adds	r3, #1
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 f89d 	bl	8002a24 <WIZCHIP_READ>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d002      	beq.n	80028fa <recv+0x42>
 80028f4:	f06f 0304 	mvn.w	r3, #4
 80028f8:	e08d      	b.n	8002a16 <recv+0x15e>
   CHECK_SOCKDATA();
 80028fa:	88bb      	ldrh	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <recv+0x4e>
 8002900:	f06f 030d 	mvn.w	r3, #13
 8002904:	e087      	b.n	8002a16 <recv+0x15e>

   recvsize = getSn_RxMAX(sn);
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	3301      	adds	r3, #1
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f886 	bl	8002a24 <WIZCHIP_READ>
 8002918:	4603      	mov	r3, r0
 800291a:	b29b      	uxth	r3, r3
 800291c:	029b      	lsls	r3, r3, #10
 800291e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002920:	89ba      	ldrh	r2, [r7, #12]
 8002922:	88bb      	ldrh	r3, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	d201      	bcs.n	800292c <recv+0x74>
 8002928:	89bb      	ldrh	r3, [r7, #12]
 800292a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f9b5 	bl	8002c9e <getSn_RX_RSR>
 8002934:	4603      	mov	r3, r0
 8002936:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	3301      	adds	r3, #1
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f86d 	bl	8002a24 <WIZCHIP_READ>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	2b17      	cmp	r3, #23
 8002952:	d026      	beq.n	80029a2 <recv+0xea>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b1c      	cmp	r3, #28
 8002958:	d11c      	bne.n	8002994 <recv+0xdc>
         {
            if(recvsize != 0) break;
 800295a:	89bb      	ldrh	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d133      	bne.n	80029c8 <recv+0x110>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f950 	bl	8002c08 <getSn_TX_FSR>
 8002968:	4603      	mov	r3, r0
 800296a:	461c      	mov	r4, r3
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	3301      	adds	r3, #1
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f853 	bl	8002a24 <WIZCHIP_READ>
 800297e:	4603      	mov	r3, r0
 8002980:	029b      	lsls	r3, r3, #10
 8002982:	429c      	cmp	r4, r3
 8002984:	d10d      	bne.n	80029a2 <recv+0xea>
            {
               close(sn);
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fd63 	bl	8002454 <close>
               return SOCKERR_SOCKSTATUS;
 800298e:	f06f 0306 	mvn.w	r3, #6
 8002992:	e040      	b.n	8002a16 <recv+0x15e>
            }
         }
         else
         {
            close(sn);
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fd5c 	bl	8002454 <close>
            return SOCKERR_SOCKSTATUS;
 800299c:	f06f 0306 	mvn.w	r3, #6
 80029a0:	e039      	b.n	8002a16 <recv+0x15e>
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80029a2:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <recv+0x168>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	fa42 f303 	asr.w	r3, r2, r3
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <recv+0x108>
 80029b6:	89bb      	ldrh	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <recv+0x108>
 80029bc:	2300      	movs	r3, #0
 80029be:	e02a      	b.n	8002a16 <recv+0x15e>
      if(recvsize != 0) break;
 80029c0:	89bb      	ldrh	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <recv+0x114>
      recvsize = getSn_RX_RSR(sn);
 80029c6:	e7b1      	b.n	800292c <recv+0x74>
            if(recvsize != 0) break;
 80029c8:	bf00      	nop
 80029ca:	e000      	b.n	80029ce <recv+0x116>
      if(recvsize != 0) break;
 80029cc:	bf00      	nop
   };
   if(recvsize < len) len = recvsize;
 80029ce:	89ba      	ldrh	r2, [r7, #12]
 80029d0:	88bb      	ldrh	r3, [r7, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d201      	bcs.n	80029da <recv+0x122>
 80029d6:	89bb      	ldrh	r3, [r7, #12]
 80029d8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80029da:	88ba      	ldrh	r2, [r7, #4]
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	6839      	ldr	r1, [r7, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fa03 	bl	8002dec <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	3301      	adds	r3, #1
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029f2:	2140      	movs	r1, #64	; 0x40
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f845 	bl	8002a84 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80029fa:	bf00      	nop
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	3301      	adds	r3, #1
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f80b 	bl	8002a24 <WIZCHIP_READ>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f3      	bne.n	80029fc <recv+0x144>
   return len;
 8002a14:	88bb      	ldrh	r3, [r7, #4]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200000e0 	.word	0x200000e0

08002a24 <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <WIZCHIP_READ+0x5c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <WIZCHIP_READ+0x5c>)
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	4798      	blx	r3
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <WIZCHIP_READ+0x5c>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	0c12      	lsrs	r2, r2, #16
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	4610      	mov	r0, r2
 8002a44:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <WIZCHIP_READ+0x5c>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	0a12      	lsrs	r2, r2, #8
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	4610      	mov	r0, r2
 8002a52:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <WIZCHIP_READ+0x5c>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <WIZCHIP_READ+0x5c>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	4798      	blx	r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	73fb      	strb	r3, [r7, #15]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"
#endif

   WIZCHIP.CS._deselect();
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <WIZCHIP_READ+0x5c>)
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <WIZCHIP_READ+0x5c>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4798      	blx	r3
   return ret;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000020 	.word	0x20000020

08002a84 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
    WIZCHIP_CRITICAL_ENTER();
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <WIZCHIP_WRITE+0x68>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4798      	blx	r3
    WIZCHIP.CS._select();
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <WIZCHIP_WRITE+0x68>)
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f043 0304 	orr.w	r3, r3, #4
 8002aa2:	607b      	str	r3, [r7, #4]
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <WIZCHIP_WRITE+0x68>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	0c12      	lsrs	r2, r2, #16
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <WIZCHIP_WRITE+0x68>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	0a12      	lsrs	r2, r2, #8
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	4610      	mov	r0, r2
 8002abe:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <WIZCHIP_WRITE+0x68>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <WIZCHIP_WRITE+0x68>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <WIZCHIP_WRITE+0x68>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <WIZCHIP_WRITE+0x68>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4798      	blx	r3
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000020 	.word	0x20000020

08002af0 <WIZCHIP_READ_BUF>:

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	4613      	mov	r3, r2
 8002afc:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <WIZCHIP_READ_BUF+0x84>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <WIZCHIP_READ_BUF+0x84>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <WIZCHIP_READ_BUF+0x84>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002b20:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <WIZCHIP_READ_BUF+0x84>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	0a12      	lsrs	r2, r2, #8
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <WIZCHIP_READ_BUF+0x84>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	4610      	mov	r0, r2
 8002b38:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	82fb      	strh	r3, [r7, #22]
 8002b3e:	e00a      	b.n	8002b56 <WIZCHIP_READ_BUF+0x66>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <WIZCHIP_READ_BUF+0x84>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	8afa      	ldrh	r2, [r7, #22]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	188c      	adds	r4, r1, r2
 8002b4a:	4798      	blx	r3
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	7023      	strb	r3, [r4, #0]
      for(i = 0; i < len; i++,j)
 8002b50:	8afb      	ldrh	r3, [r7, #22]
 8002b52:	3301      	adds	r3, #1
 8002b54:	82fb      	strh	r3, [r7, #22]
 8002b56:	8afa      	ldrh	r2, [r7, #22]
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d3f0      	bcc.n	8002b40 <WIZCHIP_READ_BUF+0x50>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <WIZCHIP_READ_BUF+0x84>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <WIZCHIP_READ_BUF+0x84>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4798      	blx	r3
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd90      	pop	{r4, r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000020 	.word	0x20000020

08002b78 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <WIZCHIP_WRITE_BUF+0x8c>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <WIZCHIP_WRITE_BUF+0x8c>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	60fb      	str	r3, [r7, #12]
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <WIZCHIP_WRITE_BUF+0x8c>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	0c12      	lsrs	r2, r2, #16
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	4610      	mov	r0, r2
 8002bae:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002bb0:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <WIZCHIP_WRITE_BUF+0x8c>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	0a12      	lsrs	r2, r2, #8
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <WIZCHIP_WRITE_BUF+0x8c>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	82fb      	strh	r3, [r7, #22]
 8002bce:	e00a      	b.n	8002be6 <WIZCHIP_WRITE_BUF+0x6e>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <WIZCHIP_WRITE_BUF+0x8c>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	8afa      	ldrh	r2, [r7, #22]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	440a      	add	r2, r1
 8002bda:	7812      	ldrb	r2, [r2, #0]
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8002be0:	8afb      	ldrh	r3, [r7, #22]
 8002be2:	3301      	adds	r3, #1
 8002be4:	82fb      	strh	r3, [r7, #22]
 8002be6:	8afa      	ldrh	r2, [r7, #22]
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d3f0      	bcc.n	8002bd0 <WIZCHIP_WRITE_BUF+0x58>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <WIZCHIP_WRITE_BUF+0x8c>)
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <WIZCHIP_WRITE_BUF+0x8c>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4798      	blx	r3
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000020 	.word	0x20000020

08002c08 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	81fb      	strh	r3, [r7, #14]
 8002c16:	2300      	movs	r3, #0
 8002c18:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	3301      	adds	r3, #1
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fefc 	bl	8002a24 <WIZCHIP_READ>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002c30:	89bb      	ldrh	r3, [r7, #12]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	b29c      	uxth	r4, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff feee 	bl	8002a24 <WIZCHIP_READ>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	4423      	add	r3, r4
 8002c4e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002c50:	89bb      	ldrh	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01a      	beq.n	8002c8c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fede 	bl	8002a24 <WIZCHIP_READ>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002c6c:	89fb      	ldrh	r3, [r7, #14]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	b29c      	uxth	r4, r3
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	3301      	adds	r3, #1
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fed0 	bl	8002a24 <WIZCHIP_READ>
 8002c84:	4603      	mov	r3, r0
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	4423      	add	r3, r4
 8002c8a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002c8c:	89fa      	ldrh	r2, [r7, #14]
 8002c8e:	89bb      	ldrh	r3, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1c2      	bne.n	8002c1a <getSn_TX_FSR+0x12>
   return val;
 8002c94:	89fb      	ldrh	r3, [r7, #14]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd90      	pop	{r4, r7, pc}

08002c9e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002c9e:	b590      	push	{r4, r7, lr}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	81fb      	strh	r3, [r7, #14]
 8002cac:	2300      	movs	r3, #0
 8002cae:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff feb1 	bl	8002a24 <WIZCHIP_READ>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002cc6:	89bb      	ldrh	r3, [r7, #12]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	b29c      	uxth	r4, r3
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fea3 	bl	8002a24 <WIZCHIP_READ>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4423      	add	r3, r4
 8002ce4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002ce6:	89bb      	ldrh	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01a      	beq.n	8002d22 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fe93 	bl	8002a24 <WIZCHIP_READ>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002d02:	89fb      	ldrh	r3, [r7, #14]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	b29c      	uxth	r4, r3
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fe85 	bl	8002a24 <WIZCHIP_READ>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	4423      	add	r3, r4
 8002d20:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002d22:	89fa      	ldrh	r2, [r7, #14]
 8002d24:	89bb      	ldrh	r3, [r7, #12]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d1c2      	bne.n	8002cb0 <getSn_RX_RSR+0x12>
   return val;
 8002d2a:	89fb      	ldrh	r3, [r7, #14]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd90      	pop	{r4, r7, pc}

08002d34 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
 8002d40:	4613      	mov	r3, r2
 8002d42:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
   if(len == 0)  return;
 8002d4c:	88bb      	ldrh	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d048      	beq.n	8002de4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	3301      	adds	r3, #1
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fe60 	bl	8002a24 <WIZCHIP_READ>
 8002d64:	4603      	mov	r3, r0
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	b29c      	uxth	r4, r3
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	3301      	adds	r3, #1
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fe53 	bl	8002a24 <WIZCHIP_READ>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	4423      	add	r3, r4
 8002d84:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002d86:	89fb      	ldrh	r3, [r7, #14]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	79fa      	ldrb	r2, [r7, #7]
 8002d8c:	0092      	lsls	r2, r2, #2
 8002d8e:	3202      	adds	r2, #2
 8002d90:	00d2      	lsls	r2, r2, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002d96:	88bb      	ldrh	r3, [r7, #4]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	68b8      	ldr	r0, [r7, #8]
 8002d9e:	f7ff feeb 	bl	8002b78 <WIZCHIP_WRITE_BUF>

   ptr += len;
 8002da2:	89fa      	ldrh	r2, [r7, #14]
 8002da4:	88bb      	ldrh	r3, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	3301      	adds	r3, #1
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002db6:	461a      	mov	r2, r3
 8002db8:	89fb      	ldrh	r3, [r7, #14]
 8002dba:	0a1b      	lsrs	r3, r3, #8
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7ff fe5e 	bl	8002a84 <WIZCHIP_WRITE>
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	3301      	adds	r3, #1
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	89fb      	ldrh	r3, [r7, #14]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4610      	mov	r0, r2
 8002dde:	f7ff fe51 	bl	8002a84 <WIZCHIP_WRITE>
 8002de2:	e000      	b.n	8002de6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002de4:	bf00      	nop
}
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd90      	pop	{r4, r7, pc}

08002dec <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]

   if(len == 0) return;
 8002e04:	88bb      	ldrh	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d048      	beq.n	8002e9c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	3301      	adds	r3, #1
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fe04 	bl	8002a24 <WIZCHIP_READ>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	b29c      	uxth	r4, r3
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	3301      	adds	r3, #1
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fdf7 	bl	8002a24 <WIZCHIP_READ>
 8002e36:	4603      	mov	r3, r0
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4423      	add	r3, r4
 8002e3c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002e3e:	89fb      	ldrh	r3, [r7, #14]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	79fa      	ldrb	r2, [r7, #7]
 8002e44:	0092      	lsls	r2, r2, #2
 8002e46:	3203      	adds	r2, #3
 8002e48:	00d2      	lsls	r2, r2, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002e4e:	88bb      	ldrh	r3, [r7, #4]
 8002e50:	461a      	mov	r2, r3
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	68b8      	ldr	r0, [r7, #8]
 8002e56:	f7ff fe4b 	bl	8002af0 <WIZCHIP_READ_BUF>
   ptr += len;
 8002e5a:	89fa      	ldrh	r2, [r7, #14]
 8002e5c:	88bb      	ldrh	r3, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	81fb      	strh	r3, [r7, #14]

   setSn_RX_RD(sn,ptr);
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	3301      	adds	r3, #1
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002e6e:	461a      	mov	r2, r3
 8002e70:	89fb      	ldrh	r3, [r7, #14]
 8002e72:	0a1b      	lsrs	r3, r3, #8
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f7ff fe02 	bl	8002a84 <WIZCHIP_WRITE>
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	3301      	adds	r3, #1
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	89fb      	ldrh	r3, [r7, #14]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	4619      	mov	r1, r3
 8002e94:	4610      	mov	r0, r2
 8002e96:	f7ff fdf5 	bl	8002a84 <WIZCHIP_WRITE>
 8002e9a:	e000      	b.n	8002e9e <wiz_recv_data+0xb2>
   if(len == 0) return;
 8002e9c:	bf00      	nop
}
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd90      	pop	{r4, r7, pc}

08002ea4 <wizchip_cris_enter>:
/**
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_enter(void)           {};
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <wizchip_cris_exit>:
/**
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_exit(void)          {};
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <wizchip_cs_select>:
/**
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_select(void)            {};
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <wizchip_cs_deselect>:
/**
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_deselect(void)          {};
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <wizchip_bus_readbyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20140501 : Explict pointer type casting
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); };
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <wizchip_bus_writebyte>:
 * null function is called.
 */

//M20140501 : Explict pointer type casting
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*) AddrSel) = wb; };
void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; };
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <wizchip_spi_readbyte>:
/**
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_spi_readbyte(void)        {return 0;};
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <wizchip_spi_writebyte>:
/**
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_spi_writebyte(uint8_t wb) {};
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	71fb      	strb	r3, [r7, #7]
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
	...

08002f2c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <reg_wizchip_cs_cbfunc+0x16>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <reg_wizchip_cs_cbfunc+0x3c>)
 8002f44:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <reg_wizchip_cs_cbfunc+0x40>)
 8002f46:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002f48:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <reg_wizchip_cs_cbfunc+0x3c>)
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <reg_wizchip_cs_cbfunc+0x44>)
 8002f4c:	615a      	str	r2, [r3, #20]
 8002f4e:	e005      	b.n	8002f5c <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002f50:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <reg_wizchip_cs_cbfunc+0x3c>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8002f56:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <reg_wizchip_cs_cbfunc+0x3c>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6153      	str	r3, [r2, #20]
   }
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000020 	.word	0x20000020
 8002f6c:	08002ebd 	.word	0x08002ebd
 8002f70:	08002ec9 	.word	0x08002ec9

08002f74 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002f7e:	bf00      	nop
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <reg_wizchip_spi_cbfunc+0x48>)
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f9      	beq.n	8002f80 <reg_wizchip_spi_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <reg_wizchip_spi_cbfunc+0x24>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <reg_wizchip_spi_cbfunc+0x48>)
 8002f9a:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f9c:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <reg_wizchip_spi_cbfunc+0x48>)
 8002fa0:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <reg_wizchip_spi_cbfunc+0x50>)
 8002fa2:	61da      	str	r2, [r3, #28]
 8002fa4:	e005      	b.n	8002fb2 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002fa6:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <reg_wizchip_spi_cbfunc+0x48>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002fac:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <reg_wizchip_spi_cbfunc+0x48>)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	61d3      	str	r3, [r2, #28]
   }
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	20000020 	.word	0x20000020
 8002fc0:	08002f09 	.word	0x08002f09
 8002fc4:	08002f17 	.word	0x08002f17

08002fc8 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	75fb      	strb	r3, [r7, #23]
   uint8_t* ptmp[2] = {0,0};
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	2b0f      	cmp	r3, #15
 8002fe4:	f200 80c2 	bhi.w	800316c <ctlwizchip+0x1a4>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <ctlwizchip+0x28>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003031 	.word	0x08003031
 8002ff4:	08003037 	.word	0x08003037
 8002ff8:	08003063 	.word	0x08003063
 8002ffc:	08003057 	.word	0x08003057
 8003000:	08003071 	.word	0x08003071
 8003004:	0800307d 	.word	0x0800307d
 8003008:	0800308b 	.word	0x0800308b
 800300c:	080030b1 	.word	0x080030b1
 8003010:	080030d7 	.word	0x080030d7
 8003014:	08003111 	.word	0x08003111
 8003018:	08003117 	.word	0x08003117
 800301c:	0800311f 	.word	0x0800311f
 8003020:	08003173 	.word	0x08003173
 8003024:	08003127 	.word	0x08003127
 8003028:	08003135 	.word	0x08003135
 800302c:	08003151 	.word	0x08003151
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003030:	f000 f8e6 	bl	8003200 <wizchip_sw_reset>
         break;
 8003034:	e09e      	b.n	8003174 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d004      	beq.n	8003046 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3308      	adds	r3, #8
 8003044:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f923 	bl	8003298 <wizchip_init>
 8003052:	4603      	mov	r3, r0
 8003054:	e08f      	b.n	8003176 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f9a8 	bl	80033b0 <wizchip_clrinterrupt>
         break;
 8003060:	e088      	b.n	8003174 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003062:	f000 f9c3 	bl	80033ec <wizchip_getinterrupt>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	801a      	strh	r2, [r3, #0]
         break;
 800306e:	e081      	b.n	8003174 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f000 f9de 	bl	8003436 <wizchip_setinterruptmask>
         break;
 800307a:	e07b      	b.n	8003174 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800307c:	f000 f9f6 	bl	800346c <wizchip_getinterruptmask>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	801a      	strh	r2, [r3, #0]
         break;
 8003088:	e074      	b.n	8003174 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	b29b      	uxth	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	4619      	mov	r1, r3
 8003096:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800309a:	f7ff fcf3 	bl	8002a84 <WIZCHIP_WRITE>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4619      	mov	r1, r3
 80030a6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80030aa:	f7ff fceb 	bl	8002a84 <WIZCHIP_WRITE>
         break;
 80030ae:	e061      	b.n	8003174 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80030b0:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80030b4:	f7ff fcb6 	bl	8002a24 <WIZCHIP_READ>
 80030b8:	4603      	mov	r3, r0
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	b29c      	uxth	r4, r3
 80030c0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80030c4:	f7ff fcae 	bl	8002a24 <WIZCHIP_READ>
 80030c8:	4603      	mov	r3, r0
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	4423      	add	r3, r4
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	801a      	strh	r2, [r3, #0]
         break;
 80030d4:	e04e      	b.n	8003174 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80030d6:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <ctlwizchip+0x1b8>)
 80030d8:	789a      	ldrb	r2, [r3, #2]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a27      	ldr	r2, [pc, #156]	; (8003180 <ctlwizchip+0x1b8>)
 80030e4:	78d2      	ldrb	r2, [r2, #3]
 80030e6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	3302      	adds	r3, #2
 80030ec:	4a24      	ldr	r2, [pc, #144]	; (8003180 <ctlwizchip+0x1b8>)
 80030ee:	7912      	ldrb	r2, [r2, #4]
 80030f0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	3303      	adds	r3, #3
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <ctlwizchip+0x1b8>)
 80030f8:	7952      	ldrb	r2, [r2, #5]
 80030fa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	3304      	adds	r3, #4
 8003100:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <ctlwizchip+0x1b8>)
 8003102:	7992      	ldrb	r2, [r2, #6]
 8003104:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	3305      	adds	r3, #5
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
         break;
 800310e:	e031      	b.n	8003174 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003110:	f000 f9ff 	bl	8003512 <wizphy_reset>
         break;
 8003114:	e02e      	b.n	8003174 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003116:	6838      	ldr	r0, [r7, #0]
 8003118:	f000 fa22 	bl	8003560 <wizphy_setphyconf>
         break;
 800311c:	e02a      	b.n	8003174 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800311e:	6838      	ldr	r0, [r7, #0]
 8003120:	f000 fa60 	bl	80035e4 <wizphy_getphyconf>
         break;
 8003124:	e026      	b.n	8003174 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 faa3 	bl	8003676 <wizphy_setphypmode>
 8003130:	4603      	mov	r3, r0
 8003132:	e020      	b.n	8003176 <ctlwizchip+0x1ae>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003134:	f000 f9d4 	bl	80034e0 <wizphy_getphypmode>
 8003138:	4603      	mov	r3, r0
 800313a:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2bff      	cmp	r3, #255	; 0xff
 8003140:	d102      	bne.n	8003148 <ctlwizchip+0x180>
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	e016      	b.n	8003176 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	7dfa      	ldrb	r2, [r7, #23]
 800314c:	701a      	strb	r2, [r3, #0]
         break;
 800314e:	e011      	b.n	8003174 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003150:	f000 f9af 	bl	80034b2 <wizphy_getphylink>
 8003154:	4603      	mov	r3, r0
 8003156:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	2bff      	cmp	r3, #255	; 0xff
 800315c:	d102      	bne.n	8003164 <ctlwizchip+0x19c>
 800315e:	f04f 33ff 	mov.w	r3, #4294967295
 8003162:	e008      	b.n	8003176 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	7dfa      	ldrb	r2, [r7, #23]
 8003168:	701a      	strb	r2, [r3, #0]
         break;
 800316a:	e003      	b.n	8003174 <ctlwizchip+0x1ac>
      default:
         return -1;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	e001      	b.n	8003176 <ctlwizchip+0x1ae>
         break;
 8003172:	bf00      	nop
   }
   return 0;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	bf00      	nop
 8003180:	20000020 	.word	0x20000020

08003184 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	71fb      	strb	r3, [r7, #7]

   switch(cntype)
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	2b05      	cmp	r3, #5
 8003194:	d82c      	bhi.n	80031f0 <ctlnetwork+0x6c>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <ctlnetwork+0x18>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	080031b5 	.word	0x080031b5
 80031a0:	080031bd 	.word	0x080031bd
 80031a4:	080031c5 	.word	0x080031c5
 80031a8:	080031d3 	.word	0x080031d3
 80031ac:	080031e1 	.word	0x080031e1
 80031b0:	080031e9 	.word	0x080031e9
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80031b4:	6838      	ldr	r0, [r7, #0]
 80031b6:	f000 faa9 	bl	800370c <wizchip_setnetinfo>
         break;
 80031ba:	e01c      	b.n	80031f6 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80031bc:	6838      	ldr	r0, [r7, #0]
 80031be:	f000 fae5 	bl	800378c <wizchip_getnetinfo>
         break;
 80031c2:	e018      	b.n	80031f6 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fb1f 	bl	800380c <wizchip_setnetmode>
 80031ce:	4603      	mov	r3, r0
 80031d0:	e012      	b.n	80031f8 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80031d2:	f000 fb3d 	bl	8003850 <wizchip_getnetmode>
 80031d6:	4603      	mov	r3, r0
 80031d8:	461a      	mov	r2, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	701a      	strb	r2, [r3, #0]
         break;
 80031de:	e00a      	b.n	80031f6 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80031e0:	6838      	ldr	r0, [r7, #0]
 80031e2:	f000 fb3d 	bl	8003860 <wizchip_settimeout>
         break;
 80031e6:	e006      	b.n	80031f6 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80031e8:	6838      	ldr	r0, [r7, #0]
 80031ea:	f000 fb5a 	bl	80038a2 <wizchip_gettimeout>
         break;
 80031ee:	e002      	b.n	80031f6 <ctlnetwork+0x72>
      default:
         return -1;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295
 80031f4:	e000      	b.n	80031f8 <ctlnetwork+0x74>
   }
   return 0;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4];
   uint8_t mac[6];
   getSHAR(mac);
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	2206      	movs	r2, #6
 800320a:	4619      	mov	r1, r3
 800320c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003210:	f7ff fc6e 	bl	8002af0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	2204      	movs	r2, #4
 800321a:	4619      	mov	r1, r3
 800321c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003220:	f7ff fc66 	bl	8002af0 <WIZCHIP_READ_BUF>
 8003224:	f107 0310 	add.w	r3, r7, #16
 8003228:	2204      	movs	r2, #4
 800322a:	4619      	mov	r1, r3
 800322c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003230:	f7ff fc5e 	bl	8002af0 <WIZCHIP_READ_BUF>
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	2204      	movs	r2, #4
 800323a:	4619      	mov	r1, r3
 800323c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003240:	f7ff fc56 	bl	8002af0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	2000      	movs	r0, #0
 8003248:	f7ff fc1c 	bl	8002a84 <WIZCHIP_WRITE>
   getMR(); // for delay
 800324c:	2000      	movs	r0, #0
 800324e:	f7ff fbe9 	bl	8002a24 <WIZCHIP_READ>
   setSHAR(mac);
 8003252:	1d3b      	adds	r3, r7, #4
 8003254:	2206      	movs	r2, #6
 8003256:	4619      	mov	r1, r3
 8003258:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800325c:	f7ff fc8c 	bl	8002b78 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	2204      	movs	r2, #4
 8003266:	4619      	mov	r1, r3
 8003268:	f44f 7080 	mov.w	r0, #256	; 0x100
 800326c:	f7ff fc84 	bl	8002b78 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	2204      	movs	r2, #4
 8003276:	4619      	mov	r1, r3
 8003278:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800327c:	f7ff fc7c 	bl	8002b78 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003280:	f107 030c 	add.w	r3, r7, #12
 8003284:	2204      	movs	r2, #4
 8003286:	4619      	mov	r1, r3
 8003288:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800328c:	f7ff fc74 	bl	8002b78 <WIZCHIP_WRITE_BUF>
}
 8003290:	bf00      	nop
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80032a6:	f7ff ffab 	bl	8003200 <wizchip_sw_reset>
   if(txsize)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d03b      	beq.n	8003328 <wizchip_init+0x90>
   {
      tmp = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	e00e      	b.n	80032d8 <wizchip_init+0x40>
         tmp += txsize[i];
 80032ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	781a      	ldrb	r2, [r3, #0]
 80032c4:	7bbb      	ldrb	r3, [r7, #14]
 80032c6:	4413      	add	r3, r2
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80032cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	73fb      	strb	r3, [r7, #15]
 80032d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032dc:	2b07      	cmp	r3, #7
 80032de:	ddec      	ble.n	80032ba <wizchip_init+0x22>
      if(tmp > 16) return -1;
 80032e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	dd02      	ble.n	80032ee <wizchip_init+0x56>
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ec:	e05c      	b.n	80033a8 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	e015      	b.n	8003320 <wizchip_init+0x88>
         setSn_TXBUF_SIZE(i, txsize[i]);
 80032f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	3301      	adds	r3, #1
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003302:	4618      	mov	r0, r3
 8003304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	4619      	mov	r1, r3
 8003310:	f7ff fbb8 	bl	8002a84 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	3301      	adds	r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003324:	2b07      	cmp	r3, #7
 8003326:	dde5      	ble.n	80032f4 <wizchip_init+0x5c>
   }
   if(rxsize)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03b      	beq.n	80033a6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
 8003336:	e00e      	b.n	8003356 <wizchip_init+0xbe>
         tmp += rxsize[i];
 8003338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	4413      	add	r3, r2
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	7bbb      	ldrb	r3, [r7, #14]
 8003344:	4413      	add	r3, r2
 8003346:	b2db      	uxtb	r3, r3
 8003348:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800334a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3301      	adds	r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	2b07      	cmp	r3, #7
 800335c:	ddec      	ble.n	8003338 <wizchip_init+0xa0>
      if(tmp > 16) return -1;
 800335e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003362:	2b10      	cmp	r3, #16
 8003364:	dd02      	ble.n	800336c <wizchip_init+0xd4>
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	e01d      	b.n	80033a8 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e015      	b.n	800339e <wizchip_init+0x106>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 8003372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	3301      	adds	r3, #1
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003380:	4618      	mov	r0, r3
 8003382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	4413      	add	r3, r2
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	4619      	mov	r1, r3
 800338e:	f7ff fb79 	bl	8002a84 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3301      	adds	r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	73fb      	strb	r3, [r7, #15]
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	2b07      	cmp	r3, #7
 80033a4:	dde5      	ble.n	8003372 <wizchip_init+0xda>
   }
   return 0;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   ir |= sir;
   setIR(ir);
#else
   setIR(ir);
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	f023 030f 	bic.w	r3, r3, #15
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	4619      	mov	r1, r3
 80033d0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80033d4:	f7ff fb56 	bl	8002a84 <WIZCHIP_WRITE>
   setSIR(sir);
 80033d8:	7bbb      	ldrb	r3, [r7, #14]
 80033da:	4619      	mov	r1, r3
 80033dc:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80033e0:	f7ff fb50 	bl	8002a84 <WIZCHIP_WRITE>
#endif
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   ir = getIR();
   sir = ir 0x0F;
#else
   ir  = getIR();
 80033fe:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003402:	f7ff fb0f 	bl	8002a24 <WIZCHIP_READ>
 8003406:	4603      	mov	r3, r0
 8003408:	f023 030f 	bic.w	r3, r3, #15
 800340c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800340e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003412:	f7ff fb07 	bl	8002a24 <WIZCHIP_READ>
 8003416:	4603      	mov	r3, r0
 8003418:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800341a:	79bb      	ldrb	r3, [r7, #6]
 800341c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800341e:	88bb      	ldrh	r3, [r7, #4]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	b29a      	uxth	r2, r3
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	b29b      	uxth	r3, r3
 8003428:	4413      	add	r3, r2
 800342a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800342c:	88bb      	ldrh	r3, [r7, #4]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003440:	88fb      	ldrh	r3, [r7, #6]
 8003442:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	b29b      	uxth	r3, r3
 800344a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   imr |= simr;
   setIMR(imr);
#else
   setIMR(imr);
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	4619      	mov	r1, r3
 8003450:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003454:	f7ff fb16 	bl	8002a84 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003458:	7bbb      	ldrb	r3, [r7, #14]
 800345a:	4619      	mov	r1, r3
 800345c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003460:	f7ff fb10 	bl	8002a84 <WIZCHIP_WRITE>
#endif
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   imr  = getIMR();
   simr = imr 0x0F;
#else
   imr  = getIMR();
 800347e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003482:	f7ff facf 	bl	8002a24 <WIZCHIP_READ>
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800348a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800348e:	f7ff fac9 	bl	8002a24 <WIZCHIP_READ>
 8003492:	4603      	mov	r3, r0
 8003494:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003496:	79bb      	ldrb	r3, [r7, #6]
 8003498:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800349a:	88bb      	ldrh	r3, [r7, #4]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	b29a      	uxth	r2, r3
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80034a8:	88bb      	ldrh	r3, [r7, #4]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
   else
      tmp = PHY_LINK_OFF;
#elif _WIZCHIP_ == 5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80034b8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80034bc:	f7ff fab2 	bl	8002a24 <WIZCHIP_READ>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <wizphy_getphylink+0x1e>
      tmp = PHY_LINK_ON;
 80034ca:	2301      	movs	r3, #1
 80034cc:	71fb      	strb	r3, [r7, #7]
 80034ce:	e001      	b.n	80034d4 <wizphy_getphylink+0x22>
   else
      tmp = PHY_LINK_OFF;
 80034d0:	2300      	movs	r3, #0
 80034d2:	71fb      	strb	r3, [r7, #7]
#else
   tmp = -1;
#endif
   return tmp;
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <wizphy_getphypmode>:

#if _WIZCHIP_ > 5100

int8_t wizphy_getphypmode(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if(getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
 80034ea:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80034ee:	f7ff fa99 	bl	8002a24 <WIZCHIP_READ>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80034fc:	2301      	movs	r3, #1
 80034fe:	71fb      	strb	r3, [r7, #7]
 8003500:	e001      	b.n	8003506 <wizphy_getphypmode+0x26>
      else
         tmp = PHY_POWER_NORM;
 8003502:	2300      	movs	r3, #0
 8003504:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <wizphy_reset>:
#endif

#if _WIZCHIP_ == 5500
void wizphy_reset(void)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003518:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800351c:	f7ff fa82 	bl	8002a24 <WIZCHIP_READ>
 8003520:	4603      	mov	r3, r0
 8003522:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800352a:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	4619      	mov	r1, r3
 8003530:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003534:	f7ff faa6 	bl	8002a84 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003538:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800353c:	f7ff fa72 	bl	8002a24 <WIZCHIP_READ>
 8003540:	4603      	mov	r3, r0
 8003542:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800354a:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	4619      	mov	r1, r3
 8003550:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003554:	f7ff fa96 	bl	8002a84 <WIZCHIP_WRITE>
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d104      	bne.n	800357e <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	e003      	b.n	8003586 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003584:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	785b      	ldrb	r3, [r3, #1]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d104      	bne.n	8003598 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	e019      	b.n	80035cc <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	78db      	ldrb	r3, [r3, #3]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d10d      	bne.n	80035bc <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	789b      	ldrb	r3, [r3, #2]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d104      	bne.n	80035b2 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	f043 0318 	orr.w	r3, r3, #24
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e00c      	b.n	80035cc <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	73fb      	strb	r3, [r7, #15]
 80035ba:	e007      	b.n	80035cc <wizphy_setphyconf+0x6c>
      }
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	789b      	ldrb	r3, [r3, #2]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d103      	bne.n	80035cc <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	f043 0310 	orr.w	r3, r3, #16
 80035ca:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	4619      	mov	r1, r3
 80035d0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035d4:	f7ff fa56 	bl	8002a84 <WIZCHIP_WRITE>
   wizphy_reset();
 80035d8:	f7ff ff9b 	bl	8003512 <wizphy_reset>
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80035f0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035f4:	f7ff fa16 	bl	8002a24 <WIZCHIP_READ>
 80035f8:	4603      	mov	r3, r0
 80035fa:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	119b      	asrs	r3, r3, #6
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003612:	2b20      	cmp	r3, #32
 8003614:	d001      	beq.n	800361a <wizphy_getphyconf+0x36>
 8003616:	2b38      	cmp	r3, #56	; 0x38
 8003618:	d103      	bne.n	8003622 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA:
         phyconf->mode = PHY_MODE_AUTONEGO;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	705a      	strb	r2, [r3, #1]
         break;
 8003620:	e003      	b.n	800362a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	705a      	strb	r2, [r3, #1]
         break;
 8003628:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003630:	2b18      	cmp	r3, #24
 8003632:	d003      	beq.n	800363c <wizphy_getphyconf+0x58>
 8003634:	2b20      	cmp	r3, #32
 8003636:	d001      	beq.n	800363c <wizphy_getphyconf+0x58>
 8003638:	2b10      	cmp	r3, #16
 800363a:	d103      	bne.n	8003644 <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	709a      	strb	r2, [r3, #2]
         break;
 8003642:	e003      	b.n	800364c <wizphy_getphyconf+0x68>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	709a      	strb	r2, [r3, #2]
         break;
 800364a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003652:	2b18      	cmp	r3, #24
 8003654:	d003      	beq.n	800365e <wizphy_getphyconf+0x7a>
 8003656:	2b20      	cmp	r3, #32
 8003658:	d001      	beq.n	800365e <wizphy_getphyconf+0x7a>
 800365a:	2b08      	cmp	r3, #8
 800365c:	d103      	bne.n	8003666 <wizphy_getphyconf+0x82>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	70da      	strb	r2, [r3, #3]
         break;
 8003664:	e003      	b.n	800366e <wizphy_getphyconf+0x8a>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	70da      	strb	r2, [r3, #3]
         break;
 800366c:	bf00      	nop
   }
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003684:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003688:	f7ff f9cc 	bl	8002a24 <WIZCHIP_READ>
 800368c:	4603      	mov	r3, r0
 800368e:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <wizphy_setphypmode+0x2a>
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
 800369e:	e030      	b.n	8003702 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80036a6:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d104      	bne.n	80036b8 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80036b4:	73fb      	strb	r3, [r7, #15]
 80036b6:	e003      	b.n	80036c0 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80036be:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	4619      	mov	r1, r3
 80036c4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80036c8:	f7ff f9dc 	bl	8002a84 <WIZCHIP_WRITE>
   wizphy_reset();
 80036cc:	f7ff ff21 	bl	8003512 <wizphy_reset>
   tmp = getPHYCFGR();
 80036d0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80036d4:	f7ff f9a6 	bl	8002a24 <WIZCHIP_READ>
 80036d8:	4603      	mov	r3, r0
 80036da:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d106      	bne.n	80036f0 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <wizphy_setphypmode+0x88>
 80036ec:	2300      	movs	r3, #0
 80036ee:	e008      	b.n	8003702 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <wizphy_setphypmode+0x88>
 80036fa:	2300      	movs	r3, #0
 80036fc:	e001      	b.n	8003702 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2206      	movs	r2, #6
 8003718:	4619      	mov	r1, r3
 800371a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800371e:	f7ff fa2b 	bl	8002b78 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	330e      	adds	r3, #14
 8003726:	2204      	movs	r2, #4
 8003728:	4619      	mov	r1, r3
 800372a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800372e:	f7ff fa23 	bl	8002b78 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	330a      	adds	r3, #10
 8003736:	2204      	movs	r2, #4
 8003738:	4619      	mov	r1, r3
 800373a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800373e:	f7ff fa1b 	bl	8002b78 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3306      	adds	r3, #6
 8003746:	2204      	movs	r2, #4
 8003748:	4619      	mov	r1, r3
 800374a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800374e:	f7ff fa13 	bl	8002b78 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	7c9a      	ldrb	r2, [r3, #18]
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <wizchip_setnetinfo+0x78>)
 8003758:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	7cda      	ldrb	r2, [r3, #19]
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <wizchip_setnetinfo+0x78>)
 8003760:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	7d1a      	ldrb	r2, [r3, #20]
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <wizchip_setnetinfo+0x78>)
 8003768:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	7d5a      	ldrb	r2, [r3, #21]
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <wizchip_setnetinfo+0x78>)
 8003770:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	7d9a      	ldrb	r2, [r3, #22]
 8003776:	4b04      	ldr	r3, [pc, #16]	; (8003788 <wizchip_setnetinfo+0x7c>)
 8003778:	701a      	strb	r2, [r3, #0]
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200000fc 	.word	0x200000fc
 8003788:	20000100 	.word	0x20000100

0800378c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2206      	movs	r2, #6
 8003798:	4619      	mov	r1, r3
 800379a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800379e:	f7ff f9a7 	bl	8002af0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	330e      	adds	r3, #14
 80037a6:	2204      	movs	r2, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80037ae:	f7ff f99f 	bl	8002af0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	330a      	adds	r3, #10
 80037b6:	2204      	movs	r2, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80037be:	f7ff f997 	bl	8002af0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3306      	adds	r3, #6
 80037c6:	2204      	movs	r2, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80037ce:	f7ff f98f 	bl	8002af0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80037d2:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <wizchip_getnetinfo+0x78>)
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <wizchip_getnetinfo+0x78>)
 80037dc:	785a      	ldrb	r2, [r3, #1]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <wizchip_getnetinfo+0x78>)
 80037e4:	789a      	ldrb	r2, [r3, #2]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <wizchip_getnetinfo+0x78>)
 80037ec:	78da      	ldrb	r2, [r3, #3]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <wizchip_getnetinfo+0x7c>)
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	759a      	strb	r2, [r3, #22]
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	200000fc 	.word	0x200000fc
 8003808:	20000100 	.word	0x20000100

0800380c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != 5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <wizchip_setnetmode+0x1e>
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
 8003828:	e00e      	b.n	8003848 <wizchip_setnetmode+0x3c>
#endif
   tmp = getMR();
 800382a:	2000      	movs	r0, #0
 800382c:	f7ff f8fa 	bl	8002a24 <WIZCHIP_READ>
 8003830:	4603      	mov	r3, r0
 8003832:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	4313      	orrs	r3, r2
 800383a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	4619      	mov	r1, r3
 8003840:	2000      	movs	r0, #0
 8003842:	f7ff f91f 	bl	8002a84 <WIZCHIP_WRITE>
   return 0;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8003854:	2000      	movs	r0, #0
 8003856:	f7ff f8e5 	bl	8002a24 <WIZCHIP_READ>
 800385a:	4603      	mov	r3, r0
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}

08003860 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	4619      	mov	r1, r3
 800386e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003872:	f7ff f907 	bl	8002a84 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	885b      	ldrh	r3, [r3, #2]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	b29b      	uxth	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	4619      	mov	r1, r3
 8003882:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003886:	f7ff f8fd 	bl	8002a84 <WIZCHIP_WRITE>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	885b      	ldrh	r3, [r3, #2]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	4619      	mov	r1, r3
 8003892:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003896:	f7ff f8f5 	bl	8002a84 <WIZCHIP_WRITE>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80038a2:	b590      	push	{r4, r7, lr}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80038aa:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80038ae:	f7ff f8b9 	bl	8002a24 <WIZCHIP_READ>
 80038b2:	4603      	mov	r3, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80038ba:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80038be:	f7ff f8b1 	bl	8002a24 <WIZCHIP_READ>
 80038c2:	4603      	mov	r3, r0
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	b29c      	uxth	r4, r3
 80038ca:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80038ce:	f7ff f8a9 	bl	8002a24 <WIZCHIP_READ>
 80038d2:	4603      	mov	r3, r0
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	4423      	add	r3, r4
 80038d8:	b29a      	uxth	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	805a      	strh	r2, [r3, #2]
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd90      	pop	{r4, r7, pc}
	...

080038e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_Init+0x28>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a07      	ldr	r2, [pc, #28]	; (8003910 <HAL_Init+0x28>)
 80038f2:	f043 0310 	orr.w	r3, r3, #16
 80038f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f8:	2003      	movs	r0, #3
 80038fa:	f000 f8f3 	bl	8003ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038fe:	2000      	movs	r0, #0
 8003900:	f7fe fbd6 	bl	80020b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003904:	f7fe fb10 	bl	8001f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40022000 	.word	0x40022000

08003914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_IncTick+0x1c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_IncTick+0x20>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4413      	add	r3, r2
 8003924:	4a03      	ldr	r2, [pc, #12]	; (8003934 <HAL_IncTick+0x20>)
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	20000044 	.word	0x20000044
 8003934:	20002e3c 	.word	0x20002e3c

08003938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return uwTick;
 800393c:	4b02      	ldr	r3, [pc, #8]	; (8003948 <HAL_GetTick+0x10>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	20002e3c 	.word	0x20002e3c

0800394c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003954:	f7ff fff0 	bl	8003938 <HAL_GetTick>
 8003958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d005      	beq.n	8003972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_Delay+0x40>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003972:	bf00      	nop
 8003974:	f7ff ffe0 	bl	8003938 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	429a      	cmp	r2, r3
 8003982:	d8f7      	bhi.n	8003974 <HAL_Delay+0x28>
  {
  }
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000044 	.word	0x20000044

08003990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ac:	4013      	ands	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c2:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	60d3      	str	r3, [r2, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <__NVIC_GetPriorityGrouping+0x18>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 0307 	and.w	r3, r3, #7
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	db0b      	blt.n	8003a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	4906      	ldr	r1, [pc, #24]	; (8003a28 <__NVIC_EnableIRQ+0x34>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2001      	movs	r0, #1
 8003a16:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100

08003a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	db0a      	blt.n	8003a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	490c      	ldr	r1, [pc, #48]	; (8003a78 <__NVIC_SetPriority+0x4c>)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	0112      	lsls	r2, r2, #4
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	440b      	add	r3, r1
 8003a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a54:	e00a      	b.n	8003a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4908      	ldr	r1, [pc, #32]	; (8003a7c <__NVIC_SetPriority+0x50>)
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	3b04      	subs	r3, #4
 8003a64:	0112      	lsls	r2, r2, #4
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	440b      	add	r3, r1
 8003a6a:	761a      	strb	r2, [r3, #24]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	e000e100 	.word	0xe000e100
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	; 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f1c3 0307 	rsb	r3, r3, #7
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	bf28      	it	cs
 8003a9e:	2304      	movcs	r3, #4
 8003aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2b06      	cmp	r3, #6
 8003aa8:	d902      	bls.n	8003ab0 <NVIC_EncodePriority+0x30>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3b03      	subs	r3, #3
 8003aae:	e000      	b.n	8003ab2 <NVIC_EncodePriority+0x32>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad2:	43d9      	mvns	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	4313      	orrs	r3, r2
         );
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3724      	adds	r7, #36	; 0x24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff4f 	bl	8003990 <__NVIC_SetPriorityGrouping>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	4603      	mov	r3, r0
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b0c:	f7ff ff64 	bl	80039d8 <__NVIC_GetPriorityGrouping>
 8003b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	6978      	ldr	r0, [r7, #20]
 8003b18:	f7ff ffb2 	bl	8003a80 <NVIC_EncodePriority>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff81 	bl	8003a2c <__NVIC_SetPriority>
}
 8003b2a:	bf00      	nop
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	4603      	mov	r3, r0
 8003b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff57 	bl	80039f4 <__NVIC_EnableIRQ>
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b6a:	4b2f      	ldr	r3, [pc, #188]	; (8003c28 <HAL_FLASH_Program+0xd8>)
 8003b6c:	7e1b      	ldrb	r3, [r3, #24]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_FLASH_Program+0x26>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e054      	b.n	8003c20 <HAL_FLASH_Program+0xd0>
 8003b76:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <HAL_FLASH_Program+0xd8>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b80:	f000 f8d4 	bl	8003d2c <FLASH_WaitForLastOperation>
 8003b84:	4603      	mov	r3, r0
 8003b86:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d144      	bne.n	8003c18 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d102      	bne.n	8003b9a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003b94:	2301      	movs	r3, #1
 8003b96:	757b      	strb	r3, [r7, #21]
 8003b98:	e007      	b.n	8003baa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d102      	bne.n	8003ba6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	757b      	strb	r3, [r7, #21]
 8003ba4:	e001      	b.n	8003baa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	75bb      	strb	r3, [r7, #22]
 8003bae:	e02d      	b.n	8003c0c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003bb0:	7dbb      	ldrb	r3, [r7, #22]
 8003bb2:	005a      	lsls	r2, r3, #1
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	eb02 0c03 	add.w	ip, r2, r3
 8003bba:	7dbb      	ldrb	r3, [r7, #22]
 8003bbc:	0119      	lsls	r1, r3, #4
 8003bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bc2:	f1c1 0620 	rsb	r6, r1, #32
 8003bc6:	f1a1 0020 	sub.w	r0, r1, #32
 8003bca:	fa22 f401 	lsr.w	r4, r2, r1
 8003bce:	fa03 f606 	lsl.w	r6, r3, r6
 8003bd2:	4334      	orrs	r4, r6
 8003bd4:	fa23 f000 	lsr.w	r0, r3, r0
 8003bd8:	4304      	orrs	r4, r0
 8003bda:	fa23 f501 	lsr.w	r5, r3, r1
 8003bde:	b2a3      	uxth	r3, r4
 8003be0:	4619      	mov	r1, r3
 8003be2:	4660      	mov	r0, ip
 8003be4:	f000 f886 	bl	8003cf4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003be8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bec:	f000 f89e 	bl	8003d2c <FLASH_WaitForLastOperation>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003bf4:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <HAL_FLASH_Program+0xdc>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <HAL_FLASH_Program+0xdc>)
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d107      	bne.n	8003c16 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003c06:	7dbb      	ldrb	r3, [r7, #22]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	75bb      	strb	r3, [r7, #22]
 8003c0c:	7dba      	ldrb	r2, [r7, #22]
 8003c0e:	7d7b      	ldrb	r3, [r7, #21]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d3cd      	bcc.n	8003bb0 <HAL_FLASH_Program+0x60>
 8003c14:	e000      	b.n	8003c18 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003c16:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_FLASH_Program+0xd8>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	761a      	strb	r2, [r3, #24]

  return status;
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c28:	20002e40 	.word	0x20002e40
 8003c2c:	40022000 	.word	0x40022000

08003c30 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <HAL_FLASH_Unlock+0x40>)
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c46:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <HAL_FLASH_Unlock+0x40>)
 8003c48:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <HAL_FLASH_Unlock+0x44>)
 8003c4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <HAL_FLASH_Unlock+0x40>)
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <HAL_FLASH_Unlock+0x48>)
 8003c50:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <HAL_FLASH_Unlock+0x40>)
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003c62:	79fb      	ldrb	r3, [r7, #7]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40022000 	.word	0x40022000
 8003c74:	45670123 	.word	0x45670123
 8003c78:	cdef89ab 	.word	0xcdef89ab

08003c7c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_FLASH_Lock+0x1c>)
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <HAL_FLASH_Lock+0x1c>)
 8003c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40022000 	.word	0x40022000

08003c9c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_FLASH_OB_Unlock+0x2c>)
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d107      	bne.n	8003cbc <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_FLASH_OB_Unlock+0x2c>)
 8003cae:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <HAL_FLASH_OB_Unlock+0x30>)
 8003cb0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_FLASH_OB_Unlock+0x2c>)
 8003cb4:	4a06      	ldr	r2, [pc, #24]	; (8003cd0 <HAL_FLASH_OB_Unlock+0x34>)
 8003cb6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e000      	b.n	8003cbe <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40022000 	.word	0x40022000
 8003ccc:	45670123 	.word	0x45670123
 8003cd0:	cdef89ab 	.word	0xcdef89ab

08003cd4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_FLASH_OB_Lock+0x1c>)
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <HAL_FLASH_OB_Lock+0x1c>)
 8003cde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ce2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40022000 	.word	0x40022000

08003cf4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d00:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <FLASH_Program_HalfWord+0x30>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <FLASH_Program_HalfWord+0x34>)
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	4a07      	ldr	r2, [pc, #28]	; (8003d28 <FLASH_Program_HalfWord+0x34>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	887a      	ldrh	r2, [r7, #2]
 8003d16:	801a      	strh	r2, [r3, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20002e40 	.word	0x20002e40
 8003d28:	40022000 	.word	0x40022000

08003d2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003d34:	f7ff fe00 	bl	8003938 <HAL_GetTick>
 8003d38:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003d3a:	e010      	b.n	8003d5e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d00c      	beq.n	8003d5e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <FLASH_WaitForLastOperation+0x2e>
 8003d4a:	f7ff fdf5 	bl	8003938 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d201      	bcs.n	8003d5e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e025      	b.n	8003daa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <FLASH_WaitForLastOperation+0x88>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e8      	bne.n	8003d3c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003d6a:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <FLASH_WaitForLastOperation+0x88>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <FLASH_WaitForLastOperation+0x88>)
 8003d78:	2220      	movs	r2, #32
 8003d7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <FLASH_WaitForLastOperation+0x88>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10b      	bne.n	8003da0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <FLASH_WaitForLastOperation+0x88>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d105      	bne.n	8003da0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <FLASH_WaitForLastOperation+0x88>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003da0:	f000 f80a 	bl	8003db8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40022000 	.word	0x40022000

08003db8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <FLASH_SetErrorCode+0x98>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003dce:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <FLASH_SetErrorCode+0x9c>)
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f043 0302 	orr.w	r3, r3, #2
 8003dd6:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <FLASH_SetErrorCode+0x9c>)
 8003dd8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f043 0310 	orr.w	r3, r3, #16
 8003de0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <FLASH_SetErrorCode+0x98>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003dee:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <FLASH_SetErrorCode+0x9c>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <FLASH_SetErrorCode+0x9c>)
 8003df8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f043 0304 	orr.w	r3, r3, #4
 8003e00:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003e02:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <FLASH_SetErrorCode+0x98>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <FLASH_SetErrorCode+0x9c>)
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f043 0304 	orr.w	r3, r3, #4
 8003e16:	4a0f      	ldr	r2, [pc, #60]	; (8003e54 <FLASH_SetErrorCode+0x9c>)
 8003e18:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <FLASH_SetErrorCode+0x98>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	4a0c      	ldr	r2, [pc, #48]	; (8003e50 <FLASH_SetErrorCode+0x98>)
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f240 1201 	movw	r2, #257	; 0x101
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d106      	bne.n	8003e3e <FLASH_SetErrorCode+0x86>
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <FLASH_SetErrorCode+0x98>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	4a06      	ldr	r2, [pc, #24]	; (8003e50 <FLASH_SetErrorCode+0x98>)
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	61d3      	str	r3, [r2, #28]
}  
 8003e3c:	e002      	b.n	8003e44 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003e3e:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <FLASH_SetErrorCode+0x98>)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60d3      	str	r3, [r2, #12]
}  
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40022000 	.word	0x40022000
 8003e54:	20002e40 	.word	0x20002e40

08003e58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e6a:	4b2f      	ldr	r3, [pc, #188]	; (8003f28 <HAL_FLASHEx_Erase+0xd0>)
 8003e6c:	7e1b      	ldrb	r3, [r3, #24]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_FLASHEx_Erase+0x1e>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e053      	b.n	8003f1e <HAL_FLASHEx_Erase+0xc6>
 8003e76:	4b2c      	ldr	r3, [pc, #176]	; (8003f28 <HAL_FLASHEx_Erase+0xd0>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d116      	bne.n	8003eb2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e88:	f7ff ff50 	bl	8003d2c <FLASH_WaitForLastOperation>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d141      	bne.n	8003f16 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003e92:	2001      	movs	r0, #1
 8003e94:	f000 f84c 	bl	8003f30 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e9c:	f7ff ff46 	bl	8003d2c <FLASH_WaitForLastOperation>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003ea4:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <HAL_FLASHEx_Erase+0xd4>)
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <HAL_FLASHEx_Erase+0xd4>)
 8003eaa:	f023 0304 	bic.w	r3, r3, #4
 8003eae:	6113      	str	r3, [r2, #16]
 8003eb0:	e031      	b.n	8003f16 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003eb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003eb6:	f7ff ff39 	bl	8003d2c <FLASH_WaitForLastOperation>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d12a      	bne.n	8003f16 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	e019      	b.n	8003f04 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003ed0:	68b8      	ldr	r0, [r7, #8]
 8003ed2:	f000 f849 	bl	8003f68 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ed6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003eda:	f7ff ff27 	bl	8003d2c <FLASH_WaitForLastOperation>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <HAL_FLASHEx_Erase+0xd4>)
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <HAL_FLASHEx_Erase+0xd4>)
 8003ee8:	f023 0302 	bic.w	r3, r3, #2
 8003eec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	601a      	str	r2, [r3, #0]
            break;
 8003efa:	e00c      	b.n	8003f16 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f02:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	029a      	lsls	r2, r3, #10
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d3dc      	bcc.n	8003ed0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f16:	4b04      	ldr	r3, [pc, #16]	; (8003f28 <HAL_FLASHEx_Erase+0xd0>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	761a      	strb	r2, [r3, #24]

  return status;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20002e40 	.word	0x20002e40
 8003f2c:	40022000 	.word	0x40022000

08003f30 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <FLASH_MassErase+0x30>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <FLASH_MassErase+0x34>)
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <FLASH_MassErase+0x34>)
 8003f44:	f043 0304 	orr.w	r3, r3, #4
 8003f48:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <FLASH_MassErase+0x34>)
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	4a05      	ldr	r2, [pc, #20]	; (8003f64 <FLASH_MassErase+0x34>)
 8003f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f54:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	20002e40 	.word	0x20002e40
 8003f64:	40022000 	.word	0x40022000

08003f68 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <FLASH_PageErase+0x38>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <FLASH_PageErase+0x3c>)
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <FLASH_PageErase+0x3c>)
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <FLASH_PageErase+0x3c>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <FLASH_PageErase+0x3c>)
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	4a05      	ldr	r2, [pc, #20]	; (8003fa4 <FLASH_PageErase+0x3c>)
 8003f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f92:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20002e40 	.word	0x20002e40
 8003fa4:	40022000 	.word	0x40022000

08003fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b08b      	sub	sp, #44	; 0x2c
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fba:	e127      	b.n	800420c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	f040 8116 	bne.w	8004206 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b12      	cmp	r3, #18
 8003fe0:	d034      	beq.n	800404c <HAL_GPIO_Init+0xa4>
 8003fe2:	2b12      	cmp	r3, #18
 8003fe4:	d80d      	bhi.n	8004002 <HAL_GPIO_Init+0x5a>
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d02b      	beq.n	8004042 <HAL_GPIO_Init+0x9a>
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d804      	bhi.n	8003ff8 <HAL_GPIO_Init+0x50>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d031      	beq.n	8004056 <HAL_GPIO_Init+0xae>
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d01c      	beq.n	8004030 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ff6:	e048      	b.n	800408a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d043      	beq.n	8004084 <HAL_GPIO_Init+0xdc>
 8003ffc:	2b11      	cmp	r3, #17
 8003ffe:	d01b      	beq.n	8004038 <HAL_GPIO_Init+0x90>
          break;
 8004000:	e043      	b.n	800408a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004002:	4a89      	ldr	r2, [pc, #548]	; (8004228 <HAL_GPIO_Init+0x280>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d026      	beq.n	8004056 <HAL_GPIO_Init+0xae>
 8004008:	4a87      	ldr	r2, [pc, #540]	; (8004228 <HAL_GPIO_Init+0x280>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d806      	bhi.n	800401c <HAL_GPIO_Init+0x74>
 800400e:	4a87      	ldr	r2, [pc, #540]	; (800422c <HAL_GPIO_Init+0x284>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d020      	beq.n	8004056 <HAL_GPIO_Init+0xae>
 8004014:	4a86      	ldr	r2, [pc, #536]	; (8004230 <HAL_GPIO_Init+0x288>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01d      	beq.n	8004056 <HAL_GPIO_Init+0xae>
          break;
 800401a:	e036      	b.n	800408a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800401c:	4a85      	ldr	r2, [pc, #532]	; (8004234 <HAL_GPIO_Init+0x28c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d019      	beq.n	8004056 <HAL_GPIO_Init+0xae>
 8004022:	4a85      	ldr	r2, [pc, #532]	; (8004238 <HAL_GPIO_Init+0x290>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d016      	beq.n	8004056 <HAL_GPIO_Init+0xae>
 8004028:	4a84      	ldr	r2, [pc, #528]	; (800423c <HAL_GPIO_Init+0x294>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <HAL_GPIO_Init+0xae>
          break;
 800402e:	e02c      	b.n	800408a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	623b      	str	r3, [r7, #32]
          break;
 8004036:	e028      	b.n	800408a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	3304      	adds	r3, #4
 800403e:	623b      	str	r3, [r7, #32]
          break;
 8004040:	e023      	b.n	800408a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	3308      	adds	r3, #8
 8004048:	623b      	str	r3, [r7, #32]
          break;
 800404a:	e01e      	b.n	800408a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	330c      	adds	r3, #12
 8004052:	623b      	str	r3, [r7, #32]
          break;
 8004054:	e019      	b.n	800408a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800405e:	2304      	movs	r3, #4
 8004060:	623b      	str	r3, [r7, #32]
          break;
 8004062:	e012      	b.n	800408a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800406c:	2308      	movs	r3, #8
 800406e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	611a      	str	r2, [r3, #16]
          break;
 8004076:	e008      	b.n	800408a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004078:	2308      	movs	r3, #8
 800407a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	615a      	str	r2, [r3, #20]
          break;
 8004082:	e002      	b.n	800408a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004084:	2300      	movs	r3, #0
 8004086:	623b      	str	r3, [r7, #32]
          break;
 8004088:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2bff      	cmp	r3, #255	; 0xff
 800408e:	d801      	bhi.n	8004094 <HAL_GPIO_Init+0xec>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	e001      	b.n	8004098 <HAL_GPIO_Init+0xf0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2bff      	cmp	r3, #255	; 0xff
 800409e:	d802      	bhi.n	80040a6 <HAL_GPIO_Init+0xfe>
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	e002      	b.n	80040ac <HAL_GPIO_Init+0x104>
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	3b08      	subs	r3, #8
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	210f      	movs	r1, #15
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	401a      	ands	r2, r3
 80040be:	6a39      	ldr	r1, [r7, #32]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	fa01 f303 	lsl.w	r3, r1, r3
 80040c6:	431a      	orrs	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8096 	beq.w	8004206 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040da:	4b59      	ldr	r3, [pc, #356]	; (8004240 <HAL_GPIO_Init+0x298>)
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	4a58      	ldr	r2, [pc, #352]	; (8004240 <HAL_GPIO_Init+0x298>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6193      	str	r3, [r2, #24]
 80040e6:	4b56      	ldr	r3, [pc, #344]	; (8004240 <HAL_GPIO_Init+0x298>)
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040f2:	4a54      	ldr	r2, [pc, #336]	; (8004244 <HAL_GPIO_Init+0x29c>)
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	3302      	adds	r3, #2
 80040fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	220f      	movs	r2, #15
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4013      	ands	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4b      	ldr	r2, [pc, #300]	; (8004248 <HAL_GPIO_Init+0x2a0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_GPIO_Init+0x19e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4a      	ldr	r2, [pc, #296]	; (800424c <HAL_GPIO_Init+0x2a4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00d      	beq.n	8004142 <HAL_GPIO_Init+0x19a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a49      	ldr	r2, [pc, #292]	; (8004250 <HAL_GPIO_Init+0x2a8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <HAL_GPIO_Init+0x196>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a48      	ldr	r2, [pc, #288]	; (8004254 <HAL_GPIO_Init+0x2ac>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_GPIO_Init+0x192>
 8004136:	2303      	movs	r3, #3
 8004138:	e006      	b.n	8004148 <HAL_GPIO_Init+0x1a0>
 800413a:	2304      	movs	r3, #4
 800413c:	e004      	b.n	8004148 <HAL_GPIO_Init+0x1a0>
 800413e:	2302      	movs	r3, #2
 8004140:	e002      	b.n	8004148 <HAL_GPIO_Init+0x1a0>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_GPIO_Init+0x1a0>
 8004146:	2300      	movs	r3, #0
 8004148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414a:	f002 0203 	and.w	r2, r2, #3
 800414e:	0092      	lsls	r2, r2, #2
 8004150:	4093      	lsls	r3, r2
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004158:	493a      	ldr	r1, [pc, #232]	; (8004244 <HAL_GPIO_Init+0x29c>)
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	3302      	adds	r3, #2
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004172:	4b39      	ldr	r3, [pc, #228]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4938      	ldr	r1, [pc, #224]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]
 800417e:	e006      	b.n	800418e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004180:	4b35      	ldr	r3, [pc, #212]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	43db      	mvns	r3, r3
 8004188:	4933      	ldr	r1, [pc, #204]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 800418a:	4013      	ands	r3, r2
 800418c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d006      	beq.n	80041a8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800419a:	4b2f      	ldr	r3, [pc, #188]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	492e      	ldr	r1, [pc, #184]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
 80041a6:	e006      	b.n	80041b6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	43db      	mvns	r3, r3
 80041b0:	4929      	ldr	r1, [pc, #164]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d006      	beq.n	80041d0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041c2:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	4924      	ldr	r1, [pc, #144]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
 80041ce:	e006      	b.n	80041de <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041d0:	4b21      	ldr	r3, [pc, #132]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	491f      	ldr	r1, [pc, #124]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 80041da:	4013      	ands	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d006      	beq.n	80041f8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	491a      	ldr	r1, [pc, #104]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60cb      	str	r3, [r1, #12]
 80041f6:	e006      	b.n	8004206 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041f8:	4b17      	ldr	r3, [pc, #92]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	43db      	mvns	r3, r3
 8004200:	4915      	ldr	r1, [pc, #84]	; (8004258 <HAL_GPIO_Init+0x2b0>)
 8004202:	4013      	ands	r3, r2
 8004204:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	3301      	adds	r3, #1
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	fa22 f303 	lsr.w	r3, r2, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	f47f aed0 	bne.w	8003fbc <HAL_GPIO_Init+0x14>
  }
}
 800421c:	bf00      	nop
 800421e:	372c      	adds	r7, #44	; 0x2c
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	10210000 	.word	0x10210000
 800422c:	10110000 	.word	0x10110000
 8004230:	10120000 	.word	0x10120000
 8004234:	10310000 	.word	0x10310000
 8004238:	10320000 	.word	0x10320000
 800423c:	10220000 	.word	0x10220000
 8004240:	40021000 	.word	0x40021000
 8004244:	40010000 	.word	0x40010000
 8004248:	40010800 	.word	0x40010800
 800424c:	40010c00 	.word	0x40010c00
 8004250:	40011000 	.word	0x40011000
 8004254:	40011400 	.word	0x40011400
 8004258:	40010400 	.word	0x40010400

0800425c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	887b      	ldrh	r3, [r7, #2]
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
 8004278:	e001      	b.n	800427e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	460b      	mov	r3, r1
 8004294:	807b      	strh	r3, [r7, #2]
 8004296:	4613      	mov	r3, r2
 8004298:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800429a:	787b      	ldrb	r3, [r7, #1]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042a0:	887a      	ldrh	r2, [r7, #2]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80042a6:	e003      	b.n	80042b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042a8:	887b      	ldrh	r3, [r7, #2]
 80042aa:	041a      	lsls	r2, r3, #16
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	611a      	str	r2, [r3, #16]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e11f      	b.n	800450e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fd fe58 	bl	8001f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	; 0x24
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800431e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004320:	f000 fcda 	bl	8004cd8 <HAL_RCC_GetPCLK1Freq>
 8004324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4a7b      	ldr	r2, [pc, #492]	; (8004518 <HAL_I2C_Init+0x25c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d807      	bhi.n	8004340 <HAL_I2C_Init+0x84>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a7a      	ldr	r2, [pc, #488]	; (800451c <HAL_I2C_Init+0x260>)
 8004334:	4293      	cmp	r3, r2
 8004336:	bf94      	ite	ls
 8004338:	2301      	movls	r3, #1
 800433a:	2300      	movhi	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e006      	b.n	800434e <HAL_I2C_Init+0x92>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a77      	ldr	r2, [pc, #476]	; (8004520 <HAL_I2C_Init+0x264>)
 8004344:	4293      	cmp	r3, r2
 8004346:	bf94      	ite	ls
 8004348:	2301      	movls	r3, #1
 800434a:	2300      	movhi	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e0db      	b.n	800450e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a72      	ldr	r2, [pc, #456]	; (8004524 <HAL_I2C_Init+0x268>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	0c9b      	lsrs	r3, r3, #18
 8004360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4a64      	ldr	r2, [pc, #400]	; (8004518 <HAL_I2C_Init+0x25c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d802      	bhi.n	8004390 <HAL_I2C_Init+0xd4>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3301      	adds	r3, #1
 800438e:	e009      	b.n	80043a4 <HAL_I2C_Init+0xe8>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	4a63      	ldr	r2, [pc, #396]	; (8004528 <HAL_I2C_Init+0x26c>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	099b      	lsrs	r3, r3, #6
 80043a2:	3301      	adds	r3, #1
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4956      	ldr	r1, [pc, #344]	; (8004518 <HAL_I2C_Init+0x25c>)
 80043c0:	428b      	cmp	r3, r1
 80043c2:	d80d      	bhi.n	80043e0 <HAL_I2C_Init+0x124>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1e59      	subs	r1, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d2:	3301      	adds	r3, #1
 80043d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d8:	2b04      	cmp	r3, #4
 80043da:	bf38      	it	cc
 80043dc:	2304      	movcc	r3, #4
 80043de:	e04f      	b.n	8004480 <HAL_I2C_Init+0x1c4>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d111      	bne.n	800440c <HAL_I2C_Init+0x150>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1e58      	subs	r0, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	440b      	add	r3, r1
 80043f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e012      	b.n	8004432 <HAL_I2C_Init+0x176>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	0099      	lsls	r1, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Init+0x17e>
 8004436:	2301      	movs	r3, #1
 8004438:	e022      	b.n	8004480 <HAL_I2C_Init+0x1c4>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10e      	bne.n	8004460 <HAL_I2C_Init+0x1a4>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1e58      	subs	r0, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6859      	ldr	r1, [r3, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	440b      	add	r3, r1
 8004450:	fbb0 f3f3 	udiv	r3, r0, r3
 8004454:	3301      	adds	r3, #1
 8004456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	e00f      	b.n	8004480 <HAL_I2C_Init+0x1c4>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1e58      	subs	r0, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6859      	ldr	r1, [r3, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	0099      	lsls	r1, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	fbb0 f3f3 	udiv	r3, r0, r3
 8004476:	3301      	adds	r3, #1
 8004478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	6809      	ldr	r1, [r1, #0]
 8004484:	4313      	orrs	r3, r2
 8004486:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6911      	ldr	r1, [r2, #16]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68d2      	ldr	r2, [r2, #12]
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	000186a0 	.word	0x000186a0
 800451c:	001e847f 	.word	0x001e847f
 8004520:	003d08ff 	.word	0x003d08ff
 8004524:	431bde83 	.word	0x431bde83
 8004528:	10624dd3 	.word	0x10624dd3

0800452c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e26c      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8087 	beq.w	800465a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800454c:	4b92      	ldr	r3, [pc, #584]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 030c 	and.w	r3, r3, #12
 8004554:	2b04      	cmp	r3, #4
 8004556:	d00c      	beq.n	8004572 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004558:	4b8f      	ldr	r3, [pc, #572]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b08      	cmp	r3, #8
 8004562:	d112      	bne.n	800458a <HAL_RCC_OscConfig+0x5e>
 8004564:	4b8c      	ldr	r3, [pc, #560]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d10b      	bne.n	800458a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004572:	4b89      	ldr	r3, [pc, #548]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d06c      	beq.n	8004658 <HAL_RCC_OscConfig+0x12c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d168      	bne.n	8004658 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e246      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004592:	d106      	bne.n	80045a2 <HAL_RCC_OscConfig+0x76>
 8004594:	4b80      	ldr	r3, [pc, #512]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a7f      	ldr	r2, [pc, #508]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 800459a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	e02e      	b.n	8004600 <HAL_RCC_OscConfig+0xd4>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x98>
 80045aa:	4b7b      	ldr	r3, [pc, #492]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a7a      	ldr	r2, [pc, #488]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	4b78      	ldr	r3, [pc, #480]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a77      	ldr	r2, [pc, #476]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e01d      	b.n	8004600 <HAL_RCC_OscConfig+0xd4>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0xbc>
 80045ce:	4b72      	ldr	r3, [pc, #456]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a71      	ldr	r2, [pc, #452]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b6f      	ldr	r3, [pc, #444]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a6e      	ldr	r2, [pc, #440]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e00b      	b.n	8004600 <HAL_RCC_OscConfig+0xd4>
 80045e8:	4b6b      	ldr	r3, [pc, #428]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a6a      	ldr	r2, [pc, #424]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4b68      	ldr	r3, [pc, #416]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a67      	ldr	r2, [pc, #412]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80045fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7ff f996 	bl	8003938 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7ff f992 	bl	8003938 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e1fa      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	4b5d      	ldr	r3, [pc, #372]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0xe4>
 800462e:	e014      	b.n	800465a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7ff f982 	bl	8003938 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004638:	f7ff f97e 	bl	8003938 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e1e6      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	4b53      	ldr	r3, [pc, #332]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x10c>
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d063      	beq.n	800472e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004666:	4b4c      	ldr	r3, [pc, #304]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00b      	beq.n	800468a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004672:	4b49      	ldr	r3, [pc, #292]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b08      	cmp	r3, #8
 800467c:	d11c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x18c>
 800467e:	4b46      	ldr	r3, [pc, #280]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d116      	bne.n	80046b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468a:	4b43      	ldr	r3, [pc, #268]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_RCC_OscConfig+0x176>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d001      	beq.n	80046a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e1ba      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a2:	4b3d      	ldr	r3, [pc, #244]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4939      	ldr	r1, [pc, #228]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b6:	e03a      	b.n	800472e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c0:	4b36      	ldr	r3, [pc, #216]	; (800479c <HAL_RCC_OscConfig+0x270>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c6:	f7ff f937 	bl	8003938 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ce:	f7ff f933 	bl	8003938 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e19b      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e0:	4b2d      	ldr	r3, [pc, #180]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ec:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4927      	ldr	r1, [pc, #156]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	600b      	str	r3, [r1, #0]
 8004700:	e015      	b.n	800472e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004702:	4b26      	ldr	r3, [pc, #152]	; (800479c <HAL_RCC_OscConfig+0x270>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7ff f916 	bl	8003938 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004710:	f7ff f912 	bl	8003938 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e17a      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d03a      	beq.n	80047b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d019      	beq.n	8004776 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004742:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004748:	f7ff f8f6 	bl	8003938 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004750:	f7ff f8f2 	bl	8003938 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e15a      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <HAL_RCC_OscConfig+0x26c>)
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800476e:	2001      	movs	r0, #1
 8004770:	f000 fb0a 	bl	8004d88 <RCC_Delay>
 8004774:	e01c      	b.n	80047b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <HAL_RCC_OscConfig+0x274>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477c:	f7ff f8dc 	bl	8003938 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004782:	e00f      	b.n	80047a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004784:	f7ff f8d8 	bl	8003938 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d908      	bls.n	80047a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e140      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000
 800479c:	42420000 	.word	0x42420000
 80047a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a4:	4b9e      	ldr	r3, [pc, #632]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e9      	bne.n	8004784 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80a6 	beq.w	800490a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047be:	2300      	movs	r3, #0
 80047c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c2:	4b97      	ldr	r3, [pc, #604]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10d      	bne.n	80047ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	4b94      	ldr	r3, [pc, #592]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	4a93      	ldr	r2, [pc, #588]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d8:	61d3      	str	r3, [r2, #28]
 80047da:	4b91      	ldr	r3, [pc, #580]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ea:	4b8e      	ldr	r3, [pc, #568]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d118      	bne.n	8004828 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f6:	4b8b      	ldr	r3, [pc, #556]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a8a      	ldr	r2, [pc, #552]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004802:	f7ff f899 	bl	8003938 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480a:	f7ff f895 	bl	8003938 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b64      	cmp	r3, #100	; 0x64
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e0fd      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481c:	4b81      	ldr	r3, [pc, #516]	; (8004a24 <HAL_RCC_OscConfig+0x4f8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d106      	bne.n	800483e <HAL_RCC_OscConfig+0x312>
 8004830:	4b7b      	ldr	r3, [pc, #492]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	4a7a      	ldr	r2, [pc, #488]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6213      	str	r3, [r2, #32]
 800483c:	e02d      	b.n	800489a <HAL_RCC_OscConfig+0x36e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0x334>
 8004846:	4b76      	ldr	r3, [pc, #472]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	4a75      	ldr	r2, [pc, #468]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	6213      	str	r3, [r2, #32]
 8004852:	4b73      	ldr	r3, [pc, #460]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	4a72      	ldr	r2, [pc, #456]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	6213      	str	r3, [r2, #32]
 800485e:	e01c      	b.n	800489a <HAL_RCC_OscConfig+0x36e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2b05      	cmp	r3, #5
 8004866:	d10c      	bne.n	8004882 <HAL_RCC_OscConfig+0x356>
 8004868:	4b6d      	ldr	r3, [pc, #436]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	4a6c      	ldr	r2, [pc, #432]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 800486e:	f043 0304 	orr.w	r3, r3, #4
 8004872:	6213      	str	r3, [r2, #32]
 8004874:	4b6a      	ldr	r3, [pc, #424]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	4a69      	ldr	r2, [pc, #420]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	6213      	str	r3, [r2, #32]
 8004880:	e00b      	b.n	800489a <HAL_RCC_OscConfig+0x36e>
 8004882:	4b67      	ldr	r3, [pc, #412]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	4a66      	ldr	r2, [pc, #408]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	6213      	str	r3, [r2, #32]
 800488e:	4b64      	ldr	r3, [pc, #400]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	4a63      	ldr	r2, [pc, #396]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004894:	f023 0304 	bic.w	r3, r3, #4
 8004898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d015      	beq.n	80048ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a2:	f7ff f849 	bl	8003938 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7ff f845 	bl	8003938 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0ab      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c0:	4b57      	ldr	r3, [pc, #348]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0ee      	beq.n	80048aa <HAL_RCC_OscConfig+0x37e>
 80048cc:	e014      	b.n	80048f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ce:	f7ff f833 	bl	8003938 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d4:	e00a      	b.n	80048ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f7ff f82f 	bl	8003938 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e095      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ec:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ee      	bne.n	80048d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d105      	bne.n	800490a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fe:	4b48      	ldr	r3, [pc, #288]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	4a47      	ldr	r2, [pc, #284]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004908:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8081 	beq.w	8004a16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004914:	4b42      	ldr	r3, [pc, #264]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	2b08      	cmp	r3, #8
 800491e:	d061      	beq.n	80049e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d146      	bne.n	80049b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004928:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <HAL_RCC_OscConfig+0x4fc>)
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492e:	f7ff f803 	bl	8003938 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004936:	f7fe ffff 	bl	8003938 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e067      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004948:	4b35      	ldr	r3, [pc, #212]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f0      	bne.n	8004936 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495c:	d108      	bne.n	8004970 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800495e:	4b30      	ldr	r3, [pc, #192]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	492d      	ldr	r1, [pc, #180]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 800496c:	4313      	orrs	r3, r2
 800496e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a19      	ldr	r1, [r3, #32]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	430b      	orrs	r3, r1
 8004982:	4927      	ldr	r1, [pc, #156]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004988:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <HAL_RCC_OscConfig+0x4fc>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fe ffd3 	bl	8003938 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004996:	f7fe ffcf 	bl	8003938 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e037      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049a8:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x46a>
 80049b4:	e02f      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b6:	4b1c      	ldr	r3, [pc, #112]	; (8004a28 <HAL_RCC_OscConfig+0x4fc>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fe ffbc 	bl	8003938 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c4:	f7fe ffb8 	bl	8003938 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e020      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x498>
 80049e2:	e018      	b.n	8004a16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e013      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCC_OscConfig+0x4f4>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d106      	bne.n	8004a12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d001      	beq.n	8004a16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40007000 	.word	0x40007000
 8004a28:	42420060 	.word	0x42420060

08004a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0d0      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a40:	4b6a      	ldr	r3, [pc, #424]	; (8004bec <HAL_RCC_ClockConfig+0x1c0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d910      	bls.n	8004a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b67      	ldr	r3, [pc, #412]	; (8004bec <HAL_RCC_ClockConfig+0x1c0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 0207 	bic.w	r2, r3, #7
 8004a56:	4965      	ldr	r1, [pc, #404]	; (8004bec <HAL_RCC_ClockConfig+0x1c0>)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b63      	ldr	r3, [pc, #396]	; (8004bec <HAL_RCC_ClockConfig+0x1c0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0b8      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a88:	4b59      	ldr	r3, [pc, #356]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4a58      	ldr	r2, [pc, #352]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa0:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4a52      	ldr	r2, [pc, #328]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004aaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aac:	4b50      	ldr	r3, [pc, #320]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	494d      	ldr	r1, [pc, #308]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d040      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d115      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e07f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d107      	bne.n	8004afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aea:	4b41      	ldr	r3, [pc, #260]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e073      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afa:	4b3d      	ldr	r3, [pc, #244]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e06b      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b0a:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f023 0203 	bic.w	r2, r3, #3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	4936      	ldr	r1, [pc, #216]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b1c:	f7fe ff0c 	bl	8003938 <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b24:	f7fe ff08 	bl	8003938 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e053      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3a:	4b2d      	ldr	r3, [pc, #180]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f003 020c 	and.w	r2, r3, #12
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d1eb      	bne.n	8004b24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b27      	ldr	r3, [pc, #156]	; (8004bec <HAL_RCC_ClockConfig+0x1c0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d210      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <HAL_RCC_ClockConfig+0x1c0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 0207 	bic.w	r2, r3, #7
 8004b62:	4922      	ldr	r1, [pc, #136]	; (8004bec <HAL_RCC_ClockConfig+0x1c0>)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_RCC_ClockConfig+0x1c0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e032      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b88:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4916      	ldr	r1, [pc, #88]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	490e      	ldr	r1, [pc, #56]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bba:	f000 f821 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8004bbe:	4601      	mov	r1, r0
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	4a0a      	ldr	r2, [pc, #40]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8004bcc:	5cd3      	ldrb	r3, [r2, r3]
 8004bce:	fa21 f303 	lsr.w	r3, r1, r3
 8004bd2:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8004bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_ClockConfig+0x1d0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fd fa68 	bl	80020b0 <HAL_InitTick>

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40022000 	.word	0x40022000
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	080092ec 	.word	0x080092ec
 8004bf8:	20000018 	.word	0x20000018
 8004bfc:	20000040 	.word	0x20000040

08004c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c00:	b490      	push	{r4, r7}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c06:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c08:	1d3c      	adds	r4, r7, #4
 8004c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c10:	4b28      	ldr	r3, [pc, #160]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
 8004c22:	2300      	movs	r3, #0
 8004c24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c2a:	4b23      	ldr	r3, [pc, #140]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d002      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x40>
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d003      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x46>
 8004c3e:	e02d      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c40:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c42:	623b      	str	r3, [r7, #32]
      break;
 8004c44:	e02d      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	0c9b      	lsrs	r3, r3, #18
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c52:	4413      	add	r3, r2
 8004c54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004c58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c64:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	0c5b      	lsrs	r3, r3, #17
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c72:	4413      	add	r3, r2
 8004c74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	4a0f      	ldr	r2, [pc, #60]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c7e:	fb02 f203 	mul.w	r2, r2, r3
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8a:	e004      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	623b      	str	r3, [r7, #32]
      break;
 8004c9a:	e002      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c9c:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c9e:	623b      	str	r3, [r7, #32]
      break;
 8004ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3728      	adds	r7, #40	; 0x28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc90      	pop	{r4, r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	0800920c 	.word	0x0800920c
 8004cb4:	0800921c 	.word	0x0800921c
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	007a1200 	.word	0x007a1200
 8004cc0:	003d0900 	.word	0x003d0900

08004cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc8:	4b02      	ldr	r3, [pc, #8]	; (8004cd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr
 8004cd4:	20000018 	.word	0x20000018

08004cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cdc:	f7ff fff2 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004ce0:	4601      	mov	r1, r0
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	0a1b      	lsrs	r3, r3, #8
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	4a03      	ldr	r2, [pc, #12]	; (8004cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cee:	5cd3      	ldrb	r3, [r2, r3]
 8004cf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	080092fc 	.word	0x080092fc

08004d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d04:	f7ff ffde 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004d08:	4601      	mov	r1, r0
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	0adb      	lsrs	r3, r3, #11
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	4a03      	ldr	r2, [pc, #12]	; (8004d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d16:	5cd3      	ldrb	r3, [r2, r3]
 8004d18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40021000 	.word	0x40021000
 8004d24:	080092fc 	.word	0x080092fc

08004d28 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	220f      	movs	r2, #15
 8004d36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <HAL_RCC_GetClockConfig+0x58>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f003 0203 	and.w	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d44:	4b0e      	ldr	r3, [pc, #56]	; (8004d80 <HAL_RCC_GetClockConfig+0x58>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_GetClockConfig+0x58>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d5c:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_RCC_GetClockConfig+0x58>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	08db      	lsrs	r3, r3, #3
 8004d62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_GetClockConfig+0x5c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0207 	and.w	r2, r3, #7
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	40021000 	.word	0x40021000
 8004d84:	40022000 	.word	0x40022000

08004d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d90:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <RCC_Delay+0x34>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <RCC_Delay+0x38>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	0a5b      	lsrs	r3, r3, #9
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004da4:	bf00      	nop
  }
  while (Delay --);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1e5a      	subs	r2, r3, #1
 8004daa:	60fa      	str	r2, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f9      	bne.n	8004da4 <RCC_Delay+0x1c>
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000018 	.word	0x20000018
 8004dc0:	10624dd3 	.word	0x10624dd3

08004dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e076      	b.n	8004ec4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d108      	bne.n	8004df0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de6:	d009      	beq.n	8004dfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	61da      	str	r2, [r3, #28]
 8004dee:	e005      	b.n	8004dfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fd f8fe 	bl	8002018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e80:	ea42 0103 	orr.w	r1, r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	0c1a      	lsrs	r2, r3, #16
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f002 0204 	and.w	r2, r2, #4
 8004ea2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08c      	sub	sp, #48	; 0x30
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004eda:	2301      	movs	r3, #1
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x26>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e18a      	b.n	8005208 <HAL_SPI_TransmitReceive+0x33c>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004efa:	f7fe fd1d 	bl	8003938 <HAL_GetTick>
 8004efe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f10:	887b      	ldrh	r3, [r7, #2]
 8004f12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d00f      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x70>
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f22:	d107      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d103      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x68>
 8004f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d003      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f3a:	e15b      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x82>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x82>
 8004f48:	887b      	ldrh	r3, [r7, #2]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f54:	e14e      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d003      	beq.n	8004f6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2205      	movs	r2, #5
 8004f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	887a      	ldrh	r2, [r7, #2]
 8004f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	887a      	ldrh	r2, [r7, #2]
 8004f80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	887a      	ldrh	r2, [r7, #2]
 8004f8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	887a      	ldrh	r2, [r7, #2]
 8004f92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b40      	cmp	r3, #64	; 0x40
 8004fac:	d007      	beq.n	8004fbe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc6:	d178      	bne.n	80050ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_SPI_TransmitReceive+0x10a>
 8004fd0:	8b7b      	ldrh	r3, [r7, #26]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d166      	bne.n	80050a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	881a      	ldrh	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	1c9a      	adds	r2, r3, #2
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ffa:	e053      	b.n	80050a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d11b      	bne.n	8005042 <HAL_SPI_TransmitReceive+0x176>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d016      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x176>
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	2b01      	cmp	r3, #1
 8005018:	d113      	bne.n	8005042 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	881a      	ldrh	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	1c9a      	adds	r2, r3, #2
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d119      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x1b8>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d014      	beq.n	8005084 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	b292      	uxth	r2, r2
 8005066:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	1c9a      	adds	r2, r3, #2
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005080:	2301      	movs	r3, #1
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005084:	f7fe fc58 	bl	8003938 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005090:	429a      	cmp	r2, r3
 8005092:	d807      	bhi.n	80050a4 <HAL_SPI_TransmitReceive+0x1d8>
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d003      	beq.n	80050a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050a2:	e0a7      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1a6      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x130>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1a1      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x130>
 80050b8:	e07c      	b.n	80051b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <HAL_SPI_TransmitReceive+0x1fc>
 80050c2:	8b7b      	ldrh	r3, [r7, #26]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d16b      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	7812      	ldrb	r2, [r2, #0]
 80050d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ee:	e057      	b.n	80051a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d11c      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x26c>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d017      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x26c>
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	2b01      	cmp	r3, #1
 800510c:	d114      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	7812      	ldrb	r2, [r2, #0]
 800511a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d119      	bne.n	800517a <HAL_SPI_TransmitReceive+0x2ae>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d014      	beq.n	800517a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005176:	2301      	movs	r3, #1
 8005178:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800517a:	f7fe fbdd 	bl	8003938 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005186:	429a      	cmp	r2, r3
 8005188:	d803      	bhi.n	8005192 <HAL_SPI_TransmitReceive+0x2c6>
 800518a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d102      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x2cc>
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	2b00      	cmp	r3, #0
 8005196:	d103      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800519e:	e029      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1a2      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x224>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d19d      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f8b1 	bl	8005320 <SPI_EndRxTxTransaction>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d006      	beq.n	80051d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051d0:	e010      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10b      	bne.n	80051f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	e000      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005204:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005208:	4618      	mov	r0, r3
 800520a:	3730      	adds	r7, #48	; 0x30
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005220:	f7fe fb8a 	bl	8003938 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	4413      	add	r3, r2
 800522e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005230:	f7fe fb82 	bl	8003938 <HAL_GetTick>
 8005234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005236:	4b39      	ldr	r3, [pc, #228]	; (800531c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	015b      	lsls	r3, r3, #5
 800523c:	0d1b      	lsrs	r3, r3, #20
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005246:	e054      	b.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d050      	beq.n	80052f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005250:	f7fe fb72 	bl	8003938 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	429a      	cmp	r2, r3
 800525e:	d902      	bls.n	8005266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d13d      	bne.n	80052e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527e:	d111      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005288:	d004      	beq.n	8005294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005292:	d107      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ac:	d10f      	bne.n	80052ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e017      	b.n	8005312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4013      	ands	r3, r2
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	429a      	cmp	r2, r3
 8005300:	bf0c      	ite	eq
 8005302:	2301      	moveq	r3, #1
 8005304:	2300      	movne	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	429a      	cmp	r2, r3
 800530e:	d19b      	bne.n	8005248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000018 	.word	0x20000018

08005320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2200      	movs	r2, #0
 8005334:	2180      	movs	r1, #128	; 0x80
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff ff6a 	bl	8005210 <SPI_WaitFlagStateUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d007      	beq.n	8005352 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	f043 0220 	orr.w	r2, r3, #32
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e000      	b.n	8005354 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e041      	b.n	80053f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f839 	bl	80053fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f000 f9b4 	bl	8005708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	d001      	beq.n	8005424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e03a      	b.n	800549a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a18      	ldr	r2, [pc, #96]	; (80054a4 <HAL_TIM_Base_Start_IT+0x98>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00e      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x58>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544e:	d009      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x58>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a14      	ldr	r2, [pc, #80]	; (80054a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d004      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x58>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a13      	ldr	r2, [pc, #76]	; (80054ac <HAL_TIM_Base_Start_IT+0xa0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d111      	bne.n	8005488 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b06      	cmp	r3, #6
 8005474:	d010      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0201 	orr.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005486:	e007      	b.n	8005498 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800

080054b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d122      	bne.n	800550c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d11b      	bne.n	800550c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0202 	mvn.w	r2, #2
 80054dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f8ed 	bl	80056d2 <HAL_TIM_IC_CaptureCallback>
 80054f8:	e005      	b.n	8005506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f8e0 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f8ef 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b04      	cmp	r3, #4
 8005518:	d122      	bne.n	8005560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b04      	cmp	r3, #4
 8005526:	d11b      	bne.n	8005560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0204 	mvn.w	r2, #4
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f8c3 	bl	80056d2 <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f8b6 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f8c5 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b08      	cmp	r3, #8
 800556c:	d122      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b08      	cmp	r3, #8
 800557a:	d11b      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0208 	mvn.w	r2, #8
 8005584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2204      	movs	r2, #4
 800558a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f899 	bl	80056d2 <HAL_TIM_IC_CaptureCallback>
 80055a0:	e005      	b.n	80055ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f88c 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f89b 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d122      	bne.n	8005608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d11b      	bne.n	8005608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0210 	mvn.w	r2, #16
 80055d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2208      	movs	r2, #8
 80055de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f86f 	bl	80056d2 <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f862 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f871 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b01      	cmp	r3, #1
 8005614:	d10e      	bne.n	8005634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b01      	cmp	r3, #1
 8005622:	d107      	bne.n	8005634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0201 	mvn.w	r2, #1
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fc fc62 	bl	8001ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	d10e      	bne.n	8005660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564c:	2b80      	cmp	r3, #128	; 0x80
 800564e:	d107      	bne.n	8005660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f8bf 	bl	80057de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b40      	cmp	r3, #64	; 0x40
 800566c:	d10e      	bne.n	800568c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d107      	bne.n	800568c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f835 	bl	80056f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b20      	cmp	r3, #32
 8005698:	d10e      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d107      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0220 	mvn.w	r2, #32
 80056b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f88a 	bl	80057cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr

080056f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <TIM_Base_SetConfig+0xb8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00b      	beq.n	8005738 <TIM_Base_SetConfig+0x30>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005726:	d007      	beq.n	8005738 <TIM_Base_SetConfig+0x30>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a26      	ldr	r2, [pc, #152]	; (80057c4 <TIM_Base_SetConfig+0xbc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_Base_SetConfig+0x30>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a25      	ldr	r2, [pc, #148]	; (80057c8 <TIM_Base_SetConfig+0xc0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d108      	bne.n	800574a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <TIM_Base_SetConfig+0xb8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00b      	beq.n	800576a <TIM_Base_SetConfig+0x62>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005758:	d007      	beq.n	800576a <TIM_Base_SetConfig+0x62>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a19      	ldr	r2, [pc, #100]	; (80057c4 <TIM_Base_SetConfig+0xbc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_Base_SetConfig+0x62>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a18      	ldr	r2, [pc, #96]	; (80057c8 <TIM_Base_SetConfig+0xc0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d108      	bne.n	800577c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a07      	ldr	r2, [pc, #28]	; (80057c0 <TIM_Base_SetConfig+0xb8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d103      	bne.n	80057b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	615a      	str	r2, [r3, #20]
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr
 80057c0:	40012c00 	.word	0x40012c00
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800

080057cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr

080057de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057f6:	f3ef 8305 	mrs	r3, IPSR
 80057fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80057fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10f      	bne.n	8005822 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005802:	f3ef 8310 	mrs	r3, PRIMASK
 8005806:	607b      	str	r3, [r7, #4]
  return(result);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <osKernelInitialize+0x32>
 800580e:	4b10      	ldr	r3, [pc, #64]	; (8005850 <osKernelInitialize+0x60>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d109      	bne.n	800582a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005816:	f3ef 8311 	mrs	r3, BASEPRI
 800581a:	603b      	str	r3, [r7, #0]
  return(result);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005822:	f06f 0305 	mvn.w	r3, #5
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e00c      	b.n	8005844 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800582a:	4b09      	ldr	r3, [pc, #36]	; (8005850 <osKernelInitialize+0x60>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d105      	bne.n	800583e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005832:	4b07      	ldr	r3, [pc, #28]	; (8005850 <osKernelInitialize+0x60>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	e002      	b.n	8005844 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800583e:	f04f 33ff 	mov.w	r3, #4294967295
 8005842:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005844:	68fb      	ldr	r3, [r7, #12]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr
 8005850:	20000104 	.word	0x20000104

08005854 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585a:	f3ef 8305 	mrs	r3, IPSR
 800585e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005860:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10f      	bne.n	8005886 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005866:	f3ef 8310 	mrs	r3, PRIMASK
 800586a:	607b      	str	r3, [r7, #4]
  return(result);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <osKernelStart+0x32>
 8005872:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <osKernelStart+0x64>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d109      	bne.n	800588e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800587a:	f3ef 8311 	mrs	r3, BASEPRI
 800587e:	603b      	str	r3, [r7, #0]
  return(result);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005886:	f06f 0305 	mvn.w	r3, #5
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e00e      	b.n	80058ac <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <osKernelStart+0x64>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d107      	bne.n	80058a6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005896:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <osKernelStart+0x64>)
 8005898:	2202      	movs	r2, #2
 800589a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800589c:	f001 f864 	bl	8006968 <vTaskStartScheduler>
      stat = osOK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e002      	b.n	80058ac <osKernelStart+0x58>
    } else {
      stat = osError;
 80058a6:	f04f 33ff 	mov.w	r3, #4294967295
 80058aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80058ac:	68fb      	ldr	r3, [r7, #12]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000104 	.word	0x20000104

080058bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b092      	sub	sp, #72	; 0x48
 80058c0:	af04      	add	r7, sp, #16
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058cc:	f3ef 8305 	mrs	r3, IPSR
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f040 8094 	bne.w	8005a02 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058da:	f3ef 8310 	mrs	r3, PRIMASK
 80058de:	623b      	str	r3, [r7, #32]
  return(result);
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f040 808d 	bne.w	8005a02 <osThreadNew+0x146>
 80058e8:	4b48      	ldr	r3, [pc, #288]	; (8005a0c <osThreadNew+0x150>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d106      	bne.n	80058fe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058f0:	f3ef 8311 	mrs	r3, BASEPRI
 80058f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f040 8082 	bne.w	8005a02 <osThreadNew+0x146>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d07e      	beq.n	8005a02 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005904:	2380      	movs	r3, #128	; 0x80
 8005906:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005908:	2318      	movs	r3, #24
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800590c:	2300      	movs	r3, #0
 800590e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005910:	f107 031b 	add.w	r3, r7, #27
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005916:	f04f 33ff 	mov.w	r3, #4294967295
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d045      	beq.n	80059ae <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <osThreadNew+0x74>
        name = attr->name;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <osThreadNew+0x9a>
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	2b38      	cmp	r3, #56	; 0x38
 8005948:	d805      	bhi.n	8005956 <osThreadNew+0x9a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <osThreadNew+0x9e>
        return (NULL);
 8005956:	2300      	movs	r3, #0
 8005958:	e054      	b.n	8005a04 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	089b      	lsrs	r3, r3, #2
 8005968:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00e      	beq.n	8005990 <osThreadNew+0xd4>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b5b      	cmp	r3, #91	; 0x5b
 8005978:	d90a      	bls.n	8005990 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800597e:	2b00      	cmp	r3, #0
 8005980:	d006      	beq.n	8005990 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <osThreadNew+0xd4>
        mem = 1;
 800598a:	2301      	movs	r3, #1
 800598c:	62bb      	str	r3, [r7, #40]	; 0x28
 800598e:	e010      	b.n	80059b2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10c      	bne.n	80059b2 <osThreadNew+0xf6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d108      	bne.n	80059b2 <osThreadNew+0xf6>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d104      	bne.n	80059b2 <osThreadNew+0xf6>
          mem = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ac:	e001      	b.n	80059b2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d110      	bne.n	80059da <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059c0:	9202      	str	r2, [sp, #8]
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fe02 	bl	80065d8 <xTaskCreateStatic>
 80059d4:	4603      	mov	r3, r0
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e013      	b.n	8005a02 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d110      	bne.n	8005a02 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	f107 0314 	add.w	r3, r7, #20
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fe49 	bl	800668a <xTaskCreate>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d001      	beq.n	8005a02 <osThreadNew+0x146>
          hTask = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a02:	697b      	ldr	r3, [r7, #20]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3738      	adds	r7, #56	; 0x38
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20000104 	.word	0x20000104

08005a10 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a18:	f3ef 8305 	mrs	r3, IPSR
 8005a1c:	613b      	str	r3, [r7, #16]
  return(result);
 8005a1e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10f      	bne.n	8005a44 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a24:	f3ef 8310 	mrs	r3, PRIMASK
 8005a28:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <osDelay+0x34>
 8005a30:	4b0d      	ldr	r3, [pc, #52]	; (8005a68 <osDelay+0x58>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d109      	bne.n	8005a4c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a38:	f3ef 8311 	mrs	r3, BASEPRI
 8005a3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <osDelay+0x3c>
    stat = osErrorISR;
 8005a44:	f06f 0305 	mvn.w	r3, #5
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	e007      	b.n	8005a5c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 ff52 	bl	8006900 <vTaskDelay>
    }
  }

  return (stat);
 8005a5c:	697b      	ldr	r3, [r7, #20]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000104 	.word	0x20000104

08005a6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4a06      	ldr	r2, [pc, #24]	; (8005a94 <vApplicationGetIdleTaskMemory+0x28>)
 8005a7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	4a05      	ldr	r2, [pc, #20]	; (8005a98 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2280      	movs	r2, #128	; 0x80
 8005a88:	601a      	str	r2, [r3, #0]
}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	20000108 	.word	0x20000108
 8005a98:	20000164 	.word	0x20000164

08005a9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4a07      	ldr	r2, [pc, #28]	; (8005ac8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005aac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4a06      	ldr	r2, [pc, #24]	; (8005acc <vApplicationGetTimerTaskMemory+0x30>)
 8005ab2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aba:	601a      	str	r2, [r3, #0]
}
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000364 	.word	0x20000364
 8005acc:	200003c0 	.word	0x200003c0

08005ad0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f103 0208 	add.w	r2, r3, #8
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f103 0208 	add.w	r2, r3, #8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f103 0208 	add.w	r2, r3, #8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr

08005b0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	601a      	str	r2, [r3, #0]
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr

08005b6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d103      	bne.n	8005b8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	e00c      	b.n	8005ba6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3308      	adds	r3, #8
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	e002      	b.n	8005b9a <vListInsert+0x2e>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d2f6      	bcs.n	8005b94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	601a      	str	r2, [r3, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6892      	ldr	r2, [r2, #8]
 8005bf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6852      	ldr	r2, [r2, #4]
 8005bfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d103      	bne.n	8005c10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	1e5a      	subs	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr
	...

08005c30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	60bb      	str	r3, [r7, #8]
 8005c56:	e7fe      	b.n	8005c56 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005c58:	f001 ff96 	bl	8007b88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c64:	68f9      	ldr	r1, [r7, #12]
 8005c66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	441a      	add	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	68f9      	ldr	r1, [r7, #12]
 8005c8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	441a      	add	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	22ff      	movs	r2, #255	; 0xff
 8005c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	22ff      	movs	r2, #255	; 0xff
 8005ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d114      	bne.n	8005cd8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d01a      	beq.n	8005cec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3310      	adds	r3, #16
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 f8d8 	bl	8006e70 <xTaskRemoveFromEventList>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d012      	beq.n	8005cec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <xQueueGenericReset+0xcc>)
 8005cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	e009      	b.n	8005cec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3310      	adds	r3, #16
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fef7 	bl	8005ad0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3324      	adds	r3, #36	; 0x24
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fef2 	bl	8005ad0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cec:	f001 ff7a 	bl	8007be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cf0:	2301      	movs	r3, #1
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08e      	sub	sp, #56	; 0x38
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <xQueueGenericCreateStatic+0x28>
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d26:	e7fe      	b.n	8005d26 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <xQueueGenericCreateStatic+0x42>
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d40:	e7fe      	b.n	8005d40 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <xQueueGenericCreateStatic+0x4e>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <xQueueGenericCreateStatic+0x52>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <xQueueGenericCreateStatic+0x54>
 8005d52:	2300      	movs	r3, #0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d109      	bne.n	8005d6c <xQueueGenericCreateStatic+0x6c>
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	623b      	str	r3, [r7, #32]
 8005d6a:	e7fe      	b.n	8005d6a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d102      	bne.n	8005d78 <xQueueGenericCreateStatic+0x78>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <xQueueGenericCreateStatic+0x7c>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <xQueueGenericCreateStatic+0x7e>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d109      	bne.n	8005d96 <xQueueGenericCreateStatic+0x96>
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	61fb      	str	r3, [r7, #28]
 8005d94:	e7fe      	b.n	8005d94 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d96:	2350      	movs	r3, #80	; 0x50
 8005d98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b50      	cmp	r3, #80	; 0x50
 8005d9e:	d009      	beq.n	8005db4 <xQueueGenericCreateStatic+0xb4>
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	e7fe      	b.n	8005db2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f805 	bl	8005de4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3730      	adds	r7, #48	; 0x30
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d103      	bne.n	8005e00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e002      	b.n	8005e06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e12:	2101      	movs	r1, #1
 8005e14:	69b8      	ldr	r0, [r7, #24]
 8005e16:	f7ff ff0b 	bl	8005c30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08e      	sub	sp, #56	; 0x38
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d109      	bne.n	8005e5c <xQueueGenericSend+0x30>
 8005e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e5a:	e7fe      	b.n	8005e5a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <xQueueGenericSend+0x3e>
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <xQueueGenericSend+0x42>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <xQueueGenericSend+0x44>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d109      	bne.n	8005e88 <xQueueGenericSend+0x5c>
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
 8005e86:	e7fe      	b.n	8005e86 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d103      	bne.n	8005e96 <xQueueGenericSend+0x6a>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <xQueueGenericSend+0x6e>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <xQueueGenericSend+0x70>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <xQueueGenericSend+0x88>
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	623b      	str	r3, [r7, #32]
 8005eb2:	e7fe      	b.n	8005eb2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eb4:	f001 f996 	bl	80071e4 <xTaskGetSchedulerState>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d102      	bne.n	8005ec4 <xQueueGenericSend+0x98>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <xQueueGenericSend+0x9c>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <xQueueGenericSend+0x9e>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <xQueueGenericSend+0xb6>
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ee2:	f001 fe51 	bl	8007b88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d302      	bcc.n	8005ef8 <xQueueGenericSend+0xcc>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d129      	bne.n	8005f4c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005efe:	f000 f9ff 	bl	8006300 <prvCopyDataToQueue>
 8005f02:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d010      	beq.n	8005f2e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	3324      	adds	r3, #36	; 0x24
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 ffad 	bl	8006e70 <xTaskRemoveFromEventList>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d013      	beq.n	8005f44 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f1c:	4b3f      	ldr	r3, [pc, #252]	; (800601c <xQueueGenericSend+0x1f0>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	e00a      	b.n	8005f44 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f34:	4b39      	ldr	r3, [pc, #228]	; (800601c <xQueueGenericSend+0x1f0>)
 8005f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f44:	f001 fe4e 	bl	8007be4 <vPortExitCritical>
				return pdPASS;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e063      	b.n	8006014 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d103      	bne.n	8005f5a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f52:	f001 fe47 	bl	8007be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e05c      	b.n	8006014 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f60:	f107 0314 	add.w	r3, r7, #20
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 ffe5 	bl	8006f34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f6e:	f001 fe39 	bl	8007be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f72:	f000 fd5d 	bl	8006a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f76:	f001 fe07 	bl	8007b88 <vPortEnterCritical>
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f80:	b25b      	sxtb	r3, r3
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d103      	bne.n	8005f90 <xQueueGenericSend+0x164>
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d103      	bne.n	8005fa6 <xQueueGenericSend+0x17a>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa6:	f001 fe1d 	bl	8007be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005faa:	1d3a      	adds	r2, r7, #4
 8005fac:	f107 0314 	add.w	r3, r7, #20
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 ffd4 	bl	8006f60 <xTaskCheckForTimeOut>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d124      	bne.n	8006008 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fc0:	f000 fa96 	bl	80064f0 <prvIsQueueFull>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d018      	beq.n	8005ffc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	3310      	adds	r3, #16
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fefe 	bl	8006dd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fda:	f000 fa21 	bl	8006420 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005fde:	f000 fd35 	bl	8006a4c <xTaskResumeAll>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f47f af7c 	bne.w	8005ee2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005fea:	4b0c      	ldr	r3, [pc, #48]	; (800601c <xQueueGenericSend+0x1f0>)
 8005fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	e772      	b.n	8005ee2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ffe:	f000 fa0f 	bl	8006420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006002:	f000 fd23 	bl	8006a4c <xTaskResumeAll>
 8006006:	e76c      	b.n	8005ee2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800600a:	f000 fa09 	bl	8006420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800600e:	f000 fd1d 	bl	8006a4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006012:	2300      	movs	r3, #0
		}
	}
}
 8006014:	4618      	mov	r0, r3
 8006016:	3738      	adds	r7, #56	; 0x38
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	e000ed04 	.word	0xe000ed04

08006020 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08e      	sub	sp, #56	; 0x38
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	2b00      	cmp	r3, #0
 8006036:	d109      	bne.n	800604c <xQueueGenericSendFromISR+0x2c>
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
 800604a:	e7fe      	b.n	800604a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d103      	bne.n	800605a <xQueueGenericSendFromISR+0x3a>
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <xQueueGenericSendFromISR+0x3e>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <xQueueGenericSendFromISR+0x40>
 800605e:	2300      	movs	r3, #0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d109      	bne.n	8006078 <xQueueGenericSendFromISR+0x58>
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	e7fe      	b.n	8006076 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d103      	bne.n	8006086 <xQueueGenericSendFromISR+0x66>
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <xQueueGenericSendFromISR+0x6a>
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <xQueueGenericSendFromISR+0x6c>
 800608a:	2300      	movs	r3, #0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <xQueueGenericSendFromISR+0x84>
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	e7fe      	b.n	80060a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060a4:	f001 fe2a 	bl	8007cfc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060a8:	f3ef 8211 	mrs	r2, BASEPRI
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	61ba      	str	r2, [r7, #24]
 80060be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d302      	bcc.n	80060d6 <xQueueGenericSendFromISR+0xb6>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d12c      	bne.n	8006130 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060e6:	f000 f90b 	bl	8006300 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d112      	bne.n	800611a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d016      	beq.n	800612a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	3324      	adds	r3, #36	; 0x24
 8006100:	4618      	mov	r0, r3
 8006102:	f000 feb5 	bl	8006e70 <xTaskRemoveFromEventList>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00e      	beq.n	800612a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	e007      	b.n	800612a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800611a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800611e:	3301      	adds	r3, #1
 8006120:	b2db      	uxtb	r3, r3
 8006122:	b25a      	sxtb	r2, r3
 8006124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800612a:	2301      	movs	r3, #1
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800612e:	e001      	b.n	8006134 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006130:	2300      	movs	r3, #0
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006140:	4618      	mov	r0, r3
 8006142:	3738      	adds	r7, #56	; 0x38
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08c      	sub	sp, #48	; 0x30
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006154:	2300      	movs	r3, #0
 8006156:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <xQueueReceive+0x2e>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	623b      	str	r3, [r7, #32]
 8006174:	e7fe      	b.n	8006174 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d103      	bne.n	8006184 <xQueueReceive+0x3c>
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <xQueueReceive+0x40>
 8006184:	2301      	movs	r3, #1
 8006186:	e000      	b.n	800618a <xQueueReceive+0x42>
 8006188:	2300      	movs	r3, #0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <xQueueReceive+0x5a>
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e7fe      	b.n	80061a0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061a2:	f001 f81f 	bl	80071e4 <xTaskGetSchedulerState>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d102      	bne.n	80061b2 <xQueueReceive+0x6a>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <xQueueReceive+0x6e>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <xQueueReceive+0x70>
 80061b6:	2300      	movs	r3, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <xQueueReceive+0x88>
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	e7fe      	b.n	80061ce <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80061d0:	f001 fcda 	bl	8007b88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01f      	beq.n	8006220 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e4:	f000 f8f6 	bl	80063d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	1e5a      	subs	r2, r3, #1
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00f      	beq.n	8006218 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	3310      	adds	r3, #16
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fe37 	bl	8006e70 <xTaskRemoveFromEventList>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d007      	beq.n	8006218 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006208:	4b3c      	ldr	r3, [pc, #240]	; (80062fc <xQueueReceive+0x1b4>)
 800620a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006218:	f001 fce4 	bl	8007be4 <vPortExitCritical>
				return pdPASS;
 800621c:	2301      	movs	r3, #1
 800621e:	e069      	b.n	80062f4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d103      	bne.n	800622e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006226:	f001 fcdd 	bl	8007be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800622a:	2300      	movs	r3, #0
 800622c:	e062      	b.n	80062f4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006234:	f107 0310 	add.w	r3, r7, #16
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fe7b 	bl	8006f34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800623e:	2301      	movs	r3, #1
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006242:	f001 fccf 	bl	8007be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006246:	f000 fbf3 	bl	8006a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800624a:	f001 fc9d 	bl	8007b88 <vPortEnterCritical>
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006254:	b25b      	sxtb	r3, r3
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625a:	d103      	bne.n	8006264 <xQueueReceive+0x11c>
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800626a:	b25b      	sxtb	r3, r3
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006270:	d103      	bne.n	800627a <xQueueReceive+0x132>
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800627a:	f001 fcb3 	bl	8007be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800627e:	1d3a      	adds	r2, r7, #4
 8006280:	f107 0310 	add.w	r3, r7, #16
 8006284:	4611      	mov	r1, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fe6a 	bl	8006f60 <xTaskCheckForTimeOut>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d123      	bne.n	80062da <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006294:	f000 f916 	bl	80064c4 <prvIsQueueEmpty>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d017      	beq.n	80062ce <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	3324      	adds	r3, #36	; 0x24
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	4611      	mov	r1, r2
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fd94 	bl	8006dd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ae:	f000 f8b7 	bl	8006420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062b2:	f000 fbcb 	bl	8006a4c <xTaskResumeAll>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d189      	bne.n	80061d0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80062bc:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <xQueueReceive+0x1b4>)
 80062be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	e780      	b.n	80061d0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d0:	f000 f8a6 	bl	8006420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062d4:	f000 fbba 	bl	8006a4c <xTaskResumeAll>
 80062d8:	e77a      	b.n	80061d0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062dc:	f000 f8a0 	bl	8006420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062e0:	f000 fbb4 	bl	8006a4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e6:	f000 f8ed 	bl	80064c4 <prvIsQueueEmpty>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f43f af6f 	beq.w	80061d0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3730      	adds	r7, #48	; 0x30
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	e000ed04 	.word	0xe000ed04

08006300 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800630c:	2300      	movs	r3, #0
 800630e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d14d      	bne.n	80063c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 ff78 	bl	8007220 <xTaskPriorityDisinherit>
 8006330:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	605a      	str	r2, [r3, #4]
 8006338:	e043      	b.n	80063c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d119      	bne.n	8006374 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6898      	ldr	r0, [r3, #8]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	461a      	mov	r2, r3
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	f001 ff1f 	bl	800818e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	441a      	add	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	429a      	cmp	r2, r3
 8006368:	d32b      	bcc.n	80063c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	609a      	str	r2, [r3, #8]
 8006372:	e026      	b.n	80063c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	68d8      	ldr	r0, [r3, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	461a      	mov	r2, r3
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	f001 ff05 	bl	800818e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	425b      	negs	r3, r3
 800638e:	441a      	add	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d207      	bcs.n	80063b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	425b      	negs	r3, r3
 80063aa:	441a      	add	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d105      	bne.n	80063c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	3b01      	subs	r3, #1
 80063c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80063ca:	697b      	ldr	r3, [r7, #20]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d018      	beq.n	8006418 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	441a      	add	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d303      	bcc.n	8006408 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68d9      	ldr	r1, [r3, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	461a      	mov	r2, r3
 8006412:	6838      	ldr	r0, [r7, #0]
 8006414:	f001 febb 	bl	800818e <memcpy>
	}
}
 8006418:	bf00      	nop
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006428:	f001 fbae 	bl	8007b88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006432:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006434:	e011      	b.n	800645a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	2b00      	cmp	r3, #0
 800643c:	d012      	beq.n	8006464 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3324      	adds	r3, #36	; 0x24
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fd14 	bl	8006e70 <xTaskRemoveFromEventList>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800644e:	f000 fde7 	bl	8007020 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	3b01      	subs	r3, #1
 8006456:	b2db      	uxtb	r3, r3
 8006458:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800645a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800645e:	2b00      	cmp	r3, #0
 8006460:	dce9      	bgt.n	8006436 <prvUnlockQueue+0x16>
 8006462:	e000      	b.n	8006466 <prvUnlockQueue+0x46>
					break;
 8006464:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	22ff      	movs	r2, #255	; 0xff
 800646a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800646e:	f001 fbb9 	bl	8007be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006472:	f001 fb89 	bl	8007b88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800647c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800647e:	e011      	b.n	80064a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d012      	beq.n	80064ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3310      	adds	r3, #16
 800648c:	4618      	mov	r0, r3
 800648e:	f000 fcef 	bl	8006e70 <xTaskRemoveFromEventList>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006498:	f000 fdc2 	bl	8007020 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	3b01      	subs	r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	dce9      	bgt.n	8006480 <prvUnlockQueue+0x60>
 80064ac:	e000      	b.n	80064b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	22ff      	movs	r2, #255	; 0xff
 80064b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80064b8:	f001 fb94 	bl	8007be4 <vPortExitCritical>
}
 80064bc:	bf00      	nop
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064cc:	f001 fb5c 	bl	8007b88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064d8:	2301      	movs	r3, #1
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e001      	b.n	80064e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064e2:	f001 fb7f 	bl	8007be4 <vPortExitCritical>

	return xReturn;
 80064e6:	68fb      	ldr	r3, [r7, #12]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064f8:	f001 fb46 	bl	8007b88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006504:	429a      	cmp	r2, r3
 8006506:	d102      	bne.n	800650e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006508:	2301      	movs	r3, #1
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	e001      	b.n	8006512 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006512:	f001 fb67 	bl	8007be4 <vPortExitCritical>

	return xReturn;
 8006516:	68fb      	ldr	r3, [r7, #12]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	e014      	b.n	800655a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006530:	4a0e      	ldr	r2, [pc, #56]	; (800656c <vQueueAddToRegistry+0x4c>)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800653c:	490b      	ldr	r1, [pc, #44]	; (800656c <vQueueAddToRegistry+0x4c>)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006546:	4a09      	ldr	r2, [pc, #36]	; (800656c <vQueueAddToRegistry+0x4c>)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	4413      	add	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006552:	e005      	b.n	8006560 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b07      	cmp	r3, #7
 800655e:	d9e7      	bls.n	8006530 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20002e60 	.word	0x20002e60

08006570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006580:	f001 fb02 	bl	8007b88 <vPortEnterCritical>
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800658a:	b25b      	sxtb	r3, r3
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d103      	bne.n	800659a <vQueueWaitForMessageRestricted+0x2a>
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065a0:	b25b      	sxtb	r3, r3
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d103      	bne.n	80065b0 <vQueueWaitForMessageRestricted+0x40>
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065b0:	f001 fb18 	bl	8007be4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d106      	bne.n	80065ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3324      	adds	r3, #36	; 0x24
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fc29 	bl	8006e1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065ca:	6978      	ldr	r0, [r7, #20]
 80065cc:	f7ff ff28 	bl	8006420 <prvUnlockQueue>
	}
 80065d0:	bf00      	nop
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08e      	sub	sp, #56	; 0x38
 80065dc:	af04      	add	r7, sp, #16
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <xTaskCreateStatic+0x28>
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	623b      	str	r3, [r7, #32]
 80065fe:	e7fe      	b.n	80065fe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <xTaskCreateStatic+0x42>
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	61fb      	str	r3, [r7, #28]
 8006618:	e7fe      	b.n	8006618 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800661a:	235c      	movs	r3, #92	; 0x5c
 800661c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b5c      	cmp	r3, #92	; 0x5c
 8006622:	d009      	beq.n	8006638 <xTaskCreateStatic+0x60>
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e7fe      	b.n	8006636 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01e      	beq.n	800667c <xTaskCreateStatic+0xa4>
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01b      	beq.n	800667c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800664c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	2202      	movs	r2, #2
 8006652:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006656:	2300      	movs	r3, #0
 8006658:	9303      	str	r3, [sp, #12]
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	9302      	str	r3, [sp, #8]
 800665e:	f107 0314 	add.w	r3, r7, #20
 8006662:	9301      	str	r3, [sp, #4]
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f850 	bl	8006714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006676:	f000 f8d3 	bl	8006820 <prvAddNewTaskToReadyList>
 800667a:	e001      	b.n	8006680 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006680:	697b      	ldr	r3, [r7, #20]
	}
 8006682:	4618      	mov	r0, r3
 8006684:	3728      	adds	r7, #40	; 0x28
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800668a:	b580      	push	{r7, lr}
 800668c:	b08c      	sub	sp, #48	; 0x30
 800668e:	af04      	add	r7, sp, #16
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 fb68 	bl	8007d74 <pvPortMalloc>
 80066a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80066ac:	205c      	movs	r0, #92	; 0x5c
 80066ae:	f001 fb61 	bl	8007d74 <pvPortMalloc>
 80066b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
 80066c0:	e005      	b.n	80066ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066c2:	6978      	ldr	r0, [r7, #20]
 80066c4:	f001 fc18 	bl	8007ef8 <vPortFree>
 80066c8:	e001      	b.n	80066ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d017      	beq.n	8006704 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066dc:	88fa      	ldrh	r2, [r7, #6]
 80066de:	2300      	movs	r3, #0
 80066e0:	9303      	str	r3, [sp, #12]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	9302      	str	r3, [sp, #8]
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	9301      	str	r3, [sp, #4]
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 f80e 	bl	8006714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066f8:	69f8      	ldr	r0, [r7, #28]
 80066fa:	f000 f891 	bl	8006820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066fe:	2301      	movs	r3, #1
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	e002      	b.n	800670a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006704:	f04f 33ff 	mov.w	r3, #4294967295
 8006708:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800670a:	69bb      	ldr	r3, [r7, #24]
	}
 800670c:	4618      	mov	r0, r3
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	461a      	mov	r2, r3
 800672c:	21a5      	movs	r1, #165	; 0xa5
 800672e:	f001 fd52 	bl	80081d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800673c:	3b01      	subs	r3, #1
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <prvInitialiseNewTask+0x56>
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	e7fe      	b.n	8006768 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800676a:	2300      	movs	r3, #0
 800676c:	61fb      	str	r3, [r7, #28]
 800676e:	e012      	b.n	8006796 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	7819      	ldrb	r1, [r3, #0]
 8006778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	3334      	adds	r3, #52	; 0x34
 8006780:	460a      	mov	r2, r1
 8006782:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d006      	beq.n	800679e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	3301      	adds	r3, #1
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	2b0f      	cmp	r3, #15
 800679a:	d9e9      	bls.n	8006770 <prvInitialiseNewTask+0x5c>
 800679c:	e000      	b.n	80067a0 <prvInitialiseNewTask+0x8c>
		{
			break;
 800679e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	2b37      	cmp	r3, #55	; 0x37
 80067ac:	d901      	bls.n	80067b2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067ae:	2337      	movs	r3, #55	; 0x37
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	2200      	movs	r2, #0
 80067c2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	3304      	adds	r3, #4
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff f9a0 	bl	8005b0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	3318      	adds	r3, #24
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff f99b 	bl	8005b0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2200      	movs	r2, #0
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	69b8      	ldr	r0, [r7, #24]
 8006802:	f001 f8d7 	bl	80079b4 <pxPortInitialiseStack>
 8006806:	4602      	mov	r2, r0
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006816:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006818:	bf00      	nop
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006828:	f001 f9ae 	bl	8007b88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800682c:	4b2d      	ldr	r3, [pc, #180]	; (80068e4 <prvAddNewTaskToReadyList+0xc4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3301      	adds	r3, #1
 8006832:	4a2c      	ldr	r2, [pc, #176]	; (80068e4 <prvAddNewTaskToReadyList+0xc4>)
 8006834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006836:	4b2c      	ldr	r3, [pc, #176]	; (80068e8 <prvAddNewTaskToReadyList+0xc8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800683e:	4a2a      	ldr	r2, [pc, #168]	; (80068e8 <prvAddNewTaskToReadyList+0xc8>)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006844:	4b27      	ldr	r3, [pc, #156]	; (80068e4 <prvAddNewTaskToReadyList+0xc4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d110      	bne.n	800686e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800684c:	f000 fc0c 	bl	8007068 <prvInitialiseTaskLists>
 8006850:	e00d      	b.n	800686e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006852:	4b26      	ldr	r3, [pc, #152]	; (80068ec <prvAddNewTaskToReadyList+0xcc>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800685a:	4b23      	ldr	r3, [pc, #140]	; (80068e8 <prvAddNewTaskToReadyList+0xc8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	429a      	cmp	r2, r3
 8006866:	d802      	bhi.n	800686e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006868:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <prvAddNewTaskToReadyList+0xc8>)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800686e:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <prvAddNewTaskToReadyList+0xd0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	4a1e      	ldr	r2, [pc, #120]	; (80068f0 <prvAddNewTaskToReadyList+0xd0>)
 8006876:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006878:	4b1d      	ldr	r3, [pc, #116]	; (80068f0 <prvAddNewTaskToReadyList+0xd0>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	4b1b      	ldr	r3, [pc, #108]	; (80068f4 <prvAddNewTaskToReadyList+0xd4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d903      	bls.n	8006894 <prvAddNewTaskToReadyList+0x74>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	4a18      	ldr	r2, [pc, #96]	; (80068f4 <prvAddNewTaskToReadyList+0xd4>)
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <prvAddNewTaskToReadyList+0xd8>)
 80068a2:	441a      	add	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f7ff f93b 	bl	8005b26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068b0:	f001 f998 	bl	8007be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068b4:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <prvAddNewTaskToReadyList+0xcc>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00e      	beq.n	80068da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <prvAddNewTaskToReadyList+0xc8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d207      	bcs.n	80068da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068ca:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <prvAddNewTaskToReadyList+0xdc>)
 80068cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000c94 	.word	0x20000c94
 80068e8:	200007c0 	.word	0x200007c0
 80068ec:	20000ca0 	.word	0x20000ca0
 80068f0:	20000cb0 	.word	0x20000cb0
 80068f4:	20000c9c 	.word	0x20000c9c
 80068f8:	200007c4 	.word	0x200007c4
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d016      	beq.n	8006940 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006912:	4b13      	ldr	r3, [pc, #76]	; (8006960 <vTaskDelay+0x60>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <vTaskDelay+0x2e>
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	60bb      	str	r3, [r7, #8]
 800692c:	e7fe      	b.n	800692c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800692e:	f000 f87f 	bl	8006a30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006932:	2100      	movs	r1, #0
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fcdf 	bl	80072f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800693a:	f000 f887 	bl	8006a4c <xTaskResumeAll>
 800693e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d107      	bne.n	8006956 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006946:	4b07      	ldr	r3, [pc, #28]	; (8006964 <vTaskDelay+0x64>)
 8006948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000cbc 	.word	0x20000cbc
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	; 0x28
 800696c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006972:	2300      	movs	r3, #0
 8006974:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006976:	463a      	mov	r2, r7
 8006978:	1d39      	adds	r1, r7, #4
 800697a:	f107 0308 	add.w	r3, r7, #8
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff f874 	bl	8005a6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	9202      	str	r2, [sp, #8]
 800698c:	9301      	str	r3, [sp, #4]
 800698e:	2300      	movs	r3, #0
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	2300      	movs	r3, #0
 8006994:	460a      	mov	r2, r1
 8006996:	4920      	ldr	r1, [pc, #128]	; (8006a18 <vTaskStartScheduler+0xb0>)
 8006998:	4820      	ldr	r0, [pc, #128]	; (8006a1c <vTaskStartScheduler+0xb4>)
 800699a:	f7ff fe1d 	bl	80065d8 <xTaskCreateStatic>
 800699e:	4602      	mov	r2, r0
 80069a0:	4b1f      	ldr	r3, [pc, #124]	; (8006a20 <vTaskStartScheduler+0xb8>)
 80069a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069a4:	4b1e      	ldr	r3, [pc, #120]	; (8006a20 <vTaskStartScheduler+0xb8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069ac:	2301      	movs	r3, #1
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	e001      	b.n	80069b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d102      	bne.n	80069c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80069bc:	f000 fcf0 	bl	80073a0 <xTimerCreateTimerTask>
 80069c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d115      	bne.n	80069f4 <vTaskStartScheduler+0x8c>
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069da:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <vTaskStartScheduler+0xbc>)
 80069dc:	f04f 32ff 	mov.w	r2, #4294967295
 80069e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069e2:	4b11      	ldr	r3, [pc, #68]	; (8006a28 <vTaskStartScheduler+0xc0>)
 80069e4:	2201      	movs	r2, #1
 80069e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80069e8:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <vTaskStartScheduler+0xc4>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069ee:	f001 f85b 	bl	8007aa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069f2:	e00d      	b.n	8006a10 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d109      	bne.n	8006a10 <vTaskStartScheduler+0xa8>
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	e7fe      	b.n	8006a0e <vTaskStartScheduler+0xa6>
}
 8006a10:	bf00      	nop
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	08009220 	.word	0x08009220
 8006a1c:	08007039 	.word	0x08007039
 8006a20:	20000cb8 	.word	0x20000cb8
 8006a24:	20000cb4 	.word	0x20000cb4
 8006a28:	20000ca0 	.word	0x20000ca0
 8006a2c:	20000c98 	.word	0x20000c98

08006a30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a34:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <vTaskSuspendAll+0x18>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	4a03      	ldr	r2, [pc, #12]	; (8006a48 <vTaskSuspendAll+0x18>)
 8006a3c:	6013      	str	r3, [r2, #0]
}
 8006a3e:	bf00      	nop
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20000cbc 	.word	0x20000cbc

08006a4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a5a:	4b41      	ldr	r3, [pc, #260]	; (8006b60 <xTaskResumeAll+0x114>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <xTaskResumeAll+0x2a>
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	e7fe      	b.n	8006a74 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a76:	f001 f887 	bl	8007b88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a7a:	4b39      	ldr	r3, [pc, #228]	; (8006b60 <xTaskResumeAll+0x114>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	4a37      	ldr	r2, [pc, #220]	; (8006b60 <xTaskResumeAll+0x114>)
 8006a82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a84:	4b36      	ldr	r3, [pc, #216]	; (8006b60 <xTaskResumeAll+0x114>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d162      	bne.n	8006b52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a8c:	4b35      	ldr	r3, [pc, #212]	; (8006b64 <xTaskResumeAll+0x118>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d05e      	beq.n	8006b52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a94:	e02f      	b.n	8006af6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006a96:	4b34      	ldr	r3, [pc, #208]	; (8006b68 <xTaskResumeAll+0x11c>)
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3318      	adds	r3, #24
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff f89a 	bl	8005bdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff f895 	bl	8005bdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab6:	4b2d      	ldr	r3, [pc, #180]	; (8006b6c <xTaskResumeAll+0x120>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d903      	bls.n	8006ac6 <xTaskResumeAll+0x7a>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	4a2a      	ldr	r2, [pc, #168]	; (8006b6c <xTaskResumeAll+0x120>)
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4a27      	ldr	r2, [pc, #156]	; (8006b70 <xTaskResumeAll+0x124>)
 8006ad4:	441a      	add	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4619      	mov	r1, r3
 8006adc:	4610      	mov	r0, r2
 8006ade:	f7ff f822 	bl	8005b26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae6:	4b23      	ldr	r3, [pc, #140]	; (8006b74 <xTaskResumeAll+0x128>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d302      	bcc.n	8006af6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006af0:	4b21      	ldr	r3, [pc, #132]	; (8006b78 <xTaskResumeAll+0x12c>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006af6:	4b1c      	ldr	r3, [pc, #112]	; (8006b68 <xTaskResumeAll+0x11c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1cb      	bne.n	8006a96 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b04:	f000 fb4a 	bl	800719c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b08:	4b1c      	ldr	r3, [pc, #112]	; (8006b7c <xTaskResumeAll+0x130>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d010      	beq.n	8006b36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b14:	f000 f844 	bl	8006ba0 <xTaskIncrementTick>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006b1e:	4b16      	ldr	r3, [pc, #88]	; (8006b78 <xTaskResumeAll+0x12c>)
 8006b20:	2201      	movs	r2, #1
 8006b22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f1      	bne.n	8006b14 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006b30:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <xTaskResumeAll+0x130>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b36:	4b10      	ldr	r3, [pc, #64]	; (8006b78 <xTaskResumeAll+0x12c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b42:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <xTaskResumeAll+0x134>)
 8006b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b52:	f001 f847 	bl	8007be4 <vPortExitCritical>

	return xAlreadyYielded;
 8006b56:	68bb      	ldr	r3, [r7, #8]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20000cbc 	.word	0x20000cbc
 8006b64:	20000c94 	.word	0x20000c94
 8006b68:	20000c54 	.word	0x20000c54
 8006b6c:	20000c9c 	.word	0x20000c9c
 8006b70:	200007c4 	.word	0x200007c4
 8006b74:	200007c0 	.word	0x200007c0
 8006b78:	20000ca8 	.word	0x20000ca8
 8006b7c:	20000ca4 	.word	0x20000ca4
 8006b80:	e000ed04 	.word	0xe000ed04

08006b84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b8a:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <xTaskGetTickCount+0x18>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b90:	687b      	ldr	r3, [r7, #4]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr
 8006b9c:	20000c98 	.word	0x20000c98

08006ba0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006baa:	4b51      	ldr	r3, [pc, #324]	; (8006cf0 <xTaskIncrementTick+0x150>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f040 808d 	bne.w	8006cce <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bb4:	4b4f      	ldr	r3, [pc, #316]	; (8006cf4 <xTaskIncrementTick+0x154>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bbc:	4a4d      	ldr	r2, [pc, #308]	; (8006cf4 <xTaskIncrementTick+0x154>)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d11f      	bne.n	8006c08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bc8:	4b4b      	ldr	r3, [pc, #300]	; (8006cf8 <xTaskIncrementTick+0x158>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <xTaskIncrementTick+0x46>
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	e7fe      	b.n	8006be4 <xTaskIncrementTick+0x44>
 8006be6:	4b44      	ldr	r3, [pc, #272]	; (8006cf8 <xTaskIncrementTick+0x158>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	4b43      	ldr	r3, [pc, #268]	; (8006cfc <xTaskIncrementTick+0x15c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a41      	ldr	r2, [pc, #260]	; (8006cf8 <xTaskIncrementTick+0x158>)
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	4a41      	ldr	r2, [pc, #260]	; (8006cfc <xTaskIncrementTick+0x15c>)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	4b41      	ldr	r3, [pc, #260]	; (8006d00 <xTaskIncrementTick+0x160>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	4a3f      	ldr	r2, [pc, #252]	; (8006d00 <xTaskIncrementTick+0x160>)
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	f000 faca 	bl	800719c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c08:	4b3e      	ldr	r3, [pc, #248]	; (8006d04 <xTaskIncrementTick+0x164>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d34e      	bcc.n	8006cb0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c12:	4b39      	ldr	r3, [pc, #228]	; (8006cf8 <xTaskIncrementTick+0x158>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <xTaskIncrementTick+0x80>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e000      	b.n	8006c22 <xTaskIncrementTick+0x82>
 8006c20:	2300      	movs	r3, #0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d004      	beq.n	8006c30 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c26:	4b37      	ldr	r3, [pc, #220]	; (8006d04 <xTaskIncrementTick+0x164>)
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2c:	601a      	str	r2, [r3, #0]
					break;
 8006c2e:	e03f      	b.n	8006cb0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c30:	4b31      	ldr	r3, [pc, #196]	; (8006cf8 <xTaskIncrementTick+0x158>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d203      	bcs.n	8006c50 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c48:	4a2e      	ldr	r2, [pc, #184]	; (8006d04 <xTaskIncrementTick+0x164>)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6013      	str	r3, [r2, #0]
						break;
 8006c4e:	e02f      	b.n	8006cb0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe ffc1 	bl	8005bdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	3318      	adds	r3, #24
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe ffb8 	bl	8005bdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4b25      	ldr	r3, [pc, #148]	; (8006d08 <xTaskIncrementTick+0x168>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d903      	bls.n	8006c80 <xTaskIncrementTick+0xe0>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4a22      	ldr	r2, [pc, #136]	; (8006d08 <xTaskIncrementTick+0x168>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4a1f      	ldr	r2, [pc, #124]	; (8006d0c <xTaskIncrementTick+0x16c>)
 8006c8e:	441a      	add	r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7fe ff45 	bl	8005b26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <xTaskIncrementTick+0x170>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d3b3      	bcc.n	8006c12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006caa:	2301      	movs	r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cae:	e7b0      	b.n	8006c12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cb0:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <xTaskIncrementTick+0x170>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb6:	4915      	ldr	r1, [pc, #84]	; (8006d0c <xTaskIncrementTick+0x16c>)
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d907      	bls.n	8006cd8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	e004      	b.n	8006cd8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006cce:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <xTaskIncrementTick+0x174>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	4a0f      	ldr	r2, [pc, #60]	; (8006d14 <xTaskIncrementTick+0x174>)
 8006cd6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <xTaskIncrementTick+0x178>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ce4:	697b      	ldr	r3, [r7, #20]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000cbc 	.word	0x20000cbc
 8006cf4:	20000c98 	.word	0x20000c98
 8006cf8:	20000c4c 	.word	0x20000c4c
 8006cfc:	20000c50 	.word	0x20000c50
 8006d00:	20000cac 	.word	0x20000cac
 8006d04:	20000cb4 	.word	0x20000cb4
 8006d08:	20000c9c 	.word	0x20000c9c
 8006d0c:	200007c4 	.word	0x200007c4
 8006d10:	200007c0 	.word	0x200007c0
 8006d14:	20000ca4 	.word	0x20000ca4
 8006d18:	20000ca8 	.word	0x20000ca8

08006d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d22:	4b27      	ldr	r3, [pc, #156]	; (8006dc0 <vTaskSwitchContext+0xa4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d2a:	4b26      	ldr	r3, [pc, #152]	; (8006dc4 <vTaskSwitchContext+0xa8>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d30:	e040      	b.n	8006db4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006d32:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <vTaskSwitchContext+0xa8>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006d38:	4b23      	ldr	r3, [pc, #140]	; (8006dc8 <vTaskSwitchContext+0xac>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e00f      	b.n	8006d60 <vTaskSwitchContext+0x44>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <vTaskSwitchContext+0x3e>
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	607b      	str	r3, [r7, #4]
 8006d58:	e7fe      	b.n	8006d58 <vTaskSwitchContext+0x3c>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	491a      	ldr	r1, [pc, #104]	; (8006dcc <vTaskSwitchContext+0xb0>)
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4613      	mov	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	440b      	add	r3, r1
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0e5      	beq.n	8006d40 <vTaskSwitchContext+0x24>
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4a13      	ldr	r2, [pc, #76]	; (8006dcc <vTaskSwitchContext+0xb0>)
 8006d80:	4413      	add	r3, r2
 8006d82:	60bb      	str	r3, [r7, #8]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	605a      	str	r2, [r3, #4]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	3308      	adds	r3, #8
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d104      	bne.n	8006da4 <vTaskSwitchContext+0x88>
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	605a      	str	r2, [r3, #4]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	4a09      	ldr	r2, [pc, #36]	; (8006dd0 <vTaskSwitchContext+0xb4>)
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	4a06      	ldr	r2, [pc, #24]	; (8006dc8 <vTaskSwitchContext+0xac>)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6013      	str	r3, [r2, #0]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bc80      	pop	{r7}
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	20000cbc 	.word	0x20000cbc
 8006dc4:	20000ca8 	.word	0x20000ca8
 8006dc8:	20000c9c 	.word	0x20000c9c
 8006dcc:	200007c4 	.word	0x200007c4
 8006dd0:	200007c0 	.word	0x200007c0

08006dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <vTaskPlaceOnEventList+0x24>
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	e7fe      	b.n	8006df6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006df8:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <vTaskPlaceOnEventList+0x44>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3318      	adds	r3, #24
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fe feb3 	bl	8005b6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e06:	2101      	movs	r1, #1
 8006e08:	6838      	ldr	r0, [r7, #0]
 8006e0a:	f000 fa75 	bl	80072f8 <prvAddCurrentTaskToDelayedList>
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	200007c0 	.word	0x200007c0

08006e1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d109      	bne.n	8006e42 <vTaskPlaceOnEventListRestricted+0x26>
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e7fe      	b.n	8006e40 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e42:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <vTaskPlaceOnEventListRestricted+0x50>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3318      	adds	r3, #24
 8006e48:	4619      	mov	r1, r3
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7fe fe6b 	bl	8005b26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006e56:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	68b8      	ldr	r0, [r7, #8]
 8006e60:	f000 fa4a 	bl	80072f8 <prvAddCurrentTaskToDelayedList>
	}
 8006e64:	bf00      	nop
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	200007c0 	.word	0x200007c0

08006e70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <xTaskRemoveFromEventList+0x2a>
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	e7fe      	b.n	8006e98 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	3318      	adds	r3, #24
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fe9c 	bl	8005bdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea4:	4b1d      	ldr	r3, [pc, #116]	; (8006f1c <xTaskRemoveFromEventList+0xac>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d11d      	bne.n	8006ee8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fe fe93 	bl	8005bdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eba:	4b19      	ldr	r3, [pc, #100]	; (8006f20 <xTaskRemoveFromEventList+0xb0>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d903      	bls.n	8006eca <xTaskRemoveFromEventList+0x5a>
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec6:	4a16      	ldr	r2, [pc, #88]	; (8006f20 <xTaskRemoveFromEventList+0xb0>)
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4a13      	ldr	r2, [pc, #76]	; (8006f24 <xTaskRemoveFromEventList+0xb4>)
 8006ed8:	441a      	add	r2, r3
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f7fe fe20 	bl	8005b26 <vListInsertEnd>
 8006ee6:	e005      	b.n	8006ef4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	3318      	adds	r3, #24
 8006eec:	4619      	mov	r1, r3
 8006eee:	480e      	ldr	r0, [pc, #56]	; (8006f28 <xTaskRemoveFromEventList+0xb8>)
 8006ef0:	f7fe fe19 	bl	8005b26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef8:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <xTaskRemoveFromEventList+0xbc>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d905      	bls.n	8006f0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f02:	2301      	movs	r3, #1
 8006f04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f06:	4b0a      	ldr	r3, [pc, #40]	; (8006f30 <xTaskRemoveFromEventList+0xc0>)
 8006f08:	2201      	movs	r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	e001      	b.n	8006f12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006f12:	697b      	ldr	r3, [r7, #20]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20000cbc 	.word	0x20000cbc
 8006f20:	20000c9c 	.word	0x20000c9c
 8006f24:	200007c4 	.word	0x200007c4
 8006f28:	20000c54 	.word	0x20000c54
 8006f2c:	200007c0 	.word	0x200007c0
 8006f30:	20000ca8 	.word	0x20000ca8

08006f34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f3c:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <vTaskInternalSetTimeOutState+0x24>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f44:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <vTaskInternalSetTimeOutState+0x28>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	605a      	str	r2, [r3, #4]
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bc80      	pop	{r7}
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000cac 	.word	0x20000cac
 8006f5c:	20000c98 	.word	0x20000c98

08006f60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d109      	bne.n	8006f84 <xTaskCheckForTimeOut+0x24>
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	e7fe      	b.n	8006f82 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d109      	bne.n	8006f9e <xTaskCheckForTimeOut+0x3e>
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	e7fe      	b.n	8006f9c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006f9e:	f000 fdf3 	bl	8007b88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <xTaskCheckForTimeOut+0xb8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fba:	d102      	bne.n	8006fc2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	e023      	b.n	800700a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	4b15      	ldr	r3, [pc, #84]	; (800701c <xTaskCheckForTimeOut+0xbc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d007      	beq.n	8006fde <xTaskCheckForTimeOut+0x7e>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d302      	bcc.n	8006fde <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	e015      	b.n	800700a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d20b      	bcs.n	8007000 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff ff9d 	bl	8006f34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61fb      	str	r3, [r7, #28]
 8006ffe:	e004      	b.n	800700a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007006:	2301      	movs	r3, #1
 8007008:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800700a:	f000 fdeb 	bl	8007be4 <vPortExitCritical>

	return xReturn;
 800700e:	69fb      	ldr	r3, [r7, #28]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000c98 	.word	0x20000c98
 800701c:	20000cac 	.word	0x20000cac

08007020 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007024:	4b03      	ldr	r3, [pc, #12]	; (8007034 <vTaskMissedYield+0x14>)
 8007026:	2201      	movs	r2, #1
 8007028:	601a      	str	r2, [r3, #0]
}
 800702a:	bf00      	nop
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20000ca8 	.word	0x20000ca8

08007038 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007040:	f000 f852 	bl	80070e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <prvIdleTask+0x28>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d9f9      	bls.n	8007040 <prvIdleTask+0x8>
			{
				taskYIELD();
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <prvIdleTask+0x2c>)
 800704e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800705c:	e7f0      	b.n	8007040 <prvIdleTask+0x8>
 800705e:	bf00      	nop
 8007060:	200007c4 	.word	0x200007c4
 8007064:	e000ed04 	.word	0xe000ed04

08007068 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800706e:	2300      	movs	r3, #0
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	e00c      	b.n	800708e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <prvInitialiseTaskLists+0x60>)
 8007080:	4413      	add	r3, r2
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fd24 	bl	8005ad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3301      	adds	r3, #1
 800708c:	607b      	str	r3, [r7, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b37      	cmp	r3, #55	; 0x37
 8007092:	d9ef      	bls.n	8007074 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007094:	480d      	ldr	r0, [pc, #52]	; (80070cc <prvInitialiseTaskLists+0x64>)
 8007096:	f7fe fd1b 	bl	8005ad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800709a:	480d      	ldr	r0, [pc, #52]	; (80070d0 <prvInitialiseTaskLists+0x68>)
 800709c:	f7fe fd18 	bl	8005ad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070a0:	480c      	ldr	r0, [pc, #48]	; (80070d4 <prvInitialiseTaskLists+0x6c>)
 80070a2:	f7fe fd15 	bl	8005ad0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070a6:	480c      	ldr	r0, [pc, #48]	; (80070d8 <prvInitialiseTaskLists+0x70>)
 80070a8:	f7fe fd12 	bl	8005ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070ac:	480b      	ldr	r0, [pc, #44]	; (80070dc <prvInitialiseTaskLists+0x74>)
 80070ae:	f7fe fd0f 	bl	8005ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070b2:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <prvInitialiseTaskLists+0x78>)
 80070b4:	4a05      	ldr	r2, [pc, #20]	; (80070cc <prvInitialiseTaskLists+0x64>)
 80070b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070b8:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <prvInitialiseTaskLists+0x7c>)
 80070ba:	4a05      	ldr	r2, [pc, #20]	; (80070d0 <prvInitialiseTaskLists+0x68>)
 80070bc:	601a      	str	r2, [r3, #0]
}
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200007c4 	.word	0x200007c4
 80070cc:	20000c24 	.word	0x20000c24
 80070d0:	20000c38 	.word	0x20000c38
 80070d4:	20000c54 	.word	0x20000c54
 80070d8:	20000c68 	.word	0x20000c68
 80070dc:	20000c80 	.word	0x20000c80
 80070e0:	20000c4c 	.word	0x20000c4c
 80070e4:	20000c50 	.word	0x20000c50

080070e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070ee:	e019      	b.n	8007124 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070f0:	f000 fd4a 	bl	8007b88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80070f4:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <prvCheckTasksWaitingTermination+0x4c>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3304      	adds	r3, #4
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe fd6b 	bl	8005bdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007106:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <prvCheckTasksWaitingTermination+0x50>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3b01      	subs	r3, #1
 800710c:	4a0a      	ldr	r2, [pc, #40]	; (8007138 <prvCheckTasksWaitingTermination+0x50>)
 800710e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007110:	4b0a      	ldr	r3, [pc, #40]	; (800713c <prvCheckTasksWaitingTermination+0x54>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3b01      	subs	r3, #1
 8007116:	4a09      	ldr	r2, [pc, #36]	; (800713c <prvCheckTasksWaitingTermination+0x54>)
 8007118:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800711a:	f000 fd63 	bl	8007be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f80e 	bl	8007140 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007124:	4b05      	ldr	r3, [pc, #20]	; (800713c <prvCheckTasksWaitingTermination+0x54>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e1      	bne.n	80070f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20000c68 	.word	0x20000c68
 8007138:	20000c94 	.word	0x20000c94
 800713c:	20000c7c 	.word	0x20000c7c

08007140 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800714e:	2b00      	cmp	r3, #0
 8007150:	d108      	bne.n	8007164 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fece 	bl	8007ef8 <vPortFree>
				vPortFree( pxTCB );
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fecb 	bl	8007ef8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007162:	e017      	b.n	8007194 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800716a:	2b01      	cmp	r3, #1
 800716c:	d103      	bne.n	8007176 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fec2 	bl	8007ef8 <vPortFree>
	}
 8007174:	e00e      	b.n	8007194 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800717c:	2b02      	cmp	r3, #2
 800717e:	d009      	beq.n	8007194 <prvDeleteTCB+0x54>
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e7fe      	b.n	8007192 <prvDeleteTCB+0x52>
	}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071a2:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <prvResetNextTaskUnblockTime+0x40>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <prvResetNextTaskUnblockTime+0x14>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <prvResetNextTaskUnblockTime+0x16>
 80071b0:	2300      	movs	r3, #0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d004      	beq.n	80071c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071b6:	4b0a      	ldr	r3, [pc, #40]	; (80071e0 <prvResetNextTaskUnblockTime+0x44>)
 80071b8:	f04f 32ff 	mov.w	r2, #4294967295
 80071bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071be:	e008      	b.n	80071d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071c0:	4b06      	ldr	r3, [pc, #24]	; (80071dc <prvResetNextTaskUnblockTime+0x40>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	4a04      	ldr	r2, [pc, #16]	; (80071e0 <prvResetNextTaskUnblockTime+0x44>)
 80071d0:	6013      	str	r3, [r2, #0]
}
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr
 80071dc:	20000c4c 	.word	0x20000c4c
 80071e0:	20000cb4 	.word	0x20000cb4

080071e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071ea:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <xTaskGetSchedulerState+0x34>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d102      	bne.n	80071f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071f2:	2301      	movs	r3, #1
 80071f4:	607b      	str	r3, [r7, #4]
 80071f6:	e008      	b.n	800720a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071f8:	4b08      	ldr	r3, [pc, #32]	; (800721c <xTaskGetSchedulerState+0x38>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d102      	bne.n	8007206 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007200:	2302      	movs	r3, #2
 8007202:	607b      	str	r3, [r7, #4]
 8007204:	e001      	b.n	800720a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007206:	2300      	movs	r3, #0
 8007208:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800720a:	687b      	ldr	r3, [r7, #4]
	}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20000ca0 	.word	0x20000ca0
 800721c:	20000cbc 	.word	0x20000cbc

08007220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d054      	beq.n	80072e0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007236:	4b2d      	ldr	r3, [pc, #180]	; (80072ec <xTaskPriorityDisinherit+0xcc>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	429a      	cmp	r2, r3
 800723e:	d009      	beq.n	8007254 <xTaskPriorityDisinherit+0x34>
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e7fe      	b.n	8007252 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <xTaskPriorityDisinherit+0x50>
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	e7fe      	b.n	800726e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007274:	1e5a      	subs	r2, r3, #1
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007282:	429a      	cmp	r2, r3
 8007284:	d02c      	beq.n	80072e0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728a:	2b00      	cmp	r3, #0
 800728c:	d128      	bne.n	80072e0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	3304      	adds	r3, #4
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe fca2 	bl	8005bdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b0:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <xTaskPriorityDisinherit+0xd0>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d903      	bls.n	80072c0 <xTaskPriorityDisinherit+0xa0>
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	4a0c      	ldr	r2, [pc, #48]	; (80072f0 <xTaskPriorityDisinherit+0xd0>)
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <xTaskPriorityDisinherit+0xd4>)
 80072ce:	441a      	add	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	3304      	adds	r3, #4
 80072d4:	4619      	mov	r1, r3
 80072d6:	4610      	mov	r0, r2
 80072d8:	f7fe fc25 	bl	8005b26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072dc:	2301      	movs	r3, #1
 80072de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072e0:	697b      	ldr	r3, [r7, #20]
	}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	200007c0 	.word	0x200007c0
 80072f0:	20000c9c 	.word	0x20000c9c
 80072f4:	200007c4 	.word	0x200007c4

080072f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007302:	4b21      	ldr	r3, [pc, #132]	; (8007388 <prvAddCurrentTaskToDelayedList+0x90>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007308:	4b20      	ldr	r3, [pc, #128]	; (800738c <prvAddCurrentTaskToDelayedList+0x94>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3304      	adds	r3, #4
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fc64 	bl	8005bdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d10a      	bne.n	8007332 <prvAddCurrentTaskToDelayedList+0x3a>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007322:	4b1a      	ldr	r3, [pc, #104]	; (800738c <prvAddCurrentTaskToDelayedList+0x94>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3304      	adds	r3, #4
 8007328:	4619      	mov	r1, r3
 800732a:	4819      	ldr	r0, [pc, #100]	; (8007390 <prvAddCurrentTaskToDelayedList+0x98>)
 800732c:	f7fe fbfb 	bl	8005b26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007330:	e026      	b.n	8007380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4413      	add	r3, r2
 8007338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800733a:	4b14      	ldr	r3, [pc, #80]	; (800738c <prvAddCurrentTaskToDelayedList+0x94>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	429a      	cmp	r2, r3
 8007348:	d209      	bcs.n	800735e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800734a:	4b12      	ldr	r3, [pc, #72]	; (8007394 <prvAddCurrentTaskToDelayedList+0x9c>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4b0f      	ldr	r3, [pc, #60]	; (800738c <prvAddCurrentTaskToDelayedList+0x94>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3304      	adds	r3, #4
 8007354:	4619      	mov	r1, r3
 8007356:	4610      	mov	r0, r2
 8007358:	f7fe fc08 	bl	8005b6c <vListInsert>
}
 800735c:	e010      	b.n	8007380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800735e:	4b0e      	ldr	r3, [pc, #56]	; (8007398 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4b0a      	ldr	r3, [pc, #40]	; (800738c <prvAddCurrentTaskToDelayedList+0x94>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3304      	adds	r3, #4
 8007368:	4619      	mov	r1, r3
 800736a:	4610      	mov	r0, r2
 800736c:	f7fe fbfe 	bl	8005b6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007370:	4b0a      	ldr	r3, [pc, #40]	; (800739c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	429a      	cmp	r2, r3
 8007378:	d202      	bcs.n	8007380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800737a:	4a08      	ldr	r2, [pc, #32]	; (800739c <prvAddCurrentTaskToDelayedList+0xa4>)
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6013      	str	r3, [r2, #0]
}
 8007380:	bf00      	nop
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20000c98 	.word	0x20000c98
 800738c:	200007c0 	.word	0x200007c0
 8007390:	20000c80 	.word	0x20000c80
 8007394:	20000c50 	.word	0x20000c50
 8007398:	20000c4c 	.word	0x20000c4c
 800739c:	20000cb4 	.word	0x20000cb4

080073a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	; 0x28
 80073a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073aa:	f000 fac3 	bl	8007934 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073ae:	4b1c      	ldr	r3, [pc, #112]	; (8007420 <xTimerCreateTimerTask+0x80>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d021      	beq.n	80073fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073be:	1d3a      	adds	r2, r7, #4
 80073c0:	f107 0108 	add.w	r1, r7, #8
 80073c4:	f107 030c 	add.w	r3, r7, #12
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fb67 	bl	8005a9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	9202      	str	r2, [sp, #8]
 80073d6:	9301      	str	r3, [sp, #4]
 80073d8:	2302      	movs	r3, #2
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	2300      	movs	r3, #0
 80073de:	460a      	mov	r2, r1
 80073e0:	4910      	ldr	r1, [pc, #64]	; (8007424 <xTimerCreateTimerTask+0x84>)
 80073e2:	4811      	ldr	r0, [pc, #68]	; (8007428 <xTimerCreateTimerTask+0x88>)
 80073e4:	f7ff f8f8 	bl	80065d8 <xTaskCreateStatic>
 80073e8:	4602      	mov	r2, r0
 80073ea:	4b10      	ldr	r3, [pc, #64]	; (800742c <xTimerCreateTimerTask+0x8c>)
 80073ec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073ee:	4b0f      	ldr	r3, [pc, #60]	; (800742c <xTimerCreateTimerTask+0x8c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073f6:	2301      	movs	r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <xTimerCreateTimerTask+0x74>
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	e7fe      	b.n	8007412 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007414:	697b      	ldr	r3, [r7, #20]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000cf0 	.word	0x20000cf0
 8007424:	08009228 	.word	0x08009228
 8007428:	08007549 	.word	0x08007549
 800742c:	20000cf4 	.word	0x20000cf4

08007430 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08a      	sub	sp, #40	; 0x28
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800743e:	2300      	movs	r3, #0
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d109      	bne.n	800745c <xTimerGenericCommand+0x2c>
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	623b      	str	r3, [r7, #32]
 800745a:	e7fe      	b.n	800745a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800745c:	4b19      	ldr	r3, [pc, #100]	; (80074c4 <xTimerGenericCommand+0x94>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d02a      	beq.n	80074ba <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b05      	cmp	r3, #5
 8007474:	dc18      	bgt.n	80074a8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007476:	f7ff feb5 	bl	80071e4 <xTaskGetSchedulerState>
 800747a:	4603      	mov	r3, r0
 800747c:	2b02      	cmp	r3, #2
 800747e:	d109      	bne.n	8007494 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007480:	4b10      	ldr	r3, [pc, #64]	; (80074c4 <xTimerGenericCommand+0x94>)
 8007482:	6818      	ldr	r0, [r3, #0]
 8007484:	f107 0110 	add.w	r1, r7, #16
 8007488:	2300      	movs	r3, #0
 800748a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800748c:	f7fe fcce 	bl	8005e2c <xQueueGenericSend>
 8007490:	6278      	str	r0, [r7, #36]	; 0x24
 8007492:	e012      	b.n	80074ba <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007494:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <xTimerGenericCommand+0x94>)
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	f107 0110 	add.w	r1, r7, #16
 800749c:	2300      	movs	r3, #0
 800749e:	2200      	movs	r2, #0
 80074a0:	f7fe fcc4 	bl	8005e2c <xQueueGenericSend>
 80074a4:	6278      	str	r0, [r7, #36]	; 0x24
 80074a6:	e008      	b.n	80074ba <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074a8:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <xTimerGenericCommand+0x94>)
 80074aa:	6818      	ldr	r0, [r3, #0]
 80074ac:	f107 0110 	add.w	r1, r7, #16
 80074b0:	2300      	movs	r3, #0
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	f7fe fdb4 	bl	8006020 <xQueueGenericSendFromISR>
 80074b8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3728      	adds	r7, #40	; 0x28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000cf0 	.word	0x20000cf0

080074c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074d2:	4b1c      	ldr	r3, [pc, #112]	; (8007544 <prvProcessExpiredTimer+0x7c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	3304      	adds	r3, #4
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fe fb7b 	bl	8005bdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d121      	bne.n	8007532 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	18d1      	adds	r1, r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	6978      	ldr	r0, [r7, #20]
 80074fc:	f000 f8c8 	bl	8007690 <prvInsertTimerInActiveList>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d015      	beq.n	8007532 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007506:	2300      	movs	r3, #0
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	2300      	movs	r3, #0
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	2100      	movs	r1, #0
 8007510:	6978      	ldr	r0, [r7, #20]
 8007512:	f7ff ff8d 	bl	8007430 <xTimerGenericCommand>
 8007516:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <prvProcessExpiredTimer+0x6a>
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	e7fe      	b.n	8007530 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	6978      	ldr	r0, [r7, #20]
 8007538:	4798      	blx	r3
}
 800753a:	bf00      	nop
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000ce8 	.word	0x20000ce8

08007548 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007550:	f107 0308 	add.w	r3, r7, #8
 8007554:	4618      	mov	r0, r3
 8007556:	f000 f857 	bl	8007608 <prvGetNextExpireTime>
 800755a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	4619      	mov	r1, r3
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f803 	bl	800756c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007566:	f000 f8d5 	bl	8007714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800756a:	e7f1      	b.n	8007550 <prvTimerTask+0x8>

0800756c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007576:	f7ff fa5b 	bl	8006a30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800757a:	f107 0308 	add.w	r3, r7, #8
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f866 	bl	8007650 <prvSampleTimeNow>
 8007584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d130      	bne.n	80075ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <prvProcessTimerOrBlockTask+0x3c>
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	429a      	cmp	r2, r3
 8007598:	d806      	bhi.n	80075a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800759a:	f7ff fa57 	bl	8006a4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800759e:	68f9      	ldr	r1, [r7, #12]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff ff91 	bl	80074c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075a6:	e024      	b.n	80075f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d008      	beq.n	80075c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075ae:	4b13      	ldr	r3, [pc, #76]	; (80075fc <prvProcessTimerOrBlockTask+0x90>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bf0c      	ite	eq
 80075b8:	2301      	moveq	r3, #1
 80075ba:	2300      	movne	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075c0:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <prvProcessTimerOrBlockTask+0x94>)
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	4619      	mov	r1, r3
 80075ce:	f7fe ffcf 	bl	8006570 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80075d2:	f7ff fa3b 	bl	8006a4c <xTaskResumeAll>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80075dc:	4b09      	ldr	r3, [pc, #36]	; (8007604 <prvProcessTimerOrBlockTask+0x98>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
}
 80075ec:	e001      	b.n	80075f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80075ee:	f7ff fa2d 	bl	8006a4c <xTaskResumeAll>
}
 80075f2:	bf00      	nop
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20000cec 	.word	0x20000cec
 8007600:	20000cf0 	.word	0x20000cf0
 8007604:	e000ed04 	.word	0xe000ed04

08007608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007610:	4b0e      	ldr	r3, [pc, #56]	; (800764c <prvGetNextExpireTime+0x44>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	bf0c      	ite	eq
 800761a:	2301      	moveq	r3, #1
 800761c:	2300      	movne	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d105      	bne.n	800763a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <prvGetNextExpireTime+0x44>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	e001      	b.n	800763e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800763e:	68fb      	ldr	r3, [r7, #12]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000ce8 	.word	0x20000ce8

08007650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007658:	f7ff fa94 	bl	8006b84 <xTaskGetTickCount>
 800765c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800765e:	4b0b      	ldr	r3, [pc, #44]	; (800768c <prvSampleTimeNow+0x3c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	429a      	cmp	r2, r3
 8007666:	d205      	bcs.n	8007674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007668:	f000 f904 	bl	8007874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	e002      	b.n	800767a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800767a:	4a04      	ldr	r2, [pc, #16]	; (800768c <prvSampleTimeNow+0x3c>)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007680:	68fb      	ldr	r3, [r7, #12]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000cf8 	.word	0x20000cf8

08007690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d812      	bhi.n	80076dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	1ad2      	subs	r2, r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d302      	bcc.n	80076ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80076c4:	2301      	movs	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	e01b      	b.n	8007702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80076ca:	4b10      	ldr	r3, [pc, #64]	; (800770c <prvInsertTimerInActiveList+0x7c>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f7fe fa49 	bl	8005b6c <vListInsert>
 80076da:	e012      	b.n	8007702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d206      	bcs.n	80076f2 <prvInsertTimerInActiveList+0x62>
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d302      	bcc.n	80076f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80076ec:	2301      	movs	r3, #1
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	e007      	b.n	8007702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076f2:	4b07      	ldr	r3, [pc, #28]	; (8007710 <prvInsertTimerInActiveList+0x80>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3304      	adds	r3, #4
 80076fa:	4619      	mov	r1, r3
 80076fc:	4610      	mov	r0, r2
 80076fe:	f7fe fa35 	bl	8005b6c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007702:	697b      	ldr	r3, [r7, #20]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000cec 	.word	0x20000cec
 8007710:	20000ce8 	.word	0x20000ce8

08007714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08e      	sub	sp, #56	; 0x38
 8007718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800771a:	e099      	b.n	8007850 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	da17      	bge.n	8007752 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007722:	1d3b      	adds	r3, r7, #4
 8007724:	3304      	adds	r3, #4
 8007726:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d109      	bne.n	8007742 <prvProcessReceivedCommands+0x2e>
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	61fb      	str	r3, [r7, #28]
 8007740:	e7fe      	b.n	8007740 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007748:	6850      	ldr	r0, [r2, #4]
 800774a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800774c:	6892      	ldr	r2, [r2, #8]
 800774e:	4611      	mov	r1, r2
 8007750:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	db7a      	blt.n	800784e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	3304      	adds	r3, #4
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe fa37 	bl	8005bdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800776e:	463b      	mov	r3, r7
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff ff6d 	bl	8007650 <prvSampleTimeNow>
 8007776:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b09      	cmp	r3, #9
 800777c:	d868      	bhi.n	8007850 <prvProcessReceivedCommands+0x13c>
 800777e:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <prvProcessReceivedCommands+0x70>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	080077ad 	.word	0x080077ad
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077ad 	.word	0x080077ad
 8007790:	08007851 	.word	0x08007851
 8007794:	08007807 	.word	0x08007807
 8007798:	0800783d 	.word	0x0800783d
 800779c:	080077ad 	.word	0x080077ad
 80077a0:	080077ad 	.word	0x080077ad
 80077a4:	08007851 	.word	0x08007851
 80077a8:	08007807 	.word	0x08007807
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	18d1      	adds	r1, r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ba:	f7ff ff69 	bl	8007690 <prvInsertTimerInActiveList>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d045      	beq.n	8007850 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d13d      	bne.n	8007850 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	441a      	add	r2, r3
 80077dc:	2300      	movs	r3, #0
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	2300      	movs	r3, #0
 80077e2:	2100      	movs	r1, #0
 80077e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077e6:	f7ff fe23 	bl	8007430 <xTimerGenericCommand>
 80077ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d12e      	bne.n	8007850 <prvProcessReceivedCommands+0x13c>
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	61bb      	str	r3, [r7, #24]
 8007804:	e7fe      	b.n	8007804 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d109      	bne.n	8007828 <prvProcessReceivedCommands+0x114>
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	617b      	str	r3, [r7, #20]
 8007826:	e7fe      	b.n	8007826 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	699a      	ldr	r2, [r3, #24]
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	18d1      	adds	r1, r2, r3
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007836:	f7ff ff2b 	bl	8007690 <prvInsertTimerInActiveList>
					break;
 800783a:	e009      	b.n	8007850 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d104      	bne.n	8007850 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007848:	f000 fb56 	bl	8007ef8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800784c:	e000      	b.n	8007850 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800784e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <prvProcessReceivedCommands+0x15c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	1d39      	adds	r1, r7, #4
 8007856:	2200      	movs	r2, #0
 8007858:	4618      	mov	r0, r3
 800785a:	f7fe fc75 	bl	8006148 <xQueueReceive>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	f47f af5b 	bne.w	800771c <prvProcessReceivedCommands+0x8>
	}
}
 8007866:	bf00      	nop
 8007868:	3730      	adds	r7, #48	; 0x30
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20000cf0 	.word	0x20000cf0

08007874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800787a:	e044      	b.n	8007906 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800787c:	4b2b      	ldr	r3, [pc, #172]	; (800792c <prvSwitchTimerLists+0xb8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007886:	4b29      	ldr	r3, [pc, #164]	; (800792c <prvSwitchTimerLists+0xb8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe f9a1 	bl	8005bdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d12d      	bne.n	8007906 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	4413      	add	r3, r2
 80078b2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d90e      	bls.n	80078da <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078c8:	4b18      	ldr	r3, [pc, #96]	; (800792c <prvSwitchTimerLists+0xb8>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3304      	adds	r3, #4
 80078d0:	4619      	mov	r1, r3
 80078d2:	4610      	mov	r0, r2
 80078d4:	f7fe f94a 	bl	8005b6c <vListInsert>
 80078d8:	e015      	b.n	8007906 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078da:	2300      	movs	r3, #0
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	2300      	movs	r3, #0
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	2100      	movs	r1, #0
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7ff fda3 	bl	8007430 <xTimerGenericCommand>
 80078ea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <prvSwitchTimerLists+0x92>
 80078f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	e7fe      	b.n	8007904 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007906:	4b09      	ldr	r3, [pc, #36]	; (800792c <prvSwitchTimerLists+0xb8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1b5      	bne.n	800787c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007910:	4b06      	ldr	r3, [pc, #24]	; (800792c <prvSwitchTimerLists+0xb8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007916:	4b06      	ldr	r3, [pc, #24]	; (8007930 <prvSwitchTimerLists+0xbc>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a04      	ldr	r2, [pc, #16]	; (800792c <prvSwitchTimerLists+0xb8>)
 800791c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800791e:	4a04      	ldr	r2, [pc, #16]	; (8007930 <prvSwitchTimerLists+0xbc>)
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	6013      	str	r3, [r2, #0]
}
 8007924:	bf00      	nop
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20000ce8 	.word	0x20000ce8
 8007930:	20000cec 	.word	0x20000cec

08007934 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800793a:	f000 f925 	bl	8007b88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800793e:	4b15      	ldr	r3, [pc, #84]	; (8007994 <prvCheckForValidListAndQueue+0x60>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d120      	bne.n	8007988 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007946:	4814      	ldr	r0, [pc, #80]	; (8007998 <prvCheckForValidListAndQueue+0x64>)
 8007948:	f7fe f8c2 	bl	8005ad0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800794c:	4813      	ldr	r0, [pc, #76]	; (800799c <prvCheckForValidListAndQueue+0x68>)
 800794e:	f7fe f8bf 	bl	8005ad0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007952:	4b13      	ldr	r3, [pc, #76]	; (80079a0 <prvCheckForValidListAndQueue+0x6c>)
 8007954:	4a10      	ldr	r2, [pc, #64]	; (8007998 <prvCheckForValidListAndQueue+0x64>)
 8007956:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007958:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <prvCheckForValidListAndQueue+0x70>)
 800795a:	4a10      	ldr	r2, [pc, #64]	; (800799c <prvCheckForValidListAndQueue+0x68>)
 800795c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800795e:	2300      	movs	r3, #0
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <prvCheckForValidListAndQueue+0x74>)
 8007964:	4a11      	ldr	r2, [pc, #68]	; (80079ac <prvCheckForValidListAndQueue+0x78>)
 8007966:	2110      	movs	r1, #16
 8007968:	200a      	movs	r0, #10
 800796a:	f7fe f9c9 	bl	8005d00 <xQueueGenericCreateStatic>
 800796e:	4602      	mov	r2, r0
 8007970:	4b08      	ldr	r3, [pc, #32]	; (8007994 <prvCheckForValidListAndQueue+0x60>)
 8007972:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007974:	4b07      	ldr	r3, [pc, #28]	; (8007994 <prvCheckForValidListAndQueue+0x60>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800797c:	4b05      	ldr	r3, [pc, #20]	; (8007994 <prvCheckForValidListAndQueue+0x60>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	490b      	ldr	r1, [pc, #44]	; (80079b0 <prvCheckForValidListAndQueue+0x7c>)
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fdcc 	bl	8006520 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007988:	f000 f92c 	bl	8007be4 <vPortExitCritical>
}
 800798c:	bf00      	nop
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20000cf0 	.word	0x20000cf0
 8007998:	20000cc0 	.word	0x20000cc0
 800799c:	20000cd4 	.word	0x20000cd4
 80079a0:	20000ce8 	.word	0x20000ce8
 80079a4:	20000cec 	.word	0x20000cec
 80079a8:	20000d9c 	.word	0x20000d9c
 80079ac:	20000cfc 	.word	0x20000cfc
 80079b0:	08009230 	.word	0x08009230

080079b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3b04      	subs	r3, #4
 80079c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3b04      	subs	r3, #4
 80079d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f023 0201 	bic.w	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3b04      	subs	r3, #4
 80079e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079e4:	4a08      	ldr	r2, [pc, #32]	; (8007a08 <pxPortInitialiseStack+0x54>)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3b14      	subs	r3, #20
 80079ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3b20      	subs	r3, #32
 80079fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079fc:	68fb      	ldr	r3, [r7, #12]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr
 8007a08:	08007a0d 	.word	0x08007a0d

08007a0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a16:	4b10      	ldr	r3, [pc, #64]	; (8007a58 <prvTaskExitError+0x4c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1e:	d009      	beq.n	8007a34 <prvTaskExitError+0x28>
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	e7fe      	b.n	8007a32 <prvTaskExitError+0x26>
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a46:	bf00      	nop
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d0fc      	beq.n	8007a48 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a4e:	bf00      	nop
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bc80      	pop	{r7}
 8007a56:	4770      	bx	lr
 8007a58:	20000048 	.word	0x20000048
 8007a5c:	00000000 	.word	0x00000000

08007a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <pxCurrentTCBConst2>)
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	6808      	ldr	r0, [r1, #0]
 8007a66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a6a:	f380 8809 	msr	PSP, r0
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8811 	msr	BASEPRI, r0
 8007a7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007a7e:	4770      	bx	lr

08007a80 <pxCurrentTCBConst2>:
 8007a80:	200007c0 	.word	0x200007c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007a88:	4806      	ldr	r0, [pc, #24]	; (8007aa4 <prvPortStartFirstTask+0x1c>)
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	6800      	ldr	r0, [r0, #0]
 8007a8e:	f380 8808 	msr	MSP, r0
 8007a92:	b662      	cpsie	i
 8007a94:	b661      	cpsie	f
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	df00      	svc	0
 8007aa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aa2:	bf00      	nop
 8007aa4:	e000ed08 	.word	0xe000ed08

08007aa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007aae:	4b31      	ldr	r3, [pc, #196]	; (8007b74 <xPortStartScheduler+0xcc>)
 8007ab0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	22ff      	movs	r2, #255	; 0xff
 8007abe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	4b29      	ldr	r3, [pc, #164]	; (8007b78 <xPortStartScheduler+0xd0>)
 8007ad4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ad6:	4b29      	ldr	r3, [pc, #164]	; (8007b7c <xPortStartScheduler+0xd4>)
 8007ad8:	2207      	movs	r2, #7
 8007ada:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007adc:	e009      	b.n	8007af2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007ade:	4b27      	ldr	r3, [pc, #156]	; (8007b7c <xPortStartScheduler+0xd4>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	4a25      	ldr	r2, [pc, #148]	; (8007b7c <xPortStartScheduler+0xd4>)
 8007ae6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afa:	2b80      	cmp	r3, #128	; 0x80
 8007afc:	d0ef      	beq.n	8007ade <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007afe:	4b1f      	ldr	r3, [pc, #124]	; (8007b7c <xPortStartScheduler+0xd4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f1c3 0307 	rsb	r3, r3, #7
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d009      	beq.n	8007b1e <xPortStartScheduler+0x76>
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	60bb      	str	r3, [r7, #8]
 8007b1c:	e7fe      	b.n	8007b1c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b1e:	4b17      	ldr	r3, [pc, #92]	; (8007b7c <xPortStartScheduler+0xd4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	4a15      	ldr	r2, [pc, #84]	; (8007b7c <xPortStartScheduler+0xd4>)
 8007b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b28:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <xPortStartScheduler+0xd4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b30:	4a12      	ldr	r2, [pc, #72]	; (8007b7c <xPortStartScheduler+0xd4>)
 8007b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b3c:	4b10      	ldr	r3, [pc, #64]	; (8007b80 <xPortStartScheduler+0xd8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a0f      	ldr	r2, [pc, #60]	; (8007b80 <xPortStartScheduler+0xd8>)
 8007b42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b48:	4b0d      	ldr	r3, [pc, #52]	; (8007b80 <xPortStartScheduler+0xd8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a0c      	ldr	r2, [pc, #48]	; (8007b80 <xPortStartScheduler+0xd8>)
 8007b4e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b54:	f000 f8b0 	bl	8007cb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b58:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <xPortStartScheduler+0xdc>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b5e:	f7ff ff93 	bl	8007a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b62:	f7ff f8db 	bl	8006d1c <vTaskSwitchContext>
	prvTaskExitError();
 8007b66:	f7ff ff51 	bl	8007a0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	e000e400 	.word	0xe000e400
 8007b78:	20000dec 	.word	0x20000dec
 8007b7c:	20000df0 	.word	0x20000df0
 8007b80:	e000ed20 	.word	0xe000ed20
 8007b84:	20000048 	.word	0x20000048

08007b88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ba0:	4b0e      	ldr	r3, [pc, #56]	; (8007bdc <vPortEnterCritical+0x54>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	4a0d      	ldr	r2, [pc, #52]	; (8007bdc <vPortEnterCritical+0x54>)
 8007ba8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007baa:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <vPortEnterCritical+0x54>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d10e      	bne.n	8007bd0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bb2:	4b0b      	ldr	r3, [pc, #44]	; (8007be0 <vPortEnterCritical+0x58>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d009      	beq.n	8007bd0 <vPortEnterCritical+0x48>
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	603b      	str	r3, [r7, #0]
 8007bce:	e7fe      	b.n	8007bce <vPortEnterCritical+0x46>
	}
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bc80      	pop	{r7}
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	20000048 	.word	0x20000048
 8007be0:	e000ed04 	.word	0xe000ed04

08007be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bea:	4b10      	ldr	r3, [pc, #64]	; (8007c2c <vPortExitCritical+0x48>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d109      	bne.n	8007c06 <vPortExitCritical+0x22>
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	607b      	str	r3, [r7, #4]
 8007c04:	e7fe      	b.n	8007c04 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007c06:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <vPortExitCritical+0x48>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	4a07      	ldr	r2, [pc, #28]	; (8007c2c <vPortExitCritical+0x48>)
 8007c0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <vPortExitCritical+0x48>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d104      	bne.n	8007c22 <vPortExitCritical+0x3e>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc80      	pop	{r7}
 8007c2a:	4770      	bx	lr
 8007c2c:	20000048 	.word	0x20000048

08007c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c30:	f3ef 8009 	mrs	r0, PSP
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	4b0d      	ldr	r3, [pc, #52]	; (8007c70 <pxCurrentTCBConst>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c40:	6010      	str	r0, [r2, #0]
 8007c42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007c46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c4a:	f380 8811 	msr	BASEPRI, r0
 8007c4e:	f7ff f865 	bl	8006d1c <vTaskSwitchContext>
 8007c52:	f04f 0000 	mov.w	r0, #0
 8007c56:	f380 8811 	msr	BASEPRI, r0
 8007c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007c5e:	6819      	ldr	r1, [r3, #0]
 8007c60:	6808      	ldr	r0, [r1, #0]
 8007c62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c66:	f380 8809 	msr	PSP, r0
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	4770      	bx	lr

08007c70 <pxCurrentTCBConst>:
 8007c70:	200007c0 	.word	0x200007c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop

08007c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c90:	f7fe ff86 	bl	8006ba0 <xTaskIncrementTick>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c9a:	4b06      	ldr	r3, [pc, #24]	; (8007cb4 <SysTick_Handler+0x3c>)
 8007c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	e000ed04 	.word	0xe000ed04

08007cb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <vPortSetupTimerInterrupt+0x30>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cc2:	4b0a      	ldr	r3, [pc, #40]	; (8007cec <vPortSetupTimerInterrupt+0x34>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cc8:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <vPortSetupTimerInterrupt+0x38>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a09      	ldr	r2, [pc, #36]	; (8007cf4 <vPortSetupTimerInterrupt+0x3c>)
 8007cce:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd2:	099b      	lsrs	r3, r3, #6
 8007cd4:	4a08      	ldr	r2, [pc, #32]	; (8007cf8 <vPortSetupTimerInterrupt+0x40>)
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cda:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <vPortSetupTimerInterrupt+0x30>)
 8007cdc:	2207      	movs	r2, #7
 8007cde:	601a      	str	r2, [r3, #0]
}
 8007ce0:	bf00      	nop
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bc80      	pop	{r7}
 8007ce6:	4770      	bx	lr
 8007ce8:	e000e010 	.word	0xe000e010
 8007cec:	e000e018 	.word	0xe000e018
 8007cf0:	20000018 	.word	0x20000018
 8007cf4:	10624dd3 	.word	0x10624dd3
 8007cf8:	e000e014 	.word	0xe000e014

08007cfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d02:	f3ef 8305 	mrs	r3, IPSR
 8007d06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b0f      	cmp	r3, #15
 8007d0c:	d913      	bls.n	8007d36 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d0e:	4a15      	ldr	r2, [pc, #84]	; (8007d64 <vPortValidateInterruptPriority+0x68>)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d18:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <vPortValidateInterruptPriority+0x6c>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	7afa      	ldrb	r2, [r7, #11]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d209      	bcs.n	8007d36 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	607b      	str	r3, [r7, #4]
 8007d34:	e7fe      	b.n	8007d34 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d36:	4b0d      	ldr	r3, [pc, #52]	; (8007d6c <vPortValidateInterruptPriority+0x70>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d3e:	4b0c      	ldr	r3, [pc, #48]	; (8007d70 <vPortValidateInterruptPriority+0x74>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d909      	bls.n	8007d5a <vPortValidateInterruptPriority+0x5e>
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	e7fe      	b.n	8007d58 <vPortValidateInterruptPriority+0x5c>
	}
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr
 8007d64:	e000e3f0 	.word	0xe000e3f0
 8007d68:	20000dec 	.word	0x20000dec
 8007d6c:	e000ed0c 	.word	0xe000ed0c
 8007d70:	20000df0 	.word	0x20000df0

08007d74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08a      	sub	sp, #40	; 0x28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d80:	f7fe fe56 	bl	8006a30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d84:	4b57      	ldr	r3, [pc, #348]	; (8007ee4 <pvPortMalloc+0x170>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d8c:	f000 f90c 	bl	8007fa8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d90:	4b55      	ldr	r3, [pc, #340]	; (8007ee8 <pvPortMalloc+0x174>)
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4013      	ands	r3, r2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 808c 	bne.w	8007eb6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01c      	beq.n	8007dde <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007da4:	2208      	movs	r2, #8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4413      	add	r3, r2
 8007daa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f003 0307 	and.w	r3, r3, #7
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d013      	beq.n	8007dde <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f023 0307 	bic.w	r3, r3, #7
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <pvPortMalloc+0x6a>
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	617b      	str	r3, [r7, #20]
 8007ddc:	e7fe      	b.n	8007ddc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d068      	beq.n	8007eb6 <pvPortMalloc+0x142>
 8007de4:	4b41      	ldr	r3, [pc, #260]	; (8007eec <pvPortMalloc+0x178>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d863      	bhi.n	8007eb6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dee:	4b40      	ldr	r3, [pc, #256]	; (8007ef0 <pvPortMalloc+0x17c>)
 8007df0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007df2:	4b3f      	ldr	r3, [pc, #252]	; (8007ef0 <pvPortMalloc+0x17c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007df8:	e004      	b.n	8007e04 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d903      	bls.n	8007e16 <pvPortMalloc+0xa2>
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f1      	bne.n	8007dfa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e16:	4b33      	ldr	r3, [pc, #204]	; (8007ee4 <pvPortMalloc+0x170>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d04a      	beq.n	8007eb6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2208      	movs	r2, #8
 8007e26:	4413      	add	r3, r2
 8007e28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	1ad2      	subs	r2, r2, r3
 8007e3a:	2308      	movs	r3, #8
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d91e      	bls.n	8007e80 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4413      	add	r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f003 0307 	and.w	r3, r3, #7
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d009      	beq.n	8007e68 <pvPortMalloc+0xf4>
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	613b      	str	r3, [r7, #16]
 8007e66:	e7fe      	b.n	8007e66 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e7a:	69b8      	ldr	r0, [r7, #24]
 8007e7c:	f000 f8f6 	bl	800806c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e80:	4b1a      	ldr	r3, [pc, #104]	; (8007eec <pvPortMalloc+0x178>)
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	4a18      	ldr	r2, [pc, #96]	; (8007eec <pvPortMalloc+0x178>)
 8007e8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e8e:	4b17      	ldr	r3, [pc, #92]	; (8007eec <pvPortMalloc+0x178>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	4b18      	ldr	r3, [pc, #96]	; (8007ef4 <pvPortMalloc+0x180>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d203      	bcs.n	8007ea2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e9a:	4b14      	ldr	r3, [pc, #80]	; (8007eec <pvPortMalloc+0x178>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a15      	ldr	r2, [pc, #84]	; (8007ef4 <pvPortMalloc+0x180>)
 8007ea0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	4b10      	ldr	r3, [pc, #64]	; (8007ee8 <pvPortMalloc+0x174>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007eb6:	f7fe fdc9 	bl	8006a4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d009      	beq.n	8007ed8 <pvPortMalloc+0x164>
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	e7fe      	b.n	8007ed6 <pvPortMalloc+0x162>
	return pvReturn;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3728      	adds	r7, #40	; 0x28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20001ba8 	.word	0x20001ba8
 8007ee8:	20001bb4 	.word	0x20001bb4
 8007eec:	20001bac 	.word	0x20001bac
 8007ef0:	20001ba0 	.word	0x20001ba0
 8007ef4:	20001bb0 	.word	0x20001bb0

08007ef8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d046      	beq.n	8007f98 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f0a:	2308      	movs	r3, #8
 8007f0c:	425b      	negs	r3, r3
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4413      	add	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	4b20      	ldr	r3, [pc, #128]	; (8007fa0 <vPortFree+0xa8>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4013      	ands	r3, r2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <vPortFree+0x42>
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	e7fe      	b.n	8007f38 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d009      	beq.n	8007f56 <vPortFree+0x5e>
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	60bb      	str	r3, [r7, #8]
 8007f54:	e7fe      	b.n	8007f54 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	4b11      	ldr	r3, [pc, #68]	; (8007fa0 <vPortFree+0xa8>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d019      	beq.n	8007f98 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d115      	bne.n	8007f98 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <vPortFree+0xa8>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	43db      	mvns	r3, r3
 8007f76:	401a      	ands	r2, r3
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f7c:	f7fe fd58 	bl	8006a30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <vPortFree+0xac>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4413      	add	r3, r2
 8007f8a:	4a06      	ldr	r2, [pc, #24]	; (8007fa4 <vPortFree+0xac>)
 8007f8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f8e:	6938      	ldr	r0, [r7, #16]
 8007f90:	f000 f86c 	bl	800806c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f94:	f7fe fd5a 	bl	8006a4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f98:	bf00      	nop
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20001bb4 	.word	0x20001bb4
 8007fa4:	20001bac 	.word	0x20001bac

08007fa8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fae:	f640 53ac 	movw	r3, #3500	; 0xdac
 8007fb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fb4:	4b27      	ldr	r3, [pc, #156]	; (8008054 <prvHeapInit+0xac>)
 8007fb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f003 0307 	and.w	r3, r3, #7
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00c      	beq.n	8007fdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3307      	adds	r3, #7
 8007fc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 0307 	bic.w	r3, r3, #7
 8007fce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	4a1f      	ldr	r2, [pc, #124]	; (8008054 <prvHeapInit+0xac>)
 8007fd8:	4413      	add	r3, r2
 8007fda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fe0:	4a1d      	ldr	r2, [pc, #116]	; (8008058 <prvHeapInit+0xb0>)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fe6:	4b1c      	ldr	r3, [pc, #112]	; (8008058 <prvHeapInit+0xb0>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	1a9b      	subs	r3, r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 0307 	bic.w	r3, r3, #7
 8008002:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4a15      	ldr	r2, [pc, #84]	; (800805c <prvHeapInit+0xb4>)
 8008008:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800800a:	4b14      	ldr	r3, [pc, #80]	; (800805c <prvHeapInit+0xb4>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2200      	movs	r2, #0
 8008010:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008012:	4b12      	ldr	r3, [pc, #72]	; (800805c <prvHeapInit+0xb4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	1ad2      	subs	r2, r2, r3
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008028:	4b0c      	ldr	r3, [pc, #48]	; (800805c <prvHeapInit+0xb4>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	4a0a      	ldr	r2, [pc, #40]	; (8008060 <prvHeapInit+0xb8>)
 8008036:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	4a09      	ldr	r2, [pc, #36]	; (8008064 <prvHeapInit+0xbc>)
 800803e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008040:	4b09      	ldr	r3, [pc, #36]	; (8008068 <prvHeapInit+0xc0>)
 8008042:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008046:	601a      	str	r2, [r3, #0]
}
 8008048:	bf00      	nop
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	bc80      	pop	{r7}
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	20000df4 	.word	0x20000df4
 8008058:	20001ba0 	.word	0x20001ba0
 800805c:	20001ba8 	.word	0x20001ba8
 8008060:	20001bb0 	.word	0x20001bb0
 8008064:	20001bac 	.word	0x20001bac
 8008068:	20001bb4 	.word	0x20001bb4

0800806c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008074:	4b27      	ldr	r3, [pc, #156]	; (8008114 <prvInsertBlockIntoFreeList+0xa8>)
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	e002      	b.n	8008080 <prvInsertBlockIntoFreeList+0x14>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	429a      	cmp	r2, r3
 8008088:	d8f7      	bhi.n	800807a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	4413      	add	r3, r2
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	429a      	cmp	r2, r3
 800809a:	d108      	bne.n	80080ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	441a      	add	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	441a      	add	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d118      	bne.n	80080f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	4b14      	ldr	r3, [pc, #80]	; (8008118 <prvInsertBlockIntoFreeList+0xac>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d00d      	beq.n	80080ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	441a      	add	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	e008      	b.n	80080fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080ea:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <prvInsertBlockIntoFreeList+0xac>)
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	e003      	b.n	80080fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	429a      	cmp	r2, r3
 8008102:	d002      	beq.n	800810a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800810a:	bf00      	nop
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr
 8008114:	20001ba0 	.word	0x20001ba0
 8008118:	20001ba8 	.word	0x20001ba8

0800811c <__errno>:
 800811c:	4b01      	ldr	r3, [pc, #4]	; (8008124 <__errno+0x8>)
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	2000004c 	.word	0x2000004c

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	2500      	movs	r5, #0
 800812c:	4e0c      	ldr	r6, [pc, #48]	; (8008160 <__libc_init_array+0x38>)
 800812e:	4c0d      	ldr	r4, [pc, #52]	; (8008164 <__libc_init_array+0x3c>)
 8008130:	1ba4      	subs	r4, r4, r6
 8008132:	10a4      	asrs	r4, r4, #2
 8008134:	42a5      	cmp	r5, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	f000 f95e 	bl	80083f8 <_init>
 800813c:	2500      	movs	r5, #0
 800813e:	4e0a      	ldr	r6, [pc, #40]	; (8008168 <__libc_init_array+0x40>)
 8008140:	4c0a      	ldr	r4, [pc, #40]	; (800816c <__libc_init_array+0x44>)
 8008142:	1ba4      	subs	r4, r4, r6
 8008144:	10a4      	asrs	r4, r4, #2
 8008146:	42a5      	cmp	r5, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008150:	4798      	blx	r3
 8008152:	3501      	adds	r5, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800815a:	4798      	blx	r3
 800815c:	3501      	adds	r5, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	08009304 	.word	0x08009304
 8008164:	08009304 	.word	0x08009304
 8008168:	08009304 	.word	0x08009304
 800816c:	08009308 	.word	0x08009308

08008170 <memcmp>:
 8008170:	b530      	push	{r4, r5, lr}
 8008172:	2400      	movs	r4, #0
 8008174:	42a2      	cmp	r2, r4
 8008176:	d101      	bne.n	800817c <memcmp+0xc>
 8008178:	2000      	movs	r0, #0
 800817a:	e007      	b.n	800818c <memcmp+0x1c>
 800817c:	5d03      	ldrb	r3, [r0, r4]
 800817e:	3401      	adds	r4, #1
 8008180:	190d      	adds	r5, r1, r4
 8008182:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8008186:	42ab      	cmp	r3, r5
 8008188:	d0f4      	beq.n	8008174 <memcmp+0x4>
 800818a:	1b58      	subs	r0, r3, r5
 800818c:	bd30      	pop	{r4, r5, pc}

0800818e <memcpy>:
 800818e:	b510      	push	{r4, lr}
 8008190:	1e43      	subs	r3, r0, #1
 8008192:	440a      	add	r2, r1
 8008194:	4291      	cmp	r1, r2
 8008196:	d100      	bne.n	800819a <memcpy+0xc>
 8008198:	bd10      	pop	{r4, pc}
 800819a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800819e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081a2:	e7f7      	b.n	8008194 <memcpy+0x6>

080081a4 <memmove>:
 80081a4:	4288      	cmp	r0, r1
 80081a6:	b510      	push	{r4, lr}
 80081a8:	eb01 0302 	add.w	r3, r1, r2
 80081ac:	d807      	bhi.n	80081be <memmove+0x1a>
 80081ae:	1e42      	subs	r2, r0, #1
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d00a      	beq.n	80081ca <memmove+0x26>
 80081b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80081bc:	e7f8      	b.n	80081b0 <memmove+0xc>
 80081be:	4283      	cmp	r3, r0
 80081c0:	d9f5      	bls.n	80081ae <memmove+0xa>
 80081c2:	1881      	adds	r1, r0, r2
 80081c4:	1ad2      	subs	r2, r2, r3
 80081c6:	42d3      	cmn	r3, r2
 80081c8:	d100      	bne.n	80081cc <memmove+0x28>
 80081ca:	bd10      	pop	{r4, pc}
 80081cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80081d4:	e7f7      	b.n	80081c6 <memmove+0x22>

080081d6 <memset>:
 80081d6:	4603      	mov	r3, r0
 80081d8:	4402      	add	r2, r0
 80081da:	4293      	cmp	r3, r2
 80081dc:	d100      	bne.n	80081e0 <memset+0xa>
 80081de:	4770      	bx	lr
 80081e0:	f803 1b01 	strb.w	r1, [r3], #1
 80081e4:	e7f9      	b.n	80081da <memset+0x4>

080081e6 <strchr>:
 80081e6:	b2c9      	uxtb	r1, r1
 80081e8:	4603      	mov	r3, r0
 80081ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ee:	b11a      	cbz	r2, 80081f8 <strchr+0x12>
 80081f0:	428a      	cmp	r2, r1
 80081f2:	d1f9      	bne.n	80081e8 <strchr+0x2>
 80081f4:	4618      	mov	r0, r3
 80081f6:	4770      	bx	lr
 80081f8:	2900      	cmp	r1, #0
 80081fa:	bf18      	it	ne
 80081fc:	2300      	movne	r3, #0
 80081fe:	e7f9      	b.n	80081f4 <strchr+0xe>

08008200 <strcpy>:
 8008200:	4603      	mov	r3, r0
 8008202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008206:	f803 2b01 	strb.w	r2, [r3], #1
 800820a:	2a00      	cmp	r2, #0
 800820c:	d1f9      	bne.n	8008202 <strcpy+0x2>
 800820e:	4770      	bx	lr

08008210 <strncmp>:
 8008210:	b510      	push	{r4, lr}
 8008212:	b16a      	cbz	r2, 8008230 <strncmp+0x20>
 8008214:	3901      	subs	r1, #1
 8008216:	1884      	adds	r4, r0, r2
 8008218:	f810 3b01 	ldrb.w	r3, [r0], #1
 800821c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008220:	4293      	cmp	r3, r2
 8008222:	d103      	bne.n	800822c <strncmp+0x1c>
 8008224:	42a0      	cmp	r0, r4
 8008226:	d001      	beq.n	800822c <strncmp+0x1c>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1f5      	bne.n	8008218 <strncmp+0x8>
 800822c:	1a98      	subs	r0, r3, r2
 800822e:	bd10      	pop	{r4, pc}
 8008230:	4610      	mov	r0, r2
 8008232:	e7fc      	b.n	800822e <strncmp+0x1e>

08008234 <strstr>:
 8008234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008236:	7803      	ldrb	r3, [r0, #0]
 8008238:	b17b      	cbz	r3, 800825a <strstr+0x26>
 800823a:	4604      	mov	r4, r0
 800823c:	7823      	ldrb	r3, [r4, #0]
 800823e:	4620      	mov	r0, r4
 8008240:	1c66      	adds	r6, r4, #1
 8008242:	b17b      	cbz	r3, 8008264 <strstr+0x30>
 8008244:	1e4a      	subs	r2, r1, #1
 8008246:	1e63      	subs	r3, r4, #1
 8008248:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800824c:	b14d      	cbz	r5, 8008262 <strstr+0x2e>
 800824e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008252:	4634      	mov	r4, r6
 8008254:	42af      	cmp	r7, r5
 8008256:	d0f7      	beq.n	8008248 <strstr+0x14>
 8008258:	e7f0      	b.n	800823c <strstr+0x8>
 800825a:	780b      	ldrb	r3, [r1, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	bf18      	it	ne
 8008260:	2000      	movne	r0, #0
 8008262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008264:	4618      	mov	r0, r3
 8008266:	e7fc      	b.n	8008262 <strstr+0x2e>

08008268 <strtok>:
 8008268:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <strtok+0x50>)
 800826a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800826e:	681d      	ldr	r5, [r3, #0]
 8008270:	4606      	mov	r6, r0
 8008272:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008274:	460f      	mov	r7, r1
 8008276:	b9b4      	cbnz	r4, 80082a6 <strtok+0x3e>
 8008278:	2050      	movs	r0, #80	; 0x50
 800827a:	f000 f849 	bl	8008310 <malloc>
 800827e:	65a8      	str	r0, [r5, #88]	; 0x58
 8008280:	e9c0 4400 	strd	r4, r4, [r0]
 8008284:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008288:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800828c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008290:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008294:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008298:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800829c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80082a0:	6184      	str	r4, [r0, #24]
 80082a2:	7704      	strb	r4, [r0, #28]
 80082a4:	6244      	str	r4, [r0, #36]	; 0x24
 80082a6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80082a8:	4639      	mov	r1, r7
 80082aa:	4630      	mov	r0, r6
 80082ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082b0:	2301      	movs	r3, #1
 80082b2:	f000 b803 	b.w	80082bc <__strtok_r>
 80082b6:	bf00      	nop
 80082b8:	2000004c 	.word	0x2000004c

080082bc <__strtok_r>:
 80082bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082be:	b918      	cbnz	r0, 80082c8 <__strtok_r+0xc>
 80082c0:	6810      	ldr	r0, [r2, #0]
 80082c2:	b908      	cbnz	r0, 80082c8 <__strtok_r+0xc>
 80082c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c6:	4620      	mov	r0, r4
 80082c8:	4604      	mov	r4, r0
 80082ca:	460f      	mov	r7, r1
 80082cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80082d0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80082d4:	b91e      	cbnz	r6, 80082de <__strtok_r+0x22>
 80082d6:	b96d      	cbnz	r5, 80082f4 <__strtok_r+0x38>
 80082d8:	6015      	str	r5, [r2, #0]
 80082da:	4628      	mov	r0, r5
 80082dc:	e7f2      	b.n	80082c4 <__strtok_r+0x8>
 80082de:	42b5      	cmp	r5, r6
 80082e0:	d1f6      	bne.n	80082d0 <__strtok_r+0x14>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1ef      	bne.n	80082c6 <__strtok_r+0xa>
 80082e6:	6014      	str	r4, [r2, #0]
 80082e8:	7003      	strb	r3, [r0, #0]
 80082ea:	e7eb      	b.n	80082c4 <__strtok_r+0x8>
 80082ec:	462b      	mov	r3, r5
 80082ee:	e00d      	b.n	800830c <__strtok_r+0x50>
 80082f0:	b926      	cbnz	r6, 80082fc <__strtok_r+0x40>
 80082f2:	461c      	mov	r4, r3
 80082f4:	4623      	mov	r3, r4
 80082f6:	460f      	mov	r7, r1
 80082f8:	f813 5b01 	ldrb.w	r5, [r3], #1
 80082fc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008300:	42b5      	cmp	r5, r6
 8008302:	d1f5      	bne.n	80082f0 <__strtok_r+0x34>
 8008304:	2d00      	cmp	r5, #0
 8008306:	d0f1      	beq.n	80082ec <__strtok_r+0x30>
 8008308:	2100      	movs	r1, #0
 800830a:	7021      	strb	r1, [r4, #0]
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	e7d9      	b.n	80082c4 <__strtok_r+0x8>

08008310 <malloc>:
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <malloc+0xc>)
 8008312:	4601      	mov	r1, r0
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	f000 b803 	b.w	8008320 <_malloc_r>
 800831a:	bf00      	nop
 800831c:	2000004c 	.word	0x2000004c

08008320 <_malloc_r>:
 8008320:	b570      	push	{r4, r5, r6, lr}
 8008322:	1ccd      	adds	r5, r1, #3
 8008324:	f025 0503 	bic.w	r5, r5, #3
 8008328:	3508      	adds	r5, #8
 800832a:	2d0c      	cmp	r5, #12
 800832c:	bf38      	it	cc
 800832e:	250c      	movcc	r5, #12
 8008330:	2d00      	cmp	r5, #0
 8008332:	4606      	mov	r6, r0
 8008334:	db01      	blt.n	800833a <_malloc_r+0x1a>
 8008336:	42a9      	cmp	r1, r5
 8008338:	d903      	bls.n	8008342 <_malloc_r+0x22>
 800833a:	230c      	movs	r3, #12
 800833c:	6033      	str	r3, [r6, #0]
 800833e:	2000      	movs	r0, #0
 8008340:	bd70      	pop	{r4, r5, r6, pc}
 8008342:	f000 f857 	bl	80083f4 <__malloc_lock>
 8008346:	4a21      	ldr	r2, [pc, #132]	; (80083cc <_malloc_r+0xac>)
 8008348:	6814      	ldr	r4, [r2, #0]
 800834a:	4621      	mov	r1, r4
 800834c:	b991      	cbnz	r1, 8008374 <_malloc_r+0x54>
 800834e:	4c20      	ldr	r4, [pc, #128]	; (80083d0 <_malloc_r+0xb0>)
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	b91b      	cbnz	r3, 800835c <_malloc_r+0x3c>
 8008354:	4630      	mov	r0, r6
 8008356:	f000 f83d 	bl	80083d4 <_sbrk_r>
 800835a:	6020      	str	r0, [r4, #0]
 800835c:	4629      	mov	r1, r5
 800835e:	4630      	mov	r0, r6
 8008360:	f000 f838 	bl	80083d4 <_sbrk_r>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d124      	bne.n	80083b2 <_malloc_r+0x92>
 8008368:	230c      	movs	r3, #12
 800836a:	4630      	mov	r0, r6
 800836c:	6033      	str	r3, [r6, #0]
 800836e:	f000 f842 	bl	80083f6 <__malloc_unlock>
 8008372:	e7e4      	b.n	800833e <_malloc_r+0x1e>
 8008374:	680b      	ldr	r3, [r1, #0]
 8008376:	1b5b      	subs	r3, r3, r5
 8008378:	d418      	bmi.n	80083ac <_malloc_r+0x8c>
 800837a:	2b0b      	cmp	r3, #11
 800837c:	d90f      	bls.n	800839e <_malloc_r+0x7e>
 800837e:	600b      	str	r3, [r1, #0]
 8008380:	18cc      	adds	r4, r1, r3
 8008382:	50cd      	str	r5, [r1, r3]
 8008384:	4630      	mov	r0, r6
 8008386:	f000 f836 	bl	80083f6 <__malloc_unlock>
 800838a:	f104 000b 	add.w	r0, r4, #11
 800838e:	1d23      	adds	r3, r4, #4
 8008390:	f020 0007 	bic.w	r0, r0, #7
 8008394:	1ac3      	subs	r3, r0, r3
 8008396:	d0d3      	beq.n	8008340 <_malloc_r+0x20>
 8008398:	425a      	negs	r2, r3
 800839a:	50e2      	str	r2, [r4, r3]
 800839c:	e7d0      	b.n	8008340 <_malloc_r+0x20>
 800839e:	684b      	ldr	r3, [r1, #4]
 80083a0:	428c      	cmp	r4, r1
 80083a2:	bf16      	itet	ne
 80083a4:	6063      	strne	r3, [r4, #4]
 80083a6:	6013      	streq	r3, [r2, #0]
 80083a8:	460c      	movne	r4, r1
 80083aa:	e7eb      	b.n	8008384 <_malloc_r+0x64>
 80083ac:	460c      	mov	r4, r1
 80083ae:	6849      	ldr	r1, [r1, #4]
 80083b0:	e7cc      	b.n	800834c <_malloc_r+0x2c>
 80083b2:	1cc4      	adds	r4, r0, #3
 80083b4:	f024 0403 	bic.w	r4, r4, #3
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d005      	beq.n	80083c8 <_malloc_r+0xa8>
 80083bc:	1a21      	subs	r1, r4, r0
 80083be:	4630      	mov	r0, r6
 80083c0:	f000 f808 	bl	80083d4 <_sbrk_r>
 80083c4:	3001      	adds	r0, #1
 80083c6:	d0cf      	beq.n	8008368 <_malloc_r+0x48>
 80083c8:	6025      	str	r5, [r4, #0]
 80083ca:	e7db      	b.n	8008384 <_malloc_r+0x64>
 80083cc:	20001bb8 	.word	0x20001bb8
 80083d0:	20001bbc 	.word	0x20001bbc

080083d4 <_sbrk_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	2300      	movs	r3, #0
 80083d8:	4c05      	ldr	r4, [pc, #20]	; (80083f0 <_sbrk_r+0x1c>)
 80083da:	4605      	mov	r5, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	f7f9 fede 	bl	80021a0 <_sbrk>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_sbrk_r+0x1a>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_sbrk_r+0x1a>
 80083ec:	602b      	str	r3, [r5, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	20002ea0 	.word	0x20002ea0

080083f4 <__malloc_lock>:
 80083f4:	4770      	bx	lr

080083f6 <__malloc_unlock>:
 80083f6:	4770      	bx	lr

080083f8 <_init>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	bf00      	nop
 80083fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	469e      	mov	lr, r3
 8008402:	4770      	bx	lr

08008404 <_fini>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	bf00      	nop
 8008408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840a:	bc08      	pop	{r3}
 800840c:	469e      	mov	lr, r3
 800840e:	4770      	bx	lr
