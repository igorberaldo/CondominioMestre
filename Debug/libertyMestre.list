
libertyMestre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001190  08008700  08008700  00018700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009890  08009890  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08009890  08009890  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009890  08009890  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009890  08009890  00019890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009894  08009894  00019894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08009898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002314  2000004c  080098e4  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002360  080098e4  00022360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b130  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034fd  00000000  00000000  0003b1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001770  00000000  00000000  0003e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001620  00000000  00000000  0003fe18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004114  00000000  00000000  00041438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012348  00000000  00000000  0004554c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000999ef  00000000  00000000  00057894  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063d4  00000000  00000000  000f1300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000004c 	.word	0x2000004c
 800012c:	00000000 	.word	0x00000000
 8000130:	080086e8 	.word	0x080086e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000050 	.word	0x20000050
 800014c:	080086e8 	.word	0x080086e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b590      	push	{r4, r7, lr}
 8000162:	b087      	sub	sp, #28
 8000164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i;
	uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8000166:	4b1e      	ldr	r3, [pc, #120]	; (80001e0 <main+0x80>)
 8000168:	1d3c      	adds	r4, r7, #4
 800016a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800016c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000170:	f004 f900 	bl	8004374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000174:	f000 f844 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000178:	f000 f8e8 	bl	800034c <MX_GPIO_Init>
  MX_SPI2_Init();
 800017c:	f000 f8b0 	bl	80002e0 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000180:	f000 f880 	bl	8000284 <MX_I2C2_Init>
  ////////////////////////////////////////////////////////////////////////////////////////////////////
     // First of all, Should register SPI callback functions implemented by user for accessing WIZCHIP //
     ////////////////////////////////////////////////////////////////////////////////////////////////////

     /* Chip selection call back */
  	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000184:	4917      	ldr	r1, [pc, #92]	; (80001e4 <main+0x84>)
 8000186:	4818      	ldr	r0, [pc, #96]	; (80001e8 <main+0x88>)
 8000188:	f003 fc16 	bl	80039b8 <reg_wizchip_cs_cbfunc>

  	 /* SPI Read & Write callback function */
  	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800018c:	4917      	ldr	r1, [pc, #92]	; (80001ec <main+0x8c>)
 800018e:	4818      	ldr	r0, [pc, #96]	; (80001f0 <main+0x90>)
 8000190:	f003 fc36 	bl	8003a00 <reg_wizchip_spi_cbfunc>

  	////////////////////////////////////////////////////////////////////////
  	/* WIZCHIP SOCKET Buffer initialize */
  	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	4619      	mov	r1, r3
 8000198:	2001      	movs	r0, #1
 800019a:	f003 fc5b 	bl	8003a54 <ctlwizchip>
 800019e:	4603      	mov	r3, r0
 80001a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001a4:	d100      	bne.n	80001a8 <main+0x48>
  	{
  	   //init fail
  	   while(1);
 80001a6:	e7fe      	b.n	80001a6 <main+0x46>
  	}

  	/* Network initialization */
  	network_init();
 80001a8:	f000 f9d6 	bl	8000558 <network_init>

  	//all connections inactive
  	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 80001ac:	2300      	movs	r3, #0
 80001ae:	75fb      	strb	r3, [r7, #23]
 80001b0:	e006      	b.n	80001c0 <main+0x60>
  	HTTP_reset(i);
 80001b2:	7dfb      	ldrb	r3, [r7, #23]
 80001b4:	4618      	mov	r0, r3
 80001b6:	f000 f9e1 	bl	800057c <HTTP_reset>
  	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 80001ba:	7dfb      	ldrb	r3, [r7, #23]
 80001bc:	3301      	adds	r3, #1
 80001be:	75fb      	strb	r3, [r7, #23]
 80001c0:	7dfb      	ldrb	r3, [r7, #23]
 80001c2:	2b07      	cmp	r3, #7
 80001c4:	d9f5      	bls.n	80001b2 <main+0x52>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001c6:	f005 fdf3 	bl	8005db0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethernetTask */
  ethernetTaskHandle = osThreadNew(StartEthernet, NULL, &ethernetTask_attributes);
 80001ca:	4a0a      	ldr	r2, [pc, #40]	; (80001f4 <main+0x94>)
 80001cc:	2100      	movs	r1, #0
 80001ce:	480a      	ldr	r0, [pc, #40]	; (80001f8 <main+0x98>)
 80001d0:	f005 fe54 	bl	8005e7c <osThreadNew>
 80001d4:	4602      	mov	r2, r0
 80001d6:	4b09      	ldr	r3, [pc, #36]	; (80001fc <main+0x9c>)
 80001d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001da:	f005 fe1b 	bl	8005e14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001de:	e7fe      	b.n	80001de <main+0x7e>
 80001e0:	08008710 	.word	0x08008710
 80001e4:	08000515 	.word	0x08000515
 80001e8:	080004fd 	.word	0x080004fd
 80001ec:	0800052d 	.word	0x0800052d
 80001f0:	08000547 	.word	0x08000547
 80001f4:	08009854 	.word	0x08009854
 80001f8:	080029a5 	.word	0x080029a5
 80001fc:	200022b0 	.word	0x200022b0

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b090      	sub	sp, #64	; 0x40
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f008 fa42 	bl	8008698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022a:	2310      	movs	r3, #16
 800022c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000232:	2300      	movs	r3, #0
 8000234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000236:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800023a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	4618      	mov	r0, r3
 8000242:	f004 fc53 	bl	8004aec <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800024c:	f002 fbe2 	bl	8002a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2102      	movs	r1, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f004 febe 	bl	8004fec <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000276:	f002 fbcd 	bl	8002a14 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	; 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <MX_I2C2_Init+0x50>)
 800028a:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <MX_I2C2_Init+0x54>)
 800028c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <MX_I2C2_Init+0x50>)
 8000290:	4a12      	ldr	r2, [pc, #72]	; (80002dc <MX_I2C2_Init+0x58>)
 8000292:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <MX_I2C2_Init+0x50>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <MX_I2C2_Init+0x50>)
 800029c:	2200      	movs	r2, #0
 800029e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002bc:	2200      	movs	r2, #0
 80002be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002c2:	f004 fadb 	bl	800487c <HAL_I2C_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002cc:	f002 fba2 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20001a34 	.word	0x20001a34
 80002d8:	40005800 	.word	0x40005800
 80002dc:	000186a0 	.word	0x000186a0

080002e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002e4:	4b17      	ldr	r3, [pc, #92]	; (8000344 <MX_SPI2_Init+0x64>)
 80002e6:	4a18      	ldr	r2, [pc, #96]	; (8000348 <MX_SPI2_Init+0x68>)
 80002e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002ea:	4b16      	ldr	r3, [pc, #88]	; (8000344 <MX_SPI2_Init+0x64>)
 80002ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_SPI2_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <MX_SPI2_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_SPI2_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_SPI2_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_SPI2_Init+0x64>)
 800030c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000310:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_SPI2_Init+0x64>)
 8000314:	2218      	movs	r2, #24
 8000316:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <MX_SPI2_Init+0x64>)
 800031a:	2200      	movs	r2, #0
 800031c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_SPI2_Init+0x64>)
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <MX_SPI2_Init+0x64>)
 8000326:	2200      	movs	r2, #0
 8000328:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_SPI2_Init+0x64>)
 800032c:	220a      	movs	r2, #10
 800032e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_SPI2_Init+0x64>)
 8000332:	f005 f827 	bl	8005384 <HAL_SPI_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800033c:	f002 fb6a 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	200019a0 	.word	0x200019a0
 8000348:	40003800 	.word	0x40003800

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	4b55      	ldr	r3, [pc, #340]	; (80004b8 <MX_GPIO_Init+0x16c>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a54      	ldr	r2, [pc, #336]	; (80004b8 <MX_GPIO_Init+0x16c>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b52      	ldr	r3, [pc, #328]	; (80004b8 <MX_GPIO_Init+0x16c>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0310 	and.w	r3, r3, #16
 8000374:	613b      	str	r3, [r7, #16]
 8000376:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000378:	4b4f      	ldr	r3, [pc, #316]	; (80004b8 <MX_GPIO_Init+0x16c>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a4e      	ldr	r2, [pc, #312]	; (80004b8 <MX_GPIO_Init+0x16c>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <MX_GPIO_Init+0x16c>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <MX_GPIO_Init+0x16c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a48      	ldr	r2, [pc, #288]	; (80004b8 <MX_GPIO_Init+0x16c>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b46      	ldr	r3, [pc, #280]	; (80004b8 <MX_GPIO_Init+0x16c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0304 	and.w	r3, r3, #4
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	4b43      	ldr	r3, [pc, #268]	; (80004b8 <MX_GPIO_Init+0x16c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a42      	ldr	r2, [pc, #264]	; (80004b8 <MX_GPIO_Init+0x16c>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b40      	ldr	r3, [pc, #256]	; (80004b8 <MX_GPIO_Init+0x16c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0308 	and.w	r3, r3, #8
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT1_OP9_Pin|OUT1_OP10_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80003c6:	483d      	ldr	r0, [pc, #244]	; (80004bc <MX_GPIO_Init+0x170>)
 80003c8:	f004 fa40 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_LED1_GPIO_Port, ON_LED1_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2102      	movs	r1, #2
 80003d0:	483b      	ldr	r0, [pc, #236]	; (80004c0 <MX_GPIO_Init+0x174>)
 80003d2:	f004 fa3b 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ON_BUZZ_Pin|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f241 0101 	movw	r1, #4097	; 0x1001
 80003dc:	4839      	ldr	r0, [pc, #228]	; (80004c4 <MX_GPIO_Init+0x178>)
 80003de:	f004 fa35 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rst_GPIO_Port, Rst_Pin, GPIO_PIN_SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e8:	4837      	ldr	r0, [pc, #220]	; (80004c8 <MX_GPIO_Init+0x17c>)
 80003ea:	f004 fa2f 	bl	800484c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_OP9_Pin OUT1_OP10_Pin */
  GPIO_InitStruct.Pin = OUT1_OP9_Pin|OUT1_OP10_Pin;
 80003ee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2302      	movs	r3, #2
 80003fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	4619      	mov	r1, r3
 8000406:	482d      	ldr	r0, [pc, #180]	; (80004bc <MX_GPIO_Init+0x170>)
 8000408:	f004 f8c6 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_LED1_Pin */
  GPIO_InitStruct.Pin = ON_LED1_Pin;
 800040c:	2302      	movs	r3, #2
 800040e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2302      	movs	r3, #2
 800041a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ON_LED1_GPIO_Port, &GPIO_InitStruct);
 800041c:	f107 0314 	add.w	r3, r7, #20
 8000420:	4619      	mov	r1, r3
 8000422:	4827      	ldr	r0, [pc, #156]	; (80004c0 <MX_GPIO_Init+0x174>)
 8000424:	f004 f8b8 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP4_Pin OUT1_OP3_Pin OUT1_OP2_Pin OUT1_OP1_Pin
                           OUT1_OP8_Pin OUT1_OP7_Pin OUT1_OP6_Pin OUT1_OP5_Pin */
  GPIO_InitStruct.Pin = OUT1_OP4_Pin|OUT1_OP3_Pin|OUT1_OP2_Pin|OUT1_OP1_Pin
 8000428:	23ff      	movs	r3, #255	; 0xff
 800042a:	617b      	str	r3, [r7, #20]
                          |OUT1_OP8_Pin|OUT1_OP7_Pin|OUT1_OP6_Pin|OUT1_OP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	4619      	mov	r1, r3
 800043a:	4823      	ldr	r0, [pc, #140]	; (80004c8 <MX_GPIO_Init+0x17c>)
 800043c:	f004 f8ac 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_BUZZ_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = ON_BUZZ_Pin|GPIO_W5500_CS_Pin;
 8000440:	f241 0301 	movw	r3, #4097	; 0x1001
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2302      	movs	r3, #2
 8000450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4619      	mov	r1, r3
 8000458:	481a      	ldr	r0, [pc, #104]	; (80004c4 <MX_GPIO_Init+0x178>)
 800045a:	f004 f89d 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP12_Pin OUT1_OP11_Pin OUT1_OP15_Pin OUT1_OP16_Pin
                           OUT1_OP14_Pin OUT1_OP13_Pin */
  GPIO_InitStruct.Pin = OUT1_OP12_Pin|OUT1_OP11_Pin|OUT1_OP15_Pin|OUT1_OP16_Pin
 800045e:	237e      	movs	r3, #126	; 0x7e
 8000460:	617b      	str	r3, [r7, #20]
                          |OUT1_OP14_Pin|OUT1_OP13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000462:	2300      	movs	r3, #0
 8000464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	4619      	mov	r1, r3
 8000470:	4814      	ldr	r0, [pc, #80]	; (80004c4 <MX_GPIO_Init+0x178>)
 8000472:	f004 f891 	bl	8004598 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rst_Pin */
  GPIO_InitStruct.Pin = Rst_Pin;
 8000476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047c:	2301      	movs	r3, #1
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000480:	2301      	movs	r3, #1
 8000482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000484:	2302      	movs	r3, #2
 8000486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Rst_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	4619      	mov	r1, r3
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <MX_GPIO_Init+0x17c>)
 8000490:	f004 f882 	bl	8004598 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <MX_GPIO_Init+0x180>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
 800049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004a0:	627b      	str	r3, [r7, #36]	; 0x24
 80004a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004a8:	627b      	str	r3, [r7, #36]	; 0x24
 80004aa:	4a08      	ldr	r2, [pc, #32]	; (80004cc <MX_GPIO_Init+0x180>)
 80004ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ae:	6053      	str	r3, [r2, #4]

}
 80004b0:	bf00      	nop
 80004b2:	3728      	adds	r7, #40	; 0x28
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40011000 	.word	0x40011000
 80004c0:	40011400 	.word	0x40011400
 80004c4:	40010c00 	.word	0x40010c00
 80004c8:	40010800 	.word	0x40010800
 80004cc:	40010000 	.word	0x40010000

080004d0 <W5500_rxtx>:

/* USER CODE BEGIN 4 */
uint8_t W5500_rxtx(uint8_t data)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	uint8_t rxdata;

	HAL_SPI_TransmitReceive(&hspi2, &data, &rxdata, 1, 50);
 80004da:	f107 020f 	add.w	r2, r7, #15
 80004de:	1df9      	adds	r1, r7, #7
 80004e0:	2332      	movs	r3, #50	; 0x32
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2301      	movs	r3, #1
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <W5500_rxtx+0x28>)
 80004e8:	f004 ffd0 	bl	800548c <HAL_SPI_TransmitReceive>

	return (rxdata);
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200019a0 	.word	0x200019a0

080004fc <wizchip_select>:
/////////////////////////////////////////////////////////////////
// SPI Callback function for accessing WIZCHIP                 //
// WIZCHIP user should implement with your host spi peripheral //
/////////////////////////////////////////////////////////////////
void  wizchip_select(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	W5500_select();
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000506:	4802      	ldr	r0, [pc, #8]	; (8000510 <wizchip_select+0x14>)
 8000508:	f004 f9a0 	bl	800484c <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40010c00 	.word	0x40010c00

08000514 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	W5500_release();
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051e:	4802      	ldr	r0, [pc, #8]	; (8000528 <wizchip_deselect+0x14>)
 8000520:	f004 f994 	bl	800484c <HAL_GPIO_WritePin>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40010c00 	.word	0x40010c00

0800052c <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	W5500_tx(wb);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffc9 	bl	80004d0 <W5500_rxtx>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <wizchip_read>:

uint8_t wizchip_read()
{
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0
   return W5500_rx();
 800054a:	20ff      	movs	r0, #255	; 0xff
 800054c:	f7ff ffc0 	bl	80004d0 <W5500_rxtx>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
   uint8_t tmpstr[6];

	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 800055e:	4906      	ldr	r1, [pc, #24]	; (8000578 <network_init+0x20>)
 8000560:	2000      	movs	r0, #0
 8000562:	f003 fb55 	bl	8003c10 <ctlnetwork>

	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8000566:	463b      	mov	r3, r7
 8000568:	4619      	mov	r1, r3
 800056a:	2008      	movs	r0, #8
 800056c:	f003 fa72 	bl	8003a54 <ctlwizchip>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000000 	.word	0x20000000

0800057c <HTTP_reset>:
#define len(some) (sizeof(some)/sizeof(some[0]))

//http server

void HTTP_reset(uint8_t sockn)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
    sentsize[sockn]=0;
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HTTP_reset+0x28>)
 800058a:	2100      	movs	r1, #0
 800058c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	http_state[sockn]=HTTP_IDLE;
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <HTTP_reset+0x2c>)
 8000594:	2100      	movs	r1, #0
 8000596:	54d1      	strb	r1, [r2, r3]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200022b4 	.word	0x200022b4
 80005a8:	20001aa8 	.word	0x20001aa8

080005ac <tcp_http_mt>:

int32_t tcp_http_mt(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint32_t size = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
   uint8_t flagHtmlGen = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	76fb      	strb	r3, [r7, #27]
   char *url,*p;
   uint16_t blocklen=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	833b      	strh	r3, [r7, #24]

   switch(getSn_SR(sn))
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	3301      	adds	r3, #1
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 ff6b 	bl	80034b0 <WIZCHIP_READ>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b1c      	cmp	r3, #28
 80005de:	f202 81b4 	bhi.w	800294a <tcp_http_mt+0x239e>
 80005e2:	a201      	add	r2, pc, #4	; (adr r2, 80005e8 <tcp_http_mt+0x3c>)
 80005e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e8:	08002927 	.word	0x08002927
 80005ec:	0800294b 	.word	0x0800294b
 80005f0:	0800294b 	.word	0x0800294b
 80005f4:	0800294b 	.word	0x0800294b
 80005f8:	0800294b 	.word	0x0800294b
 80005fc:	0800294b 	.word	0x0800294b
 8000600:	0800294b 	.word	0x0800294b
 8000604:	0800294b 	.word	0x0800294b
 8000608:	0800294b 	.word	0x0800294b
 800060c:	0800294b 	.word	0x0800294b
 8000610:	0800294b 	.word	0x0800294b
 8000614:	0800294b 	.word	0x0800294b
 8000618:	0800294b 	.word	0x0800294b
 800061c:	0800294b 	.word	0x0800294b
 8000620:	0800294b 	.word	0x0800294b
 8000624:	0800294b 	.word	0x0800294b
 8000628:	0800294b 	.word	0x0800294b
 800062c:	0800294b 	.word	0x0800294b
 8000630:	0800294b 	.word	0x0800294b
 8000634:	08002909 	.word	0x08002909
 8000638:	0800294b 	.word	0x0800294b
 800063c:	0800294b 	.word	0x0800294b
 8000640:	0800294b 	.word	0x0800294b
 8000644:	0800065d 	.word	0x0800065d
 8000648:	0800294b 	.word	0x0800294b
 800064c:	0800294b 	.word	0x0800294b
 8000650:	0800294b 	.word	0x0800294b
 8000654:	0800294b 	.word	0x0800294b
 8000658:	080028eb 	.word	0x080028eb
   {
      case SOCK_ESTABLISHED :

         if(getSn_IR(sn) & Sn_IR_CON)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	3301      	adds	r3, #1
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000668:	4618      	mov	r0, r3
 800066a:	f002 ff21 	bl	80034b0 <WIZCHIP_READ>
 800066e:	4603      	mov	r3, r0
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d009      	beq.n	800068c <tcp_http_mt+0xe0>
         {
            setSn_IR(sn,Sn_IR_CON);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3301      	adds	r3, #1
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000684:	2101      	movs	r1, #1
 8000686:	4618      	mov	r0, r3
 8000688:	f002 ff42 	bl	8003510 <WIZCHIP_WRITE>
         }

         if((size = getSn_RX_RSR(sn)) > 0)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4618      	mov	r0, r3
 8000690:	f003 f84b 	bl	800372a <getSn_RX_RSR>
 8000694:	4603      	mov	r3, r0
 8000696:	61fb      	str	r3, [r7, #28]
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	2b00      	cmp	r3, #0
 800069c:	f002 815a 	beq.w	8002954 <tcp_http_mt+0x23a8>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006a6:	d902      	bls.n	80006ae <tcp_http_mt+0x102>
 80006a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006ac:	61fb      	str	r3, [r7, #28]
            ret = recv(sn,buf,size);
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fe44 	bl	8003344 <recv>
 80006bc:	6178      	str	r0, [r7, #20]

            HTTP_reset(sn);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff5b 	bl	800057c <HTTP_reset>

            if(ret <= 0)
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	dc02      	bgt.n	80006d2 <tcp_http_mt+0x126>
            return ret;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	f002 b949 	b.w	8002964 <tcp_http_mt+0x23b8>

            url =(char*) buf + 4;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	3304      	adds	r3, #4
 80006d6:	613b      	str	r3, [r7, #16]

            if((http_state[sn]==HTTP_IDLE)&&(memcmp(buf, "GET ", 4)==0)&&((p = strchr(url, ' '))))// extract URL from request header
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	4a9f      	ldr	r2, [pc, #636]	; (8000958 <tcp_http_mt+0x3ac>)
 80006dc:	5cd3      	ldrb	r3, [r2, r3]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f042 8138 	bne.w	8002954 <tcp_http_mt+0x23a8>
 80006e4:	2204      	movs	r2, #4
 80006e6:	499d      	ldr	r1, [pc, #628]	; (800095c <tcp_http_mt+0x3b0>)
 80006e8:	6838      	ldr	r0, [r7, #0]
 80006ea:	f007 ffbb 	bl	8008664 <memcmp>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f042 812f 	bne.w	8002954 <tcp_http_mt+0x23a8>
 80006f6:	2120      	movs	r1, #32
 80006f8:	6938      	ldr	r0, [r7, #16]
 80006fa:	f007 ffd5 	bl	80086a8 <strchr>
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	f002 8126 	beq.w	8002954 <tcp_http_mt+0x23a8>
            {
              *(p++) = 0;//making zeroed url string
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	60fa      	str	r2, [r7, #12]
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]

				if ((url != NULL)&&(strncmp("/favicon.ico",url,12) != 0))
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	2b00      	cmp	r3, #0
 8000716:	f002 80de 	beq.w	80028d6 <tcp_http_mt+0x232a>
 800071a:	220c      	movs	r2, #12
 800071c:	6939      	ldr	r1, [r7, #16]
 800071e:	4890      	ldr	r0, [pc, #576]	; (8000960 <tcp_http_mt+0x3b4>)
 8000720:	f007 ffcf 	bl	80086c2 <strncmp>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	f002 80d5 	beq.w	80028d6 <tcp_http_mt+0x232a>
				{
					flagHtmlGen = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	76fb      	strb	r3, [r7, #27]
					if (strncmp("/rele/R1/ON",url,6) == 0)
 8000730:	2206      	movs	r2, #6
 8000732:	6939      	ldr	r1, [r7, #16]
 8000734:	488b      	ldr	r0, [pc, #556]	; (8000964 <tcp_http_mt+0x3b8>)
 8000736:	f007 ffc4 	bl	80086c2 <strncmp>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d103      	bne.n	8000748 <tcp_http_mt+0x19c>
					{
						R1 = 1;
 8000740:	4b89      	ldr	r3, [pc, #548]	; (8000968 <tcp_http_mt+0x3bc>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e15e      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/rele/R1/OFF",url,12) == 0)
 8000748:	220c      	movs	r2, #12
 800074a:	6939      	ldr	r1, [r7, #16]
 800074c:	4887      	ldr	r0, [pc, #540]	; (800096c <tcp_http_mt+0x3c0>)
 800074e:	f007 ffb8 	bl	80086c2 <strncmp>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d103      	bne.n	8000760 <tcp_http_mt+0x1b4>
					{
						R1 = 0;
 8000758:	4b83      	ldr	r3, [pc, #524]	; (8000968 <tcp_http_mt+0x3bc>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
 800075e:	e152      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/rele/R2/ON",url,12) == 0)
 8000760:	220c      	movs	r2, #12
 8000762:	6939      	ldr	r1, [r7, #16]
 8000764:	4882      	ldr	r0, [pc, #520]	; (8000970 <tcp_http_mt+0x3c4>)
 8000766:	f007 ffac 	bl	80086c2 <strncmp>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d103      	bne.n	8000778 <tcp_http_mt+0x1cc>
					{
						R2 = 1;
 8000770:	4b80      	ldr	r3, [pc, #512]	; (8000974 <tcp_http_mt+0x3c8>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e146      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/rele/R2/OFF",url,12) == 0)
 8000778:	220c      	movs	r2, #12
 800077a:	6939      	ldr	r1, [r7, #16]
 800077c:	487e      	ldr	r0, [pc, #504]	; (8000978 <tcp_http_mt+0x3cc>)
 800077e:	f007 ffa0 	bl	80086c2 <strncmp>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d103      	bne.n	8000790 <tcp_http_mt+0x1e4>
					{
						R2 = 0;
 8000788:	4b7a      	ldr	r3, [pc, #488]	; (8000974 <tcp_http_mt+0x3c8>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e13a      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/rele/R3/ON",url,12) == 0)
 8000790:	220c      	movs	r2, #12
 8000792:	6939      	ldr	r1, [r7, #16]
 8000794:	4879      	ldr	r0, [pc, #484]	; (800097c <tcp_http_mt+0x3d0>)
 8000796:	f007 ff94 	bl	80086c2 <strncmp>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d103      	bne.n	80007a8 <tcp_http_mt+0x1fc>
					{
						R3 = 1;
 80007a0:	4b77      	ldr	r3, [pc, #476]	; (8000980 <tcp_http_mt+0x3d4>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e12e      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/rele/R3/OFF",url,12) == 0)
 80007a8:	220c      	movs	r2, #12
 80007aa:	6939      	ldr	r1, [r7, #16]
 80007ac:	4875      	ldr	r0, [pc, #468]	; (8000984 <tcp_http_mt+0x3d8>)
 80007ae:	f007 ff88 	bl	80086c2 <strncmp>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d103      	bne.n	80007c0 <tcp_http_mt+0x214>
					{
						R3 = 0;
 80007b8:	4b71      	ldr	r3, [pc, #452]	; (8000980 <tcp_http_mt+0x3d4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	e122      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/rele/R4/ON",url,12) == 0)
 80007c0:	220c      	movs	r2, #12
 80007c2:	6939      	ldr	r1, [r7, #16]
 80007c4:	4870      	ldr	r0, [pc, #448]	; (8000988 <tcp_http_mt+0x3dc>)
 80007c6:	f007 ff7c 	bl	80086c2 <strncmp>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d103      	bne.n	80007d8 <tcp_http_mt+0x22c>
					{
						R4 = 1;
 80007d0:	4b6e      	ldr	r3, [pc, #440]	; (800098c <tcp_http_mt+0x3e0>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	e116      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/rele/R4/OFF",url,12) == 0)
 80007d8:	220c      	movs	r2, #12
 80007da:	6939      	ldr	r1, [r7, #16]
 80007dc:	486c      	ldr	r0, [pc, #432]	; (8000990 <tcp_http_mt+0x3e4>)
 80007de:	f007 ff70 	bl	80086c2 <strncmp>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d103      	bne.n	80007f0 <tcp_http_mt+0x244>
					{
						R4 = 0;
 80007e8:	4b68      	ldr	r3, [pc, #416]	; (800098c <tcp_http_mt+0x3e0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	e10a      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S1/ON",url,16) == 0)
 80007f0:	2210      	movs	r2, #16
 80007f2:	6939      	ldr	r1, [r7, #16]
 80007f4:	4867      	ldr	r0, [pc, #412]	; (8000994 <tcp_http_mt+0x3e8>)
 80007f6:	f007 ff64 	bl	80086c2 <strncmp>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d103      	bne.n	8000808 <tcp_http_mt+0x25c>
					{
						S1 = 1;
 8000800:	4b65      	ldr	r3, [pc, #404]	; (8000998 <tcp_http_mt+0x3ec>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	e0fe      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S1/OFF",url,16) == 0)
 8000808:	2210      	movs	r2, #16
 800080a:	6939      	ldr	r1, [r7, #16]
 800080c:	4863      	ldr	r0, [pc, #396]	; (800099c <tcp_http_mt+0x3f0>)
 800080e:	f007 ff58 	bl	80086c2 <strncmp>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d103      	bne.n	8000820 <tcp_http_mt+0x274>
					{
						S1 = 0;
 8000818:	4b5f      	ldr	r3, [pc, #380]	; (8000998 <tcp_http_mt+0x3ec>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	e0f2      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S2/ON",url,16) == 0)
 8000820:	2210      	movs	r2, #16
 8000822:	6939      	ldr	r1, [r7, #16]
 8000824:	485e      	ldr	r0, [pc, #376]	; (80009a0 <tcp_http_mt+0x3f4>)
 8000826:	f007 ff4c 	bl	80086c2 <strncmp>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d103      	bne.n	8000838 <tcp_http_mt+0x28c>
					{
						S2 = 1;
 8000830:	4b5c      	ldr	r3, [pc, #368]	; (80009a4 <tcp_http_mt+0x3f8>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e0e6      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S2/OFF",url,16) == 0)
 8000838:	2210      	movs	r2, #16
 800083a:	6939      	ldr	r1, [r7, #16]
 800083c:	485a      	ldr	r0, [pc, #360]	; (80009a8 <tcp_http_mt+0x3fc>)
 800083e:	f007 ff40 	bl	80086c2 <strncmp>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d103      	bne.n	8000850 <tcp_http_mt+0x2a4>
					{
						S2 = 0;
 8000848:	4b56      	ldr	r3, [pc, #344]	; (80009a4 <tcp_http_mt+0x3f8>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e0da      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S3/ON",url,16) == 0)
 8000850:	2210      	movs	r2, #16
 8000852:	6939      	ldr	r1, [r7, #16]
 8000854:	4855      	ldr	r0, [pc, #340]	; (80009ac <tcp_http_mt+0x400>)
 8000856:	f007 ff34 	bl	80086c2 <strncmp>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d103      	bne.n	8000868 <tcp_http_mt+0x2bc>
					{
						S3 = 1;
 8000860:	4b53      	ldr	r3, [pc, #332]	; (80009b0 <tcp_http_mt+0x404>)
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	e0ce      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S3/OFF",url,16) == 0)
 8000868:	2210      	movs	r2, #16
 800086a:	6939      	ldr	r1, [r7, #16]
 800086c:	4851      	ldr	r0, [pc, #324]	; (80009b4 <tcp_http_mt+0x408>)
 800086e:	f007 ff28 	bl	80086c2 <strncmp>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d103      	bne.n	8000880 <tcp_http_mt+0x2d4>
					{
						S3 = 0;
 8000878:	4b4d      	ldr	r3, [pc, #308]	; (80009b0 <tcp_http_mt+0x404>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	e0c2      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S4/ON",url,16) == 0)
 8000880:	2210      	movs	r2, #16
 8000882:	6939      	ldr	r1, [r7, #16]
 8000884:	484c      	ldr	r0, [pc, #304]	; (80009b8 <tcp_http_mt+0x40c>)
 8000886:	f007 ff1c 	bl	80086c2 <strncmp>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d103      	bne.n	8000898 <tcp_http_mt+0x2ec>
					{
						S4 = 1;
 8000890:	4b4a      	ldr	r3, [pc, #296]	; (80009bc <tcp_http_mt+0x410>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e0b6      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S4/OFF",url,16) == 0)
 8000898:	2210      	movs	r2, #16
 800089a:	6939      	ldr	r1, [r7, #16]
 800089c:	4848      	ldr	r0, [pc, #288]	; (80009c0 <tcp_http_mt+0x414>)
 800089e:	f007 ff10 	bl	80086c2 <strncmp>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <tcp_http_mt+0x304>
					{
						S4 = 0;
 80008a8:	4b44      	ldr	r3, [pc, #272]	; (80009bc <tcp_http_mt+0x410>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	e0aa      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S5/ON",url,16) == 0)
 80008b0:	2210      	movs	r2, #16
 80008b2:	6939      	ldr	r1, [r7, #16]
 80008b4:	4843      	ldr	r0, [pc, #268]	; (80009c4 <tcp_http_mt+0x418>)
 80008b6:	f007 ff04 	bl	80086c2 <strncmp>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d103      	bne.n	80008c8 <tcp_http_mt+0x31c>
					{
						S5 = 1;
 80008c0:	4b41      	ldr	r3, [pc, #260]	; (80009c8 <tcp_http_mt+0x41c>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e09e      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S5/OFF",url,16) == 0)
 80008c8:	2210      	movs	r2, #16
 80008ca:	6939      	ldr	r1, [r7, #16]
 80008cc:	483f      	ldr	r0, [pc, #252]	; (80009cc <tcp_http_mt+0x420>)
 80008ce:	f007 fef8 	bl	80086c2 <strncmp>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d103      	bne.n	80008e0 <tcp_http_mt+0x334>
					{
						S5 = 0;
 80008d8:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <tcp_http_mt+0x41c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	e092      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S6/ON",url,16) == 0)
 80008e0:	2210      	movs	r2, #16
 80008e2:	6939      	ldr	r1, [r7, #16]
 80008e4:	483a      	ldr	r0, [pc, #232]	; (80009d0 <tcp_http_mt+0x424>)
 80008e6:	f007 feec 	bl	80086c2 <strncmp>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d103      	bne.n	80008f8 <tcp_http_mt+0x34c>
					{
						S6 = 1;
 80008f0:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <tcp_http_mt+0x428>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	e086      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S6/OFF",url,16) == 0)
 80008f8:	2210      	movs	r2, #16
 80008fa:	6939      	ldr	r1, [r7, #16]
 80008fc:	4836      	ldr	r0, [pc, #216]	; (80009d8 <tcp_http_mt+0x42c>)
 80008fe:	f007 fee0 	bl	80086c2 <strncmp>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d103      	bne.n	8000910 <tcp_http_mt+0x364>
					{
						S6 = 0;
 8000908:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <tcp_http_mt+0x428>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e07a      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S7/ON",url,16) == 0)
 8000910:	2210      	movs	r2, #16
 8000912:	6939      	ldr	r1, [r7, #16]
 8000914:	4831      	ldr	r0, [pc, #196]	; (80009dc <tcp_http_mt+0x430>)
 8000916:	f007 fed4 	bl	80086c2 <strncmp>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d103      	bne.n	8000928 <tcp_http_mt+0x37c>
					{
						S7 = 1;
 8000920:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <tcp_http_mt+0x434>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e06e      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S7/OFF",url,16) == 0)
 8000928:	2210      	movs	r2, #16
 800092a:	6939      	ldr	r1, [r7, #16]
 800092c:	482d      	ldr	r0, [pc, #180]	; (80009e4 <tcp_http_mt+0x438>)
 800092e:	f007 fec8 	bl	80086c2 <strncmp>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d103      	bne.n	8000940 <tcp_http_mt+0x394>
					{
						S7 = 0;
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <tcp_http_mt+0x434>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e062      	b.n	8000a06 <tcp_http_mt+0x45a>
					}
					else if (strncmp("/entradas/S8/ON",url,16) == 0)
 8000940:	2210      	movs	r2, #16
 8000942:	6939      	ldr	r1, [r7, #16]
 8000944:	4828      	ldr	r0, [pc, #160]	; (80009e8 <tcp_http_mt+0x43c>)
 8000946:	f007 febc 	bl	80086c2 <strncmp>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d14f      	bne.n	80009f0 <tcp_http_mt+0x444>
					{
						S8 = 1;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <tcp_http_mt+0x440>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	e056      	b.n	8000a06 <tcp_http_mt+0x45a>
 8000958:	20001aa8 	.word	0x20001aa8
 800095c:	08008720 	.word	0x08008720
 8000960:	08008728 	.word	0x08008728
 8000964:	08008738 	.word	0x08008738
 8000968:	20000068 	.word	0x20000068
 800096c:	08008744 	.word	0x08008744
 8000970:	08008754 	.word	0x08008754
 8000974:	20000069 	.word	0x20000069
 8000978:	08008760 	.word	0x08008760
 800097c:	08008770 	.word	0x08008770
 8000980:	2000006a 	.word	0x2000006a
 8000984:	0800877c 	.word	0x0800877c
 8000988:	0800878c 	.word	0x0800878c
 800098c:	2000006b 	.word	0x2000006b
 8000990:	08008798 	.word	0x08008798
 8000994:	080087a8 	.word	0x080087a8
 8000998:	2000006c 	.word	0x2000006c
 800099c:	080087b8 	.word	0x080087b8
 80009a0:	080087cc 	.word	0x080087cc
 80009a4:	2000006d 	.word	0x2000006d
 80009a8:	080087dc 	.word	0x080087dc
 80009ac:	080087f0 	.word	0x080087f0
 80009b0:	2000006e 	.word	0x2000006e
 80009b4:	08008800 	.word	0x08008800
 80009b8:	08008814 	.word	0x08008814
 80009bc:	2000006f 	.word	0x2000006f
 80009c0:	08008824 	.word	0x08008824
 80009c4:	08008838 	.word	0x08008838
 80009c8:	20000070 	.word	0x20000070
 80009cc:	08008848 	.word	0x08008848
 80009d0:	0800885c 	.word	0x0800885c
 80009d4:	20000071 	.word	0x20000071
 80009d8:	0800886c 	.word	0x0800886c
 80009dc:	08008880 	.word	0x08008880
 80009e0:	20000072 	.word	0x20000072
 80009e4:	08008890 	.word	0x08008890
 80009e8:	080088a4 	.word	0x080088a4
 80009ec:	20000073 	.word	0x20000073
					}
					else if (strncmp("/entradas/S8/OFF",url,16) == 0)
 80009f0:	2210      	movs	r2, #16
 80009f2:	6939      	ldr	r1, [r7, #16]
 80009f4:	48cd      	ldr	r0, [pc, #820]	; (8000d2c <tcp_http_mt+0x780>)
 80009f6:	f007 fe64 	bl	80086c2 <strncmp>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <tcp_http_mt+0x45a>
					{
						S8 = 0;
 8000a00:	4bcb      	ldr	r3, [pc, #812]	; (8000d30 <tcp_http_mt+0x784>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
					}

					//Gera��o da HTML
					if(flagHtmlGen == 1)
 8000a06:	7efb      	ldrb	r3, [r7, #27]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	f041 876d 	bne.w	80028e8 <tcp_http_mt+0x233c>
					{
						if(strncmp("/rede", url, 6) == 0)
 8000a0e:	2206      	movs	r2, #6
 8000a10:	6939      	ldr	r1, [r7, #16]
 8000a12:	48c8      	ldr	r0, [pc, #800]	; (8000d34 <tcp_http_mt+0x788>)
 8000a14:	f007 fe55 	bl	80086c2 <strncmp>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f040 82d2 	bne.w	8000fc4 <tcp_http_mt+0xa18>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	4ac5      	ldr	r2, [pc, #788]	; (8000d38 <tcp_http_mt+0x78c>)
 8000a24:	4614      	mov	r4, r2
 8000a26:	469c      	mov	ip, r3
 8000a28:	f104 0e20 	add.w	lr, r4, #32
 8000a2c:	4665      	mov	r5, ip
 8000a2e:	4626      	mov	r6, r4
 8000a30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a32:	6028      	str	r0, [r5, #0]
 8000a34:	6069      	str	r1, [r5, #4]
 8000a36:	60aa      	str	r2, [r5, #8]
 8000a38:	60eb      	str	r3, [r5, #12]
 8000a3a:	3410      	adds	r4, #16
 8000a3c:	f10c 0c10 	add.w	ip, ip, #16
 8000a40:	4574      	cmp	r4, lr
 8000a42:	d1f3      	bne.n	8000a2c <tcp_http_mt+0x480>
 8000a44:	4665      	mov	r5, ip
 8000a46:	4623      	mov	r3, r4
 8000a48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a4a:	6028      	str	r0, [r5, #0]
 8000a4c:	6069      	str	r1, [r5, #4]
 8000a4e:	60aa      	str	r2, [r5, #8]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 8000a54:	6838      	ldr	r0, [r7, #0]
 8000a56:	f7ff fb7b 	bl	8000150 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	4ab6      	ldr	r2, [pc, #728]	; (8000d3c <tcp_http_mt+0x790>)
 8000a64:	461c      	mov	r4, r3
 8000a66:	4613      	mov	r3, r2
 8000a68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a6a:	6020      	str	r0, [r4, #0]
 8000a6c:	6061      	str	r1, [r4, #4]
 8000a6e:	60a2      	str	r2, [r4, #8]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Escrava Config</title>");
 8000a74:	6838      	ldr	r0, [r7, #0]
 8000a76:	f7ff fb6b 	bl	8000150 <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	4aaf      	ldr	r2, [pc, #700]	; (8000d40 <tcp_http_mt+0x794>)
 8000a84:	461d      	mov	r5, r3
 8000a86:	4614      	mov	r4, r2
 8000a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a8a:	6028      	str	r0, [r5, #0]
 8000a8c:	6069      	str	r1, [r5, #4]
 8000a8e:	60aa      	str	r2, [r5, #8]
 8000a90:	60eb      	str	r3, [r5, #12]
 8000a92:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000a94:	6128      	str	r0, [r5, #16]
 8000a96:	6169      	str	r1, [r5, #20]
 8000a98:	61aa      	str	r2, [r5, #24]
 8000a9a:	8823      	ldrh	r3, [r4, #0]
 8000a9c:	83ab      	strh	r3, [r5, #28]
							strcat((char*)buf, "<link href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css' rel='stylesheet'></link>");
 8000a9e:	6838      	ldr	r0, [r7, #0]
 8000aa0:	f7ff fb56 	bl	8000150 <strlen>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4aa5      	ldr	r2, [pc, #660]	; (8000d44 <tcp_http_mt+0x798>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	236c      	movs	r3, #108	; 0x6c
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	f007 fde4 	bl	8008682 <memcpy>
							strcat((char*)buf, "</head>");
 8000aba:	6838      	ldr	r0, [r7, #0]
 8000abc:	f7ff fb48 	bl	8000150 <strlen>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	499f      	ldr	r1, [pc, #636]	; (8000d48 <tcp_http_mt+0x79c>)
 8000aca:	461a      	mov	r2, r3
 8000acc:	460b      	mov	r3, r1
 8000ace:	cb03      	ldmia	r3!, {r0, r1}
 8000ad0:	6010      	str	r0, [r2, #0]
 8000ad2:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	f7ff fb3b 	bl	8000150 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a9a      	ldr	r2, [pc, #616]	; (8000d4c <tcp_http_mt+0x7a0>)
 8000ae4:	6810      	ldr	r0, [r2, #0]
 8000ae6:	6018      	str	r0, [r3, #0]
 8000ae8:	8891      	ldrh	r1, [r2, #4]
 8000aea:	7992      	ldrb	r2, [r2, #6]
 8000aec:	8099      	strh	r1, [r3, #4]
 8000aee:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<div class = 'rede'>");
 8000af0:	6838      	ldr	r0, [r7, #0]
 8000af2:	f7ff fb2d 	bl	8000150 <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a94      	ldr	r2, [pc, #592]	; (8000d50 <tcp_http_mt+0x7a4>)
 8000b00:	461d      	mov	r5, r3
 8000b02:	4614      	mov	r4, r2
 8000b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b06:	6028      	str	r0, [r5, #0]
 8000b08:	6069      	str	r1, [r5, #4]
 8000b0a:	60aa      	str	r2, [r5, #8]
 8000b0c:	60eb      	str	r3, [r5, #12]
 8000b0e:	6820      	ldr	r0, [r4, #0]
 8000b10:	6128      	str	r0, [r5, #16]
 8000b12:	7923      	ldrb	r3, [r4, #4]
 8000b14:	752b      	strb	r3, [r5, #20]
							strcat((char*)buf, "<title> Config Placa Escrava </title>");
 8000b16:	6838      	ldr	r0, [r7, #0]
 8000b18:	f7ff fb1a 	bl	8000150 <strlen>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a8b      	ldr	r2, [pc, #556]	; (8000d54 <tcp_http_mt+0x7a8>)
 8000b26:	4614      	mov	r4, r2
 8000b28:	469c      	mov	ip, r3
 8000b2a:	f104 0e20 	add.w	lr, r4, #32
 8000b2e:	4665      	mov	r5, ip
 8000b30:	4626      	mov	r6, r4
 8000b32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b34:	6028      	str	r0, [r5, #0]
 8000b36:	6069      	str	r1, [r5, #4]
 8000b38:	60aa      	str	r2, [r5, #8]
 8000b3a:	60eb      	str	r3, [r5, #12]
 8000b3c:	3410      	adds	r4, #16
 8000b3e:	f10c 0c10 	add.w	ip, ip, #16
 8000b42:	4574      	cmp	r4, lr
 8000b44:	d1f3      	bne.n	8000b2e <tcp_http_mt+0x582>
 8000b46:	4663      	mov	r3, ip
 8000b48:	4622      	mov	r2, r4
 8000b4a:	6810      	ldr	r0, [r2, #0]
 8000b4c:	6018      	str	r0, [r3, #0]
 8000b4e:	8892      	ldrh	r2, [r2, #4]
 8000b50:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "<b><center>Configuracao da Placa de rede Escrava</b></center>");
 8000b52:	6838      	ldr	r0, [r7, #0]
 8000b54:	f7ff fafc 	bl	8000150 <strlen>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a7d      	ldr	r2, [pc, #500]	; (8000d58 <tcp_http_mt+0x7ac>)
 8000b62:	4614      	mov	r4, r2
 8000b64:	469c      	mov	ip, r3
 8000b66:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000b6a:	4665      	mov	r5, ip
 8000b6c:	4626      	mov	r6, r4
 8000b6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b70:	6028      	str	r0, [r5, #0]
 8000b72:	6069      	str	r1, [r5, #4]
 8000b74:	60aa      	str	r2, [r5, #8]
 8000b76:	60eb      	str	r3, [r5, #12]
 8000b78:	3410      	adds	r4, #16
 8000b7a:	f10c 0c10 	add.w	ip, ip, #16
 8000b7e:	4574      	cmp	r4, lr
 8000b80:	d1f3      	bne.n	8000b6a <tcp_http_mt+0x5be>
 8000b82:	4665      	mov	r5, ip
 8000b84:	4623      	mov	r3, r4
 8000b86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b88:	6028      	str	r0, [r5, #0]
 8000b8a:	6069      	str	r1, [r5, #4]
 8000b8c:	60aa      	str	r2, [r5, #8]
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<p></p>");
 8000b92:	6838      	ldr	r0, [r7, #0]
 8000b94:	f7ff fadc 	bl	8000150 <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	496e      	ldr	r1, [pc, #440]	; (8000d5c <tcp_http_mt+0x7b0>)
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	cb03      	ldmia	r3!, {r0, r1}
 8000ba8:	6010      	str	r0, [r2, #0]
 8000baa:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<center><form action=''>");
 8000bac:	6838      	ldr	r0, [r7, #0]
 8000bae:	f7ff facf 	bl	8000150 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a69      	ldr	r2, [pc, #420]	; (8000d60 <tcp_http_mt+0x7b4>)
 8000bbc:	461d      	mov	r5, r3
 8000bbe:	4614      	mov	r4, r2
 8000bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc2:	6028      	str	r0, [r5, #0]
 8000bc4:	6069      	str	r1, [r5, #4]
 8000bc6:	60aa      	str	r2, [r5, #8]
 8000bc8:	60eb      	str	r3, [r5, #12]
 8000bca:	cc03      	ldmia	r4!, {r0, r1}
 8000bcc:	6128      	str	r0, [r5, #16]
 8000bce:	6169      	str	r1, [r5, #20]
 8000bd0:	7823      	ldrb	r3, [r4, #0]
 8000bd2:	762b      	strb	r3, [r5, #24]
							strcat((char*)buf, "IP: <input type='text' name='ip'><br>");
 8000bd4:	6838      	ldr	r0, [r7, #0]
 8000bd6:	f7ff fabb 	bl	8000150 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a60      	ldr	r2, [pc, #384]	; (8000d64 <tcp_http_mt+0x7b8>)
 8000be4:	4614      	mov	r4, r2
 8000be6:	469c      	mov	ip, r3
 8000be8:	f104 0e20 	add.w	lr, r4, #32
 8000bec:	4665      	mov	r5, ip
 8000bee:	4626      	mov	r6, r4
 8000bf0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bf2:	6028      	str	r0, [r5, #0]
 8000bf4:	6069      	str	r1, [r5, #4]
 8000bf6:	60aa      	str	r2, [r5, #8]
 8000bf8:	60eb      	str	r3, [r5, #12]
 8000bfa:	3410      	adds	r4, #16
 8000bfc:	f10c 0c10 	add.w	ip, ip, #16
 8000c00:	4574      	cmp	r4, lr
 8000c02:	d1f3      	bne.n	8000bec <tcp_http_mt+0x640>
 8000c04:	4663      	mov	r3, ip
 8000c06:	4622      	mov	r2, r4
 8000c08:	6810      	ldr	r0, [r2, #0]
 8000c0a:	6018      	str	r0, [r3, #0]
 8000c0c:	8892      	ldrh	r2, [r2, #4]
 8000c0e:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "<p></p>");
 8000c10:	6838      	ldr	r0, [r7, #0]
 8000c12:	f7ff fa9d 	bl	8000150 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	494f      	ldr	r1, [pc, #316]	; (8000d5c <tcp_http_mt+0x7b0>)
 8000c20:	461a      	mov	r2, r3
 8000c22:	460b      	mov	r3, r1
 8000c24:	cb03      	ldmia	r3!, {r0, r1}
 8000c26:	6010      	str	r0, [r2, #0]
 8000c28:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "Mascara: <input type='text' name='mascara'><br>");
 8000c2a:	6838      	ldr	r0, [r7, #0]
 8000c2c:	f7ff fa90 	bl	8000150 <strlen>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a4b      	ldr	r2, [pc, #300]	; (8000d68 <tcp_http_mt+0x7bc>)
 8000c3a:	4614      	mov	r4, r2
 8000c3c:	469c      	mov	ip, r3
 8000c3e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c42:	4665      	mov	r5, ip
 8000c44:	4626      	mov	r6, r4
 8000c46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c48:	6028      	str	r0, [r5, #0]
 8000c4a:	6069      	str	r1, [r5, #4]
 8000c4c:	60aa      	str	r2, [r5, #8]
 8000c4e:	60eb      	str	r3, [r5, #12]
 8000c50:	3410      	adds	r4, #16
 8000c52:	f10c 0c10 	add.w	ip, ip, #16
 8000c56:	4574      	cmp	r4, lr
 8000c58:	d1f3      	bne.n	8000c42 <tcp_http_mt+0x696>
							strcat((char*)buf, "<p></p>");
 8000c5a:	6838      	ldr	r0, [r7, #0]
 8000c5c:	f7ff fa78 	bl	8000150 <strlen>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	493c      	ldr	r1, [pc, #240]	; (8000d5c <tcp_http_mt+0x7b0>)
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	cb03      	ldmia	r3!, {r0, r1}
 8000c70:	6010      	str	r0, [r2, #0]
 8000c72:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "Porta: <input type='text' name='porta'><br>");
 8000c74:	6838      	ldr	r0, [r7, #0]
 8000c76:	f7ff fa6b 	bl	8000150 <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a3a      	ldr	r2, [pc, #232]	; (8000d6c <tcp_http_mt+0x7c0>)
 8000c84:	4614      	mov	r4, r2
 8000c86:	469c      	mov	ip, r3
 8000c88:	f104 0e20 	add.w	lr, r4, #32
 8000c8c:	4665      	mov	r5, ip
 8000c8e:	4626      	mov	r6, r4
 8000c90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c92:	6028      	str	r0, [r5, #0]
 8000c94:	6069      	str	r1, [r5, #4]
 8000c96:	60aa      	str	r2, [r5, #8]
 8000c98:	60eb      	str	r3, [r5, #12]
 8000c9a:	3410      	adds	r4, #16
 8000c9c:	f10c 0c10 	add.w	ip, ip, #16
 8000ca0:	4574      	cmp	r4, lr
 8000ca2:	d1f3      	bne.n	8000c8c <tcp_http_mt+0x6e0>
 8000ca4:	4665      	mov	r5, ip
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000caa:	6028      	str	r0, [r5, #0]
 8000cac:	6069      	str	r1, [r5, #4]
 8000cae:	60aa      	str	r2, [r5, #8]
							strcat((char*)buf, "<p></p>");
 8000cb0:	6838      	ldr	r0, [r7, #0]
 8000cb2:	f7ff fa4d 	bl	8000150 <strlen>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4927      	ldr	r1, [pc, #156]	; (8000d5c <tcp_http_mt+0x7b0>)
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	cb03      	ldmia	r3!, {r0, r1}
 8000cc6:	6010      	str	r0, [r2, #0]
 8000cc8:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "Gateway: <input type='text' name='gateway'><br>");
 8000cca:	6838      	ldr	r0, [r7, #0]
 8000ccc:	f7ff fa40 	bl	8000150 <strlen>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a25      	ldr	r2, [pc, #148]	; (8000d70 <tcp_http_mt+0x7c4>)
 8000cda:	4614      	mov	r4, r2
 8000cdc:	469c      	mov	ip, r3
 8000cde:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000ce2:	4665      	mov	r5, ip
 8000ce4:	4626      	mov	r6, r4
 8000ce6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ce8:	6028      	str	r0, [r5, #0]
 8000cea:	6069      	str	r1, [r5, #4]
 8000cec:	60aa      	str	r2, [r5, #8]
 8000cee:	60eb      	str	r3, [r5, #12]
 8000cf0:	3410      	adds	r4, #16
 8000cf2:	f10c 0c10 	add.w	ip, ip, #16
 8000cf6:	4574      	cmp	r4, lr
 8000cf8:	d1f3      	bne.n	8000ce2 <tcp_http_mt+0x736>
							strcat((char*)buf, "<p></p>");
 8000cfa:	6838      	ldr	r0, [r7, #0]
 8000cfc:	f7ff fa28 	bl	8000150 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4914      	ldr	r1, [pc, #80]	; (8000d5c <tcp_http_mt+0x7b0>)
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	cb03      	ldmia	r3!, {r0, r1}
 8000d10:	6010      	str	r0, [r2, #0]
 8000d12:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "DNS 1: <input type='text' name='dns1'><br>");
 8000d14:	6838      	ldr	r0, [r7, #0]
 8000d16:	f7ff fa1b 	bl	8000150 <strlen>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <tcp_http_mt+0x7c8>)
 8000d24:	4614      	mov	r4, r2
 8000d26:	469c      	mov	ip, r3
 8000d28:	e026      	b.n	8000d78 <tcp_http_mt+0x7cc>
 8000d2a:	bf00      	nop
 8000d2c:	080088b4 	.word	0x080088b4
 8000d30:	20000073 	.word	0x20000073
 8000d34:	080088c8 	.word	0x080088c8
 8000d38:	080088d0 	.word	0x080088d0
 8000d3c:	08008900 	.word	0x08008900
 8000d40:	08008910 	.word	0x08008910
 8000d44:	08008930 	.word	0x08008930
 8000d48:	0800899c 	.word	0x0800899c
 8000d4c:	080089a4 	.word	0x080089a4
 8000d50:	080089ac 	.word	0x080089ac
 8000d54:	080089c4 	.word	0x080089c4
 8000d58:	080089ec 	.word	0x080089ec
 8000d5c:	08008a2c 	.word	0x08008a2c
 8000d60:	08008a34 	.word	0x08008a34
 8000d64:	08008a50 	.word	0x08008a50
 8000d68:	08008a78 	.word	0x08008a78
 8000d6c:	08008aa8 	.word	0x08008aa8
 8000d70:	08008ad4 	.word	0x08008ad4
 8000d74:	08008b04 	.word	0x08008b04
 8000d78:	f104 0e20 	add.w	lr, r4, #32
 8000d7c:	4665      	mov	r5, ip
 8000d7e:	4626      	mov	r6, r4
 8000d80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d82:	6028      	str	r0, [r5, #0]
 8000d84:	6069      	str	r1, [r5, #4]
 8000d86:	60aa      	str	r2, [r5, #8]
 8000d88:	60eb      	str	r3, [r5, #12]
 8000d8a:	3410      	adds	r4, #16
 8000d8c:	f10c 0c10 	add.w	ip, ip, #16
 8000d90:	4574      	cmp	r4, lr
 8000d92:	d1f3      	bne.n	8000d7c <tcp_http_mt+0x7d0>
 8000d94:	4662      	mov	r2, ip
 8000d96:	4623      	mov	r3, r4
 8000d98:	cb03      	ldmia	r3!, {r0, r1}
 8000d9a:	6010      	str	r0, [r2, #0]
 8000d9c:	6051      	str	r1, [r2, #4]
 8000d9e:	8819      	ldrh	r1, [r3, #0]
 8000da0:	789b      	ldrb	r3, [r3, #2]
 8000da2:	8111      	strh	r1, [r2, #8]
 8000da4:	7293      	strb	r3, [r2, #10]
							strcat((char*)buf, "<p></p>");
 8000da6:	6838      	ldr	r0, [r7, #0]
 8000da8:	f7ff f9d2 	bl	8000150 <strlen>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4979      	ldr	r1, [pc, #484]	; (8000f9c <tcp_http_mt+0x9f0>)
 8000db6:	461a      	mov	r2, r3
 8000db8:	460b      	mov	r3, r1
 8000dba:	cb03      	ldmia	r3!, {r0, r1}
 8000dbc:	6010      	str	r0, [r2, #0]
 8000dbe:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<p></p>");
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	f7ff f9c5 	bl	8000150 <strlen>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4973      	ldr	r1, [pc, #460]	; (8000f9c <tcp_http_mt+0x9f0>)
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	cb03      	ldmia	r3!, {r0, r1}
 8000dd6:	6010      	str	r0, [r2, #0]
 8000dd8:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "DNS 2: <input type='text' name='dns2'><br>");
 8000dda:	6838      	ldr	r0, [r7, #0]
 8000ddc:	f7ff f9b8 	bl	8000150 <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a6d      	ldr	r2, [pc, #436]	; (8000fa0 <tcp_http_mt+0x9f4>)
 8000dea:	4614      	mov	r4, r2
 8000dec:	469c      	mov	ip, r3
 8000dee:	f104 0e20 	add.w	lr, r4, #32
 8000df2:	4665      	mov	r5, ip
 8000df4:	4626      	mov	r6, r4
 8000df6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000df8:	6028      	str	r0, [r5, #0]
 8000dfa:	6069      	str	r1, [r5, #4]
 8000dfc:	60aa      	str	r2, [r5, #8]
 8000dfe:	60eb      	str	r3, [r5, #12]
 8000e00:	3410      	adds	r4, #16
 8000e02:	f10c 0c10 	add.w	ip, ip, #16
 8000e06:	4574      	cmp	r4, lr
 8000e08:	d1f3      	bne.n	8000df2 <tcp_http_mt+0x846>
 8000e0a:	4662      	mov	r2, ip
 8000e0c:	4623      	mov	r3, r4
 8000e0e:	cb03      	ldmia	r3!, {r0, r1}
 8000e10:	6010      	str	r0, [r2, #0]
 8000e12:	6051      	str	r1, [r2, #4]
 8000e14:	8819      	ldrh	r1, [r3, #0]
 8000e16:	789b      	ldrb	r3, [r3, #2]
 8000e18:	8111      	strh	r1, [r2, #8]
 8000e1a:	7293      	strb	r3, [r2, #10]
							strcat((char*)buf, "<p></p>");
 8000e1c:	6838      	ldr	r0, [r7, #0]
 8000e1e:	f7ff f997 	bl	8000150 <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	495c      	ldr	r1, [pc, #368]	; (8000f9c <tcp_http_mt+0x9f0>)
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	460b      	mov	r3, r1
 8000e30:	cb03      	ldmia	r3!, {r0, r1}
 8000e32:	6010      	str	r0, [r2, #0]
 8000e34:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "DHCP: <button>On</button>  <button>Off</button>");
 8000e36:	6838      	ldr	r0, [r7, #0]
 8000e38:	f7ff f98a 	bl	8000150 <strlen>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a57      	ldr	r2, [pc, #348]	; (8000fa4 <tcp_http_mt+0x9f8>)
 8000e46:	4614      	mov	r4, r2
 8000e48:	469c      	mov	ip, r3
 8000e4a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e4e:	4665      	mov	r5, ip
 8000e50:	4626      	mov	r6, r4
 8000e52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e54:	6028      	str	r0, [r5, #0]
 8000e56:	6069      	str	r1, [r5, #4]
 8000e58:	60aa      	str	r2, [r5, #8]
 8000e5a:	60eb      	str	r3, [r5, #12]
 8000e5c:	3410      	adds	r4, #16
 8000e5e:	f10c 0c10 	add.w	ip, ip, #16
 8000e62:	4574      	cmp	r4, lr
 8000e64:	d1f3      	bne.n	8000e4e <tcp_http_mt+0x8a2>
							strcat((char*)buf, "</center></form>");
 8000e66:	6838      	ldr	r0, [r7, #0]
 8000e68:	f7ff f972 	bl	8000150 <strlen>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a4c      	ldr	r2, [pc, #304]	; (8000fa8 <tcp_http_mt+0x9fc>)
 8000e76:	461d      	mov	r5, r3
 8000e78:	4614      	mov	r4, r2
 8000e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7c:	6028      	str	r0, [r5, #0]
 8000e7e:	6069      	str	r1, [r5, #4]
 8000e80:	60aa      	str	r2, [r5, #8]
 8000e82:	60eb      	str	r3, [r5, #12]
 8000e84:	7823      	ldrb	r3, [r4, #0]
 8000e86:	742b      	strb	r3, [r5, #16]
							strcat((char*)buf, "<center><button>Salvar</button></center></div>");
 8000e88:	6838      	ldr	r0, [r7, #0]
 8000e8a:	f7ff f961 	bl	8000150 <strlen>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a45      	ldr	r2, [pc, #276]	; (8000fac <tcp_http_mt+0xa00>)
 8000e98:	4615      	mov	r5, r2
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	f105 0e20 	add.w	lr, r5, #32
 8000ea0:	4664      	mov	r4, ip
 8000ea2:	462e      	mov	r6, r5
 8000ea4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ea6:	6020      	str	r0, [r4, #0]
 8000ea8:	6061      	str	r1, [r4, #4]
 8000eaa:	60a2      	str	r2, [r4, #8]
 8000eac:	60e3      	str	r3, [r4, #12]
 8000eae:	3510      	adds	r5, #16
 8000eb0:	f10c 0c10 	add.w	ip, ip, #16
 8000eb4:	4575      	cmp	r5, lr
 8000eb6:	d1f3      	bne.n	8000ea0 <tcp_http_mt+0x8f4>
 8000eb8:	4664      	mov	r4, ip
 8000eba:	462b      	mov	r3, r5
 8000ebc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ebe:	6020      	str	r0, [r4, #0]
 8000ec0:	6061      	str	r1, [r4, #4]
 8000ec2:	60a2      	str	r2, [r4, #8]
 8000ec4:	881a      	ldrh	r2, [r3, #0]
 8000ec6:	789b      	ldrb	r3, [r3, #2]
 8000ec8:	81a2      	strh	r2, [r4, #12]
 8000eca:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "<center>");
 8000ecc:	6838      	ldr	r0, [r7, #0]
 8000ece:	f7ff f93f 	bl	8000150 <strlen>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4935      	ldr	r1, [pc, #212]	; (8000fb0 <tcp_http_mt+0xa04>)
 8000edc:	461a      	mov	r2, r3
 8000ede:	460b      	mov	r3, r1
 8000ee0:	cb03      	ldmia	r3!, {r0, r1}
 8000ee2:	6010      	str	r0, [r2, #0]
 8000ee4:	6051      	str	r1, [r2, #4]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	7213      	strb	r3, [r2, #8]
							strcat((char*)buf, "<p></p>");
 8000eea:	6838      	ldr	r0, [r7, #0]
 8000eec:	f7ff f930 	bl	8000150 <strlen>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4928      	ldr	r1, [pc, #160]	; (8000f9c <tcp_http_mt+0x9f0>)
 8000efa:	461a      	mov	r2, r3
 8000efc:	460b      	mov	r3, r1
 8000efe:	cb03      	ldmia	r3!, {r0, r1}
 8000f00:	6010      	str	r0, [r2, #0]
 8000f02:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<a href='http://192.168.0.231'>Voltar</a><br>");
 8000f04:	6838      	ldr	r0, [r7, #0]
 8000f06:	f7ff f923 	bl	8000150 <strlen>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <tcp_http_mt+0xa08>)
 8000f14:	4614      	mov	r4, r2
 8000f16:	469c      	mov	ip, r3
 8000f18:	f104 0e20 	add.w	lr, r4, #32
 8000f1c:	4665      	mov	r5, ip
 8000f1e:	4626      	mov	r6, r4
 8000f20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f22:	6028      	str	r0, [r5, #0]
 8000f24:	6069      	str	r1, [r5, #4]
 8000f26:	60aa      	str	r2, [r5, #8]
 8000f28:	60eb      	str	r3, [r5, #12]
 8000f2a:	3410      	adds	r4, #16
 8000f2c:	f10c 0c10 	add.w	ip, ip, #16
 8000f30:	4574      	cmp	r4, lr
 8000f32:	d1f3      	bne.n	8000f1c <tcp_http_mt+0x970>
 8000f34:	4665      	mov	r5, ip
 8000f36:	4623      	mov	r3, r4
 8000f38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f3a:	6028      	str	r0, [r5, #0]
 8000f3c:	6069      	str	r1, [r5, #4]
 8000f3e:	60aa      	str	r2, [r5, #8]
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "</center>");
 8000f44:	6838      	ldr	r0, [r7, #0]
 8000f46:	f7ff f903 	bl	8000150 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	4413      	add	r3, r2
 8000f52:	4919      	ldr	r1, [pc, #100]	; (8000fb8 <tcp_http_mt+0xa0c>)
 8000f54:	461a      	mov	r2, r3
 8000f56:	460b      	mov	r3, r1
 8000f58:	cb03      	ldmia	r3!, {r0, r1}
 8000f5a:	6010      	str	r0, [r2, #0]
 8000f5c:	6051      	str	r1, [r2, #4]
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "</body>");
 8000f62:	6838      	ldr	r0, [r7, #0]
 8000f64:	f7ff f8f4 	bl	8000150 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4912      	ldr	r1, [pc, #72]	; (8000fbc <tcp_http_mt+0xa10>)
 8000f72:	461a      	mov	r2, r3
 8000f74:	460b      	mov	r3, r1
 8000f76:	cb03      	ldmia	r3!, {r0, r1}
 8000f78:	6010      	str	r0, [r2, #0]
 8000f7a:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f7ff f8e7 	bl	8000150 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <tcp_http_mt+0xa14>)
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	460b      	mov	r3, r1
 8000f90:	cb03      	ldmia	r3!, {r0, r1}
 8000f92:	6010      	str	r0, [r2, #0]
 8000f94:	6051      	str	r1, [r2, #4]
 8000f96:	f001 bc80 	b.w	800289a <tcp_http_mt+0x22ee>
 8000f9a:	bf00      	nop
 8000f9c:	08008a2c 	.word	0x08008a2c
 8000fa0:	08008b30 	.word	0x08008b30
 8000fa4:	08008b5c 	.word	0x08008b5c
 8000fa8:	08008b8c 	.word	0x08008b8c
 8000fac:	08008ba0 	.word	0x08008ba0
 8000fb0:	08008bd0 	.word	0x08008bd0
 8000fb4:	08008bdc 	.word	0x08008bdc
 8000fb8:	08008c0c 	.word	0x08008c0c
 8000fbc:	08008c18 	.word	0x08008c18
 8000fc0:	08008c20 	.word	0x08008c20
						}
						else if(strncmp("/rele", url, 6) == 0)
 8000fc4:	2206      	movs	r2, #6
 8000fc6:	6939      	ldr	r1, [r7, #16]
 8000fc8:	48cf      	ldr	r0, [pc, #828]	; (8001308 <tcp_http_mt+0xd5c>)
 8000fca:	f007 fb7a 	bl	80086c2 <strncmp>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 863d 	bne.w	8001c50 <tcp_http_mt+0x16a4>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	4acc      	ldr	r2, [pc, #816]	; (800130c <tcp_http_mt+0xd60>)
 8000fda:	4614      	mov	r4, r2
 8000fdc:	469c      	mov	ip, r3
 8000fde:	f104 0e20 	add.w	lr, r4, #32
 8000fe2:	4665      	mov	r5, ip
 8000fe4:	4626      	mov	r6, r4
 8000fe6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fe8:	6028      	str	r0, [r5, #0]
 8000fea:	6069      	str	r1, [r5, #4]
 8000fec:	60aa      	str	r2, [r5, #8]
 8000fee:	60eb      	str	r3, [r5, #12]
 8000ff0:	3410      	adds	r4, #16
 8000ff2:	f10c 0c10 	add.w	ip, ip, #16
 8000ff6:	4574      	cmp	r4, lr
 8000ff8:	d1f3      	bne.n	8000fe2 <tcp_http_mt+0xa36>
 8000ffa:	4665      	mov	r5, ip
 8000ffc:	4623      	mov	r3, r4
 8000ffe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001000:	6028      	str	r0, [r5, #0]
 8001002:	6069      	str	r1, [r5, #4]
 8001004:	60aa      	str	r2, [r5, #8]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 800100a:	6838      	ldr	r0, [r7, #0]
 800100c:	f7ff f8a0 	bl	8000150 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4abd      	ldr	r2, [pc, #756]	; (8001310 <tcp_http_mt+0xd64>)
 800101a:	461c      	mov	r4, r3
 800101c:	4613      	mov	r3, r2
 800101e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001020:	6020      	str	r0, [r4, #0]
 8001022:	6061      	str	r1, [r4, #4]
 8001024:	60a2      	str	r2, [r4, #8]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Escrava Config</title>");
 800102a:	6838      	ldr	r0, [r7, #0]
 800102c:	f7ff f890 	bl	8000150 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4ab6      	ldr	r2, [pc, #728]	; (8001314 <tcp_http_mt+0xd68>)
 800103a:	461d      	mov	r5, r3
 800103c:	4614      	mov	r4, r2
 800103e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001040:	6028      	str	r0, [r5, #0]
 8001042:	6069      	str	r1, [r5, #4]
 8001044:	60aa      	str	r2, [r5, #8]
 8001046:	60eb      	str	r3, [r5, #12]
 8001048:	cc07      	ldmia	r4!, {r0, r1, r2}
 800104a:	6128      	str	r0, [r5, #16]
 800104c:	6169      	str	r1, [r5, #20]
 800104e:	61aa      	str	r2, [r5, #24]
 8001050:	8823      	ldrh	r3, [r4, #0]
 8001052:	83ab      	strh	r3, [r5, #28]
							strcat((char*)buf, "<link href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css' rel='stylesheet'></link>");
 8001054:	6838      	ldr	r0, [r7, #0]
 8001056:	f7ff f87b 	bl	8000150 <strlen>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	4aad      	ldr	r2, [pc, #692]	; (8001318 <tcp_http_mt+0xd6c>)
 8001064:	4618      	mov	r0, r3
 8001066:	4611      	mov	r1, r2
 8001068:	236c      	movs	r3, #108	; 0x6c
 800106a:	461a      	mov	r2, r3
 800106c:	f007 fb09 	bl	8008682 <memcpy>
							strcat((char*)buf, "</head>");
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff f86d 	bl	8000150 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	49a7      	ldr	r1, [pc, #668]	; (800131c <tcp_http_mt+0xd70>)
 8001080:	461a      	mov	r2, r3
 8001082:	460b      	mov	r3, r1
 8001084:	cb03      	ldmia	r3!, {r0, r1}
 8001086:	6010      	str	r0, [r2, #0]
 8001088:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f7ff f860 	bl	8000150 <strlen>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4aa1      	ldr	r2, [pc, #644]	; (8001320 <tcp_http_mt+0xd74>)
 800109a:	6810      	ldr	r0, [r2, #0]
 800109c:	6018      	str	r0, [r3, #0]
 800109e:	8891      	ldrh	r1, [r2, #4]
 80010a0:	7992      	ldrb	r2, [r2, #6]
 80010a2:	8099      	strh	r1, [r3, #4]
 80010a4:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<b><center>Configuracao dos reles</b> </center>");
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f7ff f852 	bl	8000150 <strlen>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a9b      	ldr	r2, [pc, #620]	; (8001324 <tcp_http_mt+0xd78>)
 80010b6:	4614      	mov	r4, r2
 80010b8:	469c      	mov	ip, r3
 80010ba:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010be:	4665      	mov	r5, ip
 80010c0:	4626      	mov	r6, r4
 80010c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010c4:	6028      	str	r0, [r5, #0]
 80010c6:	6069      	str	r1, [r5, #4]
 80010c8:	60aa      	str	r2, [r5, #8]
 80010ca:	60eb      	str	r3, [r5, #12]
 80010cc:	3410      	adds	r4, #16
 80010ce:	f10c 0c10 	add.w	ip, ip, #16
 80010d2:	4574      	cmp	r4, lr
 80010d4:	d1f3      	bne.n	80010be <tcp_http_mt+0xb12>
							strcat((char*)buf, "<center><table border='1'>");
 80010d6:	6838      	ldr	r0, [r7, #0]
 80010d8:	f7ff f83a 	bl	8000150 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a90      	ldr	r2, [pc, #576]	; (8001328 <tcp_http_mt+0xd7c>)
 80010e6:	461d      	mov	r5, r3
 80010e8:	4614      	mov	r4, r2
 80010ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ec:	6028      	str	r0, [r5, #0]
 80010ee:	6069      	str	r1, [r5, #4]
 80010f0:	60aa      	str	r2, [r5, #8]
 80010f2:	60eb      	str	r3, [r5, #12]
 80010f4:	cc03      	ldmia	r4!, {r0, r1}
 80010f6:	6128      	str	r0, [r5, #16]
 80010f8:	6169      	str	r1, [r5, #20]
 80010fa:	8823      	ldrh	r3, [r4, #0]
 80010fc:	78a2      	ldrb	r2, [r4, #2]
 80010fe:	832b      	strh	r3, [r5, #24]
 8001100:	4613      	mov	r3, r2
 8001102:	76ab      	strb	r3, [r5, #26]
							strcat((char*)buf, "<tr><td><b>Rele Numero</b></td>");
 8001104:	6838      	ldr	r0, [r7, #0]
 8001106:	f7ff f823 	bl	8000150 <strlen>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	4413      	add	r3, r2
 8001112:	4a86      	ldr	r2, [pc, #536]	; (800132c <tcp_http_mt+0xd80>)
 8001114:	461c      	mov	r4, r3
 8001116:	4615      	mov	r5, r2
 8001118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111a:	6020      	str	r0, [r4, #0]
 800111c:	6061      	str	r1, [r4, #4]
 800111e:	60a2      	str	r2, [r4, #8]
 8001120:	60e3      	str	r3, [r4, #12]
 8001122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001124:	6120      	str	r0, [r4, #16]
 8001126:	6161      	str	r1, [r4, #20]
 8001128:	61a2      	str	r2, [r4, #24]
 800112a:	61e3      	str	r3, [r4, #28]
							strcat((char*)buf, "<td><b>Estado do rele</b></td>");
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f7ff f80f 	bl	8000150 <strlen>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	4413      	add	r3, r2
 800113a:	4a7d      	ldr	r2, [pc, #500]	; (8001330 <tcp_http_mt+0xd84>)
 800113c:	461d      	mov	r5, r3
 800113e:	4614      	mov	r4, r2
 8001140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001142:	6028      	str	r0, [r5, #0]
 8001144:	6069      	str	r1, [r5, #4]
 8001146:	60aa      	str	r2, [r5, #8]
 8001148:	60eb      	str	r3, [r5, #12]
 800114a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800114c:	6128      	str	r0, [r5, #16]
 800114e:	6169      	str	r1, [r5, #20]
 8001150:	61aa      	str	r2, [r5, #24]
 8001152:	8823      	ldrh	r3, [r4, #0]
 8001154:	78a2      	ldrb	r2, [r4, #2]
 8001156:	83ab      	strh	r3, [r5, #28]
 8001158:	4613      	mov	r3, r2
 800115a:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "<td><b><center>Tempo atracado (seg)</center></b></td>");
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f7fe fff7 	bl	8000150 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	4413      	add	r3, r2
 800116a:	4a72      	ldr	r2, [pc, #456]	; (8001334 <tcp_http_mt+0xd88>)
 800116c:	4614      	mov	r4, r2
 800116e:	469c      	mov	ip, r3
 8001170:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001174:	4665      	mov	r5, ip
 8001176:	4626      	mov	r6, r4
 8001178:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800117a:	6028      	str	r0, [r5, #0]
 800117c:	6069      	str	r1, [r5, #4]
 800117e:	60aa      	str	r2, [r5, #8]
 8001180:	60eb      	str	r3, [r5, #12]
 8001182:	3410      	adds	r4, #16
 8001184:	f10c 0c10 	add.w	ip, ip, #16
 8001188:	4574      	cmp	r4, lr
 800118a:	d1f3      	bne.n	8001174 <tcp_http_mt+0xbc8>
 800118c:	4663      	mov	r3, ip
 800118e:	4622      	mov	r2, r4
 8001190:	6810      	ldr	r0, [r2, #0]
 8001192:	6018      	str	r0, [r3, #0]
 8001194:	8892      	ldrh	r2, [r2, #4]
 8001196:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "<td><b><center>Tipo de Acionamento</center></b></td>");
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f7fe ffd9 	bl	8000150 <strlen>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a64      	ldr	r2, [pc, #400]	; (8001338 <tcp_http_mt+0xd8c>)
 80011a8:	4614      	mov	r4, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011b0:	4665      	mov	r5, ip
 80011b2:	4626      	mov	r6, r4
 80011b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011b6:	6028      	str	r0, [r5, #0]
 80011b8:	6069      	str	r1, [r5, #4]
 80011ba:	60aa      	str	r2, [r5, #8]
 80011bc:	60eb      	str	r3, [r5, #12]
 80011be:	3410      	adds	r4, #16
 80011c0:	f10c 0c10 	add.w	ip, ip, #16
 80011c4:	4574      	cmp	r4, lr
 80011c6:	d1f3      	bne.n	80011b0 <tcp_http_mt+0xc04>
 80011c8:	4663      	mov	r3, ip
 80011ca:	4622      	mov	r2, r4
 80011cc:	6810      	ldr	r0, [r2, #0]
 80011ce:	6018      	str	r0, [r3, #0]
 80011d0:	7912      	ldrb	r2, [r2, #4]
 80011d2:	711a      	strb	r2, [r3, #4]
							strcat((char*)buf, "<td><b><center>Acionamento</center></b></td></tr>");
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f7fe ffbb 	bl	8000150 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a56      	ldr	r2, [pc, #344]	; (800133c <tcp_http_mt+0xd90>)
 80011e4:	4614      	mov	r4, r2
 80011e6:	469c      	mov	ip, r3
 80011e8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011ec:	4665      	mov	r5, ip
 80011ee:	4626      	mov	r6, r4
 80011f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011f2:	6028      	str	r0, [r5, #0]
 80011f4:	6069      	str	r1, [r5, #4]
 80011f6:	60aa      	str	r2, [r5, #8]
 80011f8:	60eb      	str	r3, [r5, #12]
 80011fa:	3410      	adds	r4, #16
 80011fc:	f10c 0c10 	add.w	ip, ip, #16
 8001200:	4574      	cmp	r4, lr
 8001202:	d1f3      	bne.n	80011ec <tcp_http_mt+0xc40>
 8001204:	4662      	mov	r2, ip
 8001206:	4623      	mov	r3, r4
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	8013      	strh	r3, [r2, #0]

							strcat((char*)buf, "<tr><td><center>1</center></td>");
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	f7fe ff9f 	bl	8000150 <strlen>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	4413      	add	r3, r2
 800121a:	4a49      	ldr	r2, [pc, #292]	; (8001340 <tcp_http_mt+0xd94>)
 800121c:	461c      	mov	r4, r3
 800121e:	4615      	mov	r5, r2
 8001220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001222:	6020      	str	r0, [r4, #0]
 8001224:	6061      	str	r1, [r4, #4]
 8001226:	60a2      	str	r2, [r4, #8]
 8001228:	60e3      	str	r3, [r4, #12]
 800122a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122c:	6120      	str	r0, [r4, #16]
 800122e:	6161      	str	r1, [r4, #20]
 8001230:	61a2      	str	r2, [r4, #24]
 8001232:	61e3      	str	r3, [r4, #28]
							strcat((char*)buf, "<td><center>False</center></td>");
 8001234:	6838      	ldr	r0, [r7, #0]
 8001236:	f7fe ff8b 	bl	8000150 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	4413      	add	r3, r2
 8001242:	4a40      	ldr	r2, [pc, #256]	; (8001344 <tcp_http_mt+0xd98>)
 8001244:	461c      	mov	r4, r3
 8001246:	4615      	mov	r5, r2
 8001248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124a:	6020      	str	r0, [r4, #0]
 800124c:	6061      	str	r1, [r4, #4]
 800124e:	60a2      	str	r2, [r4, #8]
 8001250:	60e3      	str	r3, [r4, #12]
 8001252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001254:	6120      	str	r0, [r4, #16]
 8001256:	6161      	str	r1, [r4, #20]
 8001258:	61a2      	str	r2, [r4, #24]
 800125a:	61e3      	str	r3, [r4, #28]
							strcat((char*)buf, "<td><input type='text' name='tempo1'><br></td>");
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7fe ff77 	bl	8000150 <strlen>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	4413      	add	r3, r2
 800126a:	4a37      	ldr	r2, [pc, #220]	; (8001348 <tcp_http_mt+0xd9c>)
 800126c:	4615      	mov	r5, r2
 800126e:	469c      	mov	ip, r3
 8001270:	f105 0e20 	add.w	lr, r5, #32
 8001274:	4664      	mov	r4, ip
 8001276:	462e      	mov	r6, r5
 8001278:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800127a:	6020      	str	r0, [r4, #0]
 800127c:	6061      	str	r1, [r4, #4]
 800127e:	60a2      	str	r2, [r4, #8]
 8001280:	60e3      	str	r3, [r4, #12]
 8001282:	3510      	adds	r5, #16
 8001284:	f10c 0c10 	add.w	ip, ip, #16
 8001288:	4575      	cmp	r5, lr
 800128a:	d1f3      	bne.n	8001274 <tcp_http_mt+0xcc8>
 800128c:	4664      	mov	r4, ip
 800128e:	462b      	mov	r3, r5
 8001290:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001292:	6020      	str	r0, [r4, #0]
 8001294:	6061      	str	r1, [r4, #4]
 8001296:	60a2      	str	r2, [r4, #8]
 8001298:	881a      	ldrh	r2, [r3, #0]
 800129a:	789b      	ldrb	r3, [r3, #2]
 800129c:	81a2      	strh	r2, [r4, #12]
 800129e:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "<td><center>");
 80012a0:	6838      	ldr	r0, [r7, #0]
 80012a2:	f7fe ff55 	bl	8000150 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a27      	ldr	r2, [pc, #156]	; (800134c <tcp_http_mt+0xda0>)
 80012b0:	461c      	mov	r4, r3
 80012b2:	4613      	mov	r3, r2
 80012b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80012b6:	6020      	str	r0, [r4, #0]
 80012b8:	6061      	str	r1, [r4, #4]
 80012ba:	60a2      	str	r2, [r4, #8]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<select id='Acionamento1'>");
 80012c0:	6838      	ldr	r0, [r7, #0]
 80012c2:	f7fe ff45 	bl	8000150 <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a20      	ldr	r2, [pc, #128]	; (8001350 <tcp_http_mt+0xda4>)
 80012d0:	461d      	mov	r5, r3
 80012d2:	4614      	mov	r4, r2
 80012d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d6:	6028      	str	r0, [r5, #0]
 80012d8:	6069      	str	r1, [r5, #4]
 80012da:	60aa      	str	r2, [r5, #8]
 80012dc:	60eb      	str	r3, [r5, #12]
 80012de:	cc03      	ldmia	r4!, {r0, r1}
 80012e0:	6128      	str	r0, [r5, #16]
 80012e2:	6169      	str	r1, [r5, #20]
 80012e4:	8823      	ldrh	r3, [r4, #0]
 80012e6:	78a2      	ldrb	r2, [r4, #2]
 80012e8:	832b      	strh	r3, [r5, #24]
 80012ea:	4613      	mov	r3, r2
 80012ec:	76ab      	strb	r3, [r5, #26]
							strcat((char*)buf, "<option value='0'>Pulso</option>");
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	f7fe ff2e 	bl	8000150 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a15      	ldr	r2, [pc, #84]	; (8001354 <tcp_http_mt+0xda8>)
 80012fe:	4614      	mov	r4, r2
 8001300:	469c      	mov	ip, r3
 8001302:	f104 0e20 	add.w	lr, r4, #32
 8001306:	e027      	b.n	8001358 <tcp_http_mt+0xdac>
 8001308:	08008c28 	.word	0x08008c28
 800130c:	080088d0 	.word	0x080088d0
 8001310:	08008900 	.word	0x08008900
 8001314:	08008910 	.word	0x08008910
 8001318:	08008930 	.word	0x08008930
 800131c:	0800899c 	.word	0x0800899c
 8001320:	080089a4 	.word	0x080089a4
 8001324:	08008c30 	.word	0x08008c30
 8001328:	08008c60 	.word	0x08008c60
 800132c:	08008c7c 	.word	0x08008c7c
 8001330:	08008c9c 	.word	0x08008c9c
 8001334:	08008cbc 	.word	0x08008cbc
 8001338:	08008cf4 	.word	0x08008cf4
 800133c:	08008d2c 	.word	0x08008d2c
 8001340:	08008d60 	.word	0x08008d60
 8001344:	08008d80 	.word	0x08008d80
 8001348:	08008da0 	.word	0x08008da0
 800134c:	08008dd0 	.word	0x08008dd0
 8001350:	08008de0 	.word	0x08008de0
 8001354:	08008dfc 	.word	0x08008dfc
 8001358:	4665      	mov	r5, ip
 800135a:	4626      	mov	r6, r4
 800135c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800135e:	6028      	str	r0, [r5, #0]
 8001360:	6069      	str	r1, [r5, #4]
 8001362:	60aa      	str	r2, [r5, #8]
 8001364:	60eb      	str	r3, [r5, #12]
 8001366:	3410      	adds	r4, #16
 8001368:	f10c 0c10 	add.w	ip, ip, #16
 800136c:	4574      	cmp	r4, lr
 800136e:	d1f3      	bne.n	8001358 <tcp_http_mt+0xdac>
 8001370:	4663      	mov	r3, ip
 8001372:	4622      	mov	r2, r4
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	701a      	strb	r2, [r3, #0]
							strcat((char*)buf, "<option value='1'>Retencao</option>");
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7fe fee9 	bl	8000150 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	4413      	add	r3, r2
 8001386:	4acf      	ldr	r2, [pc, #828]	; (80016c4 <tcp_http_mt+0x1118>)
 8001388:	4614      	mov	r4, r2
 800138a:	469c      	mov	ip, r3
 800138c:	f104 0e20 	add.w	lr, r4, #32
 8001390:	4665      	mov	r5, ip
 8001392:	4626      	mov	r6, r4
 8001394:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001396:	6028      	str	r0, [r5, #0]
 8001398:	6069      	str	r1, [r5, #4]
 800139a:	60aa      	str	r2, [r5, #8]
 800139c:	60eb      	str	r3, [r5, #12]
 800139e:	3410      	adds	r4, #16
 80013a0:	f10c 0c10 	add.w	ip, ip, #16
 80013a4:	4574      	cmp	r4, lr
 80013a6:	d1f3      	bne.n	8001390 <tcp_http_mt+0xde4>
 80013a8:	4663      	mov	r3, ip
 80013aa:	4622      	mov	r2, r4
 80013ac:	6810      	ldr	r0, [r2, #0]
 80013ae:	6018      	str	r0, [r3, #0]
							strcat((char*)buf, "</select></center></td>");
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f7fe fecd 	bl	8000150 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	4ac2      	ldr	r2, [pc, #776]	; (80016c8 <tcp_http_mt+0x111c>)
 80013c0:	461d      	mov	r5, r3
 80013c2:	4614      	mov	r4, r2
 80013c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c6:	6028      	str	r0, [r5, #0]
 80013c8:	6069      	str	r1, [r5, #4]
 80013ca:	60aa      	str	r2, [r5, #8]
 80013cc:	60eb      	str	r3, [r5, #12]
 80013ce:	cc03      	ldmia	r4!, {r0, r1}
 80013d0:	6128      	str	r0, [r5, #16]
 80013d2:	6169      	str	r1, [r5, #20]
							strcat((char*)buf, "<td><center><a href=''> Aberto </a></tr>");
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	f7fe febb 	bl	8000150 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	4aba      	ldr	r2, [pc, #744]	; (80016cc <tcp_http_mt+0x1120>)
 80013e4:	4614      	mov	r4, r2
 80013e6:	469c      	mov	ip, r3
 80013e8:	f104 0e20 	add.w	lr, r4, #32
 80013ec:	4665      	mov	r5, ip
 80013ee:	4626      	mov	r6, r4
 80013f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013f2:	6028      	str	r0, [r5, #0]
 80013f4:	6069      	str	r1, [r5, #4]
 80013f6:	60aa      	str	r2, [r5, #8]
 80013f8:	60eb      	str	r3, [r5, #12]
 80013fa:	3410      	adds	r4, #16
 80013fc:	f10c 0c10 	add.w	ip, ip, #16
 8001400:	4574      	cmp	r4, lr
 8001402:	d1f3      	bne.n	80013ec <tcp_http_mt+0xe40>
 8001404:	4662      	mov	r2, ip
 8001406:	4623      	mov	r3, r4
 8001408:	cb03      	ldmia	r3!, {r0, r1}
 800140a:	6010      	str	r0, [r2, #0]
 800140c:	6051      	str	r1, [r2, #4]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	7213      	strb	r3, [r2, #8]

							strcat((char*)buf, "<tr><td><center>2</center></td>");
 8001412:	6838      	ldr	r0, [r7, #0]
 8001414:	f7fe fe9c 	bl	8000150 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4aab      	ldr	r2, [pc, #684]	; (80016d0 <tcp_http_mt+0x1124>)
 8001422:	461c      	mov	r4, r3
 8001424:	4615      	mov	r5, r2
 8001426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001428:	6020      	str	r0, [r4, #0]
 800142a:	6061      	str	r1, [r4, #4]
 800142c:	60a2      	str	r2, [r4, #8]
 800142e:	60e3      	str	r3, [r4, #12]
 8001430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001432:	6120      	str	r0, [r4, #16]
 8001434:	6161      	str	r1, [r4, #20]
 8001436:	61a2      	str	r2, [r4, #24]
 8001438:	61e3      	str	r3, [r4, #28]
							strcat((char*)buf, "<td><center>False</center></td>");
 800143a:	6838      	ldr	r0, [r7, #0]
 800143c:	f7fe fe88 	bl	8000150 <strlen>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4aa2      	ldr	r2, [pc, #648]	; (80016d4 <tcp_http_mt+0x1128>)
 800144a:	461c      	mov	r4, r3
 800144c:	4615      	mov	r5, r2
 800144e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001450:	6020      	str	r0, [r4, #0]
 8001452:	6061      	str	r1, [r4, #4]
 8001454:	60a2      	str	r2, [r4, #8]
 8001456:	60e3      	str	r3, [r4, #12]
 8001458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145a:	6120      	str	r0, [r4, #16]
 800145c:	6161      	str	r1, [r4, #20]
 800145e:	61a2      	str	r2, [r4, #24]
 8001460:	61e3      	str	r3, [r4, #28]
							strcat((char*)buf, "<td><input type='text' name='tempo2'><br></td>");
 8001462:	6838      	ldr	r0, [r7, #0]
 8001464:	f7fe fe74 	bl	8000150 <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a99      	ldr	r2, [pc, #612]	; (80016d8 <tcp_http_mt+0x112c>)
 8001472:	4615      	mov	r5, r2
 8001474:	469c      	mov	ip, r3
 8001476:	f105 0e20 	add.w	lr, r5, #32
 800147a:	4664      	mov	r4, ip
 800147c:	462e      	mov	r6, r5
 800147e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001480:	6020      	str	r0, [r4, #0]
 8001482:	6061      	str	r1, [r4, #4]
 8001484:	60a2      	str	r2, [r4, #8]
 8001486:	60e3      	str	r3, [r4, #12]
 8001488:	3510      	adds	r5, #16
 800148a:	f10c 0c10 	add.w	ip, ip, #16
 800148e:	4575      	cmp	r5, lr
 8001490:	d1f3      	bne.n	800147a <tcp_http_mt+0xece>
 8001492:	4664      	mov	r4, ip
 8001494:	462b      	mov	r3, r5
 8001496:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001498:	6020      	str	r0, [r4, #0]
 800149a:	6061      	str	r1, [r4, #4]
 800149c:	60a2      	str	r2, [r4, #8]
 800149e:	881a      	ldrh	r2, [r3, #0]
 80014a0:	789b      	ldrb	r3, [r3, #2]
 80014a2:	81a2      	strh	r2, [r4, #12]
 80014a4:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "<td><center>");
 80014a6:	6838      	ldr	r0, [r7, #0]
 80014a8:	f7fe fe52 	bl	8000150 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a89      	ldr	r2, [pc, #548]	; (80016dc <tcp_http_mt+0x1130>)
 80014b6:	461c      	mov	r4, r3
 80014b8:	4613      	mov	r3, r2
 80014ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014bc:	6020      	str	r0, [r4, #0]
 80014be:	6061      	str	r1, [r4, #4]
 80014c0:	60a2      	str	r2, [r4, #8]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<select id='Acionamento2'>");
 80014c6:	6838      	ldr	r0, [r7, #0]
 80014c8:	f7fe fe42 	bl	8000150 <strlen>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a82      	ldr	r2, [pc, #520]	; (80016e0 <tcp_http_mt+0x1134>)
 80014d6:	461d      	mov	r5, r3
 80014d8:	4614      	mov	r4, r2
 80014da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014dc:	6028      	str	r0, [r5, #0]
 80014de:	6069      	str	r1, [r5, #4]
 80014e0:	60aa      	str	r2, [r5, #8]
 80014e2:	60eb      	str	r3, [r5, #12]
 80014e4:	cc03      	ldmia	r4!, {r0, r1}
 80014e6:	6128      	str	r0, [r5, #16]
 80014e8:	6169      	str	r1, [r5, #20]
 80014ea:	8823      	ldrh	r3, [r4, #0]
 80014ec:	78a2      	ldrb	r2, [r4, #2]
 80014ee:	832b      	strh	r3, [r5, #24]
 80014f0:	4613      	mov	r3, r2
 80014f2:	76ab      	strb	r3, [r5, #26]
							strcat((char*)buf, "<option value='0'>Pulso</option>");
 80014f4:	6838      	ldr	r0, [r7, #0]
 80014f6:	f7fe fe2b 	bl	8000150 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	4413      	add	r3, r2
 8001502:	4a78      	ldr	r2, [pc, #480]	; (80016e4 <tcp_http_mt+0x1138>)
 8001504:	4614      	mov	r4, r2
 8001506:	469c      	mov	ip, r3
 8001508:	f104 0e20 	add.w	lr, r4, #32
 800150c:	4665      	mov	r5, ip
 800150e:	4626      	mov	r6, r4
 8001510:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001512:	6028      	str	r0, [r5, #0]
 8001514:	6069      	str	r1, [r5, #4]
 8001516:	60aa      	str	r2, [r5, #8]
 8001518:	60eb      	str	r3, [r5, #12]
 800151a:	3410      	adds	r4, #16
 800151c:	f10c 0c10 	add.w	ip, ip, #16
 8001520:	4574      	cmp	r4, lr
 8001522:	d1f3      	bne.n	800150c <tcp_http_mt+0xf60>
 8001524:	4663      	mov	r3, ip
 8001526:	4622      	mov	r2, r4
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	701a      	strb	r2, [r3, #0]
							strcat((char*)buf, "<option value='1'>Retencao</option>");
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f7fe fe0f 	bl	8000150 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	4413      	add	r3, r2
 800153a:	4a62      	ldr	r2, [pc, #392]	; (80016c4 <tcp_http_mt+0x1118>)
 800153c:	4614      	mov	r4, r2
 800153e:	469c      	mov	ip, r3
 8001540:	f104 0e20 	add.w	lr, r4, #32
 8001544:	4665      	mov	r5, ip
 8001546:	4626      	mov	r6, r4
 8001548:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800154a:	6028      	str	r0, [r5, #0]
 800154c:	6069      	str	r1, [r5, #4]
 800154e:	60aa      	str	r2, [r5, #8]
 8001550:	60eb      	str	r3, [r5, #12]
 8001552:	3410      	adds	r4, #16
 8001554:	f10c 0c10 	add.w	ip, ip, #16
 8001558:	4574      	cmp	r4, lr
 800155a:	d1f3      	bne.n	8001544 <tcp_http_mt+0xf98>
 800155c:	4663      	mov	r3, ip
 800155e:	4622      	mov	r2, r4
 8001560:	6810      	ldr	r0, [r2, #0]
 8001562:	6018      	str	r0, [r3, #0]
							strcat((char*)buf, "</select></center></td>");
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	f7fe fdf3 	bl	8000150 <strlen>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	4413      	add	r3, r2
 8001572:	4a55      	ldr	r2, [pc, #340]	; (80016c8 <tcp_http_mt+0x111c>)
 8001574:	461d      	mov	r5, r3
 8001576:	4614      	mov	r4, r2
 8001578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157a:	6028      	str	r0, [r5, #0]
 800157c:	6069      	str	r1, [r5, #4]
 800157e:	60aa      	str	r2, [r5, #8]
 8001580:	60eb      	str	r3, [r5, #12]
 8001582:	cc03      	ldmia	r4!, {r0, r1}
 8001584:	6128      	str	r0, [r5, #16]
 8001586:	6169      	str	r1, [r5, #20]
							strcat((char*)buf, "<td><center><a href=''> Aberto </a></tr>");
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f7fe fde1 	bl	8000150 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	4413      	add	r3, r2
 8001596:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <tcp_http_mt+0x1120>)
 8001598:	4614      	mov	r4, r2
 800159a:	469c      	mov	ip, r3
 800159c:	f104 0e20 	add.w	lr, r4, #32
 80015a0:	4665      	mov	r5, ip
 80015a2:	4626      	mov	r6, r4
 80015a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80015a6:	6028      	str	r0, [r5, #0]
 80015a8:	6069      	str	r1, [r5, #4]
 80015aa:	60aa      	str	r2, [r5, #8]
 80015ac:	60eb      	str	r3, [r5, #12]
 80015ae:	3410      	adds	r4, #16
 80015b0:	f10c 0c10 	add.w	ip, ip, #16
 80015b4:	4574      	cmp	r4, lr
 80015b6:	d1f3      	bne.n	80015a0 <tcp_http_mt+0xff4>
 80015b8:	4662      	mov	r2, ip
 80015ba:	4623      	mov	r3, r4
 80015bc:	cb03      	ldmia	r3!, {r0, r1}
 80015be:	6010      	str	r0, [r2, #0]
 80015c0:	6051      	str	r1, [r2, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	7213      	strb	r3, [r2, #8]

							strcat((char*)buf, "<tr><td><center>3</center></td>");
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f7fe fdc2 	bl	8000150 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a44      	ldr	r2, [pc, #272]	; (80016e8 <tcp_http_mt+0x113c>)
 80015d6:	461c      	mov	r4, r3
 80015d8:	4615      	mov	r5, r2
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	6020      	str	r0, [r4, #0]
 80015de:	6061      	str	r1, [r4, #4]
 80015e0:	60a2      	str	r2, [r4, #8]
 80015e2:	60e3      	str	r3, [r4, #12]
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	6120      	str	r0, [r4, #16]
 80015e8:	6161      	str	r1, [r4, #20]
 80015ea:	61a2      	str	r2, [r4, #24]
 80015ec:	61e3      	str	r3, [r4, #28]
							strcat((char*)buf, "<td><center>False</center></td>");
 80015ee:	6838      	ldr	r0, [r7, #0]
 80015f0:	f7fe fdae 	bl	8000150 <strlen>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a35      	ldr	r2, [pc, #212]	; (80016d4 <tcp_http_mt+0x1128>)
 80015fe:	461c      	mov	r4, r3
 8001600:	4615      	mov	r5, r2
 8001602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001604:	6020      	str	r0, [r4, #0]
 8001606:	6061      	str	r1, [r4, #4]
 8001608:	60a2      	str	r2, [r4, #8]
 800160a:	60e3      	str	r3, [r4, #12]
 800160c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160e:	6120      	str	r0, [r4, #16]
 8001610:	6161      	str	r1, [r4, #20]
 8001612:	61a2      	str	r2, [r4, #24]
 8001614:	61e3      	str	r3, [r4, #28]
							strcat((char*)buf, "<td><input type='text' name='tempo3'><br></td>");
 8001616:	6838      	ldr	r0, [r7, #0]
 8001618:	f7fe fd9a 	bl	8000150 <strlen>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a31      	ldr	r2, [pc, #196]	; (80016ec <tcp_http_mt+0x1140>)
 8001626:	4615      	mov	r5, r2
 8001628:	469c      	mov	ip, r3
 800162a:	f105 0e20 	add.w	lr, r5, #32
 800162e:	4664      	mov	r4, ip
 8001630:	462e      	mov	r6, r5
 8001632:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001634:	6020      	str	r0, [r4, #0]
 8001636:	6061      	str	r1, [r4, #4]
 8001638:	60a2      	str	r2, [r4, #8]
 800163a:	60e3      	str	r3, [r4, #12]
 800163c:	3510      	adds	r5, #16
 800163e:	f10c 0c10 	add.w	ip, ip, #16
 8001642:	4575      	cmp	r5, lr
 8001644:	d1f3      	bne.n	800162e <tcp_http_mt+0x1082>
 8001646:	4664      	mov	r4, ip
 8001648:	462b      	mov	r3, r5
 800164a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800164c:	6020      	str	r0, [r4, #0]
 800164e:	6061      	str	r1, [r4, #4]
 8001650:	60a2      	str	r2, [r4, #8]
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	789b      	ldrb	r3, [r3, #2]
 8001656:	81a2      	strh	r2, [r4, #12]
 8001658:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "<td><center>");
 800165a:	6838      	ldr	r0, [r7, #0]
 800165c:	f7fe fd78 	bl	8000150 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <tcp_http_mt+0x1130>)
 800166a:	461c      	mov	r4, r3
 800166c:	4613      	mov	r3, r2
 800166e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001670:	6020      	str	r0, [r4, #0]
 8001672:	6061      	str	r1, [r4, #4]
 8001674:	60a2      	str	r2, [r4, #8]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<select id='Acionamento3'>");
 800167a:	6838      	ldr	r0, [r7, #0]
 800167c:	f7fe fd68 	bl	8000150 <strlen>
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <tcp_http_mt+0x1144>)
 800168a:	461d      	mov	r5, r3
 800168c:	4614      	mov	r4, r2
 800168e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001690:	6028      	str	r0, [r5, #0]
 8001692:	6069      	str	r1, [r5, #4]
 8001694:	60aa      	str	r2, [r5, #8]
 8001696:	60eb      	str	r3, [r5, #12]
 8001698:	cc03      	ldmia	r4!, {r0, r1}
 800169a:	6128      	str	r0, [r5, #16]
 800169c:	6169      	str	r1, [r5, #20]
 800169e:	8823      	ldrh	r3, [r4, #0]
 80016a0:	78a2      	ldrb	r2, [r4, #2]
 80016a2:	832b      	strh	r3, [r5, #24]
 80016a4:	4613      	mov	r3, r2
 80016a6:	76ab      	strb	r3, [r5, #26]
							strcat((char*)buf, "<option value='0'>Pulso</option>");
 80016a8:	6838      	ldr	r0, [r7, #0]
 80016aa:	f7fe fd51 	bl	8000150 <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <tcp_http_mt+0x1138>)
 80016b8:	4614      	mov	r4, r2
 80016ba:	469c      	mov	ip, r3
 80016bc:	f104 0e20 	add.w	lr, r4, #32
 80016c0:	e018      	b.n	80016f4 <tcp_http_mt+0x1148>
 80016c2:	bf00      	nop
 80016c4:	08008e20 	.word	0x08008e20
 80016c8:	08008e44 	.word	0x08008e44
 80016cc:	08008e5c 	.word	0x08008e5c
 80016d0:	08008e88 	.word	0x08008e88
 80016d4:	08008d80 	.word	0x08008d80
 80016d8:	08008ea8 	.word	0x08008ea8
 80016dc:	08008dd0 	.word	0x08008dd0
 80016e0:	08008ed8 	.word	0x08008ed8
 80016e4:	08008dfc 	.word	0x08008dfc
 80016e8:	08008ef4 	.word	0x08008ef4
 80016ec:	08008f14 	.word	0x08008f14
 80016f0:	08008f44 	.word	0x08008f44
 80016f4:	4665      	mov	r5, ip
 80016f6:	4626      	mov	r6, r4
 80016f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016fa:	6028      	str	r0, [r5, #0]
 80016fc:	6069      	str	r1, [r5, #4]
 80016fe:	60aa      	str	r2, [r5, #8]
 8001700:	60eb      	str	r3, [r5, #12]
 8001702:	3410      	adds	r4, #16
 8001704:	f10c 0c10 	add.w	ip, ip, #16
 8001708:	4574      	cmp	r4, lr
 800170a:	d1f3      	bne.n	80016f4 <tcp_http_mt+0x1148>
 800170c:	4663      	mov	r3, ip
 800170e:	4622      	mov	r2, r4
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	701a      	strb	r2, [r3, #0]
							strcat((char*)buf, "<option value='1'>Retencao</option>");
 8001714:	6838      	ldr	r0, [r7, #0]
 8001716:	f7fe fd1b 	bl	8000150 <strlen>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	4413      	add	r3, r2
 8001722:	4ad1      	ldr	r2, [pc, #836]	; (8001a68 <tcp_http_mt+0x14bc>)
 8001724:	4614      	mov	r4, r2
 8001726:	469c      	mov	ip, r3
 8001728:	f104 0e20 	add.w	lr, r4, #32
 800172c:	4665      	mov	r5, ip
 800172e:	4626      	mov	r6, r4
 8001730:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001732:	6028      	str	r0, [r5, #0]
 8001734:	6069      	str	r1, [r5, #4]
 8001736:	60aa      	str	r2, [r5, #8]
 8001738:	60eb      	str	r3, [r5, #12]
 800173a:	3410      	adds	r4, #16
 800173c:	f10c 0c10 	add.w	ip, ip, #16
 8001740:	4574      	cmp	r4, lr
 8001742:	d1f3      	bne.n	800172c <tcp_http_mt+0x1180>
 8001744:	4663      	mov	r3, ip
 8001746:	4622      	mov	r2, r4
 8001748:	6810      	ldr	r0, [r2, #0]
 800174a:	6018      	str	r0, [r3, #0]
							strcat((char*)buf, "</select></center></td>");
 800174c:	6838      	ldr	r0, [r7, #0]
 800174e:	f7fe fcff 	bl	8000150 <strlen>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	4ac4      	ldr	r2, [pc, #784]	; (8001a6c <tcp_http_mt+0x14c0>)
 800175c:	461d      	mov	r5, r3
 800175e:	4614      	mov	r4, r2
 8001760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001762:	6028      	str	r0, [r5, #0]
 8001764:	6069      	str	r1, [r5, #4]
 8001766:	60aa      	str	r2, [r5, #8]
 8001768:	60eb      	str	r3, [r5, #12]
 800176a:	cc03      	ldmia	r4!, {r0, r1}
 800176c:	6128      	str	r0, [r5, #16]
 800176e:	6169      	str	r1, [r5, #20]
							strcat((char*)buf, "<td><center><a href=''> Aberto </a></tr>");
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f7fe fced 	bl	8000150 <strlen>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	4413      	add	r3, r2
 800177e:	4abc      	ldr	r2, [pc, #752]	; (8001a70 <tcp_http_mt+0x14c4>)
 8001780:	4614      	mov	r4, r2
 8001782:	469c      	mov	ip, r3
 8001784:	f104 0e20 	add.w	lr, r4, #32
 8001788:	4665      	mov	r5, ip
 800178a:	4626      	mov	r6, r4
 800178c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800178e:	6028      	str	r0, [r5, #0]
 8001790:	6069      	str	r1, [r5, #4]
 8001792:	60aa      	str	r2, [r5, #8]
 8001794:	60eb      	str	r3, [r5, #12]
 8001796:	3410      	adds	r4, #16
 8001798:	f10c 0c10 	add.w	ip, ip, #16
 800179c:	4574      	cmp	r4, lr
 800179e:	d1f3      	bne.n	8001788 <tcp_http_mt+0x11dc>
 80017a0:	4662      	mov	r2, ip
 80017a2:	4623      	mov	r3, r4
 80017a4:	cb03      	ldmia	r3!, {r0, r1}
 80017a6:	6010      	str	r0, [r2, #0]
 80017a8:	6051      	str	r1, [r2, #4]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	7213      	strb	r3, [r2, #8]

							strcat((char*)buf, "<tr><td><center>4</center></td>");
 80017ae:	6838      	ldr	r0, [r7, #0]
 80017b0:	f7fe fcce 	bl	8000150 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4aad      	ldr	r2, [pc, #692]	; (8001a74 <tcp_http_mt+0x14c8>)
 80017be:	461c      	mov	r4, r3
 80017c0:	4615      	mov	r5, r2
 80017c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c4:	6020      	str	r0, [r4, #0]
 80017c6:	6061      	str	r1, [r4, #4]
 80017c8:	60a2      	str	r2, [r4, #8]
 80017ca:	60e3      	str	r3, [r4, #12]
 80017cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ce:	6120      	str	r0, [r4, #16]
 80017d0:	6161      	str	r1, [r4, #20]
 80017d2:	61a2      	str	r2, [r4, #24]
 80017d4:	61e3      	str	r3, [r4, #28]
							strcat((char*)buf, "<td><center>False</center></td>");
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	f7fe fcba 	bl	8000150 <strlen>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4aa4      	ldr	r2, [pc, #656]	; (8001a78 <tcp_http_mt+0x14cc>)
 80017e6:	461c      	mov	r4, r3
 80017e8:	4615      	mov	r5, r2
 80017ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ec:	6020      	str	r0, [r4, #0]
 80017ee:	6061      	str	r1, [r4, #4]
 80017f0:	60a2      	str	r2, [r4, #8]
 80017f2:	60e3      	str	r3, [r4, #12]
 80017f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f6:	6120      	str	r0, [r4, #16]
 80017f8:	6161      	str	r1, [r4, #20]
 80017fa:	61a2      	str	r2, [r4, #24]
 80017fc:	61e3      	str	r3, [r4, #28]
							strcat((char*)buf, "<td><input type='text' name='tempo4'><br></td>");
 80017fe:	6838      	ldr	r0, [r7, #0]
 8001800:	f7fe fca6 	bl	8000150 <strlen>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a9b      	ldr	r2, [pc, #620]	; (8001a7c <tcp_http_mt+0x14d0>)
 800180e:	4615      	mov	r5, r2
 8001810:	469c      	mov	ip, r3
 8001812:	f105 0e20 	add.w	lr, r5, #32
 8001816:	4664      	mov	r4, ip
 8001818:	462e      	mov	r6, r5
 800181a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800181c:	6020      	str	r0, [r4, #0]
 800181e:	6061      	str	r1, [r4, #4]
 8001820:	60a2      	str	r2, [r4, #8]
 8001822:	60e3      	str	r3, [r4, #12]
 8001824:	3510      	adds	r5, #16
 8001826:	f10c 0c10 	add.w	ip, ip, #16
 800182a:	4575      	cmp	r5, lr
 800182c:	d1f3      	bne.n	8001816 <tcp_http_mt+0x126a>
 800182e:	4664      	mov	r4, ip
 8001830:	462b      	mov	r3, r5
 8001832:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001834:	6020      	str	r0, [r4, #0]
 8001836:	6061      	str	r1, [r4, #4]
 8001838:	60a2      	str	r2, [r4, #8]
 800183a:	881a      	ldrh	r2, [r3, #0]
 800183c:	789b      	ldrb	r3, [r3, #2]
 800183e:	81a2      	strh	r2, [r4, #12]
 8001840:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "<td><center>");
 8001842:	6838      	ldr	r0, [r7, #0]
 8001844:	f7fe fc84 	bl	8000150 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a8b      	ldr	r2, [pc, #556]	; (8001a80 <tcp_http_mt+0x14d4>)
 8001852:	461c      	mov	r4, r3
 8001854:	4613      	mov	r3, r2
 8001856:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001858:	6020      	str	r0, [r4, #0]
 800185a:	6061      	str	r1, [r4, #4]
 800185c:	60a2      	str	r2, [r4, #8]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<select id='Acionamento4'>");
 8001862:	6838      	ldr	r0, [r7, #0]
 8001864:	f7fe fc74 	bl	8000150 <strlen>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	4a84      	ldr	r2, [pc, #528]	; (8001a84 <tcp_http_mt+0x14d8>)
 8001872:	461d      	mov	r5, r3
 8001874:	4614      	mov	r4, r2
 8001876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001878:	6028      	str	r0, [r5, #0]
 800187a:	6069      	str	r1, [r5, #4]
 800187c:	60aa      	str	r2, [r5, #8]
 800187e:	60eb      	str	r3, [r5, #12]
 8001880:	cc03      	ldmia	r4!, {r0, r1}
 8001882:	6128      	str	r0, [r5, #16]
 8001884:	6169      	str	r1, [r5, #20]
 8001886:	8823      	ldrh	r3, [r4, #0]
 8001888:	78a2      	ldrb	r2, [r4, #2]
 800188a:	832b      	strh	r3, [r5, #24]
 800188c:	4613      	mov	r3, r2
 800188e:	76ab      	strb	r3, [r5, #26]
							strcat((char*)buf, "<option value='0'>Pulso</option>");
 8001890:	6838      	ldr	r0, [r7, #0]
 8001892:	f7fe fc5d 	bl	8000150 <strlen>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	4413      	add	r3, r2
 800189e:	4a7a      	ldr	r2, [pc, #488]	; (8001a88 <tcp_http_mt+0x14dc>)
 80018a0:	4614      	mov	r4, r2
 80018a2:	469c      	mov	ip, r3
 80018a4:	f104 0e20 	add.w	lr, r4, #32
 80018a8:	4665      	mov	r5, ip
 80018aa:	4626      	mov	r6, r4
 80018ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80018ae:	6028      	str	r0, [r5, #0]
 80018b0:	6069      	str	r1, [r5, #4]
 80018b2:	60aa      	str	r2, [r5, #8]
 80018b4:	60eb      	str	r3, [r5, #12]
 80018b6:	3410      	adds	r4, #16
 80018b8:	f10c 0c10 	add.w	ip, ip, #16
 80018bc:	4574      	cmp	r4, lr
 80018be:	d1f3      	bne.n	80018a8 <tcp_http_mt+0x12fc>
 80018c0:	4663      	mov	r3, ip
 80018c2:	4622      	mov	r2, r4
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	701a      	strb	r2, [r3, #0]
							strcat((char*)buf, "<option value='1'>Retencao</option>");
 80018c8:	6838      	ldr	r0, [r7, #0]
 80018ca:	f7fe fc41 	bl	8000150 <strlen>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a64      	ldr	r2, [pc, #400]	; (8001a68 <tcp_http_mt+0x14bc>)
 80018d8:	4614      	mov	r4, r2
 80018da:	469c      	mov	ip, r3
 80018dc:	f104 0e20 	add.w	lr, r4, #32
 80018e0:	4665      	mov	r5, ip
 80018e2:	4626      	mov	r6, r4
 80018e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80018e6:	6028      	str	r0, [r5, #0]
 80018e8:	6069      	str	r1, [r5, #4]
 80018ea:	60aa      	str	r2, [r5, #8]
 80018ec:	60eb      	str	r3, [r5, #12]
 80018ee:	3410      	adds	r4, #16
 80018f0:	f10c 0c10 	add.w	ip, ip, #16
 80018f4:	4574      	cmp	r4, lr
 80018f6:	d1f3      	bne.n	80018e0 <tcp_http_mt+0x1334>
 80018f8:	4663      	mov	r3, ip
 80018fa:	4622      	mov	r2, r4
 80018fc:	6810      	ldr	r0, [r2, #0]
 80018fe:	6018      	str	r0, [r3, #0]
							strcat((char*)buf, "</select></center></td>");
 8001900:	6838      	ldr	r0, [r7, #0]
 8001902:	f7fe fc25 	bl	8000150 <strlen>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	4413      	add	r3, r2
 800190e:	4a57      	ldr	r2, [pc, #348]	; (8001a6c <tcp_http_mt+0x14c0>)
 8001910:	461d      	mov	r5, r3
 8001912:	4614      	mov	r4, r2
 8001914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001916:	6028      	str	r0, [r5, #0]
 8001918:	6069      	str	r1, [r5, #4]
 800191a:	60aa      	str	r2, [r5, #8]
 800191c:	60eb      	str	r3, [r5, #12]
 800191e:	cc03      	ldmia	r4!, {r0, r1}
 8001920:	6128      	str	r0, [r5, #16]
 8001922:	6169      	str	r1, [r5, #20]
							strcat((char*)buf, "<td><center><a href=''> Aberto </a></tr>");
 8001924:	6838      	ldr	r0, [r7, #0]
 8001926:	f7fe fc13 	bl	8000150 <strlen>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	4413      	add	r3, r2
 8001932:	4a4f      	ldr	r2, [pc, #316]	; (8001a70 <tcp_http_mt+0x14c4>)
 8001934:	4614      	mov	r4, r2
 8001936:	469c      	mov	ip, r3
 8001938:	f104 0e20 	add.w	lr, r4, #32
 800193c:	4665      	mov	r5, ip
 800193e:	4626      	mov	r6, r4
 8001940:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001942:	6028      	str	r0, [r5, #0]
 8001944:	6069      	str	r1, [r5, #4]
 8001946:	60aa      	str	r2, [r5, #8]
 8001948:	60eb      	str	r3, [r5, #12]
 800194a:	3410      	adds	r4, #16
 800194c:	f10c 0c10 	add.w	ip, ip, #16
 8001950:	4574      	cmp	r4, lr
 8001952:	d1f3      	bne.n	800193c <tcp_http_mt+0x1390>
 8001954:	4662      	mov	r2, ip
 8001956:	4623      	mov	r3, r4
 8001958:	cb03      	ldmia	r3!, {r0, r1}
 800195a:	6010      	str	r0, [r2, #0]
 800195c:	6051      	str	r1, [r2, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	7213      	strb	r3, [r2, #8]

							strcat((char*)buf, "</table></center>");
 8001962:	6838      	ldr	r0, [r7, #0]
 8001964:	f7fe fbf4 	bl	8000150 <strlen>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a46      	ldr	r2, [pc, #280]	; (8001a8c <tcp_http_mt+0x14e0>)
 8001972:	461d      	mov	r5, r3
 8001974:	4614      	mov	r4, r2
 8001976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001978:	6028      	str	r0, [r5, #0]
 800197a:	6069      	str	r1, [r5, #4]
 800197c:	60aa      	str	r2, [r5, #8]
 800197e:	60eb      	str	r3, [r5, #12]
 8001980:	8823      	ldrh	r3, [r4, #0]
 8001982:	822b      	strh	r3, [r5, #16]
							strcat((char*)buf, "<center><label for='rele'>Rele de intertravamento:</label>");
 8001984:	6838      	ldr	r0, [r7, #0]
 8001986:	f7fe fbe3 	bl	8000150 <strlen>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	4413      	add	r3, r2
 8001992:	4a3f      	ldr	r2, [pc, #252]	; (8001a90 <tcp_http_mt+0x14e4>)
 8001994:	4614      	mov	r4, r2
 8001996:	469c      	mov	ip, r3
 8001998:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800199c:	4665      	mov	r5, ip
 800199e:	4626      	mov	r6, r4
 80019a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019a2:	6028      	str	r0, [r5, #0]
 80019a4:	6069      	str	r1, [r5, #4]
 80019a6:	60aa      	str	r2, [r5, #8]
 80019a8:	60eb      	str	r3, [r5, #12]
 80019aa:	3410      	adds	r4, #16
 80019ac:	f10c 0c10 	add.w	ip, ip, #16
 80019b0:	4574      	cmp	r4, lr
 80019b2:	d1f3      	bne.n	800199c <tcp_http_mt+0x13f0>
 80019b4:	4662      	mov	r2, ip
 80019b6:	4623      	mov	r3, r4
 80019b8:	cb03      	ldmia	r3!, {r0, r1}
 80019ba:	6010      	str	r0, [r2, #0]
 80019bc:	6051      	str	r1, [r2, #4]
 80019be:	8819      	ldrh	r1, [r3, #0]
 80019c0:	789b      	ldrb	r3, [r3, #2]
 80019c2:	8111      	strh	r1, [r2, #8]
 80019c4:	7293      	strb	r3, [r2, #10]
							strcat((char*)buf, "<select name='rele' id='rele'>");
 80019c6:	6838      	ldr	r0, [r7, #0]
 80019c8:	f7fe fbc2 	bl	8000150 <strlen>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a2f      	ldr	r2, [pc, #188]	; (8001a94 <tcp_http_mt+0x14e8>)
 80019d6:	461d      	mov	r5, r3
 80019d8:	4614      	mov	r4, r2
 80019da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019dc:	6028      	str	r0, [r5, #0]
 80019de:	6069      	str	r1, [r5, #4]
 80019e0:	60aa      	str	r2, [r5, #8]
 80019e2:	60eb      	str	r3, [r5, #12]
 80019e4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80019e6:	6128      	str	r0, [r5, #16]
 80019e8:	6169      	str	r1, [r5, #20]
 80019ea:	61aa      	str	r2, [r5, #24]
 80019ec:	8823      	ldrh	r3, [r4, #0]
 80019ee:	78a2      	ldrb	r2, [r4, #2]
 80019f0:	83ab      	strh	r3, [r5, #28]
 80019f2:	4613      	mov	r3, r2
 80019f4:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "  <option value='0'>1</option>");
 80019f6:	6838      	ldr	r0, [r7, #0]
 80019f8:	f7fe fbaa 	bl	8000150 <strlen>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a24      	ldr	r2, [pc, #144]	; (8001a98 <tcp_http_mt+0x14ec>)
 8001a06:	461d      	mov	r5, r3
 8001a08:	4614      	mov	r4, r2
 8001a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0c:	6028      	str	r0, [r5, #0]
 8001a0e:	6069      	str	r1, [r5, #4]
 8001a10:	60aa      	str	r2, [r5, #8]
 8001a12:	60eb      	str	r3, [r5, #12]
 8001a14:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001a16:	6128      	str	r0, [r5, #16]
 8001a18:	6169      	str	r1, [r5, #20]
 8001a1a:	61aa      	str	r2, [r5, #24]
 8001a1c:	8823      	ldrh	r3, [r4, #0]
 8001a1e:	78a2      	ldrb	r2, [r4, #2]
 8001a20:	83ab      	strh	r3, [r5, #28]
 8001a22:	4613      	mov	r3, r2
 8001a24:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "  <option value='1'>2</option>");
 8001a26:	6838      	ldr	r0, [r7, #0]
 8001a28:	f7fe fb92 	bl	8000150 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <tcp_http_mt+0x14f0>)
 8001a36:	461d      	mov	r5, r3
 8001a38:	4614      	mov	r4, r2
 8001a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3c:	6028      	str	r0, [r5, #0]
 8001a3e:	6069      	str	r1, [r5, #4]
 8001a40:	60aa      	str	r2, [r5, #8]
 8001a42:	60eb      	str	r3, [r5, #12]
 8001a44:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001a46:	6128      	str	r0, [r5, #16]
 8001a48:	6169      	str	r1, [r5, #20]
 8001a4a:	61aa      	str	r2, [r5, #24]
 8001a4c:	8823      	ldrh	r3, [r4, #0]
 8001a4e:	78a2      	ldrb	r2, [r4, #2]
 8001a50:	83ab      	strh	r3, [r5, #28]
 8001a52:	4613      	mov	r3, r2
 8001a54:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "</select></center>");
 8001a56:	6838      	ldr	r0, [r7, #0]
 8001a58:	f7fe fb7a 	bl	8000150 <strlen>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	e01c      	b.n	8001aa0 <tcp_http_mt+0x14f4>
 8001a66:	bf00      	nop
 8001a68:	08008e20 	.word	0x08008e20
 8001a6c:	08008e44 	.word	0x08008e44
 8001a70:	08008e5c 	.word	0x08008e5c
 8001a74:	08008f60 	.word	0x08008f60
 8001a78:	08008d80 	.word	0x08008d80
 8001a7c:	08008f80 	.word	0x08008f80
 8001a80:	08008dd0 	.word	0x08008dd0
 8001a84:	08008fb0 	.word	0x08008fb0
 8001a88:	08008dfc 	.word	0x08008dfc
 8001a8c:	08008fcc 	.word	0x08008fcc
 8001a90:	08008fe0 	.word	0x08008fe0
 8001a94:	0800901c 	.word	0x0800901c
 8001a98:	0800903c 	.word	0x0800903c
 8001a9c:	0800905c 	.word	0x0800905c
 8001aa0:	4a62      	ldr	r2, [pc, #392]	; (8001c2c <tcp_http_mt+0x1680>)
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa8:	6028      	str	r0, [r5, #0]
 8001aaa:	6069      	str	r1, [r5, #4]
 8001aac:	60aa      	str	r2, [r5, #8]
 8001aae:	60eb      	str	r3, [r5, #12]
 8001ab0:	8823      	ldrh	r3, [r4, #0]
 8001ab2:	78a2      	ldrb	r2, [r4, #2]
 8001ab4:	822b      	strh	r3, [r5, #16]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	74ab      	strb	r3, [r5, #18]
							strcat((char*)buf, "<center><label for='intertravamento'>Habilitar intertravamento:</label>");
 8001aba:	6838      	ldr	r0, [r7, #0]
 8001abc:	f7fe fb48 	bl	8000150 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a59      	ldr	r2, [pc, #356]	; (8001c30 <tcp_http_mt+0x1684>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	4611      	mov	r1, r2
 8001ace:	2348      	movs	r3, #72	; 0x48
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f006 fdd6 	bl	8008682 <memcpy>
							strcat((char*)buf, "<select name='intertravamento' id='intertravamento'>");
 8001ad6:	6838      	ldr	r0, [r7, #0]
 8001ad8:	f7fe fb3a 	bl	8000150 <strlen>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a53      	ldr	r2, [pc, #332]	; (8001c34 <tcp_http_mt+0x1688>)
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	469c      	mov	ip, r3
 8001aea:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001aee:	4665      	mov	r5, ip
 8001af0:	4626      	mov	r6, r4
 8001af2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001af4:	6028      	str	r0, [r5, #0]
 8001af6:	6069      	str	r1, [r5, #4]
 8001af8:	60aa      	str	r2, [r5, #8]
 8001afa:	60eb      	str	r3, [r5, #12]
 8001afc:	3410      	adds	r4, #16
 8001afe:	f10c 0c10 	add.w	ip, ip, #16
 8001b02:	4574      	cmp	r4, lr
 8001b04:	d1f3      	bne.n	8001aee <tcp_http_mt+0x1542>
 8001b06:	4663      	mov	r3, ip
 8001b08:	4622      	mov	r2, r4
 8001b0a:	6810      	ldr	r0, [r2, #0]
 8001b0c:	6018      	str	r0, [r3, #0]
 8001b0e:	7912      	ldrb	r2, [r2, #4]
 8001b10:	711a      	strb	r2, [r3, #4]
							strcat((char*)buf, "  <option value='0'>1</option>");
 8001b12:	6838      	ldr	r0, [r7, #0]
 8001b14:	f7fe fb1c 	bl	8000150 <strlen>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a45      	ldr	r2, [pc, #276]	; (8001c38 <tcp_http_mt+0x168c>)
 8001b22:	461d      	mov	r5, r3
 8001b24:	4614      	mov	r4, r2
 8001b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b28:	6028      	str	r0, [r5, #0]
 8001b2a:	6069      	str	r1, [r5, #4]
 8001b2c:	60aa      	str	r2, [r5, #8]
 8001b2e:	60eb      	str	r3, [r5, #12]
 8001b30:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001b32:	6128      	str	r0, [r5, #16]
 8001b34:	6169      	str	r1, [r5, #20]
 8001b36:	61aa      	str	r2, [r5, #24]
 8001b38:	8823      	ldrh	r3, [r4, #0]
 8001b3a:	78a2      	ldrb	r2, [r4, #2]
 8001b3c:	83ab      	strh	r3, [r5, #28]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "  <option value='1'>2</option>");
 8001b42:	6838      	ldr	r0, [r7, #0]
 8001b44:	f7fe fb04 	bl	8000150 <strlen>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a3a      	ldr	r2, [pc, #232]	; (8001c3c <tcp_http_mt+0x1690>)
 8001b52:	461d      	mov	r5, r3
 8001b54:	4614      	mov	r4, r2
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	6028      	str	r0, [r5, #0]
 8001b5a:	6069      	str	r1, [r5, #4]
 8001b5c:	60aa      	str	r2, [r5, #8]
 8001b5e:	60eb      	str	r3, [r5, #12]
 8001b60:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001b62:	6128      	str	r0, [r5, #16]
 8001b64:	6169      	str	r1, [r5, #20]
 8001b66:	61aa      	str	r2, [r5, #24]
 8001b68:	8823      	ldrh	r3, [r4, #0]
 8001b6a:	78a2      	ldrb	r2, [r4, #2]
 8001b6c:	83ab      	strh	r3, [r5, #28]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "</select><br><button>Salvar</button><br>");
 8001b72:	6838      	ldr	r0, [r7, #0]
 8001b74:	f7fe faec 	bl	8000150 <strlen>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a2f      	ldr	r2, [pc, #188]	; (8001c40 <tcp_http_mt+0x1694>)
 8001b82:	4614      	mov	r4, r2
 8001b84:	469c      	mov	ip, r3
 8001b86:	f104 0e20 	add.w	lr, r4, #32
 8001b8a:	4665      	mov	r5, ip
 8001b8c:	4626      	mov	r6, r4
 8001b8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b90:	6028      	str	r0, [r5, #0]
 8001b92:	6069      	str	r1, [r5, #4]
 8001b94:	60aa      	str	r2, [r5, #8]
 8001b96:	60eb      	str	r3, [r5, #12]
 8001b98:	3410      	adds	r4, #16
 8001b9a:	f10c 0c10 	add.w	ip, ip, #16
 8001b9e:	4574      	cmp	r4, lr
 8001ba0:	d1f3      	bne.n	8001b8a <tcp_http_mt+0x15de>
 8001ba2:	4662      	mov	r2, ip
 8001ba4:	4623      	mov	r3, r4
 8001ba6:	cb03      	ldmia	r3!, {r0, r1}
 8001ba8:	6010      	str	r0, [r2, #0]
 8001baa:	6051      	str	r1, [r2, #4]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	7213      	strb	r3, [r2, #8]
							strcat((char*)buf, "<center><a href='http://192.168.0.231'>Voltar</a><br></center>");
 8001bb0:	6838      	ldr	r0, [r7, #0]
 8001bb2:	f7fe facd 	bl	8000150 <strlen>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <tcp_http_mt+0x1698>)
 8001bc0:	4615      	mov	r5, r2
 8001bc2:	469c      	mov	ip, r3
 8001bc4:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001bc8:	4664      	mov	r4, ip
 8001bca:	462e      	mov	r6, r5
 8001bcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001bce:	6020      	str	r0, [r4, #0]
 8001bd0:	6061      	str	r1, [r4, #4]
 8001bd2:	60a2      	str	r2, [r4, #8]
 8001bd4:	60e3      	str	r3, [r4, #12]
 8001bd6:	3510      	adds	r5, #16
 8001bd8:	f10c 0c10 	add.w	ip, ip, #16
 8001bdc:	4575      	cmp	r5, lr
 8001bde:	d1f3      	bne.n	8001bc8 <tcp_http_mt+0x161c>
 8001be0:	4664      	mov	r4, ip
 8001be2:	462b      	mov	r3, r5
 8001be4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001be6:	6020      	str	r0, [r4, #0]
 8001be8:	6061      	str	r1, [r4, #4]
 8001bea:	60a2      	str	r2, [r4, #8]
 8001bec:	881a      	ldrh	r2, [r3, #0]
 8001bee:	789b      	ldrb	r3, [r3, #2]
 8001bf0:	81a2      	strh	r2, [r4, #12]
 8001bf2:	73a3      	strb	r3, [r4, #14]

							strcat((char*)buf, "</body>");
 8001bf4:	6838      	ldr	r0, [r7, #0]
 8001bf6:	f7fe faab 	bl	8000150 <strlen>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	4911      	ldr	r1, [pc, #68]	; (8001c48 <tcp_http_mt+0x169c>)
 8001c04:	461a      	mov	r2, r3
 8001c06:	460b      	mov	r3, r1
 8001c08:	cb03      	ldmia	r3!, {r0, r1}
 8001c0a:	6010      	str	r0, [r2, #0]
 8001c0c:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8001c0e:	6838      	ldr	r0, [r7, #0]
 8001c10:	f7fe fa9e 	bl	8000150 <strlen>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	490b      	ldr	r1, [pc, #44]	; (8001c4c <tcp_http_mt+0x16a0>)
 8001c1e:	461a      	mov	r2, r3
 8001c20:	460b      	mov	r3, r1
 8001c22:	cb03      	ldmia	r3!, {r0, r1}
 8001c24:	6010      	str	r0, [r2, #0]
 8001c26:	6051      	str	r1, [r2, #4]
 8001c28:	f000 be37 	b.w	800289a <tcp_http_mt+0x22ee>
 8001c2c:	0800907c 	.word	0x0800907c
 8001c30:	08009090 	.word	0x08009090
 8001c34:	080090d8 	.word	0x080090d8
 8001c38:	0800903c 	.word	0x0800903c
 8001c3c:	0800905c 	.word	0x0800905c
 8001c40:	08009110 	.word	0x08009110
 8001c44:	0800913c 	.word	0x0800913c
 8001c48:	08008c18 	.word	0x08008c18
 8001c4c:	08008c20 	.word	0x08008c20
						}
						else if(strncmp("/entradas", url, 6) == 0){
 8001c50:	2206      	movs	r2, #6
 8001c52:	6939      	ldr	r1, [r7, #16]
 8001c54:	48a2      	ldr	r0, [pc, #648]	; (8001ee0 <tcp_http_mt+0x1934>)
 8001c56:	f006 fd34 	bl	80086c2 <strncmp>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 850b 	bne.w	8002678 <tcp_http_mt+0x20cc>
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	4a9f      	ldr	r2, [pc, #636]	; (8001ee4 <tcp_http_mt+0x1938>)
 8001c66:	4614      	mov	r4, r2
 8001c68:	469c      	mov	ip, r3
 8001c6a:	f104 0e20 	add.w	lr, r4, #32
 8001c6e:	4665      	mov	r5, ip
 8001c70:	4626      	mov	r6, r4
 8001c72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c74:	6028      	str	r0, [r5, #0]
 8001c76:	6069      	str	r1, [r5, #4]
 8001c78:	60aa      	str	r2, [r5, #8]
 8001c7a:	60eb      	str	r3, [r5, #12]
 8001c7c:	3410      	adds	r4, #16
 8001c7e:	f10c 0c10 	add.w	ip, ip, #16
 8001c82:	4574      	cmp	r4, lr
 8001c84:	d1f3      	bne.n	8001c6e <tcp_http_mt+0x16c2>
 8001c86:	4665      	mov	r5, ip
 8001c88:	4623      	mov	r3, r4
 8001c8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c8c:	6028      	str	r0, [r5, #0]
 8001c8e:	6069      	str	r1, [r5, #4]
 8001c90:	60aa      	str	r2, [r5, #8]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 8001c96:	6838      	ldr	r0, [r7, #0]
 8001c98:	f7fe fa5a 	bl	8000150 <strlen>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a90      	ldr	r2, [pc, #576]	; (8001ee8 <tcp_http_mt+0x193c>)
 8001ca6:	461c      	mov	r4, r3
 8001ca8:	4613      	mov	r3, r2
 8001caa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001cac:	6020      	str	r0, [r4, #0]
 8001cae:	6061      	str	r1, [r4, #4]
 8001cb0:	60a2      	str	r2, [r4, #8]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Escrava Config</title>");
 8001cb6:	6838      	ldr	r0, [r7, #0]
 8001cb8:	f7fe fa4a 	bl	8000150 <strlen>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a89      	ldr	r2, [pc, #548]	; (8001eec <tcp_http_mt+0x1940>)
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	4614      	mov	r4, r2
 8001cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ccc:	6028      	str	r0, [r5, #0]
 8001cce:	6069      	str	r1, [r5, #4]
 8001cd0:	60aa      	str	r2, [r5, #8]
 8001cd2:	60eb      	str	r3, [r5, #12]
 8001cd4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001cd6:	6128      	str	r0, [r5, #16]
 8001cd8:	6169      	str	r1, [r5, #20]
 8001cda:	61aa      	str	r2, [r5, #24]
 8001cdc:	8823      	ldrh	r3, [r4, #0]
 8001cde:	83ab      	strh	r3, [r5, #28]
							strcat((char*)buf, "<link href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css' rel='stylesheet'></link>");
 8001ce0:	6838      	ldr	r0, [r7, #0]
 8001ce2:	f7fe fa35 	bl	8000150 <strlen>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a80      	ldr	r2, [pc, #512]	; (8001ef0 <tcp_http_mt+0x1944>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	236c      	movs	r3, #108	; 0x6c
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f006 fcc3 	bl	8008682 <memcpy>
							strcat((char*)buf, "</head>");
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f7fe fa27 	bl	8000150 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	497a      	ldr	r1, [pc, #488]	; (8001ef4 <tcp_http_mt+0x1948>)
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	460b      	mov	r3, r1
 8001d10:	cb03      	ldmia	r3!, {r0, r1}
 8001d12:	6010      	str	r0, [r2, #0]
 8001d14:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 8001d16:	6838      	ldr	r0, [r7, #0]
 8001d18:	f7fe fa1a 	bl	8000150 <strlen>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	4a74      	ldr	r2, [pc, #464]	; (8001ef8 <tcp_http_mt+0x194c>)
 8001d26:	6810      	ldr	r0, [r2, #0]
 8001d28:	6018      	str	r0, [r3, #0]
 8001d2a:	8891      	ldrh	r1, [r2, #4]
 8001d2c:	7992      	ldrb	r2, [r2, #6]
 8001d2e:	8099      	strh	r1, [r3, #4]
 8001d30:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<div class = 'entradas'>");
 8001d32:	6838      	ldr	r0, [r7, #0]
 8001d34:	f7fe fa0c 	bl	8000150 <strlen>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a6e      	ldr	r2, [pc, #440]	; (8001efc <tcp_http_mt+0x1950>)
 8001d42:	461d      	mov	r5, r3
 8001d44:	4614      	mov	r4, r2
 8001d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d48:	6028      	str	r0, [r5, #0]
 8001d4a:	6069      	str	r1, [r5, #4]
 8001d4c:	60aa      	str	r2, [r5, #8]
 8001d4e:	60eb      	str	r3, [r5, #12]
 8001d50:	cc03      	ldmia	r4!, {r0, r1}
 8001d52:	6128      	str	r0, [r5, #16]
 8001d54:	6169      	str	r1, [r5, #20]
 8001d56:	7823      	ldrb	r3, [r4, #0]
 8001d58:	762b      	strb	r3, [r5, #24]

							strcat((char*)buf, "<b><center>Estado das Entradas</b> </center>");
 8001d5a:	6838      	ldr	r0, [r7, #0]
 8001d5c:	f7fe f9f8 	bl	8000150 <strlen>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a65      	ldr	r2, [pc, #404]	; (8001f00 <tcp_http_mt+0x1954>)
 8001d6a:	4614      	mov	r4, r2
 8001d6c:	469c      	mov	ip, r3
 8001d6e:	f104 0e20 	add.w	lr, r4, #32
 8001d72:	4665      	mov	r5, ip
 8001d74:	4626      	mov	r6, r4
 8001d76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d78:	6028      	str	r0, [r5, #0]
 8001d7a:	6069      	str	r1, [r5, #4]
 8001d7c:	60aa      	str	r2, [r5, #8]
 8001d7e:	60eb      	str	r3, [r5, #12]
 8001d80:	3410      	adds	r4, #16
 8001d82:	f10c 0c10 	add.w	ip, ip, #16
 8001d86:	4574      	cmp	r4, lr
 8001d88:	d1f3      	bne.n	8001d72 <tcp_http_mt+0x17c6>
 8001d8a:	4665      	mov	r5, ip
 8001d8c:	4623      	mov	r3, r4
 8001d8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001d90:	6028      	str	r0, [r5, #0]
 8001d92:	6069      	str	r1, [r5, #4]
 8001d94:	60aa      	str	r2, [r5, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<p></p>");
 8001d9a:	6838      	ldr	r0, [r7, #0]
 8001d9c:	f7fe f9d8 	bl	8000150 <strlen>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4956      	ldr	r1, [pc, #344]	; (8001f04 <tcp_http_mt+0x1958>)
 8001daa:	461a      	mov	r2, r3
 8001dac:	460b      	mov	r3, r1
 8001dae:	cb03      	ldmia	r3!, {r0, r1}
 8001db0:	6010      	str	r0, [r2, #0]
 8001db2:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<center><table border='1'>");
 8001db4:	6838      	ldr	r0, [r7, #0]
 8001db6:	f7fe f9cb 	bl	8000150 <strlen>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a51      	ldr	r2, [pc, #324]	; (8001f08 <tcp_http_mt+0x195c>)
 8001dc4:	461d      	mov	r5, r3
 8001dc6:	4614      	mov	r4, r2
 8001dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dca:	6028      	str	r0, [r5, #0]
 8001dcc:	6069      	str	r1, [r5, #4]
 8001dce:	60aa      	str	r2, [r5, #8]
 8001dd0:	60eb      	str	r3, [r5, #12]
 8001dd2:	cc03      	ldmia	r4!, {r0, r1}
 8001dd4:	6128      	str	r0, [r5, #16]
 8001dd6:	6169      	str	r1, [r5, #20]
 8001dd8:	8823      	ldrh	r3, [r4, #0]
 8001dda:	78a2      	ldrb	r2, [r4, #2]
 8001ddc:	832b      	strh	r3, [r5, #24]
 8001dde:	4613      	mov	r3, r2
 8001de0:	76ab      	strb	r3, [r5, #26]
							strcat((char*)buf, "<tr>");
 8001de2:	6838      	ldr	r0, [r7, #0]
 8001de4:	f7fe f9b4 	bl	8000150 <strlen>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a46      	ldr	r2, [pc, #280]	; (8001f0c <tcp_http_mt+0x1960>)
 8001df2:	6810      	ldr	r0, [r2, #0]
 8001df4:	6018      	str	r0, [r3, #0]
 8001df6:	7912      	ldrb	r2, [r2, #4]
 8001df8:	711a      	strb	r2, [r3, #4]
							strcat((char*)buf, "<td><b>Entrada Numero</b></td>");
 8001dfa:	6838      	ldr	r0, [r7, #0]
 8001dfc:	f7fe f9a8 	bl	8000150 <strlen>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a41      	ldr	r2, [pc, #260]	; (8001f10 <tcp_http_mt+0x1964>)
 8001e0a:	461d      	mov	r5, r3
 8001e0c:	4614      	mov	r4, r2
 8001e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e10:	6028      	str	r0, [r5, #0]
 8001e12:	6069      	str	r1, [r5, #4]
 8001e14:	60aa      	str	r2, [r5, #8]
 8001e16:	60eb      	str	r3, [r5, #12]
 8001e18:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001e1a:	6128      	str	r0, [r5, #16]
 8001e1c:	6169      	str	r1, [r5, #20]
 8001e1e:	61aa      	str	r2, [r5, #24]
 8001e20:	8823      	ldrh	r3, [r4, #0]
 8001e22:	78a2      	ldrb	r2, [r4, #2]
 8001e24:	83ab      	strh	r3, [r5, #28]
 8001e26:	4613      	mov	r3, r2
 8001e28:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "<td><b>Estado da entrada</b></td>");
 8001e2a:	6838      	ldr	r0, [r7, #0]
 8001e2c:	f7fe f990 	bl	8000150 <strlen>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a36      	ldr	r2, [pc, #216]	; (8001f14 <tcp_http_mt+0x1968>)
 8001e3a:	4614      	mov	r4, r2
 8001e3c:	469c      	mov	ip, r3
 8001e3e:	f104 0e20 	add.w	lr, r4, #32
 8001e42:	4665      	mov	r5, ip
 8001e44:	4626      	mov	r6, r4
 8001e46:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e48:	6028      	str	r0, [r5, #0]
 8001e4a:	6069      	str	r1, [r5, #4]
 8001e4c:	60aa      	str	r2, [r5, #8]
 8001e4e:	60eb      	str	r3, [r5, #12]
 8001e50:	3410      	adds	r4, #16
 8001e52:	f10c 0c10 	add.w	ip, ip, #16
 8001e56:	4574      	cmp	r4, lr
 8001e58:	d1f3      	bne.n	8001e42 <tcp_http_mt+0x1896>
 8001e5a:	4662      	mov	r2, ip
 8001e5c:	4623      	mov	r3, r4
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	8013      	strh	r3, [r2, #0]
							strcat((char*)buf, "</tr>");
 8001e62:	6838      	ldr	r0, [r7, #0]
 8001e64:	f7fe f974 	bl	8000150 <strlen>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a29      	ldr	r2, [pc, #164]	; (8001f18 <tcp_http_mt+0x196c>)
 8001e72:	6810      	ldr	r0, [r2, #0]
 8001e74:	6018      	str	r0, [r3, #0]
 8001e76:	8892      	ldrh	r2, [r2, #4]
 8001e78:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "<tr>");
 8001e7a:	6838      	ldr	r0, [r7, #0]
 8001e7c:	f7fe f968 	bl	8000150 <strlen>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <tcp_http_mt+0x1960>)
 8001e8a:	6810      	ldr	r0, [r2, #0]
 8001e8c:	6018      	str	r0, [r3, #0]
 8001e8e:	7912      	ldrb	r2, [r2, #4]
 8001e90:	711a      	strb	r2, [r3, #4]
							strcat((char*)buf, "<td><center>1</center></td>");
 8001e92:	6838      	ldr	r0, [r7, #0]
 8001e94:	f7fe f95c 	bl	8000150 <strlen>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <tcp_http_mt+0x1970>)
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	4614      	mov	r4, r2
 8001ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea8:	6028      	str	r0, [r5, #0]
 8001eaa:	6069      	str	r1, [r5, #4]
 8001eac:	60aa      	str	r2, [r5, #8]
 8001eae:	60eb      	str	r3, [r5, #12]
 8001eb0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001eb2:	6128      	str	r0, [r5, #16]
 8001eb4:	6169      	str	r1, [r5, #20]
 8001eb6:	61aa      	str	r2, [r5, #24]
							if(S1 == 1)
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <tcp_http_mt+0x1974>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d133      	bne.n	8001f28 <tcp_http_mt+0x197c>
								strcat((char*)buf, "<td><center><a href='/entradas/S1/OFF'>Fechado</a></center></td>");
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	f7fe f945 	bl	8000150 <strlen>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <tcp_http_mt+0x1978>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	2341      	movs	r3, #65	; 0x41
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f006 fbd3 	bl	8008682 <memcpy>
 8001edc:	e046      	b.n	8001f6c <tcp_http_mt+0x19c0>
 8001ede:	bf00      	nop
 8001ee0:	0800917c 	.word	0x0800917c
 8001ee4:	080088d0 	.word	0x080088d0
 8001ee8:	08008900 	.word	0x08008900
 8001eec:	08008910 	.word	0x08008910
 8001ef0:	08008930 	.word	0x08008930
 8001ef4:	0800899c 	.word	0x0800899c
 8001ef8:	080089a4 	.word	0x080089a4
 8001efc:	08009188 	.word	0x08009188
 8001f00:	080091a4 	.word	0x080091a4
 8001f04:	08008a2c 	.word	0x08008a2c
 8001f08:	08008c60 	.word	0x08008c60
 8001f0c:	080091d4 	.word	0x080091d4
 8001f10:	080091dc 	.word	0x080091dc
 8001f14:	080091fc 	.word	0x080091fc
 8001f18:	08009220 	.word	0x08009220
 8001f1c:	08009228 	.word	0x08009228
 8001f20:	2000006c 	.word	0x2000006c
 8001f24:	08009244 	.word	0x08009244
							else
								strcat((char*)buf, "<td><center><a href='/entradas/S1/ON'>Aberto</a></center></td>");
 8001f28:	6838      	ldr	r0, [r7, #0]
 8001f2a:	f7fe f911 	bl	8000150 <strlen>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	461a      	mov	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	4abc      	ldr	r2, [pc, #752]	; (8002228 <tcp_http_mt+0x1c7c>)
 8001f38:	4615      	mov	r5, r2
 8001f3a:	469c      	mov	ip, r3
 8001f3c:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001f40:	4664      	mov	r4, ip
 8001f42:	462e      	mov	r6, r5
 8001f44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001f46:	6020      	str	r0, [r4, #0]
 8001f48:	6061      	str	r1, [r4, #4]
 8001f4a:	60a2      	str	r2, [r4, #8]
 8001f4c:	60e3      	str	r3, [r4, #12]
 8001f4e:	3510      	adds	r5, #16
 8001f50:	f10c 0c10 	add.w	ip, ip, #16
 8001f54:	4575      	cmp	r5, lr
 8001f56:	d1f3      	bne.n	8001f40 <tcp_http_mt+0x1994>
 8001f58:	4664      	mov	r4, ip
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001f5e:	6020      	str	r0, [r4, #0]
 8001f60:	6061      	str	r1, [r4, #4]
 8001f62:	60a2      	str	r2, [r4, #8]
 8001f64:	881a      	ldrh	r2, [r3, #0]
 8001f66:	789b      	ldrb	r3, [r3, #2]
 8001f68:	81a2      	strh	r2, [r4, #12]
 8001f6a:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "</tr>");
 8001f6c:	6838      	ldr	r0, [r7, #0]
 8001f6e:	f7fe f8ef 	bl	8000150 <strlen>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4aac      	ldr	r2, [pc, #688]	; (800222c <tcp_http_mt+0x1c80>)
 8001f7c:	6810      	ldr	r0, [r2, #0]
 8001f7e:	6018      	str	r0, [r3, #0]
 8001f80:	8892      	ldrh	r2, [r2, #4]
 8001f82:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "<tr>");
 8001f84:	6838      	ldr	r0, [r7, #0]
 8001f86:	f7fe f8e3 	bl	8000150 <strlen>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	4413      	add	r3, r2
 8001f92:	4aa7      	ldr	r2, [pc, #668]	; (8002230 <tcp_http_mt+0x1c84>)
 8001f94:	6810      	ldr	r0, [r2, #0]
 8001f96:	6018      	str	r0, [r3, #0]
 8001f98:	7912      	ldrb	r2, [r2, #4]
 8001f9a:	711a      	strb	r2, [r3, #4]
							strcat((char*)buf, "<td><center>2</center></td>");
 8001f9c:	6838      	ldr	r0, [r7, #0]
 8001f9e:	f7fe f8d7 	bl	8000150 <strlen>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4aa2      	ldr	r2, [pc, #648]	; (8002234 <tcp_http_mt+0x1c88>)
 8001fac:	461d      	mov	r5, r3
 8001fae:	4614      	mov	r4, r2
 8001fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb2:	6028      	str	r0, [r5, #0]
 8001fb4:	6069      	str	r1, [r5, #4]
 8001fb6:	60aa      	str	r2, [r5, #8]
 8001fb8:	60eb      	str	r3, [r5, #12]
 8001fba:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001fbc:	6128      	str	r0, [r5, #16]
 8001fbe:	6169      	str	r1, [r5, #20]
 8001fc0:	61aa      	str	r2, [r5, #24]
							if(S2 == 1)
 8001fc2:	4b9d      	ldr	r3, [pc, #628]	; (8002238 <tcp_http_mt+0x1c8c>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10e      	bne.n	8001fe8 <tcp_http_mt+0x1a3c>
								strcat((char*)buf, "<td><center><a href='/entradas/S2/OFF'>Fechado</a></center></td>");
 8001fca:	6838      	ldr	r0, [r7, #0]
 8001fcc:	f7fe f8c0 	bl	8000150 <strlen>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a98      	ldr	r2, [pc, #608]	; (800223c <tcp_http_mt+0x1c90>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	4611      	mov	r1, r2
 8001fde:	2341      	movs	r3, #65	; 0x41
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f006 fb4e 	bl	8008682 <memcpy>
 8001fe6:	e021      	b.n	800202c <tcp_http_mt+0x1a80>
							else
								strcat((char*)buf, "<td><center><a href='/entradas/S2/ON'>Aberto</a></center></td>");
 8001fe8:	6838      	ldr	r0, [r7, #0]
 8001fea:	f7fe f8b1 	bl	8000150 <strlen>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a92      	ldr	r2, [pc, #584]	; (8002240 <tcp_http_mt+0x1c94>)
 8001ff8:	4615      	mov	r5, r2
 8001ffa:	469c      	mov	ip, r3
 8001ffc:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8002000:	4664      	mov	r4, ip
 8002002:	462e      	mov	r6, r5
 8002004:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002006:	6020      	str	r0, [r4, #0]
 8002008:	6061      	str	r1, [r4, #4]
 800200a:	60a2      	str	r2, [r4, #8]
 800200c:	60e3      	str	r3, [r4, #12]
 800200e:	3510      	adds	r5, #16
 8002010:	f10c 0c10 	add.w	ip, ip, #16
 8002014:	4575      	cmp	r5, lr
 8002016:	d1f3      	bne.n	8002000 <tcp_http_mt+0x1a54>
 8002018:	4664      	mov	r4, ip
 800201a:	462b      	mov	r3, r5
 800201c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800201e:	6020      	str	r0, [r4, #0]
 8002020:	6061      	str	r1, [r4, #4]
 8002022:	60a2      	str	r2, [r4, #8]
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	789b      	ldrb	r3, [r3, #2]
 8002028:	81a2      	strh	r2, [r4, #12]
 800202a:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "</tr>");
 800202c:	6838      	ldr	r0, [r7, #0]
 800202e:	f7fe f88f 	bl	8000150 <strlen>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	4413      	add	r3, r2
 800203a:	4a7c      	ldr	r2, [pc, #496]	; (800222c <tcp_http_mt+0x1c80>)
 800203c:	6810      	ldr	r0, [r2, #0]
 800203e:	6018      	str	r0, [r3, #0]
 8002040:	8892      	ldrh	r2, [r2, #4]
 8002042:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "<tr>");
 8002044:	6838      	ldr	r0, [r7, #0]
 8002046:	f7fe f883 	bl	8000150 <strlen>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	4413      	add	r3, r2
 8002052:	4a77      	ldr	r2, [pc, #476]	; (8002230 <tcp_http_mt+0x1c84>)
 8002054:	6810      	ldr	r0, [r2, #0]
 8002056:	6018      	str	r0, [r3, #0]
 8002058:	7912      	ldrb	r2, [r2, #4]
 800205a:	711a      	strb	r2, [r3, #4]
							strcat((char*)buf, "<td><center>3</center></td>");
 800205c:	6838      	ldr	r0, [r7, #0]
 800205e:	f7fe f877 	bl	8000150 <strlen>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	4413      	add	r3, r2
 800206a:	4a76      	ldr	r2, [pc, #472]	; (8002244 <tcp_http_mt+0x1c98>)
 800206c:	461d      	mov	r5, r3
 800206e:	4614      	mov	r4, r2
 8002070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002072:	6028      	str	r0, [r5, #0]
 8002074:	6069      	str	r1, [r5, #4]
 8002076:	60aa      	str	r2, [r5, #8]
 8002078:	60eb      	str	r3, [r5, #12]
 800207a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800207c:	6128      	str	r0, [r5, #16]
 800207e:	6169      	str	r1, [r5, #20]
 8002080:	61aa      	str	r2, [r5, #24]
							if(S3 == 1)
 8002082:	4b71      	ldr	r3, [pc, #452]	; (8002248 <tcp_http_mt+0x1c9c>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10e      	bne.n	80020a8 <tcp_http_mt+0x1afc>
								strcat((char*)buf, "<td><center><a href='/entradas/S3/OFF'>Fechado</a></center></td>");
 800208a:	6838      	ldr	r0, [r7, #0]
 800208c:	f7fe f860 	bl	8000150 <strlen>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a6c      	ldr	r2, [pc, #432]	; (800224c <tcp_http_mt+0x1ca0>)
 800209a:	4618      	mov	r0, r3
 800209c:	4611      	mov	r1, r2
 800209e:	2341      	movs	r3, #65	; 0x41
 80020a0:	461a      	mov	r2, r3
 80020a2:	f006 faee 	bl	8008682 <memcpy>
 80020a6:	e021      	b.n	80020ec <tcp_http_mt+0x1b40>
							else
								strcat((char*)buf, "<td><center><a href='/entradas/S3/ON'>Aberto</a></center></td>");
 80020a8:	6838      	ldr	r0, [r7, #0]
 80020aa:	f7fe f851 	bl	8000150 <strlen>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	4413      	add	r3, r2
 80020b6:	4a66      	ldr	r2, [pc, #408]	; (8002250 <tcp_http_mt+0x1ca4>)
 80020b8:	4615      	mov	r5, r2
 80020ba:	469c      	mov	ip, r3
 80020bc:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80020c0:	4664      	mov	r4, ip
 80020c2:	462e      	mov	r6, r5
 80020c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80020c6:	6020      	str	r0, [r4, #0]
 80020c8:	6061      	str	r1, [r4, #4]
 80020ca:	60a2      	str	r2, [r4, #8]
 80020cc:	60e3      	str	r3, [r4, #12]
 80020ce:	3510      	adds	r5, #16
 80020d0:	f10c 0c10 	add.w	ip, ip, #16
 80020d4:	4575      	cmp	r5, lr
 80020d6:	d1f3      	bne.n	80020c0 <tcp_http_mt+0x1b14>
 80020d8:	4664      	mov	r4, ip
 80020da:	462b      	mov	r3, r5
 80020dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020de:	6020      	str	r0, [r4, #0]
 80020e0:	6061      	str	r1, [r4, #4]
 80020e2:	60a2      	str	r2, [r4, #8]
 80020e4:	881a      	ldrh	r2, [r3, #0]
 80020e6:	789b      	ldrb	r3, [r3, #2]
 80020e8:	81a2      	strh	r2, [r4, #12]
 80020ea:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "</tr>");
 80020ec:	6838      	ldr	r0, [r7, #0]
 80020ee:	f7fe f82f 	bl	8000150 <strlen>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	4a4c      	ldr	r2, [pc, #304]	; (800222c <tcp_http_mt+0x1c80>)
 80020fc:	6810      	ldr	r0, [r2, #0]
 80020fe:	6018      	str	r0, [r3, #0]
 8002100:	8892      	ldrh	r2, [r2, #4]
 8002102:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "<tr>");
 8002104:	6838      	ldr	r0, [r7, #0]
 8002106:	f7fe f823 	bl	8000150 <strlen>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	4413      	add	r3, r2
 8002112:	4a47      	ldr	r2, [pc, #284]	; (8002230 <tcp_http_mt+0x1c84>)
 8002114:	6810      	ldr	r0, [r2, #0]
 8002116:	6018      	str	r0, [r3, #0]
 8002118:	7912      	ldrb	r2, [r2, #4]
 800211a:	711a      	strb	r2, [r3, #4]
							strcat((char*)buf, "<td><center>4</center></td>");
 800211c:	6838      	ldr	r0, [r7, #0]
 800211e:	f7fe f817 	bl	8000150 <strlen>
 8002122:	4603      	mov	r3, r0
 8002124:	461a      	mov	r2, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	4413      	add	r3, r2
 800212a:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <tcp_http_mt+0x1ca8>)
 800212c:	461d      	mov	r5, r3
 800212e:	4614      	mov	r4, r2
 8002130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002132:	6028      	str	r0, [r5, #0]
 8002134:	6069      	str	r1, [r5, #4]
 8002136:	60aa      	str	r2, [r5, #8]
 8002138:	60eb      	str	r3, [r5, #12]
 800213a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800213c:	6128      	str	r0, [r5, #16]
 800213e:	6169      	str	r1, [r5, #20]
 8002140:	61aa      	str	r2, [r5, #24]
							if(S4 == 1)
 8002142:	4b45      	ldr	r3, [pc, #276]	; (8002258 <tcp_http_mt+0x1cac>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10e      	bne.n	8002168 <tcp_http_mt+0x1bbc>
								strcat((char*)buf, "<td><center><a href='/entradas/S4/OFF'>Fechado</a></center></td>");
 800214a:	6838      	ldr	r0, [r7, #0]
 800214c:	f7fe f800 	bl	8000150 <strlen>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4413      	add	r3, r2
 8002158:	4a40      	ldr	r2, [pc, #256]	; (800225c <tcp_http_mt+0x1cb0>)
 800215a:	4618      	mov	r0, r3
 800215c:	4611      	mov	r1, r2
 800215e:	2341      	movs	r3, #65	; 0x41
 8002160:	461a      	mov	r2, r3
 8002162:	f006 fa8e 	bl	8008682 <memcpy>
 8002166:	e021      	b.n	80021ac <tcp_http_mt+0x1c00>
							else
								strcat((char*)buf, "<td><center><a href='/entradas/S4/ON'>Aberto</a></center></td>");
 8002168:	6838      	ldr	r0, [r7, #0]
 800216a:	f7fd fff1 	bl	8000150 <strlen>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	4413      	add	r3, r2
 8002176:	4a3a      	ldr	r2, [pc, #232]	; (8002260 <tcp_http_mt+0x1cb4>)
 8002178:	4615      	mov	r5, r2
 800217a:	469c      	mov	ip, r3
 800217c:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8002180:	4664      	mov	r4, ip
 8002182:	462e      	mov	r6, r5
 8002184:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002186:	6020      	str	r0, [r4, #0]
 8002188:	6061      	str	r1, [r4, #4]
 800218a:	60a2      	str	r2, [r4, #8]
 800218c:	60e3      	str	r3, [r4, #12]
 800218e:	3510      	adds	r5, #16
 8002190:	f10c 0c10 	add.w	ip, ip, #16
 8002194:	4575      	cmp	r5, lr
 8002196:	d1f3      	bne.n	8002180 <tcp_http_mt+0x1bd4>
 8002198:	4664      	mov	r4, ip
 800219a:	462b      	mov	r3, r5
 800219c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800219e:	6020      	str	r0, [r4, #0]
 80021a0:	6061      	str	r1, [r4, #4]
 80021a2:	60a2      	str	r2, [r4, #8]
 80021a4:	881a      	ldrh	r2, [r3, #0]
 80021a6:	789b      	ldrb	r3, [r3, #2]
 80021a8:	81a2      	strh	r2, [r4, #12]
 80021aa:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "</tr>");
 80021ac:	6838      	ldr	r0, [r7, #0]
 80021ae:	f7fd ffcf 	bl	8000150 <strlen>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461a      	mov	r2, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <tcp_http_mt+0x1c80>)
 80021bc:	6810      	ldr	r0, [r2, #0]
 80021be:	6018      	str	r0, [r3, #0]
 80021c0:	8892      	ldrh	r2, [r2, #4]
 80021c2:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "<tr>");
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	f7fd ffc3 	bl	8000150 <strlen>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	4413      	add	r3, r2
 80021d2:	4a17      	ldr	r2, [pc, #92]	; (8002230 <tcp_http_mt+0x1c84>)
 80021d4:	6810      	ldr	r0, [r2, #0]
 80021d6:	6018      	str	r0, [r3, #0]
 80021d8:	7912      	ldrb	r2, [r2, #4]
 80021da:	711a      	strb	r2, [r3, #4]
							strcat((char*)buf, "<td><center>5</center></td>");
 80021dc:	6838      	ldr	r0, [r7, #0]
 80021de:	f7fd ffb7 	bl	8000150 <strlen>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <tcp_http_mt+0x1cb8>)
 80021ec:	461d      	mov	r5, r3
 80021ee:	4614      	mov	r4, r2
 80021f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f2:	6028      	str	r0, [r5, #0]
 80021f4:	6069      	str	r1, [r5, #4]
 80021f6:	60aa      	str	r2, [r5, #8]
 80021f8:	60eb      	str	r3, [r5, #12]
 80021fa:	cc07      	ldmia	r4!, {r0, r1, r2}
 80021fc:	6128      	str	r0, [r5, #16]
 80021fe:	6169      	str	r1, [r5, #20]
 8002200:	61aa      	str	r2, [r5, #24]
							if(S5 == 1)
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <tcp_http_mt+0x1cbc>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d132      	bne.n	8002270 <tcp_http_mt+0x1cc4>
								strcat((char*)buf, "<td><center><a href='/entradas/S5/OFF'>Fechado</a></center></td>");
 800220a:	6838      	ldr	r0, [r7, #0]
 800220c:	f7fd ffa0 	bl	8000150 <strlen>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4413      	add	r3, r2
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <tcp_http_mt+0x1cc0>)
 800221a:	4618      	mov	r0, r3
 800221c:	4611      	mov	r1, r2
 800221e:	2341      	movs	r3, #65	; 0x41
 8002220:	461a      	mov	r2, r3
 8002222:	f006 fa2e 	bl	8008682 <memcpy>
 8002226:	e045      	b.n	80022b4 <tcp_http_mt+0x1d08>
 8002228:	08009288 	.word	0x08009288
 800222c:	08009220 	.word	0x08009220
 8002230:	080091d4 	.word	0x080091d4
 8002234:	080092c8 	.word	0x080092c8
 8002238:	2000006d 	.word	0x2000006d
 800223c:	080092e4 	.word	0x080092e4
 8002240:	08009328 	.word	0x08009328
 8002244:	08009368 	.word	0x08009368
 8002248:	2000006e 	.word	0x2000006e
 800224c:	08009384 	.word	0x08009384
 8002250:	080093c8 	.word	0x080093c8
 8002254:	08009408 	.word	0x08009408
 8002258:	2000006f 	.word	0x2000006f
 800225c:	08009424 	.word	0x08009424
 8002260:	08009468 	.word	0x08009468
 8002264:	080094a8 	.word	0x080094a8
 8002268:	20000070 	.word	0x20000070
 800226c:	080094c4 	.word	0x080094c4
							else
								strcat((char*)buf, "<td><center><a href='/entradas/S5/ON'>Aberto</a></center></td>");
 8002270:	6838      	ldr	r0, [r7, #0]
 8002272:	f7fd ff6d 	bl	8000150 <strlen>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	4413      	add	r3, r2
 800227e:	4a8c      	ldr	r2, [pc, #560]	; (80024b0 <tcp_http_mt+0x1f04>)
 8002280:	4615      	mov	r5, r2
 8002282:	469c      	mov	ip, r3
 8002284:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8002288:	4664      	mov	r4, ip
 800228a:	462e      	mov	r6, r5
 800228c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800228e:	6020      	str	r0, [r4, #0]
 8002290:	6061      	str	r1, [r4, #4]
 8002292:	60a2      	str	r2, [r4, #8]
 8002294:	60e3      	str	r3, [r4, #12]
 8002296:	3510      	adds	r5, #16
 8002298:	f10c 0c10 	add.w	ip, ip, #16
 800229c:	4575      	cmp	r5, lr
 800229e:	d1f3      	bne.n	8002288 <tcp_http_mt+0x1cdc>
 80022a0:	4664      	mov	r4, ip
 80022a2:	462b      	mov	r3, r5
 80022a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80022a6:	6020      	str	r0, [r4, #0]
 80022a8:	6061      	str	r1, [r4, #4]
 80022aa:	60a2      	str	r2, [r4, #8]
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	789b      	ldrb	r3, [r3, #2]
 80022b0:	81a2      	strh	r2, [r4, #12]
 80022b2:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "</tr>");
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	f7fd ff4b 	bl	8000150 <strlen>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	4a7c      	ldr	r2, [pc, #496]	; (80024b4 <tcp_http_mt+0x1f08>)
 80022c4:	6810      	ldr	r0, [r2, #0]
 80022c6:	6018      	str	r0, [r3, #0]
 80022c8:	8892      	ldrh	r2, [r2, #4]
 80022ca:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "<tr>");
 80022cc:	6838      	ldr	r0, [r7, #0]
 80022ce:	f7fd ff3f 	bl	8000150 <strlen>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	4a77      	ldr	r2, [pc, #476]	; (80024b8 <tcp_http_mt+0x1f0c>)
 80022dc:	6810      	ldr	r0, [r2, #0]
 80022de:	6018      	str	r0, [r3, #0]
 80022e0:	7912      	ldrb	r2, [r2, #4]
 80022e2:	711a      	strb	r2, [r3, #4]
							strcat((char*)buf, "<td><center>6</center></td>");
 80022e4:	6838      	ldr	r0, [r7, #0]
 80022e6:	f7fd ff33 	bl	8000150 <strlen>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461a      	mov	r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a72      	ldr	r2, [pc, #456]	; (80024bc <tcp_http_mt+0x1f10>)
 80022f4:	461d      	mov	r5, r3
 80022f6:	4614      	mov	r4, r2
 80022f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fa:	6028      	str	r0, [r5, #0]
 80022fc:	6069      	str	r1, [r5, #4]
 80022fe:	60aa      	str	r2, [r5, #8]
 8002300:	60eb      	str	r3, [r5, #12]
 8002302:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002304:	6128      	str	r0, [r5, #16]
 8002306:	6169      	str	r1, [r5, #20]
 8002308:	61aa      	str	r2, [r5, #24]
							if(S6 == 1)
 800230a:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <tcp_http_mt+0x1f14>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d10e      	bne.n	8002330 <tcp_http_mt+0x1d84>
								strcat((char*)buf, "<td><center><a href='/entradas/S6/OFF'>Fechado</a></center></td>");
 8002312:	6838      	ldr	r0, [r7, #0]
 8002314:	f7fd ff1c 	bl	8000150 <strlen>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a68      	ldr	r2, [pc, #416]	; (80024c4 <tcp_http_mt+0x1f18>)
 8002322:	4618      	mov	r0, r3
 8002324:	4611      	mov	r1, r2
 8002326:	2341      	movs	r3, #65	; 0x41
 8002328:	461a      	mov	r2, r3
 800232a:	f006 f9aa 	bl	8008682 <memcpy>
 800232e:	e021      	b.n	8002374 <tcp_http_mt+0x1dc8>
							else
								strcat((char*)buf, "<td><center><a href='/entradas/S6/ON'>Aberto</a></center></td>");
 8002330:	6838      	ldr	r0, [r7, #0]
 8002332:	f7fd ff0d 	bl	8000150 <strlen>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	4413      	add	r3, r2
 800233e:	4a62      	ldr	r2, [pc, #392]	; (80024c8 <tcp_http_mt+0x1f1c>)
 8002340:	4615      	mov	r5, r2
 8002342:	469c      	mov	ip, r3
 8002344:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8002348:	4664      	mov	r4, ip
 800234a:	462e      	mov	r6, r5
 800234c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800234e:	6020      	str	r0, [r4, #0]
 8002350:	6061      	str	r1, [r4, #4]
 8002352:	60a2      	str	r2, [r4, #8]
 8002354:	60e3      	str	r3, [r4, #12]
 8002356:	3510      	adds	r5, #16
 8002358:	f10c 0c10 	add.w	ip, ip, #16
 800235c:	4575      	cmp	r5, lr
 800235e:	d1f3      	bne.n	8002348 <tcp_http_mt+0x1d9c>
 8002360:	4664      	mov	r4, ip
 8002362:	462b      	mov	r3, r5
 8002364:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002366:	6020      	str	r0, [r4, #0]
 8002368:	6061      	str	r1, [r4, #4]
 800236a:	60a2      	str	r2, [r4, #8]
 800236c:	881a      	ldrh	r2, [r3, #0]
 800236e:	789b      	ldrb	r3, [r3, #2]
 8002370:	81a2      	strh	r2, [r4, #12]
 8002372:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "</tr>");
 8002374:	6838      	ldr	r0, [r7, #0]
 8002376:	f7fd feeb 	bl	8000150 <strlen>
 800237a:	4603      	mov	r3, r0
 800237c:	461a      	mov	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	4413      	add	r3, r2
 8002382:	4a4c      	ldr	r2, [pc, #304]	; (80024b4 <tcp_http_mt+0x1f08>)
 8002384:	6810      	ldr	r0, [r2, #0]
 8002386:	6018      	str	r0, [r3, #0]
 8002388:	8892      	ldrh	r2, [r2, #4]
 800238a:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "<tr>");
 800238c:	6838      	ldr	r0, [r7, #0]
 800238e:	f7fd fedf 	bl	8000150 <strlen>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	4413      	add	r3, r2
 800239a:	4a47      	ldr	r2, [pc, #284]	; (80024b8 <tcp_http_mt+0x1f0c>)
 800239c:	6810      	ldr	r0, [r2, #0]
 800239e:	6018      	str	r0, [r3, #0]
 80023a0:	7912      	ldrb	r2, [r2, #4]
 80023a2:	711a      	strb	r2, [r3, #4]
							strcat((char*)buf, "<td><center>7</center></td>");
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f7fd fed3 	bl	8000150 <strlen>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a46      	ldr	r2, [pc, #280]	; (80024cc <tcp_http_mt+0x1f20>)
 80023b4:	461d      	mov	r5, r3
 80023b6:	4614      	mov	r4, r2
 80023b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ba:	6028      	str	r0, [r5, #0]
 80023bc:	6069      	str	r1, [r5, #4]
 80023be:	60aa      	str	r2, [r5, #8]
 80023c0:	60eb      	str	r3, [r5, #12]
 80023c2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80023c4:	6128      	str	r0, [r5, #16]
 80023c6:	6169      	str	r1, [r5, #20]
 80023c8:	61aa      	str	r2, [r5, #24]
							if(S7 == 1)
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <tcp_http_mt+0x1f24>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10e      	bne.n	80023f0 <tcp_http_mt+0x1e44>
								strcat((char*)buf, "<td><center><a href='/entradas/S7/OFF'>Fechado</a></center></td>");
 80023d2:	6838      	ldr	r0, [r7, #0]
 80023d4:	f7fd febc 	bl	8000150 <strlen>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	4a3c      	ldr	r2, [pc, #240]	; (80024d4 <tcp_http_mt+0x1f28>)
 80023e2:	4618      	mov	r0, r3
 80023e4:	4611      	mov	r1, r2
 80023e6:	2341      	movs	r3, #65	; 0x41
 80023e8:	461a      	mov	r2, r3
 80023ea:	f006 f94a 	bl	8008682 <memcpy>
 80023ee:	e021      	b.n	8002434 <tcp_http_mt+0x1e88>
							else
								strcat((char*)buf, "<td><center><a href='/entradas/S7/ON'>Aberto</a></center></td>");
 80023f0:	6838      	ldr	r0, [r7, #0]
 80023f2:	f7fd fead 	bl	8000150 <strlen>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	4a36      	ldr	r2, [pc, #216]	; (80024d8 <tcp_http_mt+0x1f2c>)
 8002400:	4615      	mov	r5, r2
 8002402:	469c      	mov	ip, r3
 8002404:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8002408:	4664      	mov	r4, ip
 800240a:	462e      	mov	r6, r5
 800240c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800240e:	6020      	str	r0, [r4, #0]
 8002410:	6061      	str	r1, [r4, #4]
 8002412:	60a2      	str	r2, [r4, #8]
 8002414:	60e3      	str	r3, [r4, #12]
 8002416:	3510      	adds	r5, #16
 8002418:	f10c 0c10 	add.w	ip, ip, #16
 800241c:	4575      	cmp	r5, lr
 800241e:	d1f3      	bne.n	8002408 <tcp_http_mt+0x1e5c>
 8002420:	4664      	mov	r4, ip
 8002422:	462b      	mov	r3, r5
 8002424:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002426:	6020      	str	r0, [r4, #0]
 8002428:	6061      	str	r1, [r4, #4]
 800242a:	60a2      	str	r2, [r4, #8]
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	789b      	ldrb	r3, [r3, #2]
 8002430:	81a2      	strh	r2, [r4, #12]
 8002432:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "</tr>");
 8002434:	6838      	ldr	r0, [r7, #0]
 8002436:	f7fd fe8b 	bl	8000150 <strlen>
 800243a:	4603      	mov	r3, r0
 800243c:	461a      	mov	r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	4413      	add	r3, r2
 8002442:	4a1c      	ldr	r2, [pc, #112]	; (80024b4 <tcp_http_mt+0x1f08>)
 8002444:	6810      	ldr	r0, [r2, #0]
 8002446:	6018      	str	r0, [r3, #0]
 8002448:	8892      	ldrh	r2, [r2, #4]
 800244a:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "<tr>");
 800244c:	6838      	ldr	r0, [r7, #0]
 800244e:	f7fd fe7f 	bl	8000150 <strlen>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	4413      	add	r3, r2
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <tcp_http_mt+0x1f0c>)
 800245c:	6810      	ldr	r0, [r2, #0]
 800245e:	6018      	str	r0, [r3, #0]
 8002460:	7912      	ldrb	r2, [r2, #4]
 8002462:	711a      	strb	r2, [r3, #4]
							strcat((char*)buf, "<td><center>8</center></td>");
 8002464:	6838      	ldr	r0, [r7, #0]
 8002466:	f7fd fe73 	bl	8000150 <strlen>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	4413      	add	r3, r2
 8002472:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <tcp_http_mt+0x1f30>)
 8002474:	461d      	mov	r5, r3
 8002476:	4614      	mov	r4, r2
 8002478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247a:	6028      	str	r0, [r5, #0]
 800247c:	6069      	str	r1, [r5, #4]
 800247e:	60aa      	str	r2, [r5, #8]
 8002480:	60eb      	str	r3, [r5, #12]
 8002482:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002484:	6128      	str	r0, [r5, #16]
 8002486:	6169      	str	r1, [r5, #20]
 8002488:	61aa      	str	r2, [r5, #24]
							if(S8 == 1)
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <tcp_http_mt+0x1f34>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d12a      	bne.n	80024e8 <tcp_http_mt+0x1f3c>
								strcat((char*)buf, "<td><center><a href='/entradas/S8/OFF'>Fechado</a></center></td>");
 8002492:	6838      	ldr	r0, [r7, #0]
 8002494:	f7fd fe5c 	bl	8000150 <strlen>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <tcp_http_mt+0x1f38>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	4611      	mov	r1, r2
 80024a6:	2341      	movs	r3, #65	; 0x41
 80024a8:	461a      	mov	r2, r3
 80024aa:	f006 f8ea 	bl	8008682 <memcpy>
 80024ae:	e03d      	b.n	800252c <tcp_http_mt+0x1f80>
 80024b0:	08009508 	.word	0x08009508
 80024b4:	08009220 	.word	0x08009220
 80024b8:	080091d4 	.word	0x080091d4
 80024bc:	08009548 	.word	0x08009548
 80024c0:	20000071 	.word	0x20000071
 80024c4:	08009564 	.word	0x08009564
 80024c8:	080095a8 	.word	0x080095a8
 80024cc:	080095e8 	.word	0x080095e8
 80024d0:	20000072 	.word	0x20000072
 80024d4:	08009604 	.word	0x08009604
 80024d8:	08009648 	.word	0x08009648
 80024dc:	08009688 	.word	0x08009688
 80024e0:	20000073 	.word	0x20000073
 80024e4:	080096a4 	.word	0x080096a4
							else
								strcat((char*)buf, "<td><center><a href='/entradas/S8/ON'>Aberto</a></center></td>");
 80024e8:	6838      	ldr	r0, [r7, #0]
 80024ea:	f7fd fe31 	bl	8000150 <strlen>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461a      	mov	r2, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a56      	ldr	r2, [pc, #344]	; (8002650 <tcp_http_mt+0x20a4>)
 80024f8:	4615      	mov	r5, r2
 80024fa:	469c      	mov	ip, r3
 80024fc:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8002500:	4664      	mov	r4, ip
 8002502:	462e      	mov	r6, r5
 8002504:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002506:	6020      	str	r0, [r4, #0]
 8002508:	6061      	str	r1, [r4, #4]
 800250a:	60a2      	str	r2, [r4, #8]
 800250c:	60e3      	str	r3, [r4, #12]
 800250e:	3510      	adds	r5, #16
 8002510:	f10c 0c10 	add.w	ip, ip, #16
 8002514:	4575      	cmp	r5, lr
 8002516:	d1f3      	bne.n	8002500 <tcp_http_mt+0x1f54>
 8002518:	4664      	mov	r4, ip
 800251a:	462b      	mov	r3, r5
 800251c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800251e:	6020      	str	r0, [r4, #0]
 8002520:	6061      	str	r1, [r4, #4]
 8002522:	60a2      	str	r2, [r4, #8]
 8002524:	881a      	ldrh	r2, [r3, #0]
 8002526:	789b      	ldrb	r3, [r3, #2]
 8002528:	81a2      	strh	r2, [r4, #12]
 800252a:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "</tr>");
 800252c:	6838      	ldr	r0, [r7, #0]
 800252e:	f7fd fe0f 	bl	8000150 <strlen>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	4a46      	ldr	r2, [pc, #280]	; (8002654 <tcp_http_mt+0x20a8>)
 800253c:	6810      	ldr	r0, [r2, #0]
 800253e:	6018      	str	r0, [r3, #0]
 8002540:	8892      	ldrh	r2, [r2, #4]
 8002542:	809a      	strh	r2, [r3, #4]
							strcat((char*)buf, "</table></center>");
 8002544:	6838      	ldr	r0, [r7, #0]
 8002546:	f7fd fe03 	bl	8000150 <strlen>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	4413      	add	r3, r2
 8002552:	4a41      	ldr	r2, [pc, #260]	; (8002658 <tcp_http_mt+0x20ac>)
 8002554:	461d      	mov	r5, r3
 8002556:	4614      	mov	r4, r2
 8002558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800255a:	6028      	str	r0, [r5, #0]
 800255c:	6069      	str	r1, [r5, #4]
 800255e:	60aa      	str	r2, [r5, #8]
 8002560:	60eb      	str	r3, [r5, #12]
 8002562:	8823      	ldrh	r3, [r4, #0]
 8002564:	822b      	strh	r3, [r5, #16]
							strcat((char*)buf, "<p></p>");
 8002566:	6838      	ldr	r0, [r7, #0]
 8002568:	f7fd fdf2 	bl	8000150 <strlen>
 800256c:	4603      	mov	r3, r0
 800256e:	461a      	mov	r2, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4939      	ldr	r1, [pc, #228]	; (800265c <tcp_http_mt+0x20b0>)
 8002576:	461a      	mov	r2, r3
 8002578:	460b      	mov	r3, r1
 800257a:	cb03      	ldmia	r3!, {r0, r1}
 800257c:	6010      	str	r0, [r2, #0]
 800257e:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<center>");
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	f7fd fde5 	bl	8000150 <strlen>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	4413      	add	r3, r2
 800258e:	4934      	ldr	r1, [pc, #208]	; (8002660 <tcp_http_mt+0x20b4>)
 8002590:	461a      	mov	r2, r3
 8002592:	460b      	mov	r3, r1
 8002594:	cb03      	ldmia	r3!, {r0, r1}
 8002596:	6010      	str	r0, [r2, #0]
 8002598:	6051      	str	r1, [r2, #4]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	7213      	strb	r3, [r2, #8]
							strcat((char*)buf, "<a href='http://192.168.0.231'>Voltar</a><br>");
 800259e:	6838      	ldr	r0, [r7, #0]
 80025a0:	f7fd fdd6 	bl	8000150 <strlen>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	4a2d      	ldr	r2, [pc, #180]	; (8002664 <tcp_http_mt+0x20b8>)
 80025ae:	4614      	mov	r4, r2
 80025b0:	469c      	mov	ip, r3
 80025b2:	f104 0e20 	add.w	lr, r4, #32
 80025b6:	4665      	mov	r5, ip
 80025b8:	4626      	mov	r6, r4
 80025ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80025bc:	6028      	str	r0, [r5, #0]
 80025be:	6069      	str	r1, [r5, #4]
 80025c0:	60aa      	str	r2, [r5, #8]
 80025c2:	60eb      	str	r3, [r5, #12]
 80025c4:	3410      	adds	r4, #16
 80025c6:	f10c 0c10 	add.w	ip, ip, #16
 80025ca:	4574      	cmp	r4, lr
 80025cc:	d1f3      	bne.n	80025b6 <tcp_http_mt+0x200a>
 80025ce:	4665      	mov	r5, ip
 80025d0:	4623      	mov	r3, r4
 80025d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025d4:	6028      	str	r0, [r5, #0]
 80025d6:	6069      	str	r1, [r5, #4]
 80025d8:	60aa      	str	r2, [r5, #8]
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "</center>");
 80025de:	6838      	ldr	r0, [r7, #0]
 80025e0:	f7fd fdb6 	bl	8000150 <strlen>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	491e      	ldr	r1, [pc, #120]	; (8002668 <tcp_http_mt+0x20bc>)
 80025ee:	461a      	mov	r2, r3
 80025f0:	460b      	mov	r3, r1
 80025f2:	cb03      	ldmia	r3!, {r0, r1}
 80025f4:	6010      	str	r0, [r2, #0]
 80025f6:	6051      	str	r1, [r2, #4]
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	8113      	strh	r3, [r2, #8]

							strcat((char*)buf, "</div>");
 80025fc:	6838      	ldr	r0, [r7, #0]
 80025fe:	f7fd fda7 	bl	8000150 <strlen>
 8002602:	4603      	mov	r3, r0
 8002604:	461a      	mov	r2, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	4413      	add	r3, r2
 800260a:	4a18      	ldr	r2, [pc, #96]	; (800266c <tcp_http_mt+0x20c0>)
 800260c:	6810      	ldr	r0, [r2, #0]
 800260e:	6018      	str	r0, [r3, #0]
 8002610:	8891      	ldrh	r1, [r2, #4]
 8002612:	7992      	ldrb	r2, [r2, #6]
 8002614:	8099      	strh	r1, [r3, #4]
 8002616:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "</body>");
 8002618:	6838      	ldr	r0, [r7, #0]
 800261a:	f7fd fd99 	bl	8000150 <strlen>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	4413      	add	r3, r2
 8002626:	4912      	ldr	r1, [pc, #72]	; (8002670 <tcp_http_mt+0x20c4>)
 8002628:	461a      	mov	r2, r3
 800262a:	460b      	mov	r3, r1
 800262c:	cb03      	ldmia	r3!, {r0, r1}
 800262e:	6010      	str	r0, [r2, #0]
 8002630:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8002632:	6838      	ldr	r0, [r7, #0]
 8002634:	f7fd fd8c 	bl	8000150 <strlen>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	4413      	add	r3, r2
 8002640:	490c      	ldr	r1, [pc, #48]	; (8002674 <tcp_http_mt+0x20c8>)
 8002642:	461a      	mov	r2, r3
 8002644:	460b      	mov	r3, r1
 8002646:	cb03      	ldmia	r3!, {r0, r1}
 8002648:	6010      	str	r0, [r2, #0]
 800264a:	6051      	str	r1, [r2, #4]
 800264c:	e125      	b.n	800289a <tcp_http_mt+0x22ee>
 800264e:	bf00      	nop
 8002650:	080096e8 	.word	0x080096e8
 8002654:	08009220 	.word	0x08009220
 8002658:	08008fcc 	.word	0x08008fcc
 800265c:	08008a2c 	.word	0x08008a2c
 8002660:	08008bd0 	.word	0x08008bd0
 8002664:	08008bdc 	.word	0x08008bdc
 8002668:	08008c0c 	.word	0x08008c0c
 800266c:	08009728 	.word	0x08009728
 8002670:	08008c18 	.word	0x08008c18
 8002674:	08008c20 	.word	0x08008c20
						}
						else
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4abc      	ldr	r2, [pc, #752]	; (800296c <tcp_http_mt+0x23c0>)
 800267c:	4614      	mov	r4, r2
 800267e:	469c      	mov	ip, r3
 8002680:	f104 0e20 	add.w	lr, r4, #32
 8002684:	4665      	mov	r5, ip
 8002686:	4626      	mov	r6, r4
 8002688:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800268a:	6028      	str	r0, [r5, #0]
 800268c:	6069      	str	r1, [r5, #4]
 800268e:	60aa      	str	r2, [r5, #8]
 8002690:	60eb      	str	r3, [r5, #12]
 8002692:	3410      	adds	r4, #16
 8002694:	f10c 0c10 	add.w	ip, ip, #16
 8002698:	4574      	cmp	r4, lr
 800269a:	d1f3      	bne.n	8002684 <tcp_http_mt+0x20d8>
 800269c:	4665      	mov	r5, ip
 800269e:	4623      	mov	r3, r4
 80026a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026a2:	6028      	str	r0, [r5, #0]
 80026a4:	6069      	str	r1, [r5, #4]
 80026a6:	60aa      	str	r2, [r5, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 80026ac:	6838      	ldr	r0, [r7, #0]
 80026ae:	f7fd fd4f 	bl	8000150 <strlen>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	4aad      	ldr	r2, [pc, #692]	; (8002970 <tcp_http_mt+0x23c4>)
 80026bc:	461c      	mov	r4, r3
 80026be:	4613      	mov	r3, r2
 80026c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026c2:	6020      	str	r0, [r4, #0]
 80026c4:	6061      	str	r1, [r4, #4]
 80026c6:	60a2      	str	r2, [r4, #8]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Escrava Config</title>");
 80026cc:	6838      	ldr	r0, [r7, #0]
 80026ce:	f7fd fd3f 	bl	8000150 <strlen>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	4413      	add	r3, r2
 80026da:	4aa6      	ldr	r2, [pc, #664]	; (8002974 <tcp_http_mt+0x23c8>)
 80026dc:	461d      	mov	r5, r3
 80026de:	4614      	mov	r4, r2
 80026e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e2:	6028      	str	r0, [r5, #0]
 80026e4:	6069      	str	r1, [r5, #4]
 80026e6:	60aa      	str	r2, [r5, #8]
 80026e8:	60eb      	str	r3, [r5, #12]
 80026ea:	cc07      	ldmia	r4!, {r0, r1, r2}
 80026ec:	6128      	str	r0, [r5, #16]
 80026ee:	6169      	str	r1, [r5, #20]
 80026f0:	61aa      	str	r2, [r5, #24]
 80026f2:	8823      	ldrh	r3, [r4, #0]
 80026f4:	83ab      	strh	r3, [r5, #28]
							strcat((char*)buf, "<link href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css' rel='stylesheet'></link>");
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f7fd fd2a 	bl	8000150 <strlen>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461a      	mov	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4413      	add	r3, r2
 8002704:	4a9c      	ldr	r2, [pc, #624]	; (8002978 <tcp_http_mt+0x23cc>)
 8002706:	4618      	mov	r0, r3
 8002708:	4611      	mov	r1, r2
 800270a:	236c      	movs	r3, #108	; 0x6c
 800270c:	461a      	mov	r2, r3
 800270e:	f005 ffb8 	bl	8008682 <memcpy>
							strcat((char*)buf, "</head>");
 8002712:	6838      	ldr	r0, [r7, #0]
 8002714:	f7fd fd1c 	bl	8000150 <strlen>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4413      	add	r3, r2
 8002720:	4996      	ldr	r1, [pc, #600]	; (800297c <tcp_http_mt+0x23d0>)
 8002722:	461a      	mov	r2, r3
 8002724:	460b      	mov	r3, r1
 8002726:	cb03      	ldmia	r3!, {r0, r1}
 8002728:	6010      	str	r0, [r2, #0]
 800272a:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 800272c:	6838      	ldr	r0, [r7, #0]
 800272e:	f7fd fd0f 	bl	8000150 <strlen>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	4413      	add	r3, r2
 800273a:	4a91      	ldr	r2, [pc, #580]	; (8002980 <tcp_http_mt+0x23d4>)
 800273c:	6810      	ldr	r0, [r2, #0]
 800273e:	6018      	str	r0, [r3, #0]
 8002740:	8891      	ldrh	r1, [r2, #4]
 8002742:	7992      	ldrb	r2, [r2, #6]
 8002744:	8099      	strh	r1, [r3, #4]
 8002746:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<div class = 'entradas'>");
 8002748:	6838      	ldr	r0, [r7, #0]
 800274a:	f7fd fd01 	bl	8000150 <strlen>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	4413      	add	r3, r2
 8002756:	4a8b      	ldr	r2, [pc, #556]	; (8002984 <tcp_http_mt+0x23d8>)
 8002758:	461d      	mov	r5, r3
 800275a:	4614      	mov	r4, r2
 800275c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275e:	6028      	str	r0, [r5, #0]
 8002760:	6069      	str	r1, [r5, #4]
 8002762:	60aa      	str	r2, [r5, #8]
 8002764:	60eb      	str	r3, [r5, #12]
 8002766:	cc03      	ldmia	r4!, {r0, r1}
 8002768:	6128      	str	r0, [r5, #16]
 800276a:	6169      	str	r1, [r5, #20]
 800276c:	7823      	ldrb	r3, [r4, #0]
 800276e:	762b      	strb	r3, [r5, #24]

							strcat((char*)buf, "<b><center>Menus para configuracao</b><br>");
 8002770:	6838      	ldr	r0, [r7, #0]
 8002772:	f7fd fced 	bl	8000150 <strlen>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	4413      	add	r3, r2
 800277e:	4a82      	ldr	r2, [pc, #520]	; (8002988 <tcp_http_mt+0x23dc>)
 8002780:	4614      	mov	r4, r2
 8002782:	469c      	mov	ip, r3
 8002784:	f104 0e20 	add.w	lr, r4, #32
 8002788:	4665      	mov	r5, ip
 800278a:	4626      	mov	r6, r4
 800278c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800278e:	6028      	str	r0, [r5, #0]
 8002790:	6069      	str	r1, [r5, #4]
 8002792:	60aa      	str	r2, [r5, #8]
 8002794:	60eb      	str	r3, [r5, #12]
 8002796:	3410      	adds	r4, #16
 8002798:	f10c 0c10 	add.w	ip, ip, #16
 800279c:	4574      	cmp	r4, lr
 800279e:	d1f3      	bne.n	8002788 <tcp_http_mt+0x21dc>
 80027a0:	4662      	mov	r2, ip
 80027a2:	4623      	mov	r3, r4
 80027a4:	cb03      	ldmia	r3!, {r0, r1}
 80027a6:	6010      	str	r0, [r2, #0]
 80027a8:	6051      	str	r1, [r2, #4]
 80027aa:	8819      	ldrh	r1, [r3, #0]
 80027ac:	789b      	ldrb	r3, [r3, #2]
 80027ae:	8111      	strh	r1, [r2, #8]
 80027b0:	7293      	strb	r3, [r2, #10]
							strcat((char*)buf, "<a href='http://192.168.0.231/rede'>Configurar rede</a><br>");
 80027b2:	6838      	ldr	r0, [r7, #0]
 80027b4:	f7fd fccc 	bl	8000150 <strlen>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	4a72      	ldr	r2, [pc, #456]	; (800298c <tcp_http_mt+0x23e0>)
 80027c2:	4614      	mov	r4, r2
 80027c4:	469c      	mov	ip, r3
 80027c6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80027ca:	4665      	mov	r5, ip
 80027cc:	4626      	mov	r6, r4
 80027ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027d0:	6028      	str	r0, [r5, #0]
 80027d2:	6069      	str	r1, [r5, #4]
 80027d4:	60aa      	str	r2, [r5, #8]
 80027d6:	60eb      	str	r3, [r5, #12]
 80027d8:	3410      	adds	r4, #16
 80027da:	f10c 0c10 	add.w	ip, ip, #16
 80027de:	4574      	cmp	r4, lr
 80027e0:	d1f3      	bne.n	80027ca <tcp_http_mt+0x221e>
 80027e2:	4665      	mov	r5, ip
 80027e4:	4623      	mov	r3, r4
 80027e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027e8:	6028      	str	r0, [r5, #0]
 80027ea:	6069      	str	r1, [r5, #4]
 80027ec:	60aa      	str	r2, [r5, #8]
							strcat((char*)buf, "<a href='http://192.168.0.231/rele'>Configurar reles\n</a><br>");
 80027ee:	6838      	ldr	r0, [r7, #0]
 80027f0:	f7fd fcae 	bl	8000150 <strlen>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	4a64      	ldr	r2, [pc, #400]	; (8002990 <tcp_http_mt+0x23e4>)
 80027fe:	4614      	mov	r4, r2
 8002800:	469c      	mov	ip, r3
 8002802:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002806:	4665      	mov	r5, ip
 8002808:	4626      	mov	r6, r4
 800280a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800280c:	6028      	str	r0, [r5, #0]
 800280e:	6069      	str	r1, [r5, #4]
 8002810:	60aa      	str	r2, [r5, #8]
 8002812:	60eb      	str	r3, [r5, #12]
 8002814:	3410      	adds	r4, #16
 8002816:	f10c 0c10 	add.w	ip, ip, #16
 800281a:	4574      	cmp	r4, lr
 800281c:	d1f3      	bne.n	8002806 <tcp_http_mt+0x225a>
 800281e:	4665      	mov	r5, ip
 8002820:	4623      	mov	r3, r4
 8002822:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002824:	6028      	str	r0, [r5, #0]
 8002826:	6069      	str	r1, [r5, #4]
 8002828:	60aa      	str	r2, [r5, #8]
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<a href='http://192.168.0.231/entradas'>Configurar entradas</a><br></center>");
 800282e:	6838      	ldr	r0, [r7, #0]
 8002830:	f7fd fc8e 	bl	8000150 <strlen>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	4a55      	ldr	r2, [pc, #340]	; (8002994 <tcp_http_mt+0x23e8>)
 800283e:	4618      	mov	r0, r3
 8002840:	4611      	mov	r1, r2
 8002842:	234d      	movs	r3, #77	; 0x4d
 8002844:	461a      	mov	r2, r3
 8002846:	f005 ff1c 	bl	8008682 <memcpy>

							strcat((char*)buf, "</div>");
 800284a:	6838      	ldr	r0, [r7, #0]
 800284c:	f7fd fc80 	bl	8000150 <strlen>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a4f      	ldr	r2, [pc, #316]	; (8002998 <tcp_http_mt+0x23ec>)
 800285a:	6810      	ldr	r0, [r2, #0]
 800285c:	6018      	str	r0, [r3, #0]
 800285e:	8891      	ldrh	r1, [r2, #4]
 8002860:	7992      	ldrb	r2, [r2, #6]
 8002862:	8099      	strh	r1, [r3, #4]
 8002864:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "</body>");
 8002866:	6838      	ldr	r0, [r7, #0]
 8002868:	f7fd fc72 	bl	8000150 <strlen>
 800286c:	4603      	mov	r3, r0
 800286e:	461a      	mov	r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4413      	add	r3, r2
 8002874:	4949      	ldr	r1, [pc, #292]	; (800299c <tcp_http_mt+0x23f0>)
 8002876:	461a      	mov	r2, r3
 8002878:	460b      	mov	r3, r1
 800287a:	cb03      	ldmia	r3!, {r0, r1}
 800287c:	6010      	str	r0, [r2, #0]
 800287e:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8002880:	6838      	ldr	r0, [r7, #0]
 8002882:	f7fd fc65 	bl	8000150 <strlen>
 8002886:	4603      	mov	r3, r0
 8002888:	461a      	mov	r2, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	4413      	add	r3, r2
 800288e:	4944      	ldr	r1, [pc, #272]	; (80029a0 <tcp_http_mt+0x23f4>)
 8002890:	461a      	mov	r2, r3
 8002892:	460b      	mov	r3, r1
 8002894:	cb03      	ldmia	r3!, {r0, r1}
 8002896:	6010      	str	r0, [r2, #0]
 8002898:	6051      	str	r1, [r2, #4]
						}

						blocklen = strlen((char*)buf);
 800289a:	6838      	ldr	r0, [r7, #0]
 800289c:	f7fd fc58 	bl	8000150 <strlen>
 80028a0:	4603      	mov	r3, r0
 80028a2:	833b      	strh	r3, [r7, #24]

						ret = send(sn,buf,blocklen);
 80028a4:	8b3a      	ldrh	r2, [r7, #24]
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fc50 	bl	8003150 <send>
 80028b0:	6178      	str	r0, [r7, #20]
						if(ret < 0)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	da05      	bge.n	80028c4 <tcp_http_mt+0x2318>
						{
							close(sn);
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fb10 	bl	8002ee0 <close>
							return ret;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	e04f      	b.n	8002964 <tcp_http_mt+0x23b8>
						}
						else
						{
							HTTP_reset(sn);
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fe58 	bl	800057c <HTTP_reset>
							disconnect(sn);
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fbc8 	bl	8003064 <disconnect>
					if(flagHtmlGen == 1)
 80028d4:	e008      	b.n	80028e8 <tcp_http_mt+0x233c>
						}
					}
				}
				else
				{
					HTTP_reset(sn);
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fe4f 	bl	800057c <HTTP_reset>
					disconnect(sn);
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fbbf 	bl	8003064 <disconnect>
				}

        	  }
         }
         break;
 80028e6:	e035      	b.n	8002954 <tcp_http_mt+0x23a8>
 80028e8:	e034      	b.n	8002954 <tcp_http_mt+0x23a8>
      case SOCK_CLOSE_WAIT :

    	  HTTP_reset(sn);
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fe45 	bl	800057c <HTTP_reset>

         if((ret=disconnect(sn)) != SOCK_OK)
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fbb5 	bl	8003064 <disconnect>
 80028fa:	4603      	mov	r3, r0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d029      	beq.n	8002958 <tcp_http_mt+0x23ac>
         return ret;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	e02d      	b.n	8002964 <tcp_http_mt+0x23b8>

         break;
      case SOCK_INIT :

    	  HTTP_reset(sn);
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fe36 	bl	800057c <HTTP_reset>

         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fb40 	bl	8002f98 <listen>
 8002918:	4603      	mov	r3, r0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d01c      	beq.n	800295c <tcp_http_mt+0x23b0>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	e01e      	b.n	8002964 <tcp_http_mt+0x23b8>
         break;
      case SOCK_CLOSED:

    	  HTTP_reset(sn);
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe27 	bl	800057c <HTTP_reset>

         if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)
 800292e:	88ba      	ldrh	r2, [r7, #4]
 8002930:	79f8      	ldrb	r0, [r7, #7]
 8002932:	2300      	movs	r3, #0
 8002934:	2101      	movs	r1, #1
 8002936:	f000 f9db 	bl	8002cf0 <socket>
 800293a:	4603      	mov	r3, r0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	429a      	cmp	r2, r3
 8002944:	d00c      	beq.n	8002960 <tcp_http_mt+0x23b4>
         return ret;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	e00c      	b.n	8002964 <tcp_http_mt+0x23b8>

         break;

      default:
    	  HTTP_reset(sn);
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fe15 	bl	800057c <HTTP_reset>
         break;
 8002952:	e006      	b.n	8002962 <tcp_http_mt+0x23b6>
         break;
 8002954:	bf00      	nop
 8002956:	e004      	b.n	8002962 <tcp_http_mt+0x23b6>
         break;
 8002958:	bf00      	nop
 800295a:	e002      	b.n	8002962 <tcp_http_mt+0x23b6>
         break;
 800295c:	bf00      	nop
 800295e:	e000      	b.n	8002962 <tcp_http_mt+0x23b6>
         break;
 8002960:	bf00      	nop
   }
   return 1;
 8002962:	2301      	movs	r3, #1
}
 8002964:	4618      	mov	r0, r3
 8002966:	3724      	adds	r7, #36	; 0x24
 8002968:	46bd      	mov	sp, r7
 800296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800296c:	080088d0 	.word	0x080088d0
 8002970:	08008900 	.word	0x08008900
 8002974:	08008910 	.word	0x08008910
 8002978:	08008930 	.word	0x08008930
 800297c:	0800899c 	.word	0x0800899c
 8002980:	080089a4 	.word	0x080089a4
 8002984:	08009188 	.word	0x08009188
 8002988:	08009730 	.word	0x08009730
 800298c:	0800975c 	.word	0x0800975c
 8002990:	08009798 	.word	0x08009798
 8002994:	080097d8 	.word	0x080097d8
 8002998:	08009728 	.word	0x08009728
 800299c:	08008c18 	.word	0x08008c18
 80029a0:	08008c20 	.word	0x08008c20

080029a4 <StartEthernet>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEthernet */
void StartEthernet(void *argument)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t i;
  /* Infinite loop */
  for(;;)
  {
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 80029ac:	2304      	movs	r3, #4
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e008      	b.n	80029c4 <StartEthernet+0x20>
	  {
	  	tcp_http_mt(i, gDATABUF, 80);
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2250      	movs	r2, #80	; 0x50
 80029b6:	490d      	ldr	r1, [pc, #52]	; (80029ec <StartEthernet+0x48>)
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fdf7 	bl	80005ac <tcp_http_mt>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	3301      	adds	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b07      	cmp	r3, #7
 80029c8:	d9f3      	bls.n	80029b2 <StartEthernet+0xe>
	  }
	  //4 sockets para modbus TCP
	  for(i=0;i<4;i++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
 80029ce:	e009      	b.n	80029e4 <StartEthernet+0x40>
	  {
	  	tcp_http_mt(i, gDATABUF, 502);
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80029d6:	4905      	ldr	r1, [pc, #20]	; (80029ec <StartEthernet+0x48>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fde7 	bl	80005ac <tcp_http_mt>
	  for(i=0;i<4;i++)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	3301      	adds	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d9f2      	bls.n	80029d0 <StartEthernet+0x2c>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 80029ea:	e7df      	b.n	80029ac <StartEthernet+0x8>
 80029ec:	20001ab0 	.word	0x20001ab0

080029f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a02:	f001 fccd 	bl	80043a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40012c00 	.word	0x40012c00

08002a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_MspInit+0x68>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_MspInit+0x68>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6193      	str	r3, [r2, #24]
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_MspInit+0x68>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_MspInit+0x68>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <HAL_MspInit+0x68>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a48:	61d3      	str	r3, [r2, #28]
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_MspInit+0x68>)
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	210f      	movs	r1, #15
 8002a5a:	f06f 0001 	mvn.w	r0, #1
 8002a5e:	f001 fd70 	bl	8004542 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_MspInit+0x6c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_MspInit+0x6c>)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40010000 	.word	0x40010000

08002a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0310 	add.w	r3, r7, #16
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <HAL_I2C_MspInit+0x74>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d124      	bne.n	8002afa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_I2C_MspInit+0x78>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <HAL_I2C_MspInit+0x78>)
 8002ab6:	f043 0308 	orr.w	r3, r3, #8
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_I2C_MspInit+0x78>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ac8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002acc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ace:	2312      	movs	r3, #18
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad6:	f107 0310 	add.w	r3, r7, #16
 8002ada:	4619      	mov	r1, r3
 8002adc:	480b      	ldr	r0, [pc, #44]	; (8002b0c <HAL_I2C_MspInit+0x7c>)
 8002ade:	f001 fd5b 	bl	8004598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_I2C_MspInit+0x78>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <HAL_I2C_MspInit+0x78>)
 8002ae8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aec:	61d3      	str	r3, [r2, #28]
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_I2C_MspInit+0x78>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002afa:	bf00      	nop
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40005800 	.word	0x40005800
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010c00 	.word	0x40010c00

08002b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0310 	add.w	r3, r7, #16
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <HAL_SPI_MspInit+0x8c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d131      	bne.n	8002b94 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_SPI_MspInit+0x90>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a1a      	ldr	r2, [pc, #104]	; (8002ba0 <HAL_SPI_MspInit+0x90>)
 8002b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b3a:	61d3      	str	r3, [r2, #28]
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <HAL_SPI_MspInit+0x90>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_SPI_MspInit+0x90>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_SPI_MspInit+0x90>)
 8002b4e:	f043 0308 	orr.w	r3, r3, #8
 8002b52:	6193      	str	r3, [r2, #24]
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_SPI_MspInit+0x90>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8002b60:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6e:	f107 0310 	add.w	r3, r7, #16
 8002b72:	4619      	mov	r1, r3
 8002b74:	480b      	ldr	r0, [pc, #44]	; (8002ba4 <HAL_SPI_MspInit+0x94>)
 8002b76:	f001 fd0f 	bl	8004598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8002b7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8002b88:	f107 0310 	add.w	r3, r7, #16
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <HAL_SPI_MspInit+0x94>)
 8002b90:	f001 fd02 	bl	8004598 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b94:	bf00      	nop
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40003800 	.word	0x40003800
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40010c00 	.word	0x40010c00

08002ba8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	; 0x30
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	2019      	movs	r0, #25
 8002bbe:	f001 fcc0 	bl	8004542 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002bc2:	2019      	movs	r0, #25
 8002bc4:	f001 fcd9 	bl	800457a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002bc8:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <HAL_InitTick+0x9c>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_InitTick+0x9c>)
 8002bce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bd2:	6193      	str	r3, [r2, #24]
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_InitTick+0x9c>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002be0:	f107 0210 	add.w	r2, r7, #16
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f002 fb7c 	bl	80052e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f002 fb66 	bl	80052c0 <HAL_RCC_GetPCLK2Freq>
 8002bf4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	4a13      	ldr	r2, [pc, #76]	; (8002c48 <HAL_InitTick+0xa0>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	0c9b      	lsrs	r3, r3, #18
 8002c00:	3b01      	subs	r3, #1
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_InitTick+0xa4>)
 8002c06:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <HAL_InitTick+0xa8>)
 8002c08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_InitTick+0xa4>)
 8002c0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c12:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <HAL_InitTick+0xa4>)
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <HAL_InitTick+0xa4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_InitTick+0xa4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002c24:	4809      	ldr	r0, [pc, #36]	; (8002c4c <HAL_InitTick+0xa4>)
 8002c26:	f002 fe79 	bl	800591c <HAL_TIM_Base_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d104      	bne.n	8002c3a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002c30:	4806      	ldr	r0, [pc, #24]	; (8002c4c <HAL_InitTick+0xa4>)
 8002c32:	f002 fecb 	bl	80059cc <HAL_TIM_Base_Start_IT>
 8002c36:	4603      	mov	r3, r0
 8002c38:	e000      	b.n	8002c3c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3730      	adds	r7, #48	; 0x30
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	431bde83 	.word	0x431bde83
 8002c4c:	200022d4 	.word	0x200022d4
 8002c50:	40012c00 	.word	0x40012c00

08002c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <HardFault_Handler+0x4>

08002c66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <MemManage_Handler+0x4>

08002c6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <BusFault_Handler+0x4>

08002c72 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <UsageFault_Handler+0x4>

08002c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <TIM1_UP_IRQHandler+0x10>)
 8002c8a:	f002 fef1 	bl	8005a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200022d4 	.word	0x200022d4

08002c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ca4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ca6:	e003      	b.n	8002cb0 <LoopCopyDataInit>

08002ca8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002caa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002cac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002cae:	3104      	adds	r1, #4

08002cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002cb0:	480a      	ldr	r0, [pc, #40]	; (8002cdc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002cb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002cb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002cb8:	d3f6      	bcc.n	8002ca8 <CopyDataInit>
  ldr r2, =_sbss
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002cbc:	e002      	b.n	8002cc4 <LoopFillZerobss>

08002cbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002cc0:	f842 3b04 	str.w	r3, [r2], #4

08002cc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002cc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002cc8:	d3f9      	bcc.n	8002cbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cca:	f7ff ffe5 	bl	8002c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cce:	f005 fca5 	bl	800861c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cd2:	f7fd fa45 	bl	8000160 <main>
  bx lr
 8002cd6:	4770      	bx	lr
  ldr r3, =_sidata
 8002cd8:	08009898 	.word	0x08009898
  ldr r0, =_sdata
 8002cdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ce0:	2000004c 	.word	0x2000004c
  ldr r2, =_sbss
 8002ce4:	2000004c 	.word	0x2000004c
  ldr r3, = _ebss
 8002ce8:	20002360 	.word	0x20002360

08002cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cec:	e7fe      	b.n	8002cec <ADC1_2_IRQHandler>
	...

08002cf0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4623      	mov	r3, r4
 8002d00:	71fb      	strb	r3, [r7, #7]
 8002d02:	4603      	mov	r3, r0
 8002d04:	71bb      	strb	r3, [r7, #6]
 8002d06:	460b      	mov	r3, r1
 8002d08:	80bb      	strh	r3, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d902      	bls.n	8002d1a <socket+0x2a>
 8002d14:	f04f 33ff 	mov.w	r3, #4294967295
 8002d18:	e0d3      	b.n	8002ec2 <socket+0x1d2>
	switch(protocol)
 8002d1a:	79bb      	ldrb	r3, [r7, #6]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	db03      	blt.n	8002d28 <socket+0x38>
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	dd04      	ble.n	8002d2e <socket+0x3e>
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d002      	beq.n	8002d2e <socket+0x3e>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002d28:	f06f 0304 	mvn.w	r3, #4
 8002d2c:	e0c9      	b.n	8002ec2 <socket+0x1d2>
         break;
 8002d2e:	bf00      	nop
	}
	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 0306 	and.w	r3, r3, #6
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <socket+0x50>
 8002d3a:	f06f 0305 	mvn.w	r3, #5
 8002d3e:	e0c0      	b.n	8002ec2 <socket+0x1d2>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif

	if(flag != 0)
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d025      	beq.n	8002d92 <socket+0xa2>
	{
   	switch(protocol)
 8002d46:	79bb      	ldrb	r3, [r7, #6]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d002      	beq.n	8002d52 <socket+0x62>
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d008      	beq.n	8002d62 <socket+0x72>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002d50:	e024      	b.n	8002d9c <socket+0xac>
   	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11c      	bne.n	8002d96 <socket+0xa6>
 8002d5c:	f06f 0305 	mvn.w	r3, #5
 8002d60:	e0af      	b.n	8002ec2 <socket+0x1d2>
   	      if(flag & SF_IGMP_VER2)
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <socket+0x8a>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	db02      	blt.n	8002d7a <socket+0x8a>
 8002d74:	f06f 0305 	mvn.w	r3, #5
 8002d78:	e0a3      	b.n	8002ec2 <socket+0x1d2>
      	      if(flag & SF_UNI_BLOCK)
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <socket+0xaa>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	db06      	blt.n	8002d9a <socket+0xaa>
 8002d8c:	f06f 0305 	mvn.w	r3, #5
 8002d90:	e097      	b.n	8002ec2 <socket+0x1d2>
   	}
   }
 8002d92:	bf00      	nop
 8002d94:	e002      	b.n	8002d9c <socket+0xac>
   	      break;
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <socket+0xac>
   	      break;
 8002d9a:	bf00      	nop
	close(sn);
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f89e 	bl	8002ee0 <close>
	setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	3301      	adds	r3, #1
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4618      	mov	r0, r3
 8002dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db2:	f023 030f 	bic.w	r3, r3, #15
 8002db6:	b25a      	sxtb	r2, r3
 8002db8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	b25b      	sxtb	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f000 fba4 	bl	8003510 <WIZCHIP_WRITE>
	if(!port)
 8002dc8:	88bb      	ldrh	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d110      	bne.n	8002df0 <socket+0x100>
	{
	   port = sock_any_port++;
 8002dce:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <socket+0x1dc>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	b291      	uxth	r1, r2
 8002dd6:	4a3d      	ldr	r2, [pc, #244]	; (8002ecc <socket+0x1dc>)
 8002dd8:	8011      	strh	r1, [r2, #0]
 8002dda:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002ddc:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <socket+0x1dc>)
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d103      	bne.n	8002df0 <socket+0x100>
 8002de8:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <socket+0x1dc>)
 8002dea:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002dee:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	3301      	adds	r3, #1
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	88bb      	ldrh	r3, [r7, #4]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f000 fb81 	bl	8003510 <WIZCHIP_WRITE>
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	3301      	adds	r3, #1
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	88bb      	ldrh	r3, [r7, #4]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f000 fb74 	bl	8003510 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e34:	2101      	movs	r1, #1
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fb6a 	bl	8003510 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002e3c:	bf00      	nop
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	3301      	adds	r3, #1
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fb30 	bl	80034b0 <WIZCHIP_READ>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f3      	bne.n	8002e3e <socket+0x14e>
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 0201 	and.w	r2, r3, #1
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	b21a      	sxth	r2, r3
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <socket+0x1e0>)
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b21b      	sxth	r3, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <socket+0x1e0>)
 8002e72:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	2201      	movs	r2, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	b21b      	sxth	r3, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	b21a      	sxth	r2, r3
 8002e82:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <socket+0x1e4>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b21b      	sxth	r3, r3
 8002e88:	4013      	ands	r3, r2
 8002e8a:	b21b      	sxth	r3, r3
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <socket+0x1e4>)
 8002e90:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <socket+0x1e8>)
 8002e96:	2100      	movs	r1, #0
 8002e98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = 0;
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <socket+0x1ec>)
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002ea4:	bf00      	nop
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	3301      	adds	r3, #1
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fafc 	bl	80034b0 <WIZCHIP_READ>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f3      	beq.n	8002ea6 <socket+0x1b6>
   return (int8_t)sn;
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd90      	pop	{r4, r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	2000001c 	.word	0x2000001c
 8002ed0:	20000074 	.word	0x20000074
 8002ed4:	20000076 	.word	0x20000076
 8002ed8:	20000078 	.word	0x20000078
 8002edc:	20000088 	.word	0x20000088

08002ee0 <close>:

int8_t close(uint8_t sn)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d902      	bls.n	8002ef6 <close+0x16>
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	e046      	b.n	8002f84 <close+0xa4>

	setSn_CR(sn,Sn_CR_CLOSE);
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	3301      	adds	r3, #1
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f02:	2110      	movs	r1, #16
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fb03 	bl	8003510 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002f0a:	bf00      	nop
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	3301      	adds	r3, #1
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fac9 	bl	80034b0 <WIZCHIP_READ>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f3      	bne.n	8002f0c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	3301      	adds	r3, #1
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f30:	211f      	movs	r1, #31
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 faec 	bl	8003510 <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	b21b      	sxth	r3, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	b21a      	sxth	r2, r3
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <close+0xac>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b21b      	sxth	r3, r3
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	b21b      	sxth	r3, r3
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <close+0xac>)
 8002f54:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <close+0xb0>)
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <close+0xb4>)
 8002f64:	2100      	movs	r1, #0
 8002f66:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002f68:	bf00      	nop
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	3301      	adds	r3, #1
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fa9a 	bl	80034b0 <WIZCHIP_READ>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f3      	bne.n	8002f6a <close+0x8a>
	return SOCK_OK;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000076 	.word	0x20000076
 8002f90:	20000078 	.word	0x20000078
 8002f94:	20000088 	.word	0x20000088

08002f98 <listen>:

int8_t listen(uint8_t sn)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d902      	bls.n	8002fae <listen+0x16>
 8002fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fac:	e055      	b.n	800305a <listen+0xc2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fa7a 	bl	80034b0 <WIZCHIP_READ>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d002      	beq.n	8002fcc <listen+0x34>
 8002fc6:	f06f 0304 	mvn.w	r3, #4
 8002fca:	e046      	b.n	800305a <listen+0xc2>
	CHECK_SOCKINIT();
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fa69 	bl	80034b0 <WIZCHIP_READ>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b13      	cmp	r3, #19
 8002fe2:	d002      	beq.n	8002fea <listen+0x52>
 8002fe4:	f06f 0302 	mvn.w	r3, #2
 8002fe8:	e037      	b.n	800305a <listen+0xc2>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	3301      	adds	r3, #1
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fa89 	bl	8003510 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8002ffe:	bf00      	nop
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	3301      	adds	r3, #1
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fa4f 	bl	80034b0 <WIZCHIP_READ>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f3      	bne.n	8003000 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003018:	e012      	b.n	8003040 <listen+0xa8>
   {
      if(getSn_CR(sn) == SOCK_CLOSED)
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	3301      	adds	r3, #1
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fa42 	bl	80034b0 <WIZCHIP_READ>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <listen+0xa8>
      {
         close(sn);
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff53 	bl	8002ee0 <close>
         return SOCKERR_SOCKCLOSED;
 800303a:	f06f 0303 	mvn.w	r3, #3
 800303e:	e00c      	b.n	800305a <listen+0xc2>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	3301      	adds	r3, #1
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fa2f 	bl	80034b0 <WIZCHIP_READ>
 8003052:	4603      	mov	r3, r0
 8003054:	2b14      	cmp	r3, #20
 8003056:	d1e0      	bne.n	800301a <listen+0x82>
      }
   }
   return SOCK_OK;
 8003058:	2301      	movs	r3, #1
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <disconnect>:

   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d902      	bls.n	800307a <disconnect+0x16>
 8003074:	f04f 33ff 	mov.w	r3, #4294967295
 8003078:	e062      	b.n	8003140 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	3301      	adds	r3, #1
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fa14 	bl	80034b0 <WIZCHIP_READ>
 8003088:	4603      	mov	r3, r0
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	2b01      	cmp	r3, #1
 8003090:	d002      	beq.n	8003098 <disconnect+0x34>
 8003092:	f06f 0304 	mvn.w	r3, #4
 8003096:	e053      	b.n	8003140 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	3301      	adds	r3, #1
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80030a4:	2108      	movs	r1, #8
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fa32 	bl	8003510 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80030ac:	bf00      	nop
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	3301      	adds	r3, #1
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f9f8 	bl	80034b0 <WIZCHIP_READ>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f3      	bne.n	80030ae <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	2201      	movs	r2, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	b21b      	sxth	r3, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	b21a      	sxth	r2, r3
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <disconnect+0xe4>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b21b      	sxth	r3, r3
 80030da:	4013      	ands	r3, r2
 80030dc:	b21b      	sxth	r3, r3
 80030de:	b29a      	uxth	r2, r3
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <disconnect+0xe4>)
 80030e2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <disconnect+0xe8>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	fa42 f303 	asr.w	r3, r2, r3
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d016      	beq.n	8003126 <disconnect+0xc2>
 80030f8:	2300      	movs	r3, #0
 80030fa:	e021      	b.n	8003140 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3301      	adds	r3, #1
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f9d1 	bl	80034b0 <WIZCHIP_READ>
 800310e:	4603      	mov	r3, r0
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d006      	beq.n	8003126 <disconnect+0xc2>
	   {
	      close(sn);
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fee0 	bl	8002ee0 <close>
	      return SOCKERR_TIMEOUT;
 8003120:	f06f 030c 	mvn.w	r3, #12
 8003124:	e00c      	b.n	8003140 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	3301      	adds	r3, #1
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f9bc 	bl	80034b0 <WIZCHIP_READ>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1de      	bne.n	80030fc <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800313e:	2301      	movs	r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000076 	.word	0x20000076
 800314c:	20000074 	.word	0x20000074

08003150 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	6039      	str	r1, [r7, #0]
 800315a:	71fb      	strb	r3, [r7, #7]
 800315c:	4613      	mov	r3, r2
 800315e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003164:	2300      	movs	r3, #0
 8003166:	81bb      	strh	r3, [r7, #12]

   CHECK_SOCKNUM();
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	2b08      	cmp	r3, #8
 800316c:	d902      	bls.n	8003174 <send+0x24>
 800316e:	f04f 33ff 	mov.w	r3, #4294967295
 8003172:	e0de      	b.n	8003332 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	3301      	adds	r3, #1
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f997 	bl	80034b0 <WIZCHIP_READ>
 8003182:	4603      	mov	r3, r0
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	2b01      	cmp	r3, #1
 800318a:	d002      	beq.n	8003192 <send+0x42>
 800318c:	f06f 0304 	mvn.w	r3, #4
 8003190:	e0cf      	b.n	8003332 <send+0x1e2>
   CHECK_SOCKDATA();
 8003192:	88bb      	ldrh	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <send+0x4e>
 8003198:	f06f 030d 	mvn.w	r3, #13
 800319c:	e0c9      	b.n	8003332 <send+0x1e2>
   tmp = getSn_SR(sn);
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	3301      	adds	r3, #1
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f980 	bl	80034b0 <WIZCHIP_READ>
 80031b0:	4603      	mov	r3, r0
 80031b2:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b17      	cmp	r3, #23
 80031b8:	d005      	beq.n	80031c6 <send+0x76>
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b1c      	cmp	r3, #28
 80031be:	d002      	beq.n	80031c6 <send+0x76>
 80031c0:	f06f 0306 	mvn.w	r3, #6
 80031c4:	e0b5      	b.n	8003332 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80031c6:	4b5d      	ldr	r3, [pc, #372]	; (800333c <send+0x1ec>)
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	fa42 f303 	asr.w	r3, r2, r3
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d039      	beq.n	800324e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	3301      	adds	r3, #1
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f962 	bl	80034b0 <WIZCHIP_READ>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d019      	beq.n	8003232 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	3301      	adds	r3, #1
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800320a:	2110      	movs	r1, #16
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f97f 	bl	8003510 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	2201      	movs	r2, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	b21b      	sxth	r3, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	b21a      	sxth	r2, r3
 8003220:	4b46      	ldr	r3, [pc, #280]	; (800333c <send+0x1ec>)
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b21b      	sxth	r3, r3
 8003226:	4013      	ands	r3, r2
 8003228:	b21b      	sxth	r3, r3
 800322a:	b29a      	uxth	r2, r3
 800322c:	4b43      	ldr	r3, [pc, #268]	; (800333c <send+0x1ec>)
 800322e:	801a      	strh	r2, [r3, #0]
 8003230:	e00d      	b.n	800324e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d006      	beq.n	800324a <send+0xfa>
      {
         close(sn);
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fe4e 	bl	8002ee0 <close>
         return SOCKERR_TIMEOUT;
 8003244:	f06f 030c 	mvn.w	r3, #12
 8003248:	e073      	b.n	8003332 <send+0x1e2>
      }
      else return SOCK_BUSY;
 800324a:	2300      	movs	r3, #0
 800324c:	e071      	b.n	8003332 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	3301      	adds	r3, #1
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f928 	bl	80034b0 <WIZCHIP_READ>
 8003260:	4603      	mov	r3, r0
 8003262:	b29b      	uxth	r3, r3
 8003264:	029b      	lsls	r3, r3, #10
 8003266:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003268:	88ba      	ldrh	r2, [r7, #4]
 800326a:	89bb      	ldrh	r3, [r7, #12]
 800326c:	429a      	cmp	r2, r3
 800326e:	d901      	bls.n	8003274 <send+0x124>
 8003270:	89bb      	ldrh	r3, [r7, #12]
 8003272:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fa0c 	bl	8003694 <getSn_TX_FSR>
 800327c:	4603      	mov	r3, r0
 800327e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	3301      	adds	r3, #1
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f90f 	bl	80034b0 <WIZCHIP_READ>
 8003292:	4603      	mov	r3, r0
 8003294:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b17      	cmp	r3, #23
 800329a:	d009      	beq.n	80032b0 <send+0x160>
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b1c      	cmp	r3, #28
 80032a0:	d006      	beq.n	80032b0 <send+0x160>
      {
         close(sn);
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fe1b 	bl	8002ee0 <close>
         return SOCKERR_SOCKSTATUS;
 80032aa:	f06f 0306 	mvn.w	r3, #6
 80032ae:	e040      	b.n	8003332 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80032b0:	4b23      	ldr	r3, [pc, #140]	; (8003340 <send+0x1f0>)
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	fa42 f303 	asr.w	r3, r2, r3
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <send+0x180>
 80032c4:	88ba      	ldrh	r2, [r7, #4]
 80032c6:	89bb      	ldrh	r3, [r7, #12]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d901      	bls.n	80032d0 <send+0x180>
 80032cc:	2300      	movs	r3, #0
 80032ce:	e030      	b.n	8003332 <send+0x1e2>
      if(len <= freesize) break;
 80032d0:	88ba      	ldrh	r2, [r7, #4]
 80032d2:	89bb      	ldrh	r3, [r7, #12]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d900      	bls.n	80032da <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80032d8:	e7cc      	b.n	8003274 <send+0x124>
      if(len <= freesize) break;
 80032da:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80032dc:	88ba      	ldrh	r2, [r7, #4]
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fa6c 	bl	80037c0 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	3301      	adds	r3, #1
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032f4:	2120      	movs	r1, #32
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f90a 	bl	8003510 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80032fc:	bf00      	nop
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	3301      	adds	r3, #1
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f8d0 	bl	80034b0 <WIZCHIP_READ>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f3      	bne.n	80032fe <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	2201      	movs	r2, #1
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	b21a      	sxth	r2, r3
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <send+0x1ec>)
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b21b      	sxth	r3, r3
 8003326:	4313      	orrs	r3, r2
 8003328:	b21b      	sxth	r3, r3
 800332a:	b29a      	uxth	r2, r3
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <send+0x1ec>)
 800332e:	801a      	strh	r2, [r3, #0]
   return len;
 8003330:	88bb      	ldrh	r3, [r7, #4]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000076 	.word	0x20000076
 8003340:	20000074 	.word	0x20000074

08003344 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	71fb      	strb	r3, [r7, #7]
 8003350:	4613      	mov	r3, r2
 8003352:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	81bb      	strh	r3, [r7, #12]
   CHECK_SOCKNUM();
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	2b08      	cmp	r3, #8
 8003360:	d902      	bls.n	8003368 <recv+0x24>
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	e09c      	b.n	80034a2 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	3301      	adds	r3, #1
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f89d 	bl	80034b0 <WIZCHIP_READ>
 8003376:	4603      	mov	r3, r0
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	2b01      	cmp	r3, #1
 800337e:	d002      	beq.n	8003386 <recv+0x42>
 8003380:	f06f 0304 	mvn.w	r3, #4
 8003384:	e08d      	b.n	80034a2 <recv+0x15e>
   CHECK_SOCKDATA();
 8003386:	88bb      	ldrh	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <recv+0x4e>
 800338c:	f06f 030d 	mvn.w	r3, #13
 8003390:	e087      	b.n	80034a2 <recv+0x15e>

   recvsize = getSn_RxMAX(sn);
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	3301      	adds	r3, #1
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f886 	bl	80034b0 <WIZCHIP_READ>
 80033a4:	4603      	mov	r3, r0
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	029b      	lsls	r3, r3, #10
 80033aa:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80033ac:	89ba      	ldrh	r2, [r7, #12]
 80033ae:	88bb      	ldrh	r3, [r7, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d201      	bcs.n	80033b8 <recv+0x74>
 80033b4:	89bb      	ldrh	r3, [r7, #12]
 80033b6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f9b5 	bl	800372a <getSn_RX_RSR>
 80033c0:	4603      	mov	r3, r0
 80033c2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	3301      	adds	r3, #1
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 f86d 	bl	80034b0 <WIZCHIP_READ>
 80033d6:	4603      	mov	r3, r0
 80033d8:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b17      	cmp	r3, #23
 80033de:	d026      	beq.n	800342e <recv+0xea>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	2b1c      	cmp	r3, #28
 80033e4:	d11c      	bne.n	8003420 <recv+0xdc>
         {
            if(recvsize != 0) break;
 80033e6:	89bb      	ldrh	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d133      	bne.n	8003454 <recv+0x110>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f950 	bl	8003694 <getSn_TX_FSR>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461c      	mov	r4, r3
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	3301      	adds	r3, #1
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f853 	bl	80034b0 <WIZCHIP_READ>
 800340a:	4603      	mov	r3, r0
 800340c:	029b      	lsls	r3, r3, #10
 800340e:	429c      	cmp	r4, r3
 8003410:	d10d      	bne.n	800342e <recv+0xea>
            {
               close(sn);
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fd63 	bl	8002ee0 <close>
               return SOCKERR_SOCKSTATUS;
 800341a:	f06f 0306 	mvn.w	r3, #6
 800341e:	e040      	b.n	80034a2 <recv+0x15e>
            }
         }
         else
         {
            close(sn);
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fd5c 	bl	8002ee0 <close>
            return SOCKERR_SOCKSTATUS;
 8003428:	f06f 0306 	mvn.w	r3, #6
 800342c:	e039      	b.n	80034a2 <recv+0x15e>
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800342e:	4b1f      	ldr	r3, [pc, #124]	; (80034ac <recv+0x168>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	fa42 f303 	asr.w	r3, r2, r3
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <recv+0x108>
 8003442:	89bb      	ldrh	r3, [r7, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <recv+0x108>
 8003448:	2300      	movs	r3, #0
 800344a:	e02a      	b.n	80034a2 <recv+0x15e>
      if(recvsize != 0) break;
 800344c:	89bb      	ldrh	r3, [r7, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <recv+0x114>
      recvsize = getSn_RX_RSR(sn);
 8003452:	e7b1      	b.n	80033b8 <recv+0x74>
            if(recvsize != 0) break;
 8003454:	bf00      	nop
 8003456:	e000      	b.n	800345a <recv+0x116>
      if(recvsize != 0) break;
 8003458:	bf00      	nop
   };
   if(recvsize < len) len = recvsize;
 800345a:	89ba      	ldrh	r2, [r7, #12]
 800345c:	88bb      	ldrh	r3, [r7, #4]
 800345e:	429a      	cmp	r2, r3
 8003460:	d201      	bcs.n	8003466 <recv+0x122>
 8003462:	89bb      	ldrh	r3, [r7, #12]
 8003464:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8003466:	88ba      	ldrh	r2, [r7, #4]
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	6839      	ldr	r1, [r7, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fa03 	bl	8003878 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	3301      	adds	r3, #1
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800347e:	2140      	movs	r1, #64	; 0x40
 8003480:	4618      	mov	r0, r3
 8003482:	f000 f845 	bl	8003510 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003486:	bf00      	nop
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	3301      	adds	r3, #1
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f80b 	bl	80034b0 <WIZCHIP_READ>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f3      	bne.n	8003488 <recv+0x144>
   return len;
 80034a0:	88bb      	ldrh	r3, [r7, #4]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd90      	pop	{r4, r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000074 	.word	0x20000074

080034b0 <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <WIZCHIP_READ+0x5c>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <WIZCHIP_READ+0x5c>)
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	4798      	blx	r3
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <WIZCHIP_READ+0x5c>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	0c12      	lsrs	r2, r2, #16
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	4610      	mov	r0, r2
 80034d0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <WIZCHIP_READ+0x5c>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	0a12      	lsrs	r2, r2, #8
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	4610      	mov	r0, r2
 80034de:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <WIZCHIP_READ+0x5c>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	4610      	mov	r0, r2
 80034ea:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <WIZCHIP_READ+0x5c>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	4798      	blx	r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	73fb      	strb	r3, [r7, #15]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"
#endif

   WIZCHIP.CS._deselect();
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <WIZCHIP_READ+0x5c>)
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <WIZCHIP_READ+0x5c>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4798      	blx	r3
   return ret;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000020 	.word	0x20000020

08003510 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
    WIZCHIP_CRITICAL_ENTER();
 800351c:	4b16      	ldr	r3, [pc, #88]	; (8003578 <WIZCHIP_WRITE+0x68>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4798      	blx	r3
    WIZCHIP.CS._select();
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <WIZCHIP_WRITE+0x68>)
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	607b      	str	r3, [r7, #4]
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <WIZCHIP_WRITE+0x68>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	0c12      	lsrs	r2, r2, #16
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	4610      	mov	r0, r2
 800353c:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800353e:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <WIZCHIP_WRITE+0x68>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	0a12      	lsrs	r2, r2, #8
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	4610      	mov	r0, r2
 800354a:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <WIZCHIP_WRITE+0x68>)
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	4610      	mov	r0, r2
 8003556:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <WIZCHIP_WRITE+0x68>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	4610      	mov	r0, r2
 8003560:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <WIZCHIP_WRITE+0x68>)
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <WIZCHIP_WRITE+0x68>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4798      	blx	r3
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000020 	.word	0x20000020

0800357c <WIZCHIP_READ_BUF>:

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <WIZCHIP_READ_BUF+0x84>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <WIZCHIP_READ_BUF+0x84>)
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <WIZCHIP_READ_BUF+0x84>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	0c12      	lsrs	r2, r2, #16
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	4610      	mov	r0, r2
 80035aa:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <WIZCHIP_READ_BUF+0x84>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	0a12      	lsrs	r2, r2, #8
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	4610      	mov	r0, r2
 80035b8:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <WIZCHIP_READ_BUF+0x84>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	4610      	mov	r0, r2
 80035c4:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 80035c6:	2300      	movs	r3, #0
 80035c8:	82fb      	strh	r3, [r7, #22]
 80035ca:	e00a      	b.n	80035e2 <WIZCHIP_READ_BUF+0x66>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <WIZCHIP_READ_BUF+0x84>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	8afa      	ldrh	r2, [r7, #22]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	188c      	adds	r4, r1, r2
 80035d6:	4798      	blx	r3
 80035d8:	4603      	mov	r3, r0
 80035da:	7023      	strb	r3, [r4, #0]
      for(i = 0; i < len; i++,j)
 80035dc:	8afb      	ldrh	r3, [r7, #22]
 80035de:	3301      	adds	r3, #1
 80035e0:	82fb      	strh	r3, [r7, #22]
 80035e2:	8afa      	ldrh	r2, [r7, #22]
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d3f0      	bcc.n	80035cc <WIZCHIP_READ_BUF+0x50>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <WIZCHIP_READ_BUF+0x84>)
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <WIZCHIP_READ_BUF+0x84>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4798      	blx	r3
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd90      	pop	{r4, r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000020 	.word	0x20000020

08003604 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <WIZCHIP_WRITE_BUF+0x8c>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <WIZCHIP_WRITE_BUF+0x8c>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f043 0304 	orr.w	r3, r3, #4
 800362c:	60fb      	str	r3, [r7, #12]
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800362e:	4b18      	ldr	r3, [pc, #96]	; (8003690 <WIZCHIP_WRITE_BUF+0x8c>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	0c12      	lsrs	r2, r2, #16
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	4610      	mov	r0, r2
 800363a:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800363c:	4b14      	ldr	r3, [pc, #80]	; (8003690 <WIZCHIP_WRITE_BUF+0x8c>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	0a12      	lsrs	r2, r2, #8
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	4610      	mov	r0, r2
 8003648:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <WIZCHIP_WRITE_BUF+0x8c>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	4610      	mov	r0, r2
 8003654:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8003656:	2300      	movs	r3, #0
 8003658:	82fb      	strh	r3, [r7, #22]
 800365a:	e00a      	b.n	8003672 <WIZCHIP_WRITE_BUF+0x6e>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <WIZCHIP_WRITE_BUF+0x8c>)
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	8afa      	ldrh	r2, [r7, #22]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	440a      	add	r2, r1
 8003666:	7812      	ldrb	r2, [r2, #0]
 8003668:	4610      	mov	r0, r2
 800366a:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 800366c:	8afb      	ldrh	r3, [r7, #22]
 800366e:	3301      	adds	r3, #1
 8003670:	82fb      	strh	r3, [r7, #22]
 8003672:	8afa      	ldrh	r2, [r7, #22]
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	429a      	cmp	r2, r3
 8003678:	d3f0      	bcc.n	800365c <WIZCHIP_WRITE_BUF+0x58>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <WIZCHIP_WRITE_BUF+0x8c>)
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <WIZCHIP_WRITE_BUF+0x8c>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4798      	blx	r3
}
 8003686:	bf00      	nop
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000020 	.word	0x20000020

08003694 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800369e:	2300      	movs	r3, #0
 80036a0:	81fb      	strh	r3, [r7, #14]
 80036a2:	2300      	movs	r3, #0
 80036a4:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	3301      	adds	r3, #1
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fefc 	bl	80034b0 <WIZCHIP_READ>
 80036b8:	4603      	mov	r3, r0
 80036ba:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80036bc:	89bb      	ldrh	r3, [r7, #12]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	b29c      	uxth	r4, r3
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	3301      	adds	r3, #1
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff feee 	bl	80034b0 <WIZCHIP_READ>
 80036d4:	4603      	mov	r3, r0
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	4423      	add	r3, r4
 80036da:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80036dc:	89bb      	ldrh	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01a      	beq.n	8003718 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	3301      	adds	r3, #1
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fede 	bl	80034b0 <WIZCHIP_READ>
 80036f4:	4603      	mov	r3, r0
 80036f6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80036f8:	89fb      	ldrh	r3, [r7, #14]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	b29c      	uxth	r4, r3
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	3301      	adds	r3, #1
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fed0 	bl	80034b0 <WIZCHIP_READ>
 8003710:	4603      	mov	r3, r0
 8003712:	b29b      	uxth	r3, r3
 8003714:	4423      	add	r3, r4
 8003716:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003718:	89fa      	ldrh	r2, [r7, #14]
 800371a:	89bb      	ldrh	r3, [r7, #12]
 800371c:	429a      	cmp	r2, r3
 800371e:	d1c2      	bne.n	80036a6 <getSn_TX_FSR+0x12>
   return val;
 8003720:	89fb      	ldrh	r3, [r7, #14]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bd90      	pop	{r4, r7, pc}

0800372a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800372a:	b590      	push	{r4, r7, lr}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003734:	2300      	movs	r3, #0
 8003736:	81fb      	strh	r3, [r7, #14]
 8003738:	2300      	movs	r3, #0
 800373a:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	3301      	adds	r3, #1
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff feb1 	bl	80034b0 <WIZCHIP_READ>
 800374e:	4603      	mov	r3, r0
 8003750:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003752:	89bb      	ldrh	r3, [r7, #12]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	b29c      	uxth	r4, r3
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	3301      	adds	r3, #1
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fea3 	bl	80034b0 <WIZCHIP_READ>
 800376a:	4603      	mov	r3, r0
 800376c:	b29b      	uxth	r3, r3
 800376e:	4423      	add	r3, r4
 8003770:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003772:	89bb      	ldrh	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01a      	beq.n	80037ae <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	3301      	adds	r3, #1
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fe93 	bl	80034b0 <WIZCHIP_READ>
 800378a:	4603      	mov	r3, r0
 800378c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800378e:	89fb      	ldrh	r3, [r7, #14]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	b29c      	uxth	r4, r3
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	3301      	adds	r3, #1
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fe85 	bl	80034b0 <WIZCHIP_READ>
 80037a6:	4603      	mov	r3, r0
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	4423      	add	r3, r4
 80037ac:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80037ae:	89fa      	ldrh	r2, [r7, #14]
 80037b0:	89bb      	ldrh	r3, [r7, #12]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d1c2      	bne.n	800373c <getSn_RX_RSR+0x12>
   return val;
 80037b6:	89fb      	ldrh	r3, [r7, #14]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}

080037c0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	71fb      	strb	r3, [r7, #7]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]
   if(len == 0)  return;
 80037d8:	88bb      	ldrh	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d048      	beq.n	8003870 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	3301      	adds	r3, #1
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fe60 	bl	80034b0 <WIZCHIP_READ>
 80037f0:	4603      	mov	r3, r0
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	b29c      	uxth	r4, r3
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	3301      	adds	r3, #1
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fe53 	bl	80034b0 <WIZCHIP_READ>
 800380a:	4603      	mov	r3, r0
 800380c:	b29b      	uxth	r3, r3
 800380e:	4423      	add	r3, r4
 8003810:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003812:	89fb      	ldrh	r3, [r7, #14]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	79fa      	ldrb	r2, [r7, #7]
 8003818:	0092      	lsls	r2, r2, #2
 800381a:	3202      	adds	r2, #2
 800381c:	00d2      	lsls	r2, r2, #3
 800381e:	4413      	add	r3, r2
 8003820:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003822:	88bb      	ldrh	r3, [r7, #4]
 8003824:	461a      	mov	r2, r3
 8003826:	6839      	ldr	r1, [r7, #0]
 8003828:	68b8      	ldr	r0, [r7, #8]
 800382a:	f7ff feeb 	bl	8003604 <WIZCHIP_WRITE_BUF>

   ptr += len;
 800382e:	89fa      	ldrh	r2, [r7, #14]
 8003830:	88bb      	ldrh	r3, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	3301      	adds	r3, #1
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003842:	461a      	mov	r2, r3
 8003844:	89fb      	ldrh	r3, [r7, #14]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	b29b      	uxth	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f7ff fe5e 	bl	8003510 <WIZCHIP_WRITE>
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	3301      	adds	r3, #1
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003860:	461a      	mov	r2, r3
 8003862:	89fb      	ldrh	r3, [r7, #14]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f7ff fe51 	bl	8003510 <WIZCHIP_WRITE>
 800386e:	e000      	b.n	8003872 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003870:	bf00      	nop
}
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bd90      	pop	{r4, r7, pc}

08003878 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	71fb      	strb	r3, [r7, #7]
 8003884:	4613      	mov	r3, r2
 8003886:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]

   if(len == 0) return;
 8003890:	88bb      	ldrh	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d048      	beq.n	8003928 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	3301      	adds	r3, #1
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fe04 	bl	80034b0 <WIZCHIP_READ>
 80038a8:	4603      	mov	r3, r0
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	b29c      	uxth	r4, r3
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	3301      	adds	r3, #1
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fdf7 	bl	80034b0 <WIZCHIP_READ>
 80038c2:	4603      	mov	r3, r0
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	4423      	add	r3, r4
 80038c8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80038ca:	89fb      	ldrh	r3, [r7, #14]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	79fa      	ldrb	r2, [r7, #7]
 80038d0:	0092      	lsls	r2, r2, #2
 80038d2:	3203      	adds	r2, #3
 80038d4:	00d2      	lsls	r2, r2, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80038da:	88bb      	ldrh	r3, [r7, #4]
 80038dc:	461a      	mov	r2, r3
 80038de:	6839      	ldr	r1, [r7, #0]
 80038e0:	68b8      	ldr	r0, [r7, #8]
 80038e2:	f7ff fe4b 	bl	800357c <WIZCHIP_READ_BUF>
   ptr += len;
 80038e6:	89fa      	ldrh	r2, [r7, #14]
 80038e8:	88bb      	ldrh	r3, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	81fb      	strh	r3, [r7, #14]

   setSn_RX_RD(sn,ptr);
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	3301      	adds	r3, #1
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80038fa:	461a      	mov	r2, r3
 80038fc:	89fb      	ldrh	r3, [r7, #14]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	b29b      	uxth	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f7ff fe02 	bl	8003510 <WIZCHIP_WRITE>
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	3301      	adds	r3, #1
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003918:	461a      	mov	r2, r3
 800391a:	89fb      	ldrh	r3, [r7, #14]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f7ff fdf5 	bl	8003510 <WIZCHIP_WRITE>
 8003926:	e000      	b.n	800392a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8003928:	bf00      	nop
}
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}

08003930 <wizchip_cris_enter>:
/**
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_enter(void)           {};
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <wizchip_cris_exit>:
/**
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_exit(void)          {};
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <wizchip_cs_select>:
/**
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_select(void)            {};
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <wizchip_cs_deselect>:
/**
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_deselect(void)          {};
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <wizchip_bus_readbyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20140501 : Explict pointer type casting
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); };
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <wizchip_bus_writebyte>:
 * null function is called.
 */

//M20140501 : Explict pointer type casting
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*) AddrSel) = wb; };
void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; };
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <wizchip_spi_readbyte>:
/**
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_spi_readbyte(void)        {return 0;};
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
 8003998:	2300      	movs	r3, #0
 800399a:	4618      	mov	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr

080039a2 <wizchip_spi_writebyte>:
/**
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_spi_writebyte(uint8_t wb) {};
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	4603      	mov	r3, r0
 80039aa:	71fb      	strb	r3, [r7, #7]
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
	...

080039b8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <reg_wizchip_cs_cbfunc+0x16>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <reg_wizchip_cs_cbfunc+0x3c>)
 80039d0:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <reg_wizchip_cs_cbfunc+0x40>)
 80039d2:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <reg_wizchip_cs_cbfunc+0x3c>)
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <reg_wizchip_cs_cbfunc+0x44>)
 80039d8:	615a      	str	r2, [r3, #20]
 80039da:	e005      	b.n	80039e8 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80039dc:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <reg_wizchip_cs_cbfunc+0x3c>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <reg_wizchip_cs_cbfunc+0x3c>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6153      	str	r3, [r2, #20]
   }
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000020 	.word	0x20000020
 80039f8:	08003949 	.word	0x08003949
 80039fc:	08003955 	.word	0x08003955

08003a00 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003a0a:	bf00      	nop
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <reg_wizchip_spi_cbfunc+0x48>)
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f9      	beq.n	8003a0c <reg_wizchip_spi_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <reg_wizchip_spi_cbfunc+0x24>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003a24:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <reg_wizchip_spi_cbfunc+0x48>)
 8003a26:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <reg_wizchip_spi_cbfunc+0x4c>)
 8003a28:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <reg_wizchip_spi_cbfunc+0x48>)
 8003a2c:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <reg_wizchip_spi_cbfunc+0x50>)
 8003a2e:	61da      	str	r2, [r3, #28]
 8003a30:	e005      	b.n	8003a3e <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003a32:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <reg_wizchip_spi_cbfunc+0x48>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003a38:	4a03      	ldr	r2, [pc, #12]	; (8003a48 <reg_wizchip_spi_cbfunc+0x48>)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	61d3      	str	r3, [r2, #28]
   }
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	20000020 	.word	0x20000020
 8003a4c:	08003995 	.word	0x08003995
 8003a50:	080039a3 	.word	0x080039a3

08003a54 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	6039      	str	r1, [r7, #0]
 8003a5e:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75fb      	strb	r3, [r7, #23]
   uint8_t* ptmp[2] = {0,0};
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	2b0f      	cmp	r3, #15
 8003a70:	f200 80c2 	bhi.w	8003bf8 <ctlwizchip+0x1a4>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <ctlwizchip+0x28>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003abd 	.word	0x08003abd
 8003a80:	08003ac3 	.word	0x08003ac3
 8003a84:	08003aef 	.word	0x08003aef
 8003a88:	08003ae3 	.word	0x08003ae3
 8003a8c:	08003afd 	.word	0x08003afd
 8003a90:	08003b09 	.word	0x08003b09
 8003a94:	08003b17 	.word	0x08003b17
 8003a98:	08003b3d 	.word	0x08003b3d
 8003a9c:	08003b63 	.word	0x08003b63
 8003aa0:	08003b9d 	.word	0x08003b9d
 8003aa4:	08003ba3 	.word	0x08003ba3
 8003aa8:	08003bab 	.word	0x08003bab
 8003aac:	08003bff 	.word	0x08003bff
 8003ab0:	08003bb3 	.word	0x08003bb3
 8003ab4:	08003bc1 	.word	0x08003bc1
 8003ab8:	08003bdd 	.word	0x08003bdd
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003abc:	f000 f8e6 	bl	8003c8c <wizchip_sw_reset>
         break;
 8003ac0:	e09e      	b.n	8003c00 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 f923 	bl	8003d24 <wizchip_init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	e08f      	b.n	8003c02 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f9a8 	bl	8003e3c <wizchip_clrinterrupt>
         break;
 8003aec:	e088      	b.n	8003c00 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003aee:	f000 f9c3 	bl	8003e78 <wizchip_getinterrupt>
 8003af2:	4603      	mov	r3, r0
 8003af4:	461a      	mov	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	801a      	strh	r2, [r3, #0]
         break;
 8003afa:	e081      	b.n	8003c00 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f9de 	bl	8003ec2 <wizchip_setinterruptmask>
         break;
 8003b06:	e07b      	b.n	8003c00 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003b08:	f000 f9f6 	bl	8003ef8 <wizchip_getinterruptmask>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	461a      	mov	r2, r3
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	801a      	strh	r2, [r3, #0]
         break;
 8003b14:	e074      	b.n	8003c00 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	4619      	mov	r1, r3
 8003b22:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003b26:	f7ff fcf3 	bl	8003510 <WIZCHIP_WRITE>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	4619      	mov	r1, r3
 8003b32:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003b36:	f7ff fceb 	bl	8003510 <WIZCHIP_WRITE>
         break;
 8003b3a:	e061      	b.n	8003c00 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003b3c:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003b40:	f7ff fcb6 	bl	80034b0 <WIZCHIP_READ>
 8003b44:	4603      	mov	r3, r0
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	021b      	lsls	r3, r3, #8
 8003b4a:	b29c      	uxth	r4, r3
 8003b4c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003b50:	f7ff fcae 	bl	80034b0 <WIZCHIP_READ>
 8003b54:	4603      	mov	r3, r0
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	4423      	add	r3, r4
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	801a      	strh	r2, [r3, #0]
         break;
 8003b60:	e04e      	b.n	8003c00 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003b62:	4b2a      	ldr	r3, [pc, #168]	; (8003c0c <ctlwizchip+0x1b8>)
 8003b64:	789a      	ldrb	r2, [r3, #2]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <ctlwizchip+0x1b8>)
 8003b70:	78d2      	ldrb	r2, [r2, #3]
 8003b72:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	3302      	adds	r3, #2
 8003b78:	4a24      	ldr	r2, [pc, #144]	; (8003c0c <ctlwizchip+0x1b8>)
 8003b7a:	7912      	ldrb	r2, [r2, #4]
 8003b7c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	3303      	adds	r3, #3
 8003b82:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <ctlwizchip+0x1b8>)
 8003b84:	7952      	ldrb	r2, [r2, #5]
 8003b86:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <ctlwizchip+0x1b8>)
 8003b8e:	7992      	ldrb	r2, [r2, #6]
 8003b90:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	3305      	adds	r3, #5
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
         break;
 8003b9a:	e031      	b.n	8003c00 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003b9c:	f000 f9ff 	bl	8003f9e <wizphy_reset>
         break;
 8003ba0:	e02e      	b.n	8003c00 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003ba2:	6838      	ldr	r0, [r7, #0]
 8003ba4:	f000 fa22 	bl	8003fec <wizphy_setphyconf>
         break;
 8003ba8:	e02a      	b.n	8003c00 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003baa:	6838      	ldr	r0, [r7, #0]
 8003bac:	f000 fa60 	bl	8004070 <wizphy_getphyconf>
         break;
 8003bb0:	e026      	b.n	8003c00 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 faa3 	bl	8004102 <wizphy_setphypmode>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	e020      	b.n	8003c02 <ctlwizchip+0x1ae>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003bc0:	f000 f9d4 	bl	8003f6c <wizphy_getphypmode>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	2bff      	cmp	r3, #255	; 0xff
 8003bcc:	d102      	bne.n	8003bd4 <ctlwizchip+0x180>
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	e016      	b.n	8003c02 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	7dfa      	ldrb	r2, [r7, #23]
 8003bd8:	701a      	strb	r2, [r3, #0]
         break;
 8003bda:	e011      	b.n	8003c00 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003bdc:	f000 f9af 	bl	8003f3e <wizphy_getphylink>
 8003be0:	4603      	mov	r3, r0
 8003be2:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2bff      	cmp	r3, #255	; 0xff
 8003be8:	d102      	bne.n	8003bf0 <ctlwizchip+0x19c>
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
 8003bee:	e008      	b.n	8003c02 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	7dfa      	ldrb	r2, [r7, #23]
 8003bf4:	701a      	strb	r2, [r3, #0]
         break;
 8003bf6:	e003      	b.n	8003c00 <ctlwizchip+0x1ac>
      default:
         return -1;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfc:	e001      	b.n	8003c02 <ctlwizchip+0x1ae>
         break;
 8003bfe:	bf00      	nop
   }
   return 0;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd90      	pop	{r4, r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000020 	.word	0x20000020

08003c10 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	71fb      	strb	r3, [r7, #7]

   switch(cntype)
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	2b05      	cmp	r3, #5
 8003c20:	d82c      	bhi.n	8003c7c <ctlnetwork+0x6c>
 8003c22:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <ctlnetwork+0x18>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c41 	.word	0x08003c41
 8003c2c:	08003c49 	.word	0x08003c49
 8003c30:	08003c51 	.word	0x08003c51
 8003c34:	08003c5f 	.word	0x08003c5f
 8003c38:	08003c6d 	.word	0x08003c6d
 8003c3c:	08003c75 	.word	0x08003c75
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003c40:	6838      	ldr	r0, [r7, #0]
 8003c42:	f000 faa9 	bl	8004198 <wizchip_setnetinfo>
         break;
 8003c46:	e01c      	b.n	8003c82 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003c48:	6838      	ldr	r0, [r7, #0]
 8003c4a:	f000 fae5 	bl	8004218 <wizchip_getnetinfo>
         break;
 8003c4e:	e018      	b.n	8003c82 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fb1f 	bl	8004298 <wizchip_setnetmode>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	e012      	b.n	8003c84 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003c5e:	f000 fb3d 	bl	80042dc <wizchip_getnetmode>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461a      	mov	r2, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	701a      	strb	r2, [r3, #0]
         break;
 8003c6a:	e00a      	b.n	8003c82 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003c6c:	6838      	ldr	r0, [r7, #0]
 8003c6e:	f000 fb3d 	bl	80042ec <wizchip_settimeout>
         break;
 8003c72:	e006      	b.n	8003c82 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003c74:	6838      	ldr	r0, [r7, #0]
 8003c76:	f000 fb5a 	bl	800432e <wizchip_gettimeout>
         break;
 8003c7a:	e002      	b.n	8003c82 <ctlnetwork+0x72>
      default:
         return -1;
 8003c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c80:	e000      	b.n	8003c84 <ctlnetwork+0x74>
   }
   return 0;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4];
   uint8_t mac[6];
   getSHAR(mac);
 8003c92:	1d3b      	adds	r3, r7, #4
 8003c94:	2206      	movs	r2, #6
 8003c96:	4619      	mov	r1, r3
 8003c98:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003c9c:	f7ff fc6e 	bl	800357c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003ca0:	f107 0314 	add.w	r3, r7, #20
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cac:	f7ff fc66 	bl	800357c <WIZCHIP_READ_BUF>
 8003cb0:	f107 0310 	add.w	r3, r7, #16
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003cbc:	f7ff fc5e 	bl	800357c <WIZCHIP_READ_BUF>
 8003cc0:	f107 030c 	add.w	r3, r7, #12
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003ccc:	f7ff fc56 	bl	800357c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	f7ff fc1c 	bl	8003510 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003cd8:	2000      	movs	r0, #0
 8003cda:	f7ff fbe9 	bl	80034b0 <WIZCHIP_READ>
   setSHAR(mac);
 8003cde:	1d3b      	adds	r3, r7, #4
 8003ce0:	2206      	movs	r2, #6
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003ce8:	f7ff fc8c 	bl	8003604 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cf8:	f7ff fc84 	bl	8003604 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003cfc:	f107 0310 	add.w	r3, r7, #16
 8003d00:	2204      	movs	r2, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003d08:	f7ff fc7c 	bl	8003604 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003d0c:	f107 030c 	add.w	r3, r7, #12
 8003d10:	2204      	movs	r2, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003d18:	f7ff fc74 	bl	8003604 <WIZCHIP_WRITE_BUF>
}
 8003d1c:	bf00      	nop
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003d32:	f7ff ffab 	bl	8003c8c <wizchip_sw_reset>
   if(txsize)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d03b      	beq.n	8003db4 <wizchip_init+0x90>
   {
      tmp = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]
 8003d44:	e00e      	b.n	8003d64 <wizchip_init+0x40>
         tmp += txsize[i];
 8003d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	781a      	ldrb	r2, [r3, #0]
 8003d50:	7bbb      	ldrb	r3, [r7, #14]
 8003d52:	4413      	add	r3, r2
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	73fb      	strb	r3, [r7, #15]
 8003d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d68:	2b07      	cmp	r3, #7
 8003d6a:	ddec      	ble.n	8003d46 <wizchip_init+0x22>
      if(tmp > 16) return -1;
 8003d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	dd02      	ble.n	8003d7a <wizchip_init+0x56>
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295
 8003d78:	e05c      	b.n	8003e34 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
 8003d7e:	e015      	b.n	8003dac <wizchip_init+0x88>
         setSn_TXBUF_SIZE(i, txsize[i]);
 8003d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	3301      	adds	r3, #1
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	f7ff fbb8 	bl	8003510 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	3301      	adds	r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db0:	2b07      	cmp	r3, #7
 8003db2:	dde5      	ble.n	8003d80 <wizchip_init+0x5c>
   }
   if(rxsize)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d03b      	beq.n	8003e32 <wizchip_init+0x10e>
   {
      tmp = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]
 8003dc2:	e00e      	b.n	8003de2 <wizchip_init+0xbe>
         tmp += rxsize[i];
 8003dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	4413      	add	r3, r2
 8003dcc:	781a      	ldrb	r2, [r3, #0]
 8003dce:	7bbb      	ldrb	r3, [r7, #14]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de6:	2b07      	cmp	r3, #7
 8003de8:	ddec      	ble.n	8003dc4 <wizchip_init+0xa0>
      if(tmp > 16) return -1;
 8003dea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	dd02      	ble.n	8003df8 <wizchip_init+0xd4>
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295
 8003df6:	e01d      	b.n	8003e34 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
 8003dfc:	e015      	b.n	8003e2a <wizchip_init+0x106>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 8003dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	3301      	adds	r3, #1
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	4413      	add	r3, r2
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f7ff fb79 	bl	8003510 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	3301      	adds	r3, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2e:	2b07      	cmp	r3, #7
 8003e30:	dde5      	ble.n	8003dfe <wizchip_init+0xda>
   }
   return 0;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   ir |= sir;
   setIR(ir);
#else
   setIR(ir);
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	f023 030f 	bic.w	r3, r3, #15
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003e60:	f7ff fb56 	bl	8003510 <WIZCHIP_WRITE>
   setSIR(sir);
 8003e64:	7bbb      	ldrb	r3, [r7, #14]
 8003e66:	4619      	mov	r1, r3
 8003e68:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003e6c:	f7ff fb50 	bl	8003510 <WIZCHIP_WRITE>
#endif
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   ir = getIR();
   sir = ir 0x0F;
#else
   ir  = getIR();
 8003e8a:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003e8e:	f7ff fb0f 	bl	80034b0 <WIZCHIP_READ>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f023 030f 	bic.w	r3, r3, #15
 8003e98:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003e9a:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003e9e:	f7ff fb07 	bl	80034b0 <WIZCHIP_READ>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003ea6:	79bb      	ldrb	r3, [r7, #6]
 8003ea8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003eaa:	88bb      	ldrh	r3, [r7, #4]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003eb8:	88bb      	ldrh	r3, [r7, #4]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   imr |= simr;
   setIMR(imr);
#else
   setIMR(imr);
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	4619      	mov	r1, r3
 8003edc:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003ee0:	f7ff fb16 	bl	8003510 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003ee4:	7bbb      	ldrb	r3, [r7, #14]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003eec:	f7ff fb10 	bl	8003510 <WIZCHIP_WRITE>
#endif
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   imr  = getIMR();
   simr = imr 0x0F;
#else
   imr  = getIMR();
 8003f0a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003f0e:	f7ff facf 	bl	80034b0 <WIZCHIP_READ>
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003f16:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003f1a:	f7ff fac9 	bl	80034b0 <WIZCHIP_READ>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003f22:	79bb      	ldrb	r3, [r7, #6]
 8003f24:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003f26:	88bb      	ldrh	r3, [r7, #4]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003f34:	88bb      	ldrh	r3, [r7, #4]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
   else
      tmp = PHY_LINK_OFF;
#elif _WIZCHIP_ == 5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003f44:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003f48:	f7ff fab2 	bl	80034b0 <WIZCHIP_READ>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <wizphy_getphylink+0x1e>
      tmp = PHY_LINK_ON;
 8003f56:	2301      	movs	r3, #1
 8003f58:	71fb      	strb	r3, [r7, #7]
 8003f5a:	e001      	b.n	8003f60 <wizphy_getphylink+0x22>
   else
      tmp = PHY_LINK_OFF;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	71fb      	strb	r3, [r7, #7]
#else
   tmp = -1;
#endif
   return tmp;
 8003f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <wizphy_getphypmode>:

#if _WIZCHIP_ > 5100

int8_t wizphy_getphypmode(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if(getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
 8003f76:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003f7a:	f7ff fa99 	bl	80034b0 <WIZCHIP_READ>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	71fb      	strb	r3, [r7, #7]
 8003f8c:	e001      	b.n	8003f92 <wizphy_getphypmode+0x26>
      else
         tmp = PHY_POWER_NORM;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <wizphy_reset>:
#endif

#if _WIZCHIP_ == 5500
void wizphy_reset(void)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003fa4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003fa8:	f7ff fa82 	bl	80034b0 <WIZCHIP_READ>
 8003fac:	4603      	mov	r3, r0
 8003fae:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb6:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003fc0:	f7ff faa6 	bl	8003510 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003fc4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003fc8:	f7ff fa72 	bl	80034b0 <WIZCHIP_READ>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fd6:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003fe0:	f7ff fa96 	bl	8003510 <WIZCHIP_WRITE>
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d104      	bne.n	800400a <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e003      	b.n	8004012 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004010:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	785b      	ldrb	r3, [r3, #1]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d104      	bne.n	8004024 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004020:	73fb      	strb	r3, [r7, #15]
 8004022:	e019      	b.n	8004058 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	78db      	ldrb	r3, [r3, #3]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10d      	bne.n	8004048 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	789b      	ldrb	r3, [r3, #2]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d104      	bne.n	800403e <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	f043 0318 	orr.w	r3, r3, #24
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e00c      	b.n	8004058 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	f043 0308 	orr.w	r3, r3, #8
 8004044:	73fb      	strb	r3, [r7, #15]
 8004046:	e007      	b.n	8004058 <wizphy_setphyconf+0x6c>
      }
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	789b      	ldrb	r3, [r3, #2]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d103      	bne.n	8004058 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	f043 0310 	orr.w	r3, r3, #16
 8004056:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	4619      	mov	r1, r3
 800405c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004060:	f7ff fa56 	bl	8003510 <WIZCHIP_WRITE>
   wizphy_reset();
 8004064:	f7ff ff9b 	bl	8003f9e <wizphy_reset>
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800407c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004080:	f7ff fa16 	bl	80034b0 <WIZCHIP_READ>
 8004084:	4603      	mov	r3, r0
 8004086:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	119b      	asrs	r3, r3, #6
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	b2da      	uxtb	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d001      	beq.n	80040a6 <wizphy_getphyconf+0x36>
 80040a2:	2b38      	cmp	r3, #56	; 0x38
 80040a4:	d103      	bne.n	80040ae <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA:
         phyconf->mode = PHY_MODE_AUTONEGO;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	705a      	strb	r2, [r3, #1]
         break;
 80040ac:	e003      	b.n	80040b6 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	705a      	strb	r2, [r3, #1]
         break;
 80040b4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040bc:	2b18      	cmp	r3, #24
 80040be:	d003      	beq.n	80040c8 <wizphy_getphyconf+0x58>
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d001      	beq.n	80040c8 <wizphy_getphyconf+0x58>
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d103      	bne.n	80040d0 <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	709a      	strb	r2, [r3, #2]
         break;
 80040ce:	e003      	b.n	80040d8 <wizphy_getphyconf+0x68>
      default:
         phyconf->speed = PHY_SPEED_10;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	709a      	strb	r2, [r3, #2]
         break;
 80040d6:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040de:	2b18      	cmp	r3, #24
 80040e0:	d003      	beq.n	80040ea <wizphy_getphyconf+0x7a>
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d001      	beq.n	80040ea <wizphy_getphyconf+0x7a>
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d103      	bne.n	80040f2 <wizphy_getphyconf+0x82>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	70da      	strb	r2, [r3, #3]
         break;
 80040f0:	e003      	b.n	80040fa <wizphy_getphyconf+0x8a>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	70da      	strb	r2, [r3, #3]
         break;
 80040f8:	bf00      	nop
   }
}
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004110:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004114:	f7ff f9cc 	bl	80034b0 <WIZCHIP_READ>
 8004118:	4603      	mov	r3, r0
 800411a:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <wizphy_setphypmode+0x2a>
 8004126:	f04f 33ff 	mov.w	r3, #4294967295
 800412a:	e030      	b.n	800418e <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004132:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d104      	bne.n	8004144 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004140:	73fb      	strb	r3, [r7, #15]
 8004142:	e003      	b.n	800414c <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800414a:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	4619      	mov	r1, r3
 8004150:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004154:	f7ff f9dc 	bl	8003510 <WIZCHIP_WRITE>
   wizphy_reset();
 8004158:	f7ff ff21 	bl	8003f9e <wizphy_reset>
   tmp = getPHYCFGR();
 800415c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004160:	f7ff f9a6 	bl	80034b0 <WIZCHIP_READ>
 8004164:	4603      	mov	r3, r0
 8004166:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d106      	bne.n	800417c <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <wizphy_setphypmode+0x88>
 8004178:	2300      	movs	r3, #0
 800417a:	e008      	b.n	800418e <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <wizphy_setphypmode+0x88>
 8004186:	2300      	movs	r3, #0
 8004188:	e001      	b.n	800418e <wizphy_setphypmode+0x8c>
   }
   return -1;
 800418a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2206      	movs	r2, #6
 80041a4:	4619      	mov	r1, r3
 80041a6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80041aa:	f7ff fa2b 	bl	8003604 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	330e      	adds	r3, #14
 80041b2:	2204      	movs	r2, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80041ba:	f7ff fa23 	bl	8003604 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	330a      	adds	r3, #10
 80041c2:	2204      	movs	r2, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80041ca:	f7ff fa1b 	bl	8003604 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3306      	adds	r3, #6
 80041d2:	2204      	movs	r2, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80041da:	f7ff fa13 	bl	8003604 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	7c9a      	ldrb	r2, [r3, #18]
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <wizchip_setnetinfo+0x78>)
 80041e4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	7cda      	ldrb	r2, [r3, #19]
 80041ea:	4b09      	ldr	r3, [pc, #36]	; (8004210 <wizchip_setnetinfo+0x78>)
 80041ec:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	7d1a      	ldrb	r2, [r3, #20]
 80041f2:	4b07      	ldr	r3, [pc, #28]	; (8004210 <wizchip_setnetinfo+0x78>)
 80041f4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	7d5a      	ldrb	r2, [r3, #21]
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <wizchip_setnetinfo+0x78>)
 80041fc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	7d9a      	ldrb	r2, [r3, #22]
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <wizchip_setnetinfo+0x7c>)
 8004204:	701a      	strb	r2, [r3, #0]
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000090 	.word	0x20000090
 8004214:	20000094 	.word	0x20000094

08004218 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2206      	movs	r2, #6
 8004224:	4619      	mov	r1, r3
 8004226:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800422a:	f7ff f9a7 	bl	800357c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	330e      	adds	r3, #14
 8004232:	2204      	movs	r2, #4
 8004234:	4619      	mov	r1, r3
 8004236:	f44f 7080 	mov.w	r0, #256	; 0x100
 800423a:	f7ff f99f 	bl	800357c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	330a      	adds	r3, #10
 8004242:	2204      	movs	r2, #4
 8004244:	4619      	mov	r1, r3
 8004246:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800424a:	f7ff f997 	bl	800357c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3306      	adds	r3, #6
 8004252:	2204      	movs	r2, #4
 8004254:	4619      	mov	r1, r3
 8004256:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800425a:	f7ff f98f 	bl	800357c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <wizchip_getnetinfo+0x78>)
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <wizchip_getnetinfo+0x78>)
 8004268:	785a      	ldrb	r2, [r3, #1]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800426e:	4b08      	ldr	r3, [pc, #32]	; (8004290 <wizchip_getnetinfo+0x78>)
 8004270:	789a      	ldrb	r2, [r3, #2]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <wizchip_getnetinfo+0x78>)
 8004278:	78da      	ldrb	r2, [r3, #3]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <wizchip_getnetinfo+0x7c>)
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	759a      	strb	r2, [r3, #22]
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000090 	.word	0x20000090
 8004294:	20000094 	.word	0x20000094

08004298 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != 5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <wizchip_setnetmode+0x1e>
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	e00e      	b.n	80042d4 <wizchip_setnetmode+0x3c>
#endif
   tmp = getMR();
 80042b6:	2000      	movs	r0, #0
 80042b8:	f7ff f8fa 	bl	80034b0 <WIZCHIP_READ>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	4619      	mov	r1, r3
 80042cc:	2000      	movs	r0, #0
 80042ce:	f7ff f91f 	bl	8003510 <WIZCHIP_WRITE>
   return 0;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80042e0:	2000      	movs	r0, #0
 80042e2:	f7ff f8e5 	bl	80034b0 <WIZCHIP_READ>
 80042e6:	4603      	mov	r3, r0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}

080042ec <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	4619      	mov	r1, r3
 80042fa:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80042fe:	f7ff f907 	bl	8003510 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	885b      	ldrh	r3, [r3, #2]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	b29b      	uxth	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	4619      	mov	r1, r3
 800430e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8004312:	f7ff f8fd 	bl	8003510 <WIZCHIP_WRITE>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	885b      	ldrh	r3, [r3, #2]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	4619      	mov	r1, r3
 800431e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8004322:	f7ff f8f5 	bl	8003510 <WIZCHIP_WRITE>
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800432e:	b590      	push	{r4, r7, lr}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004336:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800433a:	f7ff f8b9 	bl	80034b0 <WIZCHIP_READ>
 800433e:	4603      	mov	r3, r0
 8004340:	461a      	mov	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004346:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800434a:	f7ff f8b1 	bl	80034b0 <WIZCHIP_READ>
 800434e:	4603      	mov	r3, r0
 8004350:	b29b      	uxth	r3, r3
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	b29c      	uxth	r4, r3
 8004356:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800435a:	f7ff f8a9 	bl	80034b0 <WIZCHIP_READ>
 800435e:	4603      	mov	r3, r0
 8004360:	b29b      	uxth	r3, r3
 8004362:	4423      	add	r3, r4
 8004364:	b29a      	uxth	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	805a      	strh	r2, [r3, #2]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bd90      	pop	{r4, r7, pc}
	...

08004374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_Init+0x28>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a07      	ldr	r2, [pc, #28]	; (800439c <HAL_Init+0x28>)
 800437e:	f043 0310 	orr.w	r3, r3, #16
 8004382:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004384:	2003      	movs	r0, #3
 8004386:	f000 f8d1 	bl	800452c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800438a:	2000      	movs	r0, #0
 800438c:	f7fe fc0c 	bl	8002ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004390:	f7fe fb46 	bl	8002a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40022000 	.word	0x40022000

080043a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_IncTick+0x1c>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_IncTick+0x20>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	4a03      	ldr	r2, [pc, #12]	; (80043c0 <HAL_IncTick+0x20>)
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	20000044 	.word	0x20000044
 80043c0:	2000231c 	.word	0x2000231c

080043c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return uwTick;
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <HAL_GetTick+0x10>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	2000231c 	.word	0x2000231c

080043d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e8:	4b0c      	ldr	r3, [pc, #48]	; (800441c <__NVIC_SetPriorityGrouping+0x44>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043f4:	4013      	ands	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800440a:	4a04      	ldr	r2, [pc, #16]	; (800441c <__NVIC_SetPriorityGrouping+0x44>)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	60d3      	str	r3, [r2, #12]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <__NVIC_GetPriorityGrouping+0x18>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	f003 0307 	and.w	r3, r3, #7
}
 800442e:	4618      	mov	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	e000ed00 	.word	0xe000ed00

0800443c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	2b00      	cmp	r3, #0
 800444c:	db0b      	blt.n	8004466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	f003 021f 	and.w	r2, r3, #31
 8004454:	4906      	ldr	r1, [pc, #24]	; (8004470 <__NVIC_EnableIRQ+0x34>)
 8004456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2001      	movs	r0, #1
 800445e:	fa00 f202 	lsl.w	r2, r0, r2
 8004462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	e000e100 	.word	0xe000e100

08004474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004484:	2b00      	cmp	r3, #0
 8004486:	db0a      	blt.n	800449e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	490c      	ldr	r1, [pc, #48]	; (80044c0 <__NVIC_SetPriority+0x4c>)
 800448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004492:	0112      	lsls	r2, r2, #4
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	440b      	add	r3, r1
 8004498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800449c:	e00a      	b.n	80044b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4908      	ldr	r1, [pc, #32]	; (80044c4 <__NVIC_SetPriority+0x50>)
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	3b04      	subs	r3, #4
 80044ac:	0112      	lsls	r2, r2, #4
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	440b      	add	r3, r1
 80044b2:	761a      	strb	r2, [r3, #24]
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	e000e100 	.word	0xe000e100
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f1c3 0307 	rsb	r3, r3, #7
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	bf28      	it	cs
 80044e6:	2304      	movcs	r3, #4
 80044e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d902      	bls.n	80044f8 <NVIC_EncodePriority+0x30>
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3b03      	subs	r3, #3
 80044f6:	e000      	b.n	80044fa <NVIC_EncodePriority+0x32>
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43da      	mvns	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	401a      	ands	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004510:	f04f 31ff 	mov.w	r1, #4294967295
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	43d9      	mvns	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004520:	4313      	orrs	r3, r2
         );
}
 8004522:	4618      	mov	r0, r3
 8004524:	3724      	adds	r7, #36	; 0x24
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ff4f 	bl	80043d8 <__NVIC_SetPriorityGrouping>
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004542:	b580      	push	{r7, lr}
 8004544:	b086      	sub	sp, #24
 8004546:	af00      	add	r7, sp, #0
 8004548:	4603      	mov	r3, r0
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004554:	f7ff ff64 	bl	8004420 <__NVIC_GetPriorityGrouping>
 8004558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f7ff ffb2 	bl	80044c8 <NVIC_EncodePriority>
 8004564:	4602      	mov	r2, r0
 8004566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff81 	bl	8004474 <__NVIC_SetPriority>
}
 8004572:	bf00      	nop
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	4603      	mov	r3, r0
 8004582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff ff57 	bl	800443c <__NVIC_EnableIRQ>
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004598:	b480      	push	{r7}
 800459a:	b08b      	sub	sp, #44	; 0x2c
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045a2:	2300      	movs	r3, #0
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80045a6:	2300      	movs	r3, #0
 80045a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045aa:	e127      	b.n	80047fc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80045ac:	2201      	movs	r2, #1
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69fa      	ldr	r2, [r7, #28]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	f040 8116 	bne.w	80047f6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b12      	cmp	r3, #18
 80045d0:	d034      	beq.n	800463c <HAL_GPIO_Init+0xa4>
 80045d2:	2b12      	cmp	r3, #18
 80045d4:	d80d      	bhi.n	80045f2 <HAL_GPIO_Init+0x5a>
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d02b      	beq.n	8004632 <HAL_GPIO_Init+0x9a>
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d804      	bhi.n	80045e8 <HAL_GPIO_Init+0x50>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d031      	beq.n	8004646 <HAL_GPIO_Init+0xae>
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d01c      	beq.n	8004620 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045e6:	e048      	b.n	800467a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d043      	beq.n	8004674 <HAL_GPIO_Init+0xdc>
 80045ec:	2b11      	cmp	r3, #17
 80045ee:	d01b      	beq.n	8004628 <HAL_GPIO_Init+0x90>
          break;
 80045f0:	e043      	b.n	800467a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80045f2:	4a89      	ldr	r2, [pc, #548]	; (8004818 <HAL_GPIO_Init+0x280>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d026      	beq.n	8004646 <HAL_GPIO_Init+0xae>
 80045f8:	4a87      	ldr	r2, [pc, #540]	; (8004818 <HAL_GPIO_Init+0x280>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d806      	bhi.n	800460c <HAL_GPIO_Init+0x74>
 80045fe:	4a87      	ldr	r2, [pc, #540]	; (800481c <HAL_GPIO_Init+0x284>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d020      	beq.n	8004646 <HAL_GPIO_Init+0xae>
 8004604:	4a86      	ldr	r2, [pc, #536]	; (8004820 <HAL_GPIO_Init+0x288>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d01d      	beq.n	8004646 <HAL_GPIO_Init+0xae>
          break;
 800460a:	e036      	b.n	800467a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800460c:	4a85      	ldr	r2, [pc, #532]	; (8004824 <HAL_GPIO_Init+0x28c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d019      	beq.n	8004646 <HAL_GPIO_Init+0xae>
 8004612:	4a85      	ldr	r2, [pc, #532]	; (8004828 <HAL_GPIO_Init+0x290>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d016      	beq.n	8004646 <HAL_GPIO_Init+0xae>
 8004618:	4a84      	ldr	r2, [pc, #528]	; (800482c <HAL_GPIO_Init+0x294>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <HAL_GPIO_Init+0xae>
          break;
 800461e:	e02c      	b.n	800467a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	623b      	str	r3, [r7, #32]
          break;
 8004626:	e028      	b.n	800467a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	3304      	adds	r3, #4
 800462e:	623b      	str	r3, [r7, #32]
          break;
 8004630:	e023      	b.n	800467a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	3308      	adds	r3, #8
 8004638:	623b      	str	r3, [r7, #32]
          break;
 800463a:	e01e      	b.n	800467a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	330c      	adds	r3, #12
 8004642:	623b      	str	r3, [r7, #32]
          break;
 8004644:	e019      	b.n	800467a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800464e:	2304      	movs	r3, #4
 8004650:	623b      	str	r3, [r7, #32]
          break;
 8004652:	e012      	b.n	800467a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800465c:	2308      	movs	r3, #8
 800465e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	611a      	str	r2, [r3, #16]
          break;
 8004666:	e008      	b.n	800467a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004668:	2308      	movs	r3, #8
 800466a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	615a      	str	r2, [r3, #20]
          break;
 8004672:	e002      	b.n	800467a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004674:	2300      	movs	r3, #0
 8004676:	623b      	str	r3, [r7, #32]
          break;
 8004678:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	2bff      	cmp	r3, #255	; 0xff
 800467e:	d801      	bhi.n	8004684 <HAL_GPIO_Init+0xec>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	e001      	b.n	8004688 <HAL_GPIO_Init+0xf0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2bff      	cmp	r3, #255	; 0xff
 800468e:	d802      	bhi.n	8004696 <HAL_GPIO_Init+0xfe>
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	e002      	b.n	800469c <HAL_GPIO_Init+0x104>
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	3b08      	subs	r3, #8
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	210f      	movs	r1, #15
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	fa01 f303 	lsl.w	r3, r1, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	401a      	ands	r2, r3
 80046ae:	6a39      	ldr	r1, [r7, #32]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	fa01 f303 	lsl.w	r3, r1, r3
 80046b6:	431a      	orrs	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8096 	beq.w	80047f6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046ca:	4b59      	ldr	r3, [pc, #356]	; (8004830 <HAL_GPIO_Init+0x298>)
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	4a58      	ldr	r2, [pc, #352]	; (8004830 <HAL_GPIO_Init+0x298>)
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	6193      	str	r3, [r2, #24]
 80046d6:	4b56      	ldr	r3, [pc, #344]	; (8004830 <HAL_GPIO_Init+0x298>)
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046e2:	4a54      	ldr	r2, [pc, #336]	; (8004834 <HAL_GPIO_Init+0x29c>)
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	3302      	adds	r3, #2
 80046ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	220f      	movs	r2, #15
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43db      	mvns	r3, r3
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4013      	ands	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4b      	ldr	r2, [pc, #300]	; (8004838 <HAL_GPIO_Init+0x2a0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_GPIO_Init+0x19e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4a      	ldr	r2, [pc, #296]	; (800483c <HAL_GPIO_Init+0x2a4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00d      	beq.n	8004732 <HAL_GPIO_Init+0x19a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a49      	ldr	r2, [pc, #292]	; (8004840 <HAL_GPIO_Init+0x2a8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <HAL_GPIO_Init+0x196>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a48      	ldr	r2, [pc, #288]	; (8004844 <HAL_GPIO_Init+0x2ac>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_GPIO_Init+0x192>
 8004726:	2303      	movs	r3, #3
 8004728:	e006      	b.n	8004738 <HAL_GPIO_Init+0x1a0>
 800472a:	2304      	movs	r3, #4
 800472c:	e004      	b.n	8004738 <HAL_GPIO_Init+0x1a0>
 800472e:	2302      	movs	r3, #2
 8004730:	e002      	b.n	8004738 <HAL_GPIO_Init+0x1a0>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_GPIO_Init+0x1a0>
 8004736:	2300      	movs	r3, #0
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	f002 0203 	and.w	r2, r2, #3
 800473e:	0092      	lsls	r2, r2, #2
 8004740:	4093      	lsls	r3, r2
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004748:	493a      	ldr	r1, [pc, #232]	; (8004834 <HAL_GPIO_Init+0x29c>)
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	089b      	lsrs	r3, r3, #2
 800474e:	3302      	adds	r3, #2
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004762:	4b39      	ldr	r3, [pc, #228]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4938      	ldr	r1, [pc, #224]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	600b      	str	r3, [r1, #0]
 800476e:	e006      	b.n	800477e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004770:	4b35      	ldr	r3, [pc, #212]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	43db      	mvns	r3, r3
 8004778:	4933      	ldr	r1, [pc, #204]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 800477a:	4013      	ands	r3, r2
 800477c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d006      	beq.n	8004798 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800478a:	4b2f      	ldr	r3, [pc, #188]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	492e      	ldr	r1, [pc, #184]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	604b      	str	r3, [r1, #4]
 8004796:	e006      	b.n	80047a6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004798:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	43db      	mvns	r3, r3
 80047a0:	4929      	ldr	r1, [pc, #164]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047b2:	4b25      	ldr	r3, [pc, #148]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	4924      	ldr	r1, [pc, #144]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
 80047be:	e006      	b.n	80047ce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047c0:	4b21      	ldr	r3, [pc, #132]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	491f      	ldr	r1, [pc, #124]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80047da:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	491a      	ldr	r1, [pc, #104]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60cb      	str	r3, [r1, #12]
 80047e6:	e006      	b.n	80047f6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047e8:	4b17      	ldr	r3, [pc, #92]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	43db      	mvns	r3, r3
 80047f0:	4915      	ldr	r1, [pc, #84]	; (8004848 <HAL_GPIO_Init+0x2b0>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	3301      	adds	r3, #1
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	fa22 f303 	lsr.w	r3, r2, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	f47f aed0 	bne.w	80045ac <HAL_GPIO_Init+0x14>
  }
}
 800480c:	bf00      	nop
 800480e:	372c      	adds	r7, #44	; 0x2c
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	10210000 	.word	0x10210000
 800481c:	10110000 	.word	0x10110000
 8004820:	10120000 	.word	0x10120000
 8004824:	10310000 	.word	0x10310000
 8004828:	10320000 	.word	0x10320000
 800482c:	10220000 	.word	0x10220000
 8004830:	40021000 	.word	0x40021000
 8004834:	40010000 	.word	0x40010000
 8004838:	40010800 	.word	0x40010800
 800483c:	40010c00 	.word	0x40010c00
 8004840:	40011000 	.word	0x40011000
 8004844:	40011400 	.word	0x40011400
 8004848:	40010400 	.word	0x40010400

0800484c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
 8004858:	4613      	mov	r3, r2
 800485a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800485c:	787b      	ldrb	r3, [r7, #1]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004862:	887a      	ldrh	r2, [r7, #2]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004868:	e003      	b.n	8004872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	041a      	lsls	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	611a      	str	r2, [r3, #16]
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	bc80      	pop	{r7}
 800487a:	4770      	bx	lr

0800487c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e11f      	b.n	8004ace <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fe f8f4 	bl	8002a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2224      	movs	r2, #36	; 0x24
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0201 	bic.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048e0:	f000 fcda 	bl	8005298 <HAL_RCC_GetPCLK1Freq>
 80048e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4a7b      	ldr	r2, [pc, #492]	; (8004ad8 <HAL_I2C_Init+0x25c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d807      	bhi.n	8004900 <HAL_I2C_Init+0x84>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a7a      	ldr	r2, [pc, #488]	; (8004adc <HAL_I2C_Init+0x260>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	bf94      	ite	ls
 80048f8:	2301      	movls	r3, #1
 80048fa:	2300      	movhi	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e006      	b.n	800490e <HAL_I2C_Init+0x92>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a77      	ldr	r2, [pc, #476]	; (8004ae0 <HAL_I2C_Init+0x264>)
 8004904:	4293      	cmp	r3, r2
 8004906:	bf94      	ite	ls
 8004908:	2301      	movls	r3, #1
 800490a:	2300      	movhi	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e0db      	b.n	8004ace <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a72      	ldr	r2, [pc, #456]	; (8004ae4 <HAL_I2C_Init+0x268>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	0c9b      	lsrs	r3, r3, #18
 8004920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4a64      	ldr	r2, [pc, #400]	; (8004ad8 <HAL_I2C_Init+0x25c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d802      	bhi.n	8004950 <HAL_I2C_Init+0xd4>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	3301      	adds	r3, #1
 800494e:	e009      	b.n	8004964 <HAL_I2C_Init+0xe8>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	4a63      	ldr	r2, [pc, #396]	; (8004ae8 <HAL_I2C_Init+0x26c>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	099b      	lsrs	r3, r3, #6
 8004962:	3301      	adds	r3, #1
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	430b      	orrs	r3, r1
 800496a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4956      	ldr	r1, [pc, #344]	; (8004ad8 <HAL_I2C_Init+0x25c>)
 8004980:	428b      	cmp	r3, r1
 8004982:	d80d      	bhi.n	80049a0 <HAL_I2C_Init+0x124>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1e59      	subs	r1, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004992:	3301      	adds	r3, #1
 8004994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004998:	2b04      	cmp	r3, #4
 800499a:	bf38      	it	cc
 800499c:	2304      	movcc	r3, #4
 800499e:	e04f      	b.n	8004a40 <HAL_I2C_Init+0x1c4>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d111      	bne.n	80049cc <HAL_I2C_Init+0x150>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1e58      	subs	r0, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	440b      	add	r3, r1
 80049b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ba:	3301      	adds	r3, #1
 80049bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e012      	b.n	80049f2 <HAL_I2C_Init+0x176>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1e58      	subs	r0, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6859      	ldr	r1, [r3, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	0099      	lsls	r1, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e2:	3301      	adds	r3, #1
 80049e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_I2C_Init+0x17e>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e022      	b.n	8004a40 <HAL_I2C_Init+0x1c4>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10e      	bne.n	8004a20 <HAL_I2C_Init+0x1a4>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1e58      	subs	r0, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6859      	ldr	r1, [r3, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	440b      	add	r3, r1
 8004a10:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a14:	3301      	adds	r3, #1
 8004a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1e:	e00f      	b.n	8004a40 <HAL_I2C_Init+0x1c4>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1e58      	subs	r0, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6859      	ldr	r1, [r3, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	0099      	lsls	r1, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a36:	3301      	adds	r3, #1
 8004a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	6809      	ldr	r1, [r1, #0]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69da      	ldr	r2, [r3, #28]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6911      	ldr	r1, [r2, #16]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68d2      	ldr	r2, [r2, #12]
 8004a7a:	4311      	orrs	r1, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	430b      	orrs	r3, r1
 8004a82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	000186a0 	.word	0x000186a0
 8004adc:	001e847f 	.word	0x001e847f
 8004ae0:	003d08ff 	.word	0x003d08ff
 8004ae4:	431bde83 	.word	0x431bde83
 8004ae8:	10624dd3 	.word	0x10624dd3

08004aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e26c      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8087 	beq.w	8004c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b0c:	4b92      	ldr	r3, [pc, #584]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d00c      	beq.n	8004b32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b18:	4b8f      	ldr	r3, [pc, #572]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 030c 	and.w	r3, r3, #12
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d112      	bne.n	8004b4a <HAL_RCC_OscConfig+0x5e>
 8004b24:	4b8c      	ldr	r3, [pc, #560]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b30:	d10b      	bne.n	8004b4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b32:	4b89      	ldr	r3, [pc, #548]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d06c      	beq.n	8004c18 <HAL_RCC_OscConfig+0x12c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d168      	bne.n	8004c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e246      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b52:	d106      	bne.n	8004b62 <HAL_RCC_OscConfig+0x76>
 8004b54:	4b80      	ldr	r3, [pc, #512]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a7f      	ldr	r2, [pc, #508]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	e02e      	b.n	8004bc0 <HAL_RCC_OscConfig+0xd4>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x98>
 8004b6a:	4b7b      	ldr	r3, [pc, #492]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a7a      	ldr	r2, [pc, #488]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4b78      	ldr	r3, [pc, #480]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a77      	ldr	r2, [pc, #476]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e01d      	b.n	8004bc0 <HAL_RCC_OscConfig+0xd4>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0xbc>
 8004b8e:	4b72      	ldr	r3, [pc, #456]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a71      	ldr	r2, [pc, #452]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b6f      	ldr	r3, [pc, #444]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a6e      	ldr	r2, [pc, #440]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCC_OscConfig+0xd4>
 8004ba8:	4b6b      	ldr	r3, [pc, #428]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a6a      	ldr	r2, [pc, #424]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	4b68      	ldr	r3, [pc, #416]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a67      	ldr	r2, [pc, #412]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7ff fbfc 	bl	80043c4 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7ff fbf8 	bl	80043c4 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e1fa      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be2:	4b5d      	ldr	r3, [pc, #372]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xe4>
 8004bee:	e014      	b.n	8004c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7ff fbe8 	bl	80043c4 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7ff fbe4 	bl	80043c4 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	; 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e1e6      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0a:	4b53      	ldr	r3, [pc, #332]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x10c>
 8004c16:	e000      	b.n	8004c1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d063      	beq.n	8004cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c26:	4b4c      	ldr	r3, [pc, #304]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00b      	beq.n	8004c4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c32:	4b49      	ldr	r3, [pc, #292]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d11c      	bne.n	8004c78 <HAL_RCC_OscConfig+0x18c>
 8004c3e:	4b46      	ldr	r3, [pc, #280]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d116      	bne.n	8004c78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4a:	4b43      	ldr	r3, [pc, #268]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_RCC_OscConfig+0x176>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d001      	beq.n	8004c62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e1ba      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c62:	4b3d      	ldr	r3, [pc, #244]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4939      	ldr	r1, [pc, #228]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c76:	e03a      	b.n	8004cee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d020      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c86:	f7ff fb9d 	bl	80043c4 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8e:	f7ff fb99 	bl	80043c4 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e19b      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca0:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cac:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4927      	ldr	r1, [pc, #156]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]
 8004cc0:	e015      	b.n	8004cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cc2:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <HAL_RCC_OscConfig+0x270>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7ff fb7c 	bl	80043c4 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd0:	f7ff fb78 	bl	80043c4 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e17a      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03a      	beq.n	8004d70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d019      	beq.n	8004d36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <HAL_RCC_OscConfig+0x274>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d08:	f7ff fb5c 	bl	80043c4 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d10:	f7ff fb58 	bl	80043c4 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e15a      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f000 fb0a 	bl	8005348 <RCC_Delay>
 8004d34:	e01c      	b.n	8004d70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_RCC_OscConfig+0x274>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3c:	f7ff fb42 	bl	80043c4 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d42:	e00f      	b.n	8004d64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d44:	f7ff fb3e 	bl	80043c4 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d908      	bls.n	8004d64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e140      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	42420000 	.word	0x42420000
 8004d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d64:	4b9e      	ldr	r3, [pc, #632]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e9      	bne.n	8004d44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80a6 	beq.w	8004eca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d82:	4b97      	ldr	r3, [pc, #604]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	4b94      	ldr	r3, [pc, #592]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	4a93      	ldr	r2, [pc, #588]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d98:	61d3      	str	r3, [r2, #28]
 8004d9a:	4b91      	ldr	r3, [pc, #580]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da2:	60bb      	str	r3, [r7, #8]
 8004da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004da6:	2301      	movs	r3, #1
 8004da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004daa:	4b8e      	ldr	r3, [pc, #568]	; (8004fe4 <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d118      	bne.n	8004de8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db6:	4b8b      	ldr	r3, [pc, #556]	; (8004fe4 <HAL_RCC_OscConfig+0x4f8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a8a      	ldr	r2, [pc, #552]	; (8004fe4 <HAL_RCC_OscConfig+0x4f8>)
 8004dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc2:	f7ff faff 	bl	80043c4 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dca:	f7ff fafb 	bl	80043c4 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b64      	cmp	r3, #100	; 0x64
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e0fd      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ddc:	4b81      	ldr	r3, [pc, #516]	; (8004fe4 <HAL_RCC_OscConfig+0x4f8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d106      	bne.n	8004dfe <HAL_RCC_OscConfig+0x312>
 8004df0:	4b7b      	ldr	r3, [pc, #492]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	4a7a      	ldr	r2, [pc, #488]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6213      	str	r3, [r2, #32]
 8004dfc:	e02d      	b.n	8004e5a <HAL_RCC_OscConfig+0x36e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x334>
 8004e06:	4b76      	ldr	r3, [pc, #472]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	4a75      	ldr	r2, [pc, #468]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	6213      	str	r3, [r2, #32]
 8004e12:	4b73      	ldr	r3, [pc, #460]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	4a72      	ldr	r2, [pc, #456]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	6213      	str	r3, [r2, #32]
 8004e1e:	e01c      	b.n	8004e5a <HAL_RCC_OscConfig+0x36e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	d10c      	bne.n	8004e42 <HAL_RCC_OscConfig+0x356>
 8004e28:	4b6d      	ldr	r3, [pc, #436]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	4a6c      	ldr	r2, [pc, #432]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e2e:	f043 0304 	orr.w	r3, r3, #4
 8004e32:	6213      	str	r3, [r2, #32]
 8004e34:	4b6a      	ldr	r3, [pc, #424]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	4a69      	ldr	r2, [pc, #420]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6213      	str	r3, [r2, #32]
 8004e40:	e00b      	b.n	8004e5a <HAL_RCC_OscConfig+0x36e>
 8004e42:	4b67      	ldr	r3, [pc, #412]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	4a66      	ldr	r2, [pc, #408]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	6213      	str	r3, [r2, #32]
 8004e4e:	4b64      	ldr	r3, [pc, #400]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	4a63      	ldr	r2, [pc, #396]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d015      	beq.n	8004e8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e62:	f7ff faaf 	bl	80043c4 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7ff faab 	bl	80043c4 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0ab      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e80:	4b57      	ldr	r3, [pc, #348]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ee      	beq.n	8004e6a <HAL_RCC_OscConfig+0x37e>
 8004e8c:	e014      	b.n	8004eb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8e:	f7ff fa99 	bl	80043c4 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e94:	e00a      	b.n	8004eac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7ff fa95 	bl	80043c4 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e095      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eac:	4b4c      	ldr	r3, [pc, #304]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ee      	bne.n	8004e96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d105      	bne.n	8004eca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ebe:	4b48      	ldr	r3, [pc, #288]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	4a47      	ldr	r2, [pc, #284]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8081 	beq.w	8004fd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ed4:	4b42      	ldr	r3, [pc, #264]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 030c 	and.w	r3, r3, #12
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d061      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d146      	bne.n	8004f76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee8:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <HAL_RCC_OscConfig+0x4fc>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eee:	f7ff fa69 	bl	80043c4 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef6:	f7ff fa65 	bl	80043c4 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e067      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f08:	4b35      	ldr	r3, [pc, #212]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f0      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d108      	bne.n	8004f30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f1e:	4b30      	ldr	r3, [pc, #192]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	492d      	ldr	r1, [pc, #180]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f30:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a19      	ldr	r1, [r3, #32]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	430b      	orrs	r3, r1
 8004f42:	4927      	ldr	r1, [pc, #156]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f48:	4b27      	ldr	r3, [pc, #156]	; (8004fe8 <HAL_RCC_OscConfig+0x4fc>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4e:	f7ff fa39 	bl	80043c4 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f56:	f7ff fa35 	bl	80043c4 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e037      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f68:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x46a>
 8004f74:	e02f      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f76:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <HAL_RCC_OscConfig+0x4fc>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7ff fa22 	bl	80043c4 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7ff fa1e 	bl	80043c4 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e020      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x498>
 8004fa2:	e018      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e013      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_RCC_OscConfig+0x4f4>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d106      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d001      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40007000 	.word	0x40007000
 8004fe8:	42420060 	.word	0x42420060

08004fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0d0      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005000:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d910      	bls.n	8005030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b67      	ldr	r3, [pc, #412]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f023 0207 	bic.w	r2, r3, #7
 8005016:	4965      	ldr	r1, [pc, #404]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b63      	ldr	r3, [pc, #396]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0b8      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4a58      	ldr	r2, [pc, #352]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800504e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a52      	ldr	r2, [pc, #328]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800506a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	494d      	ldr	r1, [pc, #308]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800507a:	4313      	orrs	r3, r2
 800507c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d040      	beq.n	800510c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d115      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050aa:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e073      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ba:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06b      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f023 0203 	bic.w	r2, r3, #3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4936      	ldr	r1, [pc, #216]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050dc:	f7ff f972 	bl	80043c4 <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e4:	f7ff f96e 	bl	80043c4 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e053      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 020c 	and.w	r2, r3, #12
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	429a      	cmp	r2, r3
 800510a:	d1eb      	bne.n	80050e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800510c:	4b27      	ldr	r3, [pc, #156]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d210      	bcs.n	800513c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 0207 	bic.w	r2, r3, #7
 8005122:	4922      	ldr	r1, [pc, #136]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_RCC_ClockConfig+0x1c0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e032      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4916      	ldr	r1, [pc, #88]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	490e      	ldr	r1, [pc, #56]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005176:	4313      	orrs	r3, r2
 8005178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800517a:	f000 f821 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 800517e:	4601      	mov	r1, r0
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x1c8>)
 800518c:	5cd3      	ldrb	r3, [r2, r3]
 800518e:	fa21 f303 	lsr.w	r3, r1, r3
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1cc>)
 8005194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1d0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fd fd04 	bl	8002ba8 <HAL_InitTick>

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40022000 	.word	0x40022000
 80051b0:	40021000 	.word	0x40021000
 80051b4:	08009878 	.word	0x08009878
 80051b8:	20000018 	.word	0x20000018
 80051bc:	20000040 	.word	0x20000040

080051c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c0:	b490      	push	{r4, r7}
 80051c2:	b08a      	sub	sp, #40	; 0x28
 80051c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80051c6:	4b2a      	ldr	r3, [pc, #168]	; (8005270 <HAL_RCC_GetSysClockFreq+0xb0>)
 80051c8:	1d3c      	adds	r4, r7, #4
 80051ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051d0:	4b28      	ldr	r3, [pc, #160]	; (8005274 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	2300      	movs	r3, #0
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	2300      	movs	r3, #0
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051ea:	4b23      	ldr	r3, [pc, #140]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f003 030c 	and.w	r3, r3, #12
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d002      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x40>
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d003      	beq.n	8005206 <HAL_RCC_GetSysClockFreq+0x46>
 80051fe:	e02d      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005200:	4b1e      	ldr	r3, [pc, #120]	; (800527c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005202:	623b      	str	r3, [r7, #32]
      break;
 8005204:	e02d      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	0c9b      	lsrs	r3, r3, #18
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005212:	4413      	add	r3, r2
 8005214:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005218:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d013      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005224:	4b14      	ldr	r3, [pc, #80]	; (8005278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	0c5b      	lsrs	r3, r3, #17
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005232:	4413      	add	r3, r2
 8005234:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005238:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	4a0f      	ldr	r2, [pc, #60]	; (800527c <HAL_RCC_GetSysClockFreq+0xbc>)
 800523e:	fb02 f203 	mul.w	r2, r2, r3
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
 800524a:	e004      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005250:	fb02 f303 	mul.w	r3, r2, r3
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	623b      	str	r3, [r7, #32]
      break;
 800525a:	e002      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4b07      	ldr	r3, [pc, #28]	; (800527c <HAL_RCC_GetSysClockFreq+0xbc>)
 800525e:	623b      	str	r3, [r7, #32]
      break;
 8005260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005262:	6a3b      	ldr	r3, [r7, #32]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3728      	adds	r7, #40	; 0x28
 8005268:	46bd      	mov	sp, r7
 800526a:	bc90      	pop	{r4, r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	08009828 	.word	0x08009828
 8005274:	08009838 	.word	0x08009838
 8005278:	40021000 	.word	0x40021000
 800527c:	007a1200 	.word	0x007a1200
 8005280:	003d0900 	.word	0x003d0900

08005284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005288:	4b02      	ldr	r3, [pc, #8]	; (8005294 <HAL_RCC_GetHCLKFreq+0x10>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr
 8005294:	20000018 	.word	0x20000018

08005298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800529c:	f7ff fff2 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052a0:	4601      	mov	r1, r0
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4a03      	ldr	r2, [pc, #12]	; (80052bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ae:	5cd3      	ldrb	r3, [r2, r3]
 80052b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000
 80052bc:	08009888 	.word	0x08009888

080052c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052c4:	f7ff ffde 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052c8:	4601      	mov	r1, r0
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	0adb      	lsrs	r3, r3, #11
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4a03      	ldr	r2, [pc, #12]	; (80052e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052d6:	5cd3      	ldrb	r3, [r2, r3]
 80052d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40021000 	.word	0x40021000
 80052e4:	08009888 	.word	0x08009888

080052e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	220f      	movs	r2, #15
 80052f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052f8:	4b11      	ldr	r3, [pc, #68]	; (8005340 <HAL_RCC_GetClockConfig+0x58>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f003 0203 	and.w	r2, r3, #3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <HAL_RCC_GetClockConfig+0x58>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_GetClockConfig+0x58>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800531c:	4b08      	ldr	r3, [pc, #32]	; (8005340 <HAL_RCC_GetClockConfig+0x58>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	08db      	lsrs	r3, r3, #3
 8005322:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800532a:	4b06      	ldr	r3, [pc, #24]	; (8005344 <HAL_RCC_GetClockConfig+0x5c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0207 	and.w	r2, r3, #7
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	40021000 	.word	0x40021000
 8005344:	40022000 	.word	0x40022000

08005348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <RCC_Delay+0x34>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a0a      	ldr	r2, [pc, #40]	; (8005380 <RCC_Delay+0x38>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	0a5b      	lsrs	r3, r3, #9
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	fb02 f303 	mul.w	r3, r2, r3
 8005362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005364:	bf00      	nop
  }
  while (Delay --);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1e5a      	subs	r2, r3, #1
 800536a:	60fa      	str	r2, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f9      	bne.n	8005364 <RCC_Delay+0x1c>
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20000018 	.word	0x20000018
 8005380:	10624dd3 	.word	0x10624dd3

08005384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e076      	b.n	8005484 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	2b00      	cmp	r3, #0
 800539c:	d108      	bne.n	80053b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a6:	d009      	beq.n	80053bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	61da      	str	r2, [r3, #28]
 80053ae:	e005      	b.n	80053bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fd fb9a 	bl	8002b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	ea42 0103 	orr.w	r1, r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005448:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	0c1a      	lsrs	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f002 0204 	and.w	r2, r2, #4
 8005462:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69da      	ldr	r2, [r3, #28]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005472:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08c      	sub	sp, #48	; 0x30
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800549a:	2301      	movs	r3, #1
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_SPI_TransmitReceive+0x26>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e18a      	b.n	80057c8 <HAL_SPI_TransmitReceive+0x33c>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ba:	f7fe ff83 	bl	80043c4 <HAL_GetTick>
 80054be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054d0:	887b      	ldrh	r3, [r7, #2]
 80054d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d00f      	beq.n	80054fc <HAL_SPI_TransmitReceive+0x70>
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e2:	d107      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d103      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x68>
 80054ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d003      	beq.n	80054fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054fa:	e15b      	b.n	80057b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_SPI_TransmitReceive+0x82>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_SPI_TransmitReceive+0x82>
 8005508:	887b      	ldrh	r3, [r7, #2]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d103      	bne.n	8005516 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005514:	e14e      	b.n	80057b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b04      	cmp	r3, #4
 8005520:	d003      	beq.n	800552a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2205      	movs	r2, #5
 8005526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	887a      	ldrh	r2, [r7, #2]
 800553a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	887a      	ldrh	r2, [r7, #2]
 8005540:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	887a      	ldrh	r2, [r7, #2]
 800554c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	887a      	ldrh	r2, [r7, #2]
 8005552:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d007      	beq.n	800557e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800557c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005586:	d178      	bne.n	800567a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <HAL_SPI_TransmitReceive+0x10a>
 8005590:	8b7b      	ldrh	r3, [r7, #26]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d166      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	881a      	ldrh	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	1c9a      	adds	r2, r3, #2
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ba:	e053      	b.n	8005664 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d11b      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x176>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d016      	beq.n	8005602 <HAL_SPI_TransmitReceive+0x176>
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d113      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	881a      	ldrh	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	1c9a      	adds	r2, r3, #2
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	d119      	bne.n	8005644 <HAL_SPI_TransmitReceive+0x1b8>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d014      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	b292      	uxth	r2, r2
 8005626:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	1c9a      	adds	r2, r3, #2
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005640:	2301      	movs	r3, #1
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005644:	f7fe febe 	bl	80043c4 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005650:	429a      	cmp	r2, r3
 8005652:	d807      	bhi.n	8005664 <HAL_SPI_TransmitReceive+0x1d8>
 8005654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565a:	d003      	beq.n	8005664 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005662:	e0a7      	b.n	80057b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1a6      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x130>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1a1      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x130>
 8005678:	e07c      	b.n	8005774 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_SPI_TransmitReceive+0x1fc>
 8005682:	8b7b      	ldrh	r3, [r7, #26]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d16b      	bne.n	8005760 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	330c      	adds	r3, #12
 8005692:	7812      	ldrb	r2, [r2, #0]
 8005694:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ae:	e057      	b.n	8005760 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d11c      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x26c>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d017      	beq.n	80056f8 <HAL_SPI_TransmitReceive+0x26c>
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d114      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	7812      	ldrb	r2, [r2, #0]
 80056da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b01      	cmp	r3, #1
 8005704:	d119      	bne.n	800573a <HAL_SPI_TransmitReceive+0x2ae>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d014      	beq.n	800573a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005736:	2301      	movs	r3, #1
 8005738:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800573a:	f7fe fe43 	bl	80043c4 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005746:	429a      	cmp	r2, r3
 8005748:	d803      	bhi.n	8005752 <HAL_SPI_TransmitReceive+0x2c6>
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d102      	bne.n	8005758 <HAL_SPI_TransmitReceive+0x2cc>
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800575e:	e029      	b.n	80057b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1a2      	bne.n	80056b0 <HAL_SPI_TransmitReceive+0x224>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d19d      	bne.n	80056b0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005776:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f8b1 	bl	80058e0 <SPI_EndRxTxTransaction>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d006      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005790:	e010      	b.n	80057b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10b      	bne.n	80057b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	e000      	b.n	80057b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80057b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3730      	adds	r7, #48	; 0x30
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057e0:	f7fe fdf0 	bl	80043c4 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	4413      	add	r3, r2
 80057ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057f0:	f7fe fde8 	bl	80043c4 <HAL_GetTick>
 80057f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057f6:	4b39      	ldr	r3, [pc, #228]	; (80058dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	015b      	lsls	r3, r3, #5
 80057fc:	0d1b      	lsrs	r3, r3, #20
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	fb02 f303 	mul.w	r3, r2, r3
 8005804:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005806:	e054      	b.n	80058b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d050      	beq.n	80058b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005810:	f7fe fdd8 	bl	80043c4 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	429a      	cmp	r2, r3
 800581e:	d902      	bls.n	8005826 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d13d      	bne.n	80058a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583e:	d111      	bne.n	8005864 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005848:	d004      	beq.n	8005854 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005852:	d107      	bne.n	8005864 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005862:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586c:	d10f      	bne.n	800588e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800588c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e017      	b.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4013      	ands	r3, r2
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	429a      	cmp	r2, r3
 80058c0:	bf0c      	ite	eq
 80058c2:	2301      	moveq	r3, #1
 80058c4:	2300      	movne	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d19b      	bne.n	8005808 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3720      	adds	r7, #32
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000018 	.word	0x20000018

080058e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2200      	movs	r2, #0
 80058f4:	2180      	movs	r1, #128	; 0x80
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff ff6a 	bl	80057d0 <SPI_WaitFlagStateUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e000      	b.n	8005914 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e041      	b.n	80059b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f839 	bl	80059ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3304      	adds	r3, #4
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f000 f9b4 	bl	8005cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr

080059cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d001      	beq.n	80059e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e03a      	b.n	8005a5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <HAL_TIM_Base_Start_IT+0x98>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00e      	beq.n	8005a24 <HAL_TIM_Base_Start_IT+0x58>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d009      	beq.n	8005a24 <HAL_TIM_Base_Start_IT+0x58>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <HAL_TIM_Base_Start_IT+0x9c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d004      	beq.n	8005a24 <HAL_TIM_Base_Start_IT+0x58>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <HAL_TIM_Base_Start_IT+0xa0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d111      	bne.n	8005a48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b06      	cmp	r3, #6
 8005a34:	d010      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0201 	orr.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a46:	e007      	b.n	8005a58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800

08005a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d122      	bne.n	8005acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d11b      	bne.n	8005acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0202 	mvn.w	r2, #2
 8005a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f8ed 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f8e0 	bl	8005c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f8ef 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d122      	bne.n	8005b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d11b      	bne.n	8005b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0204 	mvn.w	r2, #4
 8005af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f8c3 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f8b6 	bl	8005c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f8c5 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d122      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d11b      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0208 	mvn.w	r2, #8
 8005b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2204      	movs	r2, #4
 8005b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f899 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 8005b60:	e005      	b.n	8005b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f88c 	bl	8005c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f89b 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b10      	cmp	r3, #16
 8005b80:	d122      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b10      	cmp	r3, #16
 8005b8e:	d11b      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0210 	mvn.w	r2, #16
 8005b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f86f 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f862 	bl	8005c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f871 	bl	8005ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d10e      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d107      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0201 	mvn.w	r2, #1
 8005bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fc fefe 	bl	80029f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfe:	2b80      	cmp	r3, #128	; 0x80
 8005c00:	d10e      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0c:	2b80      	cmp	r3, #128	; 0x80
 8005c0e:	d107      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f8bf 	bl	8005d9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b40      	cmp	r3, #64	; 0x40
 8005c2c:	d10e      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	2b40      	cmp	r3, #64	; 0x40
 8005c3a:	d107      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f835 	bl	8005cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d10e      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d107      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0220 	mvn.w	r2, #32
 8005c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f88a 	bl	8005d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bc80      	pop	{r7}
 8005c90:	4770      	bx	lr

08005c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a29      	ldr	r2, [pc, #164]	; (8005d80 <TIM_Base_SetConfig+0xb8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00b      	beq.n	8005cf8 <TIM_Base_SetConfig+0x30>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce6:	d007      	beq.n	8005cf8 <TIM_Base_SetConfig+0x30>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <TIM_Base_SetConfig+0xbc>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_Base_SetConfig+0x30>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a25      	ldr	r2, [pc, #148]	; (8005d88 <TIM_Base_SetConfig+0xc0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d108      	bne.n	8005d0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a1c      	ldr	r2, [pc, #112]	; (8005d80 <TIM_Base_SetConfig+0xb8>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d00b      	beq.n	8005d2a <TIM_Base_SetConfig+0x62>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d18:	d007      	beq.n	8005d2a <TIM_Base_SetConfig+0x62>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a19      	ldr	r2, [pc, #100]	; (8005d84 <TIM_Base_SetConfig+0xbc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d003      	beq.n	8005d2a <TIM_Base_SetConfig+0x62>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a18      	ldr	r2, [pc, #96]	; (8005d88 <TIM_Base_SetConfig+0xc0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d108      	bne.n	8005d3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a07      	ldr	r2, [pc, #28]	; (8005d80 <TIM_Base_SetConfig+0xb8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d103      	bne.n	8005d70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	615a      	str	r2, [r3, #20]
}
 8005d76:	bf00      	nop
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr
 8005d80:	40012c00 	.word	0x40012c00
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800

08005d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr

08005d9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr

08005db0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db6:	f3ef 8305 	mrs	r3, IPSR
 8005dba:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10f      	bne.n	8005de2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc6:	607b      	str	r3, [r7, #4]
  return(result);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <osKernelInitialize+0x32>
 8005dce:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <osKernelInitialize+0x60>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d109      	bne.n	8005dea <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dda:	603b      	str	r3, [r7, #0]
  return(result);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005de2:	f06f 0305 	mvn.w	r3, #5
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e00c      	b.n	8005e04 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <osKernelInitialize+0x60>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d105      	bne.n	8005dfe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005df2:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <osKernelInitialize+0x60>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	e002      	b.n	8005e04 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005e02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e04:	68fb      	ldr	r3, [r7, #12]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr
 8005e10:	20000098 	.word	0x20000098

08005e14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e1a:	f3ef 8305 	mrs	r3, IPSR
 8005e1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10f      	bne.n	8005e46 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e26:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2a:	607b      	str	r3, [r7, #4]
  return(result);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <osKernelStart+0x32>
 8005e32:	4b11      	ldr	r3, [pc, #68]	; (8005e78 <osKernelStart+0x64>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d109      	bne.n	8005e4e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e3e:	603b      	str	r3, [r7, #0]
  return(result);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005e46:	f06f 0305 	mvn.w	r3, #5
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	e00e      	b.n	8005e6c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <osKernelStart+0x64>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d107      	bne.n	8005e66 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005e56:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <osKernelStart+0x64>)
 8005e58:	2202      	movs	r2, #2
 8005e5a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005e5c:	f001 f802 	bl	8006e64 <vTaskStartScheduler>
      stat = osOK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	e002      	b.n	8005e6c <osKernelStart+0x58>
    } else {
      stat = osError;
 8005e66:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000098 	.word	0x20000098

08005e7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b092      	sub	sp, #72	; 0x48
 8005e80:	af04      	add	r7, sp, #16
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e8c:	f3ef 8305 	mrs	r3, IPSR
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f040 8094 	bne.w	8005fc2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e9e:	623b      	str	r3, [r7, #32]
  return(result);
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f040 808d 	bne.w	8005fc2 <osThreadNew+0x146>
 8005ea8:	4b48      	ldr	r3, [pc, #288]	; (8005fcc <osThreadNew+0x150>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d106      	bne.n	8005ebe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 8082 	bne.w	8005fc2 <osThreadNew+0x146>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d07e      	beq.n	8005fc2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005ec8:	2318      	movs	r3, #24
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005ecc:	2300      	movs	r3, #0
 8005ece:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005ed0:	f107 031b 	add.w	r3, r7, #27
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d045      	beq.n	8005f6e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <osThreadNew+0x74>
        name = attr->name;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d008      	beq.n	8005f16 <osThreadNew+0x9a>
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	2b38      	cmp	r3, #56	; 0x38
 8005f08:	d805      	bhi.n	8005f16 <osThreadNew+0x9a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <osThreadNew+0x9e>
        return (NULL);
 8005f16:	2300      	movs	r3, #0
 8005f18:	e054      	b.n	8005fc4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	089b      	lsrs	r3, r3, #2
 8005f28:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <osThreadNew+0xd4>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	2b5b      	cmp	r3, #91	; 0x5b
 8005f38:	d90a      	bls.n	8005f50 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d006      	beq.n	8005f50 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <osThreadNew+0xd4>
        mem = 1;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f4e:	e010      	b.n	8005f72 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10c      	bne.n	8005f72 <osThreadNew+0xf6>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d108      	bne.n	8005f72 <osThreadNew+0xf6>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d104      	bne.n	8005f72 <osThreadNew+0xf6>
          mem = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f6c:	e001      	b.n	8005f72 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d110      	bne.n	8005f9a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f80:	9202      	str	r2, [sp, #8]
 8005f82:	9301      	str	r3, [sp, #4]
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fdd4 	bl	8006b3c <xTaskCreateStatic>
 8005f94:	4603      	mov	r3, r0
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	e013      	b.n	8005fc2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d110      	bne.n	8005fc2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	f107 0314 	add.w	r3, r7, #20
 8005fa8:	9301      	str	r3, [sp, #4]
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 fe1b 	bl	8006bee <xTaskCreate>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d001      	beq.n	8005fc2 <osThreadNew+0x146>
          hTask = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fc2:	697b      	ldr	r3, [r7, #20]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3738      	adds	r7, #56	; 0x38
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20000098 	.word	0x20000098

08005fd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4a06      	ldr	r2, [pc, #24]	; (8005ff8 <vApplicationGetIdleTaskMemory+0x28>)
 8005fe0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4a05      	ldr	r2, [pc, #20]	; (8005ffc <vApplicationGetIdleTaskMemory+0x2c>)
 8005fe6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2280      	movs	r2, #128	; 0x80
 8005fec:	601a      	str	r2, [r3, #0]
}
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr
 8005ff8:	2000009c 	.word	0x2000009c
 8005ffc:	200000f8 	.word	0x200000f8

08006000 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a07      	ldr	r2, [pc, #28]	; (800602c <vApplicationGetTimerTaskMemory+0x2c>)
 8006010:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4a06      	ldr	r2, [pc, #24]	; (8006030 <vApplicationGetTimerTaskMemory+0x30>)
 8006016:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800601e:	601a      	str	r2, [r3, #0]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	200002f8 	.word	0x200002f8
 8006030:	20000354 	.word	0x20000354

08006034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f103 0208 	add.w	r2, r3, #8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f04f 32ff 	mov.w	r2, #4294967295
 800604c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f103 0208 	add.w	r2, r3, #8
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f103 0208 	add.w	r2, r3, #8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr

08006072 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr

0800608a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc80      	pop	{r7}
 80060ce:	4770      	bx	lr

080060d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e6:	d103      	bne.n	80060f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	e00c      	b.n	800610a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3308      	adds	r3, #8
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	e002      	b.n	80060fe <vListInsert+0x2e>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	429a      	cmp	r2, r3
 8006108:	d2f6      	bcs.n	80060f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]
}
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr

08006140 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6892      	ldr	r2, [r2, #8]
 8006156:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6852      	ldr	r2, [r2, #4]
 8006160:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	429a      	cmp	r2, r3
 800616a:	d103      	bne.n	8006174 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	1e5a      	subs	r2, r3, #1
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr
	...

08006194 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	e7fe      	b.n	80061ba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80061bc:	f001 ff64 	bl	8008088 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c8:	68f9      	ldr	r1, [r7, #12]
 80061ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	441a      	add	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	3b01      	subs	r3, #1
 80061ee:	68f9      	ldr	r1, [r7, #12]
 80061f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061f2:	fb01 f303 	mul.w	r3, r1, r3
 80061f6:	441a      	add	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	22ff      	movs	r2, #255	; 0xff
 8006200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	22ff      	movs	r2, #255	; 0xff
 8006208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d114      	bne.n	800623c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01a      	beq.n	8006250 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3310      	adds	r3, #16
 800621e:	4618      	mov	r0, r3
 8006220:	f001 f8a4 	bl	800736c <xTaskRemoveFromEventList>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d012      	beq.n	8006250 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800622a:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <xQueueGenericReset+0xcc>)
 800622c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	e009      	b.n	8006250 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3310      	adds	r3, #16
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff fef7 	bl	8006034 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3324      	adds	r3, #36	; 0x24
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff fef2 	bl	8006034 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006250:	f001 ff48 	bl	80080e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006254:	2301      	movs	r3, #1
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08e      	sub	sp, #56	; 0x38
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <xQueueGenericCreateStatic+0x28>
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28
 800628a:	e7fe      	b.n	800628a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <xQueueGenericCreateStatic+0x42>
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
 80062a4:	e7fe      	b.n	80062a4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <xQueueGenericCreateStatic+0x4e>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <xQueueGenericCreateStatic+0x52>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <xQueueGenericCreateStatic+0x54>
 80062b6:	2300      	movs	r3, #0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d109      	bne.n	80062d0 <xQueueGenericCreateStatic+0x6c>
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	623b      	str	r3, [r7, #32]
 80062ce:	e7fe      	b.n	80062ce <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <xQueueGenericCreateStatic+0x78>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <xQueueGenericCreateStatic+0x7c>
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <xQueueGenericCreateStatic+0x7e>
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <xQueueGenericCreateStatic+0x96>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	e7fe      	b.n	80062f8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062fa:	2350      	movs	r3, #80	; 0x50
 80062fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b50      	cmp	r3, #80	; 0x50
 8006302:	d009      	beq.n	8006318 <xQueueGenericCreateStatic+0xb4>
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	e7fe      	b.n	8006316 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00d      	beq.n	800633e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800632a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	4613      	mov	r3, r2
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 f805 	bl	8006348 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006340:	4618      	mov	r0, r3
 8006342:	3730      	adds	r7, #48	; 0x30
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	e002      	b.n	800636a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006376:	2101      	movs	r1, #1
 8006378:	69b8      	ldr	r0, [r7, #24]
 800637a:	f7ff ff0b 	bl	8006194 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006386:	bf00      	nop
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08e      	sub	sp, #56	; 0x38
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800639e:	2300      	movs	r3, #0
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <xQueueGenericSend+0x30>
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063be:	e7fe      	b.n	80063be <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <xQueueGenericSend+0x3e>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <xQueueGenericSend+0x42>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <xQueueGenericSend+0x44>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <xQueueGenericSend+0x5c>
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ea:	e7fe      	b.n	80063ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d103      	bne.n	80063fa <xQueueGenericSend+0x6a>
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <xQueueGenericSend+0x6e>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <xQueueGenericSend+0x70>
 80063fe:	2300      	movs	r3, #0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d109      	bne.n	8006418 <xQueueGenericSend+0x88>
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	e7fe      	b.n	8006416 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006418:	f001 f962 	bl	80076e0 <xTaskGetSchedulerState>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <xQueueGenericSend+0x98>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <xQueueGenericSend+0x9c>
 8006428:	2301      	movs	r3, #1
 800642a:	e000      	b.n	800642e <xQueueGenericSend+0x9e>
 800642c:	2300      	movs	r3, #0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <xQueueGenericSend+0xb6>
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	e7fe      	b.n	8006444 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006446:	f001 fe1f 	bl	8008088 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <xQueueGenericSend+0xcc>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d129      	bne.n	80064b0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006462:	f000 f9ff 	bl	8006864 <prvCopyDataToQueue>
 8006466:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	3324      	adds	r3, #36	; 0x24
 8006474:	4618      	mov	r0, r3
 8006476:	f000 ff79 	bl	800736c <xTaskRemoveFromEventList>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d013      	beq.n	80064a8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006480:	4b3f      	ldr	r3, [pc, #252]	; (8006580 <xQueueGenericSend+0x1f0>)
 8006482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	e00a      	b.n	80064a8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006498:	4b39      	ldr	r3, [pc, #228]	; (8006580 <xQueueGenericSend+0x1f0>)
 800649a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064a8:	f001 fe1c 	bl	80080e4 <vPortExitCritical>
				return pdPASS;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e063      	b.n	8006578 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064b6:	f001 fe15 	bl	80080e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e05c      	b.n	8006578 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d106      	bne.n	80064d2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 ffb1 	bl	8007430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ce:	2301      	movs	r3, #1
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064d2:	f001 fe07 	bl	80080e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064d6:	f000 fd29 	bl	8006f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064da:	f001 fdd5 	bl	8008088 <vPortEnterCritical>
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ea:	d103      	bne.n	80064f4 <xQueueGenericSend+0x164>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064fa:	b25b      	sxtb	r3, r3
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d103      	bne.n	800650a <xQueueGenericSend+0x17a>
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800650a:	f001 fdeb 	bl	80080e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800650e:	1d3a      	adds	r2, r7, #4
 8006510:	f107 0314 	add.w	r3, r7, #20
 8006514:	4611      	mov	r1, r2
 8006516:	4618      	mov	r0, r3
 8006518:	f000 ffa0 	bl	800745c <xTaskCheckForTimeOut>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d124      	bne.n	800656c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006524:	f000 fa96 	bl	8006a54 <prvIsQueueFull>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d018      	beq.n	8006560 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	3310      	adds	r3, #16
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f000 feca 	bl	80072d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800653c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800653e:	f000 fa21 	bl	8006984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006542:	f000 fd01 	bl	8006f48 <xTaskResumeAll>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	f47f af7c 	bne.w	8006446 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800654e:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <xQueueGenericSend+0x1f0>)
 8006550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	e772      	b.n	8006446 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006562:	f000 fa0f 	bl	8006984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006566:	f000 fcef 	bl	8006f48 <xTaskResumeAll>
 800656a:	e76c      	b.n	8006446 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800656c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800656e:	f000 fa09 	bl	8006984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006572:	f000 fce9 	bl	8006f48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006576:	2300      	movs	r3, #0
		}
	}
}
 8006578:	4618      	mov	r0, r3
 800657a:	3738      	adds	r7, #56	; 0x38
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08e      	sub	sp, #56	; 0x38
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	2b00      	cmp	r3, #0
 800659a:	d109      	bne.n	80065b0 <xQueueGenericSendFromISR+0x2c>
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
 80065ae:	e7fe      	b.n	80065ae <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <xQueueGenericSendFromISR+0x3a>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <xQueueGenericSendFromISR+0x3e>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <xQueueGenericSendFromISR+0x40>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <xQueueGenericSendFromISR+0x58>
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	623b      	str	r3, [r7, #32]
 80065da:	e7fe      	b.n	80065da <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d103      	bne.n	80065ea <xQueueGenericSendFromISR+0x66>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <xQueueGenericSendFromISR+0x6a>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <xQueueGenericSendFromISR+0x6c>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d109      	bne.n	8006608 <xQueueGenericSendFromISR+0x84>
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	e7fe      	b.n	8006606 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006608:	f001 fdf8 	bl	80081fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800660c:	f3ef 8211 	mrs	r2, BASEPRI
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	61ba      	str	r2, [r7, #24]
 8006622:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006624:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006626:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	429a      	cmp	r2, r3
 8006632:	d302      	bcc.n	800663a <xQueueGenericSendFromISR+0xb6>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b02      	cmp	r3, #2
 8006638:	d12c      	bne.n	8006694 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800664a:	f000 f90b 	bl	8006864 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800664e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	d112      	bne.n	800667e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	d016      	beq.n	800668e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	3324      	adds	r3, #36	; 0x24
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fe81 	bl	800736c <xTaskRemoveFromEventList>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00b      	beq.n	800668e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	e007      	b.n	800668e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800667e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006682:	3301      	adds	r3, #1
 8006684:	b2db      	uxtb	r3, r3
 8006686:	b25a      	sxtb	r2, r3
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800668e:	2301      	movs	r3, #1
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006692:	e001      	b.n	8006698 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006694:	2300      	movs	r3, #0
 8006696:	637b      	str	r3, [r7, #52]	; 0x34
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3738      	adds	r7, #56	; 0x38
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	; 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <xQueueReceive+0x2e>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	623b      	str	r3, [r7, #32]
 80066d8:	e7fe      	b.n	80066d8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d103      	bne.n	80066e8 <xQueueReceive+0x3c>
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <xQueueReceive+0x40>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <xQueueReceive+0x42>
 80066ec:	2300      	movs	r3, #0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d109      	bne.n	8006706 <xQueueReceive+0x5a>
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	e7fe      	b.n	8006704 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006706:	f000 ffeb 	bl	80076e0 <xTaskGetSchedulerState>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <xQueueReceive+0x6a>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <xQueueReceive+0x6e>
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <xQueueReceive+0x70>
 800671a:	2300      	movs	r3, #0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <xQueueReceive+0x88>
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	e7fe      	b.n	8006732 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006734:	f001 fca8 	bl	8008088 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01f      	beq.n	8006784 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006748:	f000 f8f6 	bl	8006938 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	1e5a      	subs	r2, r3, #1
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00f      	beq.n	800677c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	3310      	adds	r3, #16
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fe03 	bl	800736c <xTaskRemoveFromEventList>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800676c:	4b3c      	ldr	r3, [pc, #240]	; (8006860 <xQueueReceive+0x1b4>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800677c:	f001 fcb2 	bl	80080e4 <vPortExitCritical>
				return pdPASS;
 8006780:	2301      	movs	r3, #1
 8006782:	e069      	b.n	8006858 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d103      	bne.n	8006792 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800678a:	f001 fcab 	bl	80080e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800678e:	2300      	movs	r3, #0
 8006790:	e062      	b.n	8006858 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006798:	f107 0310 	add.w	r3, r7, #16
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fe47 	bl	8007430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067a2:	2301      	movs	r3, #1
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067a6:	f001 fc9d 	bl	80080e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067aa:	f000 fbbf 	bl	8006f2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ae:	f001 fc6b 	bl	8008088 <vPortEnterCritical>
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d103      	bne.n	80067c8 <xQueueReceive+0x11c>
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ce:	b25b      	sxtb	r3, r3
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d103      	bne.n	80067de <xQueueReceive+0x132>
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067de:	f001 fc81 	bl	80080e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067e2:	1d3a      	adds	r2, r7, #4
 80067e4:	f107 0310 	add.w	r3, r7, #16
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fe36 	bl	800745c <xTaskCheckForTimeOut>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d123      	bne.n	800683e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f8:	f000 f916 	bl	8006a28 <prvIsQueueEmpty>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d017      	beq.n	8006832 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	3324      	adds	r3, #36	; 0x24
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	4611      	mov	r1, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fd60 	bl	80072d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006812:	f000 f8b7 	bl	8006984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006816:	f000 fb97 	bl	8006f48 <xTaskResumeAll>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d189      	bne.n	8006734 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006820:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <xQueueReceive+0x1b4>)
 8006822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	e780      	b.n	8006734 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006834:	f000 f8a6 	bl	8006984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006838:	f000 fb86 	bl	8006f48 <xTaskResumeAll>
 800683c:	e77a      	b.n	8006734 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800683e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006840:	f000 f8a0 	bl	8006984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006844:	f000 fb80 	bl	8006f48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800684a:	f000 f8ed 	bl	8006a28 <prvIsQueueEmpty>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	f43f af6f 	beq.w	8006734 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006856:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006858:	4618      	mov	r0, r3
 800685a:	3730      	adds	r7, #48	; 0x30
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10d      	bne.n	800689e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d14d      	bne.n	8006926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 ff44 	bl	800771c <xTaskPriorityDisinherit>
 8006894:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	605a      	str	r2, [r3, #4]
 800689c:	e043      	b.n	8006926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d119      	bne.n	80068d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6898      	ldr	r0, [r3, #8]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ac:	461a      	mov	r2, r3
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	f001 fee7 	bl	8008682 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068bc:	441a      	add	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d32b      	bcc.n	8006926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	609a      	str	r2, [r3, #8]
 80068d6:	e026      	b.n	8006926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68d8      	ldr	r0, [r3, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	461a      	mov	r2, r3
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	f001 fecd 	bl	8008682 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	425b      	negs	r3, r3
 80068f2:	441a      	add	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d207      	bcs.n	8006914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	425b      	negs	r3, r3
 800690e:	441a      	add	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d105      	bne.n	8006926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	3b01      	subs	r3, #1
 8006924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800692e:	697b      	ldr	r3, [r7, #20]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d018      	beq.n	800697c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	441a      	add	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	429a      	cmp	r2, r3
 8006962:	d303      	bcc.n	800696c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68d9      	ldr	r1, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	461a      	mov	r2, r3
 8006976:	6838      	ldr	r0, [r7, #0]
 8006978:	f001 fe83 	bl	8008682 <memcpy>
	}
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800698c:	f001 fb7c 	bl	8008088 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006996:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006998:	e011      	b.n	80069be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d012      	beq.n	80069c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3324      	adds	r3, #36	; 0x24
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fce0 	bl	800736c <xTaskRemoveFromEventList>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069b2:	f000 fdb3 	bl	800751c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dce9      	bgt.n	800699a <prvUnlockQueue+0x16>
 80069c6:	e000      	b.n	80069ca <prvUnlockQueue+0x46>
					break;
 80069c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	22ff      	movs	r2, #255	; 0xff
 80069ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069d2:	f001 fb87 	bl	80080e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069d6:	f001 fb57 	bl	8008088 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069e2:	e011      	b.n	8006a08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d012      	beq.n	8006a12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3310      	adds	r3, #16
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fcbb 	bl	800736c <xTaskRemoveFromEventList>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069fc:	f000 fd8e 	bl	800751c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dce9      	bgt.n	80069e4 <prvUnlockQueue+0x60>
 8006a10:	e000      	b.n	8006a14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	22ff      	movs	r2, #255	; 0xff
 8006a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a1c:	f001 fb62 	bl	80080e4 <vPortExitCritical>
}
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a30:	f001 fb2a 	bl	8008088 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	e001      	b.n	8006a46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a46:	f001 fb4d 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a5c:	f001 fb14 	bl	8008088 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d102      	bne.n	8006a72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e001      	b.n	8006a76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a76:	f001 fb35 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e014      	b.n	8006abe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a94:	4a0e      	ldr	r2, [pc, #56]	; (8006ad0 <vQueueAddToRegistry+0x4c>)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10b      	bne.n	8006ab8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006aa0:	490b      	ldr	r1, [pc, #44]	; (8006ad0 <vQueueAddToRegistry+0x4c>)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aaa:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <vQueueAddToRegistry+0x4c>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	4413      	add	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ab6:	e005      	b.n	8006ac4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b07      	cmp	r3, #7
 8006ac2:	d9e7      	bls.n	8006a94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	20002320 	.word	0x20002320

08006ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ae4:	f001 fad0 	bl	8008088 <vPortEnterCritical>
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aee:	b25b      	sxtb	r3, r3
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d103      	bne.n	8006afe <vQueueWaitForMessageRestricted+0x2a>
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d103      	bne.n	8006b14 <vQueueWaitForMessageRestricted+0x40>
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b14:	f001 fae6 	bl	80080e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	3324      	adds	r3, #36	; 0x24
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fbf5 	bl	8007318 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b2e:	6978      	ldr	r0, [r7, #20]
 8006b30:	f7ff ff28 	bl	8006984 <prvUnlockQueue>
	}
 8006b34:	bf00      	nop
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08e      	sub	sp, #56	; 0x38
 8006b40:	af04      	add	r7, sp, #16
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <xTaskCreateStatic+0x28>
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	623b      	str	r3, [r7, #32]
 8006b62:	e7fe      	b.n	8006b62 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <xTaskCreateStatic+0x42>
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	e7fe      	b.n	8006b7c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b7e:	235c      	movs	r3, #92	; 0x5c
 8006b80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b5c      	cmp	r3, #92	; 0x5c
 8006b86:	d009      	beq.n	8006b9c <xTaskCreateStatic+0x60>
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	e7fe      	b.n	8006b9a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01e      	beq.n	8006be0 <xTaskCreateStatic+0xa4>
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01b      	beq.n	8006be0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9303      	str	r3, [sp, #12]
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	9302      	str	r3, [sp, #8]
 8006bc2:	f107 0314 	add.w	r3, r7, #20
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 f850 	bl	8006c78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bda:	f000 f8d3 	bl	8006d84 <prvAddNewTaskToReadyList>
 8006bde:	e001      	b.n	8006be4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006be4:	697b      	ldr	r3, [r7, #20]
	}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3728      	adds	r7, #40	; 0x28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b08c      	sub	sp, #48	; 0x30
 8006bf2:	af04      	add	r7, sp, #16
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 fb36 	bl	8008274 <pvPortMalloc>
 8006c08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00e      	beq.n	8006c2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006c10:	205c      	movs	r0, #92	; 0x5c
 8006c12:	f001 fb2f 	bl	8008274 <pvPortMalloc>
 8006c16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30
 8006c24:	e005      	b.n	8006c32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c26:	6978      	ldr	r0, [r7, #20]
 8006c28:	f001 fbe6 	bl	80083f8 <vPortFree>
 8006c2c:	e001      	b.n	8006c32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d017      	beq.n	8006c68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c40:	88fa      	ldrh	r2, [r7, #6]
 8006c42:	2300      	movs	r3, #0
 8006c44:	9303      	str	r3, [sp, #12]
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	9302      	str	r3, [sp, #8]
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f80e 	bl	8006c78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c5c:	69f8      	ldr	r0, [r7, #28]
 8006c5e:	f000 f891 	bl	8006d84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c62:	2301      	movs	r3, #1
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	e002      	b.n	8006c6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c68:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c6e:	69bb      	ldr	r3, [r7, #24]
	}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3720      	adds	r7, #32
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	461a      	mov	r2, r3
 8006c90:	21a5      	movs	r1, #165	; 0xa5
 8006c92:	f001 fd01 	bl	8008698 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f023 0307 	bic.w	r3, r3, #7
 8006cae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d009      	beq.n	8006cce <prvInitialiseNewTask+0x56>
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	e7fe      	b.n	8006ccc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61fb      	str	r3, [r7, #28]
 8006cd2:	e012      	b.n	8006cfa <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	4413      	add	r3, r2
 8006cda:	7819      	ldrb	r1, [r3, #0]
 8006cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	3334      	adds	r3, #52	; 0x34
 8006ce4:	460a      	mov	r2, r1
 8006ce6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d006      	beq.n	8006d02 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	2b0f      	cmp	r3, #15
 8006cfe:	d9e9      	bls.n	8006cd4 <prvInitialiseNewTask+0x5c>
 8006d00:	e000      	b.n	8006d04 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006d02:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	2b37      	cmp	r3, #55	; 0x37
 8006d10:	d901      	bls.n	8006d16 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d12:	2337      	movs	r3, #55	; 0x37
 8006d14:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d1a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	2200      	movs	r2, #0
 8006d26:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff f9a0 	bl	8006072 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	3318      	adds	r3, #24
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff f99b 	bl	8006072 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	2200      	movs	r2, #0
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	68f9      	ldr	r1, [r7, #12]
 8006d64:	69b8      	ldr	r0, [r7, #24]
 8006d66:	f001 f8a3 	bl	8007eb0 <pxPortInitialiseStack>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d7c:	bf00      	nop
 8006d7e:	3720      	adds	r7, #32
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d8c:	f001 f97c 	bl	8008088 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d90:	4b2d      	ldr	r3, [pc, #180]	; (8006e48 <prvAddNewTaskToReadyList+0xc4>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	4a2c      	ldr	r2, [pc, #176]	; (8006e48 <prvAddNewTaskToReadyList+0xc4>)
 8006d98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d9a:	4b2c      	ldr	r3, [pc, #176]	; (8006e4c <prvAddNewTaskToReadyList+0xc8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006da2:	4a2a      	ldr	r2, [pc, #168]	; (8006e4c <prvAddNewTaskToReadyList+0xc8>)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006da8:	4b27      	ldr	r3, [pc, #156]	; (8006e48 <prvAddNewTaskToReadyList+0xc4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d110      	bne.n	8006dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006db0:	f000 fbd8 	bl	8007564 <prvInitialiseTaskLists>
 8006db4:	e00d      	b.n	8006dd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006db6:	4b26      	ldr	r3, [pc, #152]	; (8006e50 <prvAddNewTaskToReadyList+0xcc>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dbe:	4b23      	ldr	r3, [pc, #140]	; (8006e4c <prvAddNewTaskToReadyList+0xc8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d802      	bhi.n	8006dd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dcc:	4a1f      	ldr	r2, [pc, #124]	; (8006e4c <prvAddNewTaskToReadyList+0xc8>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dd2:	4b20      	ldr	r3, [pc, #128]	; (8006e54 <prvAddNewTaskToReadyList+0xd0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	4a1e      	ldr	r2, [pc, #120]	; (8006e54 <prvAddNewTaskToReadyList+0xd0>)
 8006dda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ddc:	4b1d      	ldr	r3, [pc, #116]	; (8006e54 <prvAddNewTaskToReadyList+0xd0>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	4b1b      	ldr	r3, [pc, #108]	; (8006e58 <prvAddNewTaskToReadyList+0xd4>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d903      	bls.n	8006df8 <prvAddNewTaskToReadyList+0x74>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <prvAddNewTaskToReadyList+0xd4>)
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4a15      	ldr	r2, [pc, #84]	; (8006e5c <prvAddNewTaskToReadyList+0xd8>)
 8006e06:	441a      	add	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	f7ff f93b 	bl	800608a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e14:	f001 f966 	bl	80080e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e18:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <prvAddNewTaskToReadyList+0xcc>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00e      	beq.n	8006e3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e20:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <prvAddNewTaskToReadyList+0xc8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d207      	bcs.n	8006e3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <prvAddNewTaskToReadyList+0xdc>)
 8006e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e3e:	bf00      	nop
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000c28 	.word	0x20000c28
 8006e4c:	20000754 	.word	0x20000754
 8006e50:	20000c34 	.word	0x20000c34
 8006e54:	20000c44 	.word	0x20000c44
 8006e58:	20000c30 	.word	0x20000c30
 8006e5c:	20000758 	.word	0x20000758
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08a      	sub	sp, #40	; 0x28
 8006e68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e72:	463a      	mov	r2, r7
 8006e74:	1d39      	adds	r1, r7, #4
 8006e76:	f107 0308 	add.w	r3, r7, #8
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff f8a8 	bl	8005fd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	9202      	str	r2, [sp, #8]
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	460a      	mov	r2, r1
 8006e92:	4920      	ldr	r1, [pc, #128]	; (8006f14 <vTaskStartScheduler+0xb0>)
 8006e94:	4820      	ldr	r0, [pc, #128]	; (8006f18 <vTaskStartScheduler+0xb4>)
 8006e96:	f7ff fe51 	bl	8006b3c <xTaskCreateStatic>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	4b1f      	ldr	r3, [pc, #124]	; (8006f1c <vTaskStartScheduler+0xb8>)
 8006e9e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ea0:	4b1e      	ldr	r3, [pc, #120]	; (8006f1c <vTaskStartScheduler+0xb8>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	e001      	b.n	8006eb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d102      	bne.n	8006ebe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006eb8:	f000 fcf0 	bl	800789c <xTimerCreateTimerTask>
 8006ebc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d115      	bne.n	8006ef0 <vTaskStartScheduler+0x8c>
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ed6:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <vTaskStartScheduler+0xbc>)
 8006ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8006edc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ede:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <vTaskStartScheduler+0xc0>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006ee4:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <vTaskStartScheduler+0xc4>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006eea:	f001 f85d 	bl	8007fa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006eee:	e00d      	b.n	8006f0c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d109      	bne.n	8006f0c <vTaskStartScheduler+0xa8>
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	e7fe      	b.n	8006f0a <vTaskStartScheduler+0xa6>
}
 8006f0c:	bf00      	nop
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	0800983c 	.word	0x0800983c
 8006f18:	08007535 	.word	0x08007535
 8006f1c:	20000c4c 	.word	0x20000c4c
 8006f20:	20000c48 	.word	0x20000c48
 8006f24:	20000c34 	.word	0x20000c34
 8006f28:	20000c2c 	.word	0x20000c2c

08006f2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <vTaskSuspendAll+0x18>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	4a03      	ldr	r2, [pc, #12]	; (8006f44 <vTaskSuspendAll+0x18>)
 8006f38:	6013      	str	r3, [r2, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bc80      	pop	{r7}
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000c50 	.word	0x20000c50

08006f48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f56:	4b41      	ldr	r3, [pc, #260]	; (800705c <xTaskResumeAll+0x114>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <xTaskResumeAll+0x2a>
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	e7fe      	b.n	8006f70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f72:	f001 f889 	bl	8008088 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f76:	4b39      	ldr	r3, [pc, #228]	; (800705c <xTaskResumeAll+0x114>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	4a37      	ldr	r2, [pc, #220]	; (800705c <xTaskResumeAll+0x114>)
 8006f7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f80:	4b36      	ldr	r3, [pc, #216]	; (800705c <xTaskResumeAll+0x114>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d162      	bne.n	800704e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f88:	4b35      	ldr	r3, [pc, #212]	; (8007060 <xTaskResumeAll+0x118>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d05e      	beq.n	800704e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f90:	e02f      	b.n	8006ff2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006f92:	4b34      	ldr	r3, [pc, #208]	; (8007064 <xTaskResumeAll+0x11c>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3318      	adds	r3, #24
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff f8ce 	bl	8006140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff f8c9 	bl	8006140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb2:	4b2d      	ldr	r3, [pc, #180]	; (8007068 <xTaskResumeAll+0x120>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d903      	bls.n	8006fc2 <xTaskResumeAll+0x7a>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	4a2a      	ldr	r2, [pc, #168]	; (8007068 <xTaskResumeAll+0x120>)
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4a27      	ldr	r2, [pc, #156]	; (800706c <xTaskResumeAll+0x124>)
 8006fd0:	441a      	add	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f7ff f856 	bl	800608a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe2:	4b23      	ldr	r3, [pc, #140]	; (8007070 <xTaskResumeAll+0x128>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d302      	bcc.n	8006ff2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006fec:	4b21      	ldr	r3, [pc, #132]	; (8007074 <xTaskResumeAll+0x12c>)
 8006fee:	2201      	movs	r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ff2:	4b1c      	ldr	r3, [pc, #112]	; (8007064 <xTaskResumeAll+0x11c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1cb      	bne.n	8006f92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007000:	f000 fb4a 	bl	8007698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007004:	4b1c      	ldr	r3, [pc, #112]	; (8007078 <xTaskResumeAll+0x130>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d010      	beq.n	8007032 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007010:	f000 f844 	bl	800709c <xTaskIncrementTick>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800701a:	4b16      	ldr	r3, [pc, #88]	; (8007074 <xTaskResumeAll+0x12c>)
 800701c:	2201      	movs	r2, #1
 800701e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3b01      	subs	r3, #1
 8007024:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1f1      	bne.n	8007010 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800702c:	4b12      	ldr	r3, [pc, #72]	; (8007078 <xTaskResumeAll+0x130>)
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007032:	4b10      	ldr	r3, [pc, #64]	; (8007074 <xTaskResumeAll+0x12c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d009      	beq.n	800704e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800703a:	2301      	movs	r3, #1
 800703c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800703e:	4b0f      	ldr	r3, [pc, #60]	; (800707c <xTaskResumeAll+0x134>)
 8007040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800704e:	f001 f849 	bl	80080e4 <vPortExitCritical>

	return xAlreadyYielded;
 8007052:	68bb      	ldr	r3, [r7, #8]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20000c50 	.word	0x20000c50
 8007060:	20000c28 	.word	0x20000c28
 8007064:	20000be8 	.word	0x20000be8
 8007068:	20000c30 	.word	0x20000c30
 800706c:	20000758 	.word	0x20000758
 8007070:	20000754 	.word	0x20000754
 8007074:	20000c3c 	.word	0x20000c3c
 8007078:	20000c38 	.word	0x20000c38
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007086:	4b04      	ldr	r3, [pc, #16]	; (8007098 <xTaskGetTickCount+0x18>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800708c:	687b      	ldr	r3, [r7, #4]
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr
 8007098:	20000c2c 	.word	0x20000c2c

0800709c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a6:	4b51      	ldr	r3, [pc, #324]	; (80071ec <xTaskIncrementTick+0x150>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 808d 	bne.w	80071ca <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070b0:	4b4f      	ldr	r3, [pc, #316]	; (80071f0 <xTaskIncrementTick+0x154>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070b8:	4a4d      	ldr	r2, [pc, #308]	; (80071f0 <xTaskIncrementTick+0x154>)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d11f      	bne.n	8007104 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80070c4:	4b4b      	ldr	r3, [pc, #300]	; (80071f4 <xTaskIncrementTick+0x158>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d009      	beq.n	80070e2 <xTaskIncrementTick+0x46>
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	e7fe      	b.n	80070e0 <xTaskIncrementTick+0x44>
 80070e2:	4b44      	ldr	r3, [pc, #272]	; (80071f4 <xTaskIncrementTick+0x158>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	4b43      	ldr	r3, [pc, #268]	; (80071f8 <xTaskIncrementTick+0x15c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a41      	ldr	r2, [pc, #260]	; (80071f4 <xTaskIncrementTick+0x158>)
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	4a41      	ldr	r2, [pc, #260]	; (80071f8 <xTaskIncrementTick+0x15c>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	4b41      	ldr	r3, [pc, #260]	; (80071fc <xTaskIncrementTick+0x160>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3301      	adds	r3, #1
 80070fc:	4a3f      	ldr	r2, [pc, #252]	; (80071fc <xTaskIncrementTick+0x160>)
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	f000 faca 	bl	8007698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007104:	4b3e      	ldr	r3, [pc, #248]	; (8007200 <xTaskIncrementTick+0x164>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	429a      	cmp	r2, r3
 800710c:	d34e      	bcc.n	80071ac <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800710e:	4b39      	ldr	r3, [pc, #228]	; (80071f4 <xTaskIncrementTick+0x158>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <xTaskIncrementTick+0x80>
 8007118:	2301      	movs	r3, #1
 800711a:	e000      	b.n	800711e <xTaskIncrementTick+0x82>
 800711c:	2300      	movs	r3, #0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007122:	4b37      	ldr	r3, [pc, #220]	; (8007200 <xTaskIncrementTick+0x164>)
 8007124:	f04f 32ff 	mov.w	r2, #4294967295
 8007128:	601a      	str	r2, [r3, #0]
					break;
 800712a:	e03f      	b.n	80071ac <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800712c:	4b31      	ldr	r3, [pc, #196]	; (80071f4 <xTaskIncrementTick+0x158>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d203      	bcs.n	800714c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007144:	4a2e      	ldr	r2, [pc, #184]	; (8007200 <xTaskIncrementTick+0x164>)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6013      	str	r3, [r2, #0]
						break;
 800714a:	e02f      	b.n	80071ac <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3304      	adds	r3, #4
 8007150:	4618      	mov	r0, r3
 8007152:	f7fe fff5 	bl	8006140 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	2b00      	cmp	r3, #0
 800715c:	d004      	beq.n	8007168 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	3318      	adds	r3, #24
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe ffec 	bl	8006140 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716c:	4b25      	ldr	r3, [pc, #148]	; (8007204 <xTaskIncrementTick+0x168>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d903      	bls.n	800717c <xTaskIncrementTick+0xe0>
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	4a22      	ldr	r2, [pc, #136]	; (8007204 <xTaskIncrementTick+0x168>)
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4a1f      	ldr	r2, [pc, #124]	; (8007208 <xTaskIncrementTick+0x16c>)
 800718a:	441a      	add	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	3304      	adds	r3, #4
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f7fe ff79 	bl	800608a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	4b1b      	ldr	r3, [pc, #108]	; (800720c <xTaskIncrementTick+0x170>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d3b3      	bcc.n	800710e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80071a6:	2301      	movs	r3, #1
 80071a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071aa:	e7b0      	b.n	800710e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071ac:	4b17      	ldr	r3, [pc, #92]	; (800720c <xTaskIncrementTick+0x170>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b2:	4915      	ldr	r1, [pc, #84]	; (8007208 <xTaskIncrementTick+0x16c>)
 80071b4:	4613      	mov	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	440b      	add	r3, r1
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d907      	bls.n	80071d4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	e004      	b.n	80071d4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80071ca:	4b11      	ldr	r3, [pc, #68]	; (8007210 <xTaskIncrementTick+0x174>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3301      	adds	r3, #1
 80071d0:	4a0f      	ldr	r2, [pc, #60]	; (8007210 <xTaskIncrementTick+0x174>)
 80071d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071d4:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <xTaskIncrementTick+0x178>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80071dc:	2301      	movs	r3, #1
 80071de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071e0:	697b      	ldr	r3, [r7, #20]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20000c50 	.word	0x20000c50
 80071f0:	20000c2c 	.word	0x20000c2c
 80071f4:	20000be0 	.word	0x20000be0
 80071f8:	20000be4 	.word	0x20000be4
 80071fc:	20000c40 	.word	0x20000c40
 8007200:	20000c48 	.word	0x20000c48
 8007204:	20000c30 	.word	0x20000c30
 8007208:	20000758 	.word	0x20000758
 800720c:	20000754 	.word	0x20000754
 8007210:	20000c38 	.word	0x20000c38
 8007214:	20000c3c 	.word	0x20000c3c

08007218 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800721e:	4b27      	ldr	r3, [pc, #156]	; (80072bc <vTaskSwitchContext+0xa4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007226:	4b26      	ldr	r3, [pc, #152]	; (80072c0 <vTaskSwitchContext+0xa8>)
 8007228:	2201      	movs	r2, #1
 800722a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800722c:	e040      	b.n	80072b0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800722e:	4b24      	ldr	r3, [pc, #144]	; (80072c0 <vTaskSwitchContext+0xa8>)
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007234:	4b23      	ldr	r3, [pc, #140]	; (80072c4 <vTaskSwitchContext+0xac>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	e00f      	b.n	800725c <vTaskSwitchContext+0x44>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <vTaskSwitchContext+0x3e>
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	607b      	str	r3, [r7, #4]
 8007254:	e7fe      	b.n	8007254 <vTaskSwitchContext+0x3c>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3b01      	subs	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	491a      	ldr	r1, [pc, #104]	; (80072c8 <vTaskSwitchContext+0xb0>)
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	440b      	add	r3, r1
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0e5      	beq.n	800723c <vTaskSwitchContext+0x24>
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4a13      	ldr	r2, [pc, #76]	; (80072c8 <vTaskSwitchContext+0xb0>)
 800727c:	4413      	add	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	605a      	str	r2, [r3, #4]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	3308      	adds	r3, #8
 8007292:	429a      	cmp	r2, r3
 8007294:	d104      	bne.n	80072a0 <vTaskSwitchContext+0x88>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	605a      	str	r2, [r3, #4]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	4a09      	ldr	r2, [pc, #36]	; (80072cc <vTaskSwitchContext+0xb4>)
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	4a06      	ldr	r2, [pc, #24]	; (80072c4 <vTaskSwitchContext+0xac>)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6013      	str	r3, [r2, #0]
}
 80072b0:	bf00      	nop
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20000c50 	.word	0x20000c50
 80072c0:	20000c3c 	.word	0x20000c3c
 80072c4:	20000c30 	.word	0x20000c30
 80072c8:	20000758 	.word	0x20000758
 80072cc:	20000754 	.word	0x20000754

080072d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d109      	bne.n	80072f4 <vTaskPlaceOnEventList+0x24>
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	e7fe      	b.n	80072f2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072f4:	4b07      	ldr	r3, [pc, #28]	; (8007314 <vTaskPlaceOnEventList+0x44>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3318      	adds	r3, #24
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7fe fee7 	bl	80060d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007302:	2101      	movs	r1, #1
 8007304:	6838      	ldr	r0, [r7, #0]
 8007306:	f000 fa75 	bl	80077f4 <prvAddCurrentTaskToDelayedList>
}
 800730a:	bf00      	nop
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000754 	.word	0x20000754

08007318 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d109      	bne.n	800733e <vTaskPlaceOnEventListRestricted+0x26>
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e7fe      	b.n	800733c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800733e:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <vTaskPlaceOnEventListRestricted+0x50>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3318      	adds	r3, #24
 8007344:	4619      	mov	r1, r3
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7fe fe9f 	bl	800608a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007352:	f04f 33ff 	mov.w	r3, #4294967295
 8007356:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	68b8      	ldr	r0, [r7, #8]
 800735c:	f000 fa4a 	bl	80077f4 <prvAddCurrentTaskToDelayedList>
	}
 8007360:	bf00      	nop
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20000754 	.word	0x20000754

0800736c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <xTaskRemoveFromEventList+0x2a>
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	e7fe      	b.n	8007394 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	3318      	adds	r3, #24
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fed0 	bl	8006140 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073a0:	4b1d      	ldr	r3, [pc, #116]	; (8007418 <xTaskRemoveFromEventList+0xac>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d11d      	bne.n	80073e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	3304      	adds	r3, #4
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fe fec7 	bl	8006140 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	4b19      	ldr	r3, [pc, #100]	; (800741c <xTaskRemoveFromEventList+0xb0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d903      	bls.n	80073c6 <xTaskRemoveFromEventList+0x5a>
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	4a16      	ldr	r2, [pc, #88]	; (800741c <xTaskRemoveFromEventList+0xb0>)
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4a13      	ldr	r2, [pc, #76]	; (8007420 <xTaskRemoveFromEventList+0xb4>)
 80073d4:	441a      	add	r2, r3
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	3304      	adds	r3, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7fe fe54 	bl	800608a <vListInsertEnd>
 80073e2:	e005      	b.n	80073f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	3318      	adds	r3, #24
 80073e8:	4619      	mov	r1, r3
 80073ea:	480e      	ldr	r0, [pc, #56]	; (8007424 <xTaskRemoveFromEventList+0xb8>)
 80073ec:	f7fe fe4d 	bl	800608a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f4:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <xTaskRemoveFromEventList+0xbc>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d905      	bls.n	800740a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073fe:	2301      	movs	r3, #1
 8007400:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007402:	4b0a      	ldr	r3, [pc, #40]	; (800742c <xTaskRemoveFromEventList+0xc0>)
 8007404:	2201      	movs	r2, #1
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	e001      	b.n	800740e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800740e:	697b      	ldr	r3, [r7, #20]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20000c50 	.word	0x20000c50
 800741c:	20000c30 	.word	0x20000c30
 8007420:	20000758 	.word	0x20000758
 8007424:	20000be8 	.word	0x20000be8
 8007428:	20000754 	.word	0x20000754
 800742c:	20000c3c 	.word	0x20000c3c

08007430 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007438:	4b06      	ldr	r3, [pc, #24]	; (8007454 <vTaskInternalSetTimeOutState+0x24>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <vTaskInternalSetTimeOutState+0x28>)
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	605a      	str	r2, [r3, #4]
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	bc80      	pop	{r7}
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20000c40 	.word	0x20000c40
 8007458:	20000c2c 	.word	0x20000c2c

0800745c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d109      	bne.n	8007480 <xTaskCheckForTimeOut+0x24>
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	e7fe      	b.n	800747e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d109      	bne.n	800749a <xTaskCheckForTimeOut+0x3e>
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	e7fe      	b.n	8007498 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800749a:	f000 fdf5 	bl	8008088 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800749e:	4b1d      	ldr	r3, [pc, #116]	; (8007514 <xTaskCheckForTimeOut+0xb8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b6:	d102      	bne.n	80074be <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074b8:	2300      	movs	r3, #0
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	e023      	b.n	8007506 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	4b15      	ldr	r3, [pc, #84]	; (8007518 <xTaskCheckForTimeOut+0xbc>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d007      	beq.n	80074da <xTaskCheckForTimeOut+0x7e>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d302      	bcc.n	80074da <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074d4:	2301      	movs	r3, #1
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	e015      	b.n	8007506 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d20b      	bcs.n	80074fc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	1ad2      	subs	r2, r2, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff ff9d 	bl	8007430 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	e004      	b.n	8007506 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007502:	2301      	movs	r3, #1
 8007504:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007506:	f000 fded 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 800750a:	69fb      	ldr	r3, [r7, #28]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20000c2c 	.word	0x20000c2c
 8007518:	20000c40 	.word	0x20000c40

0800751c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007520:	4b03      	ldr	r3, [pc, #12]	; (8007530 <vTaskMissedYield+0x14>)
 8007522:	2201      	movs	r2, #1
 8007524:	601a      	str	r2, [r3, #0]
}
 8007526:	bf00      	nop
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	20000c3c 	.word	0x20000c3c

08007534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800753c:	f000 f852 	bl	80075e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007540:	4b06      	ldr	r3, [pc, #24]	; (800755c <prvIdleTask+0x28>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d9f9      	bls.n	800753c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <prvIdleTask+0x2c>)
 800754a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007558:	e7f0      	b.n	800753c <prvIdleTask+0x8>
 800755a:	bf00      	nop
 800755c:	20000758 	.word	0x20000758
 8007560:	e000ed04 	.word	0xe000ed04

08007564 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800756a:	2300      	movs	r3, #0
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	e00c      	b.n	800758a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4a12      	ldr	r2, [pc, #72]	; (80075c4 <prvInitialiseTaskLists+0x60>)
 800757c:	4413      	add	r3, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fd58 	bl	8006034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3301      	adds	r3, #1
 8007588:	607b      	str	r3, [r7, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b37      	cmp	r3, #55	; 0x37
 800758e:	d9ef      	bls.n	8007570 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007590:	480d      	ldr	r0, [pc, #52]	; (80075c8 <prvInitialiseTaskLists+0x64>)
 8007592:	f7fe fd4f 	bl	8006034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007596:	480d      	ldr	r0, [pc, #52]	; (80075cc <prvInitialiseTaskLists+0x68>)
 8007598:	f7fe fd4c 	bl	8006034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800759c:	480c      	ldr	r0, [pc, #48]	; (80075d0 <prvInitialiseTaskLists+0x6c>)
 800759e:	f7fe fd49 	bl	8006034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075a2:	480c      	ldr	r0, [pc, #48]	; (80075d4 <prvInitialiseTaskLists+0x70>)
 80075a4:	f7fe fd46 	bl	8006034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075a8:	480b      	ldr	r0, [pc, #44]	; (80075d8 <prvInitialiseTaskLists+0x74>)
 80075aa:	f7fe fd43 	bl	8006034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075ae:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <prvInitialiseTaskLists+0x78>)
 80075b0:	4a05      	ldr	r2, [pc, #20]	; (80075c8 <prvInitialiseTaskLists+0x64>)
 80075b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075b4:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <prvInitialiseTaskLists+0x7c>)
 80075b6:	4a05      	ldr	r2, [pc, #20]	; (80075cc <prvInitialiseTaskLists+0x68>)
 80075b8:	601a      	str	r2, [r3, #0]
}
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20000758 	.word	0x20000758
 80075c8:	20000bb8 	.word	0x20000bb8
 80075cc:	20000bcc 	.word	0x20000bcc
 80075d0:	20000be8 	.word	0x20000be8
 80075d4:	20000bfc 	.word	0x20000bfc
 80075d8:	20000c14 	.word	0x20000c14
 80075dc:	20000be0 	.word	0x20000be0
 80075e0:	20000be4 	.word	0x20000be4

080075e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075ea:	e019      	b.n	8007620 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075ec:	f000 fd4c 	bl	8008088 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80075f0:	4b0f      	ldr	r3, [pc, #60]	; (8007630 <prvCheckTasksWaitingTermination+0x4c>)
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe fd9f 	bl	8006140 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007602:	4b0c      	ldr	r3, [pc, #48]	; (8007634 <prvCheckTasksWaitingTermination+0x50>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3b01      	subs	r3, #1
 8007608:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <prvCheckTasksWaitingTermination+0x50>)
 800760a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800760c:	4b0a      	ldr	r3, [pc, #40]	; (8007638 <prvCheckTasksWaitingTermination+0x54>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3b01      	subs	r3, #1
 8007612:	4a09      	ldr	r2, [pc, #36]	; (8007638 <prvCheckTasksWaitingTermination+0x54>)
 8007614:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007616:	f000 fd65 	bl	80080e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f80e 	bl	800763c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007620:	4b05      	ldr	r3, [pc, #20]	; (8007638 <prvCheckTasksWaitingTermination+0x54>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1e1      	bne.n	80075ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20000bfc 	.word	0x20000bfc
 8007634:	20000c28 	.word	0x20000c28
 8007638:	20000c10 	.word	0x20000c10

0800763c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800764a:	2b00      	cmp	r3, #0
 800764c:	d108      	bne.n	8007660 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fed0 	bl	80083f8 <vPortFree>
				vPortFree( pxTCB );
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fecd 	bl	80083f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800765e:	e017      	b.n	8007690 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007666:	2b01      	cmp	r3, #1
 8007668:	d103      	bne.n	8007672 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fec4 	bl	80083f8 <vPortFree>
	}
 8007670:	e00e      	b.n	8007690 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007678:	2b02      	cmp	r3, #2
 800767a:	d009      	beq.n	8007690 <prvDeleteTCB+0x54>
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	e7fe      	b.n	800768e <prvDeleteTCB+0x52>
	}
 8007690:	bf00      	nop
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800769e:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <prvResetNextTaskUnblockTime+0x40>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <prvResetNextTaskUnblockTime+0x14>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e000      	b.n	80076ae <prvResetNextTaskUnblockTime+0x16>
 80076ac:	2300      	movs	r3, #0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d004      	beq.n	80076bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076b2:	4b0a      	ldr	r3, [pc, #40]	; (80076dc <prvResetNextTaskUnblockTime+0x44>)
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076ba:	e008      	b.n	80076ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <prvResetNextTaskUnblockTime+0x40>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	4a04      	ldr	r2, [pc, #16]	; (80076dc <prvResetNextTaskUnblockTime+0x44>)
 80076cc:	6013      	str	r3, [r2, #0]
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bc80      	pop	{r7}
 80076d6:	4770      	bx	lr
 80076d8:	20000be0 	.word	0x20000be0
 80076dc:	20000c48 	.word	0x20000c48

080076e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076e6:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <xTaskGetSchedulerState+0x34>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d102      	bne.n	80076f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076ee:	2301      	movs	r3, #1
 80076f0:	607b      	str	r3, [r7, #4]
 80076f2:	e008      	b.n	8007706 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076f4:	4b08      	ldr	r3, [pc, #32]	; (8007718 <xTaskGetSchedulerState+0x38>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076fc:	2302      	movs	r3, #2
 80076fe:	607b      	str	r3, [r7, #4]
 8007700:	e001      	b.n	8007706 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007702:	2300      	movs	r3, #0
 8007704:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007706:	687b      	ldr	r3, [r7, #4]
	}
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	bc80      	pop	{r7}
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20000c34 	.word	0x20000c34
 8007718:	20000c50 	.word	0x20000c50

0800771c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d054      	beq.n	80077dc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007732:	4b2d      	ldr	r3, [pc, #180]	; (80077e8 <xTaskPriorityDisinherit+0xcc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	429a      	cmp	r2, r3
 800773a:	d009      	beq.n	8007750 <xTaskPriorityDisinherit+0x34>
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	e7fe      	b.n	800774e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007754:	2b00      	cmp	r3, #0
 8007756:	d109      	bne.n	800776c <xTaskPriorityDisinherit+0x50>
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	e7fe      	b.n	800776a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007770:	1e5a      	subs	r2, r3, #1
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777e:	429a      	cmp	r2, r3
 8007780:	d02c      	beq.n	80077dc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007786:	2b00      	cmp	r3, #0
 8007788:	d128      	bne.n	80077dc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	3304      	adds	r3, #4
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fcd6 	bl	8006140 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ac:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <xTaskPriorityDisinherit+0xd0>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d903      	bls.n	80077bc <xTaskPriorityDisinherit+0xa0>
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	4a0c      	ldr	r2, [pc, #48]	; (80077ec <xTaskPriorityDisinherit+0xd0>)
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <xTaskPriorityDisinherit+0xd4>)
 80077ca:	441a      	add	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f7fe fc59 	bl	800608a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077d8:	2301      	movs	r3, #1
 80077da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077dc:	697b      	ldr	r3, [r7, #20]
	}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000754 	.word	0x20000754
 80077ec:	20000c30 	.word	0x20000c30
 80077f0:	20000758 	.word	0x20000758

080077f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077fe:	4b21      	ldr	r3, [pc, #132]	; (8007884 <prvAddCurrentTaskToDelayedList+0x90>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007804:	4b20      	ldr	r3, [pc, #128]	; (8007888 <prvAddCurrentTaskToDelayedList+0x94>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3304      	adds	r3, #4
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fc98 	bl	8006140 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007816:	d10a      	bne.n	800782e <prvAddCurrentTaskToDelayedList+0x3a>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d007      	beq.n	800782e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800781e:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <prvAddCurrentTaskToDelayedList+0x94>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3304      	adds	r3, #4
 8007824:	4619      	mov	r1, r3
 8007826:	4819      	ldr	r0, [pc, #100]	; (800788c <prvAddCurrentTaskToDelayedList+0x98>)
 8007828:	f7fe fc2f 	bl	800608a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800782c:	e026      	b.n	800787c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4413      	add	r3, r2
 8007834:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007836:	4b14      	ldr	r3, [pc, #80]	; (8007888 <prvAddCurrentTaskToDelayedList+0x94>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	429a      	cmp	r2, r3
 8007844:	d209      	bcs.n	800785a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007846:	4b12      	ldr	r3, [pc, #72]	; (8007890 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <prvAddCurrentTaskToDelayedList+0x94>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3304      	adds	r3, #4
 8007850:	4619      	mov	r1, r3
 8007852:	4610      	mov	r0, r2
 8007854:	f7fe fc3c 	bl	80060d0 <vListInsert>
}
 8007858:	e010      	b.n	800787c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800785a:	4b0e      	ldr	r3, [pc, #56]	; (8007894 <prvAddCurrentTaskToDelayedList+0xa0>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <prvAddCurrentTaskToDelayedList+0x94>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3304      	adds	r3, #4
 8007864:	4619      	mov	r1, r3
 8007866:	4610      	mov	r0, r2
 8007868:	f7fe fc32 	bl	80060d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800786c:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <prvAddCurrentTaskToDelayedList+0xa4>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	429a      	cmp	r2, r3
 8007874:	d202      	bcs.n	800787c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007876:	4a08      	ldr	r2, [pc, #32]	; (8007898 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	6013      	str	r3, [r2, #0]
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	20000c2c 	.word	0x20000c2c
 8007888:	20000754 	.word	0x20000754
 800788c:	20000c14 	.word	0x20000c14
 8007890:	20000be4 	.word	0x20000be4
 8007894:	20000be0 	.word	0x20000be0
 8007898:	20000c48 	.word	0x20000c48

0800789c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08a      	sub	sp, #40	; 0x28
 80078a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078a6:	f000 fac3 	bl	8007e30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078aa:	4b1c      	ldr	r3, [pc, #112]	; (800791c <xTimerCreateTimerTask+0x80>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d021      	beq.n	80078f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078ba:	1d3a      	adds	r2, r7, #4
 80078bc:	f107 0108 	add.w	r1, r7, #8
 80078c0:	f107 030c 	add.w	r3, r7, #12
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe fb9b 	bl	8006000 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078ca:	6879      	ldr	r1, [r7, #4]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	9202      	str	r2, [sp, #8]
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	2302      	movs	r3, #2
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	2300      	movs	r3, #0
 80078da:	460a      	mov	r2, r1
 80078dc:	4910      	ldr	r1, [pc, #64]	; (8007920 <xTimerCreateTimerTask+0x84>)
 80078de:	4811      	ldr	r0, [pc, #68]	; (8007924 <xTimerCreateTimerTask+0x88>)
 80078e0:	f7ff f92c 	bl	8006b3c <xTaskCreateStatic>
 80078e4:	4602      	mov	r2, r0
 80078e6:	4b10      	ldr	r3, [pc, #64]	; (8007928 <xTimerCreateTimerTask+0x8c>)
 80078e8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <xTimerCreateTimerTask+0x8c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078f2:	2301      	movs	r3, #1
 80078f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d109      	bne.n	8007910 <xTimerCreateTimerTask+0x74>
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	613b      	str	r3, [r7, #16]
 800790e:	e7fe      	b.n	800790e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007910:	697b      	ldr	r3, [r7, #20]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20000c84 	.word	0x20000c84
 8007920:	08009844 	.word	0x08009844
 8007924:	08007a45 	.word	0x08007a45
 8007928:	20000c88 	.word	0x20000c88

0800792c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08a      	sub	sp, #40	; 0x28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800793a:	2300      	movs	r3, #0
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d109      	bne.n	8007958 <xTimerGenericCommand+0x2c>
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	623b      	str	r3, [r7, #32]
 8007956:	e7fe      	b.n	8007956 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007958:	4b19      	ldr	r3, [pc, #100]	; (80079c0 <xTimerGenericCommand+0x94>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d02a      	beq.n	80079b6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b05      	cmp	r3, #5
 8007970:	dc18      	bgt.n	80079a4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007972:	f7ff feb5 	bl	80076e0 <xTaskGetSchedulerState>
 8007976:	4603      	mov	r3, r0
 8007978:	2b02      	cmp	r3, #2
 800797a:	d109      	bne.n	8007990 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800797c:	4b10      	ldr	r3, [pc, #64]	; (80079c0 <xTimerGenericCommand+0x94>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	f107 0110 	add.w	r1, r7, #16
 8007984:	2300      	movs	r3, #0
 8007986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007988:	f7fe fd02 	bl	8006390 <xQueueGenericSend>
 800798c:	6278      	str	r0, [r7, #36]	; 0x24
 800798e:	e012      	b.n	80079b6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007990:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <xTimerGenericCommand+0x94>)
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	f107 0110 	add.w	r1, r7, #16
 8007998:	2300      	movs	r3, #0
 800799a:	2200      	movs	r2, #0
 800799c:	f7fe fcf8 	bl	8006390 <xQueueGenericSend>
 80079a0:	6278      	str	r0, [r7, #36]	; 0x24
 80079a2:	e008      	b.n	80079b6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079a4:	4b06      	ldr	r3, [pc, #24]	; (80079c0 <xTimerGenericCommand+0x94>)
 80079a6:	6818      	ldr	r0, [r3, #0]
 80079a8:	f107 0110 	add.w	r1, r7, #16
 80079ac:	2300      	movs	r3, #0
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	f7fe fde8 	bl	8006584 <xQueueGenericSendFromISR>
 80079b4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3728      	adds	r7, #40	; 0x28
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000c84 	.word	0x20000c84

080079c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af02      	add	r7, sp, #8
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079ce:	4b1c      	ldr	r3, [pc, #112]	; (8007a40 <prvProcessExpiredTimer+0x7c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	3304      	adds	r3, #4
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe fbaf 	bl	8006140 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d121      	bne.n	8007a2e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	699a      	ldr	r2, [r3, #24]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	18d1      	adds	r1, r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	6978      	ldr	r0, [r7, #20]
 80079f8:	f000 f8c8 	bl	8007b8c <prvInsertTimerInActiveList>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d015      	beq.n	8007a2e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a02:	2300      	movs	r3, #0
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	2300      	movs	r3, #0
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	6978      	ldr	r0, [r7, #20]
 8007a0e:	f7ff ff8d 	bl	800792c <xTimerGenericCommand>
 8007a12:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d109      	bne.n	8007a2e <prvProcessExpiredTimer+0x6a>
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	e7fe      	b.n	8007a2c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	6978      	ldr	r0, [r7, #20]
 8007a34:	4798      	blx	r3
}
 8007a36:	bf00      	nop
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000c7c 	.word	0x20000c7c

08007a44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a4c:	f107 0308 	add.w	r3, r7, #8
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 f857 	bl	8007b04 <prvGetNextExpireTime>
 8007a56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 f803 	bl	8007a68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a62:	f000 f8d5 	bl	8007c10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a66:	e7f1      	b.n	8007a4c <prvTimerTask+0x8>

08007a68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a72:	f7ff fa5b 	bl	8006f2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a76:	f107 0308 	add.w	r3, r7, #8
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f866 	bl	8007b4c <prvSampleTimeNow>
 8007a80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d130      	bne.n	8007aea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <prvProcessTimerOrBlockTask+0x3c>
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d806      	bhi.n	8007aa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a96:	f7ff fa57 	bl	8006f48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a9a:	68f9      	ldr	r1, [r7, #12]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff ff91 	bl	80079c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007aa2:	e024      	b.n	8007aee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d008      	beq.n	8007abc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007aaa:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <prvProcessTimerOrBlockTask+0x90>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bf0c      	ite	eq
 8007ab4:	2301      	moveq	r3, #1
 8007ab6:	2300      	movne	r3, #0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007abc:	4b0f      	ldr	r3, [pc, #60]	; (8007afc <prvProcessTimerOrBlockTask+0x94>)
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f7ff f803 	bl	8006ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ace:	f7ff fa3b 	bl	8006f48 <xTaskResumeAll>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10a      	bne.n	8007aee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ad8:	4b09      	ldr	r3, [pc, #36]	; (8007b00 <prvProcessTimerOrBlockTask+0x98>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
}
 8007ae8:	e001      	b.n	8007aee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007aea:	f7ff fa2d 	bl	8006f48 <xTaskResumeAll>
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20000c80 	.word	0x20000c80
 8007afc:	20000c84 	.word	0x20000c84
 8007b00:	e000ed04 	.word	0xe000ed04

08007b04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b0c:	4b0e      	ldr	r3, [pc, #56]	; (8007b48 <prvGetNextExpireTime+0x44>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bf0c      	ite	eq
 8007b16:	2301      	moveq	r3, #1
 8007b18:	2300      	movne	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b2a:	4b07      	ldr	r3, [pc, #28]	; (8007b48 <prvGetNextExpireTime+0x44>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e001      	b.n	8007b3a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000c7c 	.word	0x20000c7c

08007b4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b54:	f7ff fa94 	bl	8007080 <xTaskGetTickCount>
 8007b58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b5a:	4b0b      	ldr	r3, [pc, #44]	; (8007b88 <prvSampleTimeNow+0x3c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d205      	bcs.n	8007b70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b64:	f000 f904 	bl	8007d70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e002      	b.n	8007b76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b76:	4a04      	ldr	r2, [pc, #16]	; (8007b88 <prvSampleTimeNow+0x3c>)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000c8c 	.word	0x20000c8c

08007b8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d812      	bhi.n	8007bd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d302      	bcc.n	8007bc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	e01b      	b.n	8007bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bc6:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <prvInsertTimerInActiveList+0x7c>)
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f7fe fa7d 	bl	80060d0 <vListInsert>
 8007bd6:	e012      	b.n	8007bfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d206      	bcs.n	8007bee <prvInsertTimerInActiveList+0x62>
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d302      	bcc.n	8007bee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007be8:	2301      	movs	r3, #1
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	e007      	b.n	8007bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bee:	4b07      	ldr	r3, [pc, #28]	; (8007c0c <prvInsertTimerInActiveList+0x80>)
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f7fe fa69 	bl	80060d0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bfe:	697b      	ldr	r3, [r7, #20]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20000c80 	.word	0x20000c80
 8007c0c:	20000c7c 	.word	0x20000c7c

08007c10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08e      	sub	sp, #56	; 0x38
 8007c14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c16:	e099      	b.n	8007d4c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	da17      	bge.n	8007c4e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c1e:	1d3b      	adds	r3, r7, #4
 8007c20:	3304      	adds	r3, #4
 8007c22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <prvProcessReceivedCommands+0x2e>
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	e7fe      	b.n	8007c3c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c44:	6850      	ldr	r0, [r2, #4]
 8007c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c48:	6892      	ldr	r2, [r2, #8]
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	db7a      	blt.n	8007d4a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d004      	beq.n	8007c6a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	3304      	adds	r3, #4
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fe fa6b 	bl	8006140 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c6a:	463b      	mov	r3, r7
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7ff ff6d 	bl	8007b4c <prvSampleTimeNow>
 8007c72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b09      	cmp	r3, #9
 8007c78:	d868      	bhi.n	8007d4c <prvProcessReceivedCommands+0x13c>
 8007c7a:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <prvProcessReceivedCommands+0x70>)
 8007c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c80:	08007ca9 	.word	0x08007ca9
 8007c84:	08007ca9 	.word	0x08007ca9
 8007c88:	08007ca9 	.word	0x08007ca9
 8007c8c:	08007d4d 	.word	0x08007d4d
 8007c90:	08007d03 	.word	0x08007d03
 8007c94:	08007d39 	.word	0x08007d39
 8007c98:	08007ca9 	.word	0x08007ca9
 8007c9c:	08007ca9 	.word	0x08007ca9
 8007ca0:	08007d4d 	.word	0x08007d4d
 8007ca4:	08007d03 	.word	0x08007d03
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	18d1      	adds	r1, r2, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb6:	f7ff ff69 	bl	8007b8c <prvInsertTimerInActiveList>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d045      	beq.n	8007d4c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d13d      	bne.n	8007d4c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	441a      	add	r2, r3
 8007cd8:	2300      	movs	r3, #0
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2100      	movs	r1, #0
 8007ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce2:	f7ff fe23 	bl	800792c <xTimerGenericCommand>
 8007ce6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d12e      	bne.n	8007d4c <prvProcessReceivedCommands+0x13c>
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	e7fe      	b.n	8007d00 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d109      	bne.n	8007d24 <prvProcessReceivedCommands+0x114>
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e7fe      	b.n	8007d22 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	18d1      	adds	r1, r2, r3
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d32:	f7ff ff2b 	bl	8007b8c <prvInsertTimerInActiveList>
					break;
 8007d36:	e009      	b.n	8007d4c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d104      	bne.n	8007d4c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d44:	f000 fb58 	bl	80083f8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d48:	e000      	b.n	8007d4c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d4a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d4c:	4b07      	ldr	r3, [pc, #28]	; (8007d6c <prvProcessReceivedCommands+0x15c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	1d39      	adds	r1, r7, #4
 8007d52:	2200      	movs	r2, #0
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fe fca9 	bl	80066ac <xQueueReceive>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f47f af5b 	bne.w	8007c18 <prvProcessReceivedCommands+0x8>
	}
}
 8007d62:	bf00      	nop
 8007d64:	3730      	adds	r7, #48	; 0x30
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000c84 	.word	0x20000c84

08007d70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d76:	e044      	b.n	8007e02 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d78:	4b2b      	ldr	r3, [pc, #172]	; (8007e28 <prvSwitchTimerLists+0xb8>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d82:	4b29      	ldr	r3, [pc, #164]	; (8007e28 <prvSwitchTimerLists+0xb8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe f9d5 	bl	8006140 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d12d      	bne.n	8007e02 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	4413      	add	r3, r2
 8007dae:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d90e      	bls.n	8007dd6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dc4:	4b18      	ldr	r3, [pc, #96]	; (8007e28 <prvSwitchTimerLists+0xb8>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f7fe f97e 	bl	80060d0 <vListInsert>
 8007dd4:	e015      	b.n	8007e02 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	2100      	movs	r1, #0
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f7ff fda3 	bl	800792c <xTimerGenericCommand>
 8007de6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d109      	bne.n	8007e02 <prvSwitchTimerLists+0x92>
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	603b      	str	r3, [r7, #0]
 8007e00:	e7fe      	b.n	8007e00 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e02:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <prvSwitchTimerLists+0xb8>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1b5      	bne.n	8007d78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e0c:	4b06      	ldr	r3, [pc, #24]	; (8007e28 <prvSwitchTimerLists+0xb8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e12:	4b06      	ldr	r3, [pc, #24]	; (8007e2c <prvSwitchTimerLists+0xbc>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a04      	ldr	r2, [pc, #16]	; (8007e28 <prvSwitchTimerLists+0xb8>)
 8007e18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e1a:	4a04      	ldr	r2, [pc, #16]	; (8007e2c <prvSwitchTimerLists+0xbc>)
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	6013      	str	r3, [r2, #0]
}
 8007e20:	bf00      	nop
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20000c7c 	.word	0x20000c7c
 8007e2c:	20000c80 	.word	0x20000c80

08007e30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e36:	f000 f927 	bl	8008088 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e3a:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <prvCheckForValidListAndQueue+0x60>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d120      	bne.n	8007e84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e42:	4814      	ldr	r0, [pc, #80]	; (8007e94 <prvCheckForValidListAndQueue+0x64>)
 8007e44:	f7fe f8f6 	bl	8006034 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e48:	4813      	ldr	r0, [pc, #76]	; (8007e98 <prvCheckForValidListAndQueue+0x68>)
 8007e4a:	f7fe f8f3 	bl	8006034 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e4e:	4b13      	ldr	r3, [pc, #76]	; (8007e9c <prvCheckForValidListAndQueue+0x6c>)
 8007e50:	4a10      	ldr	r2, [pc, #64]	; (8007e94 <prvCheckForValidListAndQueue+0x64>)
 8007e52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e54:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <prvCheckForValidListAndQueue+0x70>)
 8007e56:	4a10      	ldr	r2, [pc, #64]	; (8007e98 <prvCheckForValidListAndQueue+0x68>)
 8007e58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <prvCheckForValidListAndQueue+0x74>)
 8007e60:	4a11      	ldr	r2, [pc, #68]	; (8007ea8 <prvCheckForValidListAndQueue+0x78>)
 8007e62:	2110      	movs	r1, #16
 8007e64:	200a      	movs	r0, #10
 8007e66:	f7fe f9fd 	bl	8006264 <xQueueGenericCreateStatic>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <prvCheckForValidListAndQueue+0x60>)
 8007e6e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <prvCheckForValidListAndQueue+0x60>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <prvCheckForValidListAndQueue+0x60>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	490b      	ldr	r1, [pc, #44]	; (8007eac <prvCheckForValidListAndQueue+0x7c>)
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fe00 	bl	8006a84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e84:	f000 f92e 	bl	80080e4 <vPortExitCritical>
}
 8007e88:	bf00      	nop
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000c84 	.word	0x20000c84
 8007e94:	20000c54 	.word	0x20000c54
 8007e98:	20000c68 	.word	0x20000c68
 8007e9c:	20000c7c 	.word	0x20000c7c
 8007ea0:	20000c80 	.word	0x20000c80
 8007ea4:	20000d30 	.word	0x20000d30
 8007ea8:	20000c90 	.word	0x20000c90
 8007eac:	0800984c 	.word	0x0800984c

08007eb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3b04      	subs	r3, #4
 8007ec0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3b04      	subs	r3, #4
 8007ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f023 0201 	bic.w	r2, r3, #1
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3b04      	subs	r3, #4
 8007ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ee0:	4a08      	ldr	r2, [pc, #32]	; (8007f04 <pxPortInitialiseStack+0x54>)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3b14      	subs	r3, #20
 8007eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3b20      	subs	r3, #32
 8007ef6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bc80      	pop	{r7}
 8007f02:	4770      	bx	lr
 8007f04:	08007f09 	.word	0x08007f09

08007f08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f12:	4b10      	ldr	r3, [pc, #64]	; (8007f54 <prvTaskExitError+0x4c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d009      	beq.n	8007f30 <prvTaskExitError+0x28>
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	e7fe      	b.n	8007f2e <prvTaskExitError+0x26>
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f42:	bf00      	nop
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0fc      	beq.n	8007f44 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f4a:	bf00      	nop
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bc80      	pop	{r7}
 8007f52:	4770      	bx	lr
 8007f54:	20000048 	.word	0x20000048
	...

08007f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f60:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <pxCurrentTCBConst2>)
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	6808      	ldr	r0, [r1, #0]
 8007f66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f6a:	f380 8809 	msr	PSP, r0
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8811 	msr	BASEPRI, r0
 8007f7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007f7e:	4770      	bx	lr

08007f80 <pxCurrentTCBConst2>:
 8007f80:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop

08007f88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007f88:	4806      	ldr	r0, [pc, #24]	; (8007fa4 <prvPortStartFirstTask+0x1c>)
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	6800      	ldr	r0, [r0, #0]
 8007f8e:	f380 8808 	msr	MSP, r0
 8007f92:	b662      	cpsie	i
 8007f94:	b661      	cpsie	f
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	df00      	svc	0
 8007fa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fa2:	bf00      	nop
 8007fa4:	e000ed08 	.word	0xe000ed08

08007fa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fae:	4b31      	ldr	r3, [pc, #196]	; (8008074 <xPortStartScheduler+0xcc>)
 8007fb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	22ff      	movs	r2, #255	; 0xff
 8007fbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	4b29      	ldr	r3, [pc, #164]	; (8008078 <xPortStartScheduler+0xd0>)
 8007fd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fd6:	4b29      	ldr	r3, [pc, #164]	; (800807c <xPortStartScheduler+0xd4>)
 8007fd8:	2207      	movs	r2, #7
 8007fda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fdc:	e009      	b.n	8007ff2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007fde:	4b27      	ldr	r3, [pc, #156]	; (800807c <xPortStartScheduler+0xd4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	4a25      	ldr	r2, [pc, #148]	; (800807c <xPortStartScheduler+0xd4>)
 8007fe6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffa:	2b80      	cmp	r3, #128	; 0x80
 8007ffc:	d0ef      	beq.n	8007fde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ffe:	4b1f      	ldr	r3, [pc, #124]	; (800807c <xPortStartScheduler+0xd4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f1c3 0307 	rsb	r3, r3, #7
 8008006:	2b04      	cmp	r3, #4
 8008008:	d009      	beq.n	800801e <xPortStartScheduler+0x76>
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	60bb      	str	r3, [r7, #8]
 800801c:	e7fe      	b.n	800801c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800801e:	4b17      	ldr	r3, [pc, #92]	; (800807c <xPortStartScheduler+0xd4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	4a15      	ldr	r2, [pc, #84]	; (800807c <xPortStartScheduler+0xd4>)
 8008026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008028:	4b14      	ldr	r3, [pc, #80]	; (800807c <xPortStartScheduler+0xd4>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008030:	4a12      	ldr	r2, [pc, #72]	; (800807c <xPortStartScheduler+0xd4>)
 8008032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	b2da      	uxtb	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800803c:	4b10      	ldr	r3, [pc, #64]	; (8008080 <xPortStartScheduler+0xd8>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a0f      	ldr	r2, [pc, #60]	; (8008080 <xPortStartScheduler+0xd8>)
 8008042:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008048:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <xPortStartScheduler+0xd8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a0c      	ldr	r2, [pc, #48]	; (8008080 <xPortStartScheduler+0xd8>)
 800804e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008054:	f000 f8b0 	bl	80081b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008058:	4b0a      	ldr	r3, [pc, #40]	; (8008084 <xPortStartScheduler+0xdc>)
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800805e:	f7ff ff93 	bl	8007f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008062:	f7ff f8d9 	bl	8007218 <vTaskSwitchContext>
	prvTaskExitError();
 8008066:	f7ff ff4f 	bl	8007f08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	e000e400 	.word	0xe000e400
 8008078:	20000d80 	.word	0x20000d80
 800807c:	20000d84 	.word	0x20000d84
 8008080:	e000ed20 	.word	0xe000ed20
 8008084:	20000048 	.word	0x20000048

08008088 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080a0:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <vPortEnterCritical+0x54>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3301      	adds	r3, #1
 80080a6:	4a0d      	ldr	r2, [pc, #52]	; (80080dc <vPortEnterCritical+0x54>)
 80080a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080aa:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <vPortEnterCritical+0x54>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d10e      	bne.n	80080d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080b2:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <vPortEnterCritical+0x58>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d009      	beq.n	80080d0 <vPortEnterCritical+0x48>
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	603b      	str	r3, [r7, #0]
 80080ce:	e7fe      	b.n	80080ce <vPortEnterCritical+0x46>
	}
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20000048 	.word	0x20000048
 80080e0:	e000ed04 	.word	0xe000ed04

080080e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ea:	4b10      	ldr	r3, [pc, #64]	; (800812c <vPortExitCritical+0x48>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d109      	bne.n	8008106 <vPortExitCritical+0x22>
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	607b      	str	r3, [r7, #4]
 8008104:	e7fe      	b.n	8008104 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008106:	4b09      	ldr	r3, [pc, #36]	; (800812c <vPortExitCritical+0x48>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3b01      	subs	r3, #1
 800810c:	4a07      	ldr	r2, [pc, #28]	; (800812c <vPortExitCritical+0x48>)
 800810e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008110:	4b06      	ldr	r3, [pc, #24]	; (800812c <vPortExitCritical+0x48>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d104      	bne.n	8008122 <vPortExitCritical+0x3e>
 8008118:	2300      	movs	r3, #0
 800811a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	bc80      	pop	{r7}
 800812a:	4770      	bx	lr
 800812c:	20000048 	.word	0x20000048

08008130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008130:	f3ef 8009 	mrs	r0, PSP
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	4b0d      	ldr	r3, [pc, #52]	; (8008170 <pxCurrentTCBConst>)
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008140:	6010      	str	r0, [r2, #0]
 8008142:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008146:	f04f 0050 	mov.w	r0, #80	; 0x50
 800814a:	f380 8811 	msr	BASEPRI, r0
 800814e:	f7ff f863 	bl	8007218 <vTaskSwitchContext>
 8008152:	f04f 0000 	mov.w	r0, #0
 8008156:	f380 8811 	msr	BASEPRI, r0
 800815a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800815e:	6819      	ldr	r1, [r3, #0]
 8008160:	6808      	ldr	r0, [r1, #0]
 8008162:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008166:	f380 8809 	msr	PSP, r0
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	4770      	bx	lr

08008170 <pxCurrentTCBConst>:
 8008170:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008190:	f7fe ff84 	bl	800709c <xTaskIncrementTick>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800819a:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <SysTick_Handler+0x3c>)
 800819c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	2300      	movs	r3, #0
 80081a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	e000ed04 	.word	0xe000ed04

080081b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <vPortSetupTimerInterrupt+0x30>)
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081c2:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <vPortSetupTimerInterrupt+0x34>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081c8:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <vPortSetupTimerInterrupt+0x38>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a09      	ldr	r2, [pc, #36]	; (80081f4 <vPortSetupTimerInterrupt+0x3c>)
 80081ce:	fba2 2303 	umull	r2, r3, r2, r3
 80081d2:	099b      	lsrs	r3, r3, #6
 80081d4:	4a08      	ldr	r2, [pc, #32]	; (80081f8 <vPortSetupTimerInterrupt+0x40>)
 80081d6:	3b01      	subs	r3, #1
 80081d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081da:	4b03      	ldr	r3, [pc, #12]	; (80081e8 <vPortSetupTimerInterrupt+0x30>)
 80081dc:	2207      	movs	r2, #7
 80081de:	601a      	str	r2, [r3, #0]
}
 80081e0:	bf00      	nop
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr
 80081e8:	e000e010 	.word	0xe000e010
 80081ec:	e000e018 	.word	0xe000e018
 80081f0:	20000018 	.word	0x20000018
 80081f4:	10624dd3 	.word	0x10624dd3
 80081f8:	e000e014 	.word	0xe000e014

080081fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008202:	f3ef 8305 	mrs	r3, IPSR
 8008206:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b0f      	cmp	r3, #15
 800820c:	d913      	bls.n	8008236 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800820e:	4a15      	ldr	r2, [pc, #84]	; (8008264 <vPortValidateInterruptPriority+0x68>)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008218:	4b13      	ldr	r3, [pc, #76]	; (8008268 <vPortValidateInterruptPriority+0x6c>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	7afa      	ldrb	r2, [r7, #11]
 800821e:	429a      	cmp	r2, r3
 8008220:	d209      	bcs.n	8008236 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	607b      	str	r3, [r7, #4]
 8008234:	e7fe      	b.n	8008234 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008236:	4b0d      	ldr	r3, [pc, #52]	; (800826c <vPortValidateInterruptPriority+0x70>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800823e:	4b0c      	ldr	r3, [pc, #48]	; (8008270 <vPortValidateInterruptPriority+0x74>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d909      	bls.n	800825a <vPortValidateInterruptPriority+0x5e>
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	e7fe      	b.n	8008258 <vPortValidateInterruptPriority+0x5c>
	}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr
 8008264:	e000e3f0 	.word	0xe000e3f0
 8008268:	20000d80 	.word	0x20000d80
 800826c:	e000ed0c 	.word	0xe000ed0c
 8008270:	20000d84 	.word	0x20000d84

08008274 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	; 0x28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008280:	f7fe fe54 	bl	8006f2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008284:	4b57      	ldr	r3, [pc, #348]	; (80083e4 <pvPortMalloc+0x170>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800828c:	f000 f90c 	bl	80084a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008290:	4b55      	ldr	r3, [pc, #340]	; (80083e8 <pvPortMalloc+0x174>)
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4013      	ands	r3, r2
 8008298:	2b00      	cmp	r3, #0
 800829a:	f040 808c 	bne.w	80083b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01c      	beq.n	80082de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80082a4:	2208      	movs	r2, #8
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4413      	add	r3, r2
 80082aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d013      	beq.n	80082de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f023 0307 	bic.w	r3, r3, #7
 80082bc:	3308      	adds	r3, #8
 80082be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d009      	beq.n	80082de <pvPortMalloc+0x6a>
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	e7fe      	b.n	80082dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d068      	beq.n	80083b6 <pvPortMalloc+0x142>
 80082e4:	4b41      	ldr	r3, [pc, #260]	; (80083ec <pvPortMalloc+0x178>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d863      	bhi.n	80083b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082ee:	4b40      	ldr	r3, [pc, #256]	; (80083f0 <pvPortMalloc+0x17c>)
 80082f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082f2:	4b3f      	ldr	r3, [pc, #252]	; (80083f0 <pvPortMalloc+0x17c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082f8:	e004      	b.n	8008304 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	429a      	cmp	r2, r3
 800830c:	d903      	bls.n	8008316 <pvPortMalloc+0xa2>
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f1      	bne.n	80082fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008316:	4b33      	ldr	r3, [pc, #204]	; (80083e4 <pvPortMalloc+0x170>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831c:	429a      	cmp	r2, r3
 800831e:	d04a      	beq.n	80083b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2208      	movs	r2, #8
 8008326:	4413      	add	r3, r2
 8008328:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	1ad2      	subs	r2, r2, r3
 800833a:	2308      	movs	r3, #8
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	429a      	cmp	r2, r3
 8008340:	d91e      	bls.n	8008380 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4413      	add	r3, r2
 8008348:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	2b00      	cmp	r3, #0
 8008352:	d009      	beq.n	8008368 <pvPortMalloc+0xf4>
 8008354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	613b      	str	r3, [r7, #16]
 8008366:	e7fe      	b.n	8008366 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800837a:	69b8      	ldr	r0, [r7, #24]
 800837c:	f000 f8f6 	bl	800856c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008380:	4b1a      	ldr	r3, [pc, #104]	; (80083ec <pvPortMalloc+0x178>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	4a18      	ldr	r2, [pc, #96]	; (80083ec <pvPortMalloc+0x178>)
 800838c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800838e:	4b17      	ldr	r3, [pc, #92]	; (80083ec <pvPortMalloc+0x178>)
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	4b18      	ldr	r3, [pc, #96]	; (80083f4 <pvPortMalloc+0x180>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	429a      	cmp	r2, r3
 8008398:	d203      	bcs.n	80083a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800839a:	4b14      	ldr	r3, [pc, #80]	; (80083ec <pvPortMalloc+0x178>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a15      	ldr	r2, [pc, #84]	; (80083f4 <pvPortMalloc+0x180>)
 80083a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <pvPortMalloc+0x174>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	431a      	orrs	r2, r3
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083b6:	f7fe fdc7 	bl	8006f48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	f003 0307 	and.w	r3, r3, #7
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d009      	beq.n	80083d8 <pvPortMalloc+0x164>
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	e7fe      	b.n	80083d6 <pvPortMalloc+0x162>
	return pvReturn;
 80083d8:	69fb      	ldr	r3, [r7, #28]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3728      	adds	r7, #40	; 0x28
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20001990 	.word	0x20001990
 80083e8:	2000199c 	.word	0x2000199c
 80083ec:	20001994 	.word	0x20001994
 80083f0:	20001988 	.word	0x20001988
 80083f4:	20001998 	.word	0x20001998

080083f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d046      	beq.n	8008498 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800840a:	2308      	movs	r3, #8
 800840c:	425b      	negs	r3, r3
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4413      	add	r3, r2
 8008412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	4b20      	ldr	r3, [pc, #128]	; (80084a0 <vPortFree+0xa8>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4013      	ands	r3, r2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d109      	bne.n	800843a <vPortFree+0x42>
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e7fe      	b.n	8008438 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d009      	beq.n	8008456 <vPortFree+0x5e>
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	60bb      	str	r3, [r7, #8]
 8008454:	e7fe      	b.n	8008454 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	4b11      	ldr	r3, [pc, #68]	; (80084a0 <vPortFree+0xa8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4013      	ands	r3, r2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d019      	beq.n	8008498 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d115      	bne.n	8008498 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <vPortFree+0xa8>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	43db      	mvns	r3, r3
 8008476:	401a      	ands	r2, r3
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800847c:	f7fe fd56 	bl	8006f2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	4b07      	ldr	r3, [pc, #28]	; (80084a4 <vPortFree+0xac>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4413      	add	r3, r2
 800848a:	4a06      	ldr	r2, [pc, #24]	; (80084a4 <vPortFree+0xac>)
 800848c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800848e:	6938      	ldr	r0, [r7, #16]
 8008490:	f000 f86c 	bl	800856c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008494:	f7fe fd58 	bl	8006f48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008498:	bf00      	nop
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	2000199c 	.word	0x2000199c
 80084a4:	20001994 	.word	0x20001994

080084a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80084b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084b4:	4b27      	ldr	r3, [pc, #156]	; (8008554 <prvHeapInit+0xac>)
 80084b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f003 0307 	and.w	r3, r3, #7
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00c      	beq.n	80084dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3307      	adds	r3, #7
 80084c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 0307 	bic.w	r3, r3, #7
 80084ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	4a1f      	ldr	r2, [pc, #124]	; (8008554 <prvHeapInit+0xac>)
 80084d8:	4413      	add	r3, r2
 80084da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084e0:	4a1d      	ldr	r2, [pc, #116]	; (8008558 <prvHeapInit+0xb0>)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084e6:	4b1c      	ldr	r3, [pc, #112]	; (8008558 <prvHeapInit+0xb0>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	4413      	add	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084f4:	2208      	movs	r2, #8
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	1a9b      	subs	r3, r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0307 	bic.w	r3, r3, #7
 8008502:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4a15      	ldr	r2, [pc, #84]	; (800855c <prvHeapInit+0xb4>)
 8008508:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800850a:	4b14      	ldr	r3, [pc, #80]	; (800855c <prvHeapInit+0xb4>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2200      	movs	r2, #0
 8008510:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008512:	4b12      	ldr	r3, [pc, #72]	; (800855c <prvHeapInit+0xb4>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	1ad2      	subs	r2, r2, r3
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008528:	4b0c      	ldr	r3, [pc, #48]	; (800855c <prvHeapInit+0xb4>)
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4a0a      	ldr	r2, [pc, #40]	; (8008560 <prvHeapInit+0xb8>)
 8008536:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	4a09      	ldr	r2, [pc, #36]	; (8008564 <prvHeapInit+0xbc>)
 800853e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008540:	4b09      	ldr	r3, [pc, #36]	; (8008568 <prvHeapInit+0xc0>)
 8008542:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008546:	601a      	str	r2, [r3, #0]
}
 8008548:	bf00      	nop
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	bc80      	pop	{r7}
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	20000d88 	.word	0x20000d88
 8008558:	20001988 	.word	0x20001988
 800855c:	20001990 	.word	0x20001990
 8008560:	20001998 	.word	0x20001998
 8008564:	20001994 	.word	0x20001994
 8008568:	2000199c 	.word	0x2000199c

0800856c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008574:	4b27      	ldr	r3, [pc, #156]	; (8008614 <prvInsertBlockIntoFreeList+0xa8>)
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	e002      	b.n	8008580 <prvInsertBlockIntoFreeList+0x14>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	429a      	cmp	r2, r3
 8008588:	d8f7      	bhi.n	800857a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	4413      	add	r3, r2
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	429a      	cmp	r2, r3
 800859a:	d108      	bne.n	80085ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	441a      	add	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	441a      	add	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d118      	bne.n	80085f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	4b14      	ldr	r3, [pc, #80]	; (8008618 <prvInsertBlockIntoFreeList+0xac>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d00d      	beq.n	80085ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	441a      	add	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	e008      	b.n	80085fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085ea:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <prvInsertBlockIntoFreeList+0xac>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	e003      	b.n	80085fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d002      	beq.n	800860a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800860a:	bf00      	nop
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	bc80      	pop	{r7}
 8008612:	4770      	bx	lr
 8008614:	20001988 	.word	0x20001988
 8008618:	20001990 	.word	0x20001990

0800861c <__libc_init_array>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	2500      	movs	r5, #0
 8008620:	4e0c      	ldr	r6, [pc, #48]	; (8008654 <__libc_init_array+0x38>)
 8008622:	4c0d      	ldr	r4, [pc, #52]	; (8008658 <__libc_init_array+0x3c>)
 8008624:	1ba4      	subs	r4, r4, r6
 8008626:	10a4      	asrs	r4, r4, #2
 8008628:	42a5      	cmp	r5, r4
 800862a:	d109      	bne.n	8008640 <__libc_init_array+0x24>
 800862c:	f000 f85c 	bl	80086e8 <_init>
 8008630:	2500      	movs	r5, #0
 8008632:	4e0a      	ldr	r6, [pc, #40]	; (800865c <__libc_init_array+0x40>)
 8008634:	4c0a      	ldr	r4, [pc, #40]	; (8008660 <__libc_init_array+0x44>)
 8008636:	1ba4      	subs	r4, r4, r6
 8008638:	10a4      	asrs	r4, r4, #2
 800863a:	42a5      	cmp	r5, r4
 800863c:	d105      	bne.n	800864a <__libc_init_array+0x2e>
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008644:	4798      	blx	r3
 8008646:	3501      	adds	r5, #1
 8008648:	e7ee      	b.n	8008628 <__libc_init_array+0xc>
 800864a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800864e:	4798      	blx	r3
 8008650:	3501      	adds	r5, #1
 8008652:	e7f2      	b.n	800863a <__libc_init_array+0x1e>
 8008654:	08009890 	.word	0x08009890
 8008658:	08009890 	.word	0x08009890
 800865c:	08009890 	.word	0x08009890
 8008660:	08009894 	.word	0x08009894

08008664 <memcmp>:
 8008664:	b530      	push	{r4, r5, lr}
 8008666:	2400      	movs	r4, #0
 8008668:	42a2      	cmp	r2, r4
 800866a:	d101      	bne.n	8008670 <memcmp+0xc>
 800866c:	2000      	movs	r0, #0
 800866e:	e007      	b.n	8008680 <memcmp+0x1c>
 8008670:	5d03      	ldrb	r3, [r0, r4]
 8008672:	3401      	adds	r4, #1
 8008674:	190d      	adds	r5, r1, r4
 8008676:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800867a:	42ab      	cmp	r3, r5
 800867c:	d0f4      	beq.n	8008668 <memcmp+0x4>
 800867e:	1b58      	subs	r0, r3, r5
 8008680:	bd30      	pop	{r4, r5, pc}

08008682 <memcpy>:
 8008682:	b510      	push	{r4, lr}
 8008684:	1e43      	subs	r3, r0, #1
 8008686:	440a      	add	r2, r1
 8008688:	4291      	cmp	r1, r2
 800868a:	d100      	bne.n	800868e <memcpy+0xc>
 800868c:	bd10      	pop	{r4, pc}
 800868e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008696:	e7f7      	b.n	8008688 <memcpy+0x6>

08008698 <memset>:
 8008698:	4603      	mov	r3, r0
 800869a:	4402      	add	r2, r0
 800869c:	4293      	cmp	r3, r2
 800869e:	d100      	bne.n	80086a2 <memset+0xa>
 80086a0:	4770      	bx	lr
 80086a2:	f803 1b01 	strb.w	r1, [r3], #1
 80086a6:	e7f9      	b.n	800869c <memset+0x4>

080086a8 <strchr>:
 80086a8:	b2c9      	uxtb	r1, r1
 80086aa:	4603      	mov	r3, r0
 80086ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086b0:	b11a      	cbz	r2, 80086ba <strchr+0x12>
 80086b2:	428a      	cmp	r2, r1
 80086b4:	d1f9      	bne.n	80086aa <strchr+0x2>
 80086b6:	4618      	mov	r0, r3
 80086b8:	4770      	bx	lr
 80086ba:	2900      	cmp	r1, #0
 80086bc:	bf18      	it	ne
 80086be:	2300      	movne	r3, #0
 80086c0:	e7f9      	b.n	80086b6 <strchr+0xe>

080086c2 <strncmp>:
 80086c2:	b510      	push	{r4, lr}
 80086c4:	b16a      	cbz	r2, 80086e2 <strncmp+0x20>
 80086c6:	3901      	subs	r1, #1
 80086c8:	1884      	adds	r4, r0, r2
 80086ca:	f810 3b01 	ldrb.w	r3, [r0], #1
 80086ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d103      	bne.n	80086de <strncmp+0x1c>
 80086d6:	42a0      	cmp	r0, r4
 80086d8:	d001      	beq.n	80086de <strncmp+0x1c>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1f5      	bne.n	80086ca <strncmp+0x8>
 80086de:	1a98      	subs	r0, r3, r2
 80086e0:	bd10      	pop	{r4, pc}
 80086e2:	4610      	mov	r0, r2
 80086e4:	e7fc      	b.n	80086e0 <strncmp+0x1e>
	...

080086e8 <_init>:
 80086e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ea:	bf00      	nop
 80086ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ee:	bc08      	pop	{r3}
 80086f0:	469e      	mov	lr, r3
 80086f2:	4770      	bx	lr

080086f4 <_fini>:
 80086f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f6:	bf00      	nop
 80086f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fa:	bc08      	pop	{r3}
 80086fc:	469e      	mov	lr, r3
 80086fe:	4770      	bx	lr
