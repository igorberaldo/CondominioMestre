
libertyMestre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007430  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c8  080082c8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  080082c8  080082c8  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082c8  080082c8  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080082d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c88  2000004c  0800831c  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cd4  0800831c  00022cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b193  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034d2  00000000  00000000  0003b208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001790  00000000  00000000  0003e6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001640  00000000  00000000  0003fe70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004114  00000000  00000000  000414b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000122b5  00000000  00000000  000455c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099ae7  00000000  00000000  00057879  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1360  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006454  00000000  00000000  000f13dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000004c 	.word	0x2000004c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007528 	.word	0x08007528

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000050 	.word	0x20000050
 800014c:	08007528 	.word	0x08007528

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b590      	push	{r4, r7, lr}
 8000162:	b087      	sub	sp, #28
 8000164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i;
	uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8000166:	4b2e      	ldr	r3, [pc, #184]	; (8000220 <main+0xc0>)
 8000168:	1d3c      	adds	r4, r7, #4
 800016a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800016c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000170:	f002 ffbe 	bl	80030f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000174:	f000 f87c 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000178:	f000 f920 	bl	80003bc <MX_GPIO_Init>
  MX_SPI2_Init();
 800017c:	f000 f8e8 	bl	8000350 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000180:	f000 f8b8 	bl	80002f4 <MX_I2C2_Init>
  ////////////////////////////////////////////////////////////////////////////////////////////////////
     // First of all, Should register SPI callback functions implemented by user for accessing WIZCHIP //
     ////////////////////////////////////////////////////////////////////////////////////////////////////

     /* Chip selection call back */
  	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000184:	4927      	ldr	r1, [pc, #156]	; (8000224 <main+0xc4>)
 8000186:	4828      	ldr	r0, [pc, #160]	; (8000228 <main+0xc8>)
 8000188:	f002 fad4 	bl	8002734 <reg_wizchip_cs_cbfunc>

  	 /* SPI Read & Write callback function */
  	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800018c:	4927      	ldr	r1, [pc, #156]	; (800022c <main+0xcc>)
 800018e:	4828      	ldr	r0, [pc, #160]	; (8000230 <main+0xd0>)
 8000190:	f002 faf4 	bl	800277c <reg_wizchip_spi_cbfunc>

  	////////////////////////////////////////////////////////////////////////
  	/* WIZCHIP SOCKET Buffer initialize */
  	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	4619      	mov	r1, r3
 8000198:	2001      	movs	r0, #1
 800019a:	f002 fb19 	bl	80027d0 <ctlwizchip>
 800019e:	4603      	mov	r3, r0
 80001a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001a4:	d100      	bne.n	80001a8 <main+0x48>
  	{
  	   //init fail
  	   while(1);
 80001a6:	e7fe      	b.n	80001a6 <main+0x46>
  	}

  	/* Network initialization */
  	network_init();
 80001a8:	f000 fa0e 	bl	80005c8 <network_init>

  	//all connections inactive
  	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 80001ac:	2300      	movs	r3, #0
 80001ae:	75fb      	strb	r3, [r7, #23]
 80001b0:	e006      	b.n	80001c0 <main+0x60>
  	HTTP_reset(i);
 80001b2:	7dfb      	ldrb	r3, [r7, #23]
 80001b4:	4618      	mov	r0, r3
 80001b6:	f000 fa19 	bl	80005ec <HTTP_reset>
  	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 80001ba:	7dfb      	ldrb	r3, [r7, #23]
 80001bc:	3301      	adds	r3, #1
 80001be:	75fb      	strb	r3, [r7, #23]
 80001c0:	7dfb      	ldrb	r3, [r7, #23]
 80001c2:	2b07      	cmp	r3, #7
 80001c4:	d9f5      	bls.n	80001b2 <main+0x52>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001c6:	f004 fcb1 	bl	8004b2c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethernetTask */
  ethernetTaskHandle = osThreadNew(StartEthernet, NULL, &ethernetTask_attributes);
 80001ca:	4a1a      	ldr	r2, [pc, #104]	; (8000234 <main+0xd4>)
 80001cc:	2100      	movs	r1, #0
 80001ce:	481a      	ldr	r0, [pc, #104]	; (8000238 <main+0xd8>)
 80001d0:	f004 fd12 	bl	8004bf8 <osThreadNew>
 80001d4:	4602      	mov	r2, r0
 80001d6:	4b19      	ldr	r3, [pc, #100]	; (800023c <main+0xdc>)
 80001d8:	601a      	str	r2, [r3, #0]

  /* creation of readInput1Task */
  readInput1TaskHandle = osThreadNew(StartReadInput1, NULL, &readInput1Task_attributes);
 80001da:	4a19      	ldr	r2, [pc, #100]	; (8000240 <main+0xe0>)
 80001dc:	2100      	movs	r1, #0
 80001de:	4819      	ldr	r0, [pc, #100]	; (8000244 <main+0xe4>)
 80001e0:	f004 fd0a 	bl	8004bf8 <osThreadNew>
 80001e4:	4602      	mov	r2, r0
 80001e6:	4b18      	ldr	r3, [pc, #96]	; (8000248 <main+0xe8>)
 80001e8:	601a      	str	r2, [r3, #0]

  /* creation of readInput2Task */
  readInput2TaskHandle = osThreadNew(StartReadInput2, NULL, &readInput2Task_attributes);
 80001ea:	4a18      	ldr	r2, [pc, #96]	; (800024c <main+0xec>)
 80001ec:	2100      	movs	r1, #0
 80001ee:	4818      	ldr	r0, [pc, #96]	; (8000250 <main+0xf0>)
 80001f0:	f004 fd02 	bl	8004bf8 <osThreadNew>
 80001f4:	4602      	mov	r2, r0
 80001f6:	4b17      	ldr	r3, [pc, #92]	; (8000254 <main+0xf4>)
 80001f8:	601a      	str	r2, [r3, #0]

  /* creation of readInput3Task */
  readInput3TaskHandle = osThreadNew(StartReadInput3, NULL, &readInput3Task_attributes);
 80001fa:	4a17      	ldr	r2, [pc, #92]	; (8000258 <main+0xf8>)
 80001fc:	2100      	movs	r1, #0
 80001fe:	4817      	ldr	r0, [pc, #92]	; (800025c <main+0xfc>)
 8000200:	f004 fcfa 	bl	8004bf8 <osThreadNew>
 8000204:	4602      	mov	r2, r0
 8000206:	4b16      	ldr	r3, [pc, #88]	; (8000260 <main+0x100>)
 8000208:	601a      	str	r2, [r3, #0]

  /* creation of readInput4Task */
  readInput4TaskHandle = osThreadNew(StartReadInput4, NULL, &readInput4Task_attributes);
 800020a:	4a16      	ldr	r2, [pc, #88]	; (8000264 <main+0x104>)
 800020c:	2100      	movs	r1, #0
 800020e:	4816      	ldr	r0, [pc, #88]	; (8000268 <main+0x108>)
 8000210:	f004 fcf2 	bl	8004bf8 <osThreadNew>
 8000214:	4602      	mov	r2, r0
 8000216:	4b15      	ldr	r3, [pc, #84]	; (800026c <main+0x10c>)
 8000218:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800021a:	f004 fcb9 	bl	8004b90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021e:	e7fe      	b.n	800021e <main+0xbe>
 8000220:	08007590 	.word	0x08007590
 8000224:	08000585 	.word	0x08000585
 8000228:	0800056d 	.word	0x0800056d
 800022c:	0800059d 	.word	0x0800059d
 8000230:	080005b7 	.word	0x080005b7
 8000234:	080081fc 	.word	0x080081fc
 8000238:	080016e1 	.word	0x080016e1
 800023c:	20002c24 	.word	0x20002c24
 8000240:	08008220 	.word	0x08008220
 8000244:	0800172d 	.word	0x0800172d
 8000248:	20001c10 	.word	0x20001c10
 800024c:	08008244 	.word	0x08008244
 8000250:	0800173d 	.word	0x0800173d
 8000254:	20002c20 	.word	0x20002c20
 8000258:	08008268 	.word	0x08008268
 800025c:	0800174d 	.word	0x0800174d
 8000260:	20002c1c 	.word	0x20002c1c
 8000264:	0800828c 	.word	0x0800828c
 8000268:	0800175d 	.word	0x0800175d
 800026c:	20001bec 	.word	0x20001bec

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b090      	sub	sp, #64	; 0x40
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f007 f92a 	bl	80074d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	2310      	movs	r3, #16
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	2302      	movs	r3, #2
 80002a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002a2:	2300      	movs	r3, #0
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002a6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4618      	mov	r0, r3
 80002b2:	f003 fad9 	bl	8003868 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002bc:	f001 fa68 	bl	8001790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c4:	2302      	movs	r3, #2
 80002c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 fd44 	bl	8003d68 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002e6:	f001 fa53 	bl	8001790 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	; 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <MX_I2C2_Init+0x50>)
 80002fa:	4a13      	ldr	r2, [pc, #76]	; (8000348 <MX_I2C2_Init+0x54>)
 80002fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_I2C2_Init+0x50>)
 8000300:	4a12      	ldr	r2, [pc, #72]	; (800034c <MX_I2C2_Init+0x58>)
 8000302:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_I2C2_Init+0x50>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_I2C2_Init+0x50>)
 800030c:	2200      	movs	r2, #0
 800030e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_I2C2_Init+0x50>)
 8000312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000316:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <MX_I2C2_Init+0x50>)
 800031a:	2200      	movs	r2, #0
 800031c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_I2C2_Init+0x50>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <MX_I2C2_Init+0x50>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_I2C2_Init+0x50>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_I2C2_Init+0x50>)
 8000332:	f003 f961 	bl	80035f8 <HAL_I2C_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800033c:	f001 fa28 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20001b98 	.word	0x20001b98
 8000348:	40005800 	.word	0x40005800
 800034c:	000186a0 	.word	0x000186a0

08000350 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <MX_SPI2_Init+0x64>)
 8000356:	4a18      	ldr	r2, [pc, #96]	; (80003b8 <MX_SPI2_Init+0x68>)
 8000358:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <MX_SPI2_Init+0x64>)
 800035c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000360:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_SPI2_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_SPI2_Init+0x64>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_SPI2_Init+0x64>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_SPI2_Init+0x64>)
 8000376:	2200      	movs	r2, #0
 8000378:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_SPI2_Init+0x64>)
 800037c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000380:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_SPI2_Init+0x64>)
 8000384:	2218      	movs	r2, #24
 8000386:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <MX_SPI2_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_SPI2_Init+0x64>)
 8000390:	2200      	movs	r2, #0
 8000392:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <MX_SPI2_Init+0x64>)
 8000396:	2200      	movs	r2, #0
 8000398:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_SPI2_Init+0x64>)
 800039c:	220a      	movs	r2, #10
 800039e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <MX_SPI2_Init+0x64>)
 80003a2:	f003 fead 	bl	8004100 <HAL_SPI_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80003ac:	f001 f9f0 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20001b40 	.word	0x20001b40
 80003b8:	40003800 	.word	0x40003800

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08a      	sub	sp, #40	; 0x28
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d0:	4b55      	ldr	r3, [pc, #340]	; (8000528 <MX_GPIO_Init+0x16c>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a54      	ldr	r2, [pc, #336]	; (8000528 <MX_GPIO_Init+0x16c>)
 80003d6:	f043 0310 	orr.w	r3, r3, #16
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b52      	ldr	r3, [pc, #328]	; (8000528 <MX_GPIO_Init+0x16c>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0310 	and.w	r3, r3, #16
 80003e4:	613b      	str	r3, [r7, #16]
 80003e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e8:	4b4f      	ldr	r3, [pc, #316]	; (8000528 <MX_GPIO_Init+0x16c>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a4e      	ldr	r2, [pc, #312]	; (8000528 <MX_GPIO_Init+0x16c>)
 80003ee:	f043 0320 	orr.w	r3, r3, #32
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b4c      	ldr	r3, [pc, #304]	; (8000528 <MX_GPIO_Init+0x16c>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0320 	and.w	r3, r3, #32
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b49      	ldr	r3, [pc, #292]	; (8000528 <MX_GPIO_Init+0x16c>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a48      	ldr	r2, [pc, #288]	; (8000528 <MX_GPIO_Init+0x16c>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b46      	ldr	r3, [pc, #280]	; (8000528 <MX_GPIO_Init+0x16c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b43      	ldr	r3, [pc, #268]	; (8000528 <MX_GPIO_Init+0x16c>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a42      	ldr	r2, [pc, #264]	; (8000528 <MX_GPIO_Init+0x16c>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b40      	ldr	r3, [pc, #256]	; (8000528 <MX_GPIO_Init+0x16c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT1_OP9_Pin|OUT1_OP10_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000436:	483d      	ldr	r0, [pc, #244]	; (800052c <MX_GPIO_Init+0x170>)
 8000438:	f003 f8c6 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_LED1_GPIO_Port, ON_LED1_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2102      	movs	r1, #2
 8000440:	483b      	ldr	r0, [pc, #236]	; (8000530 <MX_GPIO_Init+0x174>)
 8000442:	f003 f8c1 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ON_BUZZ_Pin|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	f241 0101 	movw	r1, #4097	; 0x1001
 800044c:	4839      	ldr	r0, [pc, #228]	; (8000534 <MX_GPIO_Init+0x178>)
 800044e:	f003 f8bb 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rst_GPIO_Port, Rst_Pin, GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000458:	4837      	ldr	r0, [pc, #220]	; (8000538 <MX_GPIO_Init+0x17c>)
 800045a:	f003 f8b5 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_OP9_Pin OUT1_OP10_Pin */
  GPIO_InitStruct.Pin = OUT1_OP9_Pin|OUT1_OP10_Pin;
 800045e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4619      	mov	r1, r3
 8000476:	482d      	ldr	r0, [pc, #180]	; (800052c <MX_GPIO_Init+0x170>)
 8000478:	f002 ff4c 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_LED1_Pin */
  GPIO_InitStruct.Pin = ON_LED1_Pin;
 800047c:	2302      	movs	r3, #2
 800047e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000480:	2301      	movs	r3, #1
 8000482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	2302      	movs	r3, #2
 800048a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ON_LED1_GPIO_Port, &GPIO_InitStruct);
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	4619      	mov	r1, r3
 8000492:	4827      	ldr	r0, [pc, #156]	; (8000530 <MX_GPIO_Init+0x174>)
 8000494:	f002 ff3e 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP4_Pin OUT1_OP3_Pin OUT1_OP2_Pin OUT1_OP1_Pin
                           OUT1_OP8_Pin OUT1_OP7_Pin OUT1_OP6_Pin OUT1_OP5_Pin */
  GPIO_InitStruct.Pin = OUT1_OP4_Pin|OUT1_OP3_Pin|OUT1_OP2_Pin|OUT1_OP1_Pin
 8000498:	23ff      	movs	r3, #255	; 0xff
 800049a:	617b      	str	r3, [r7, #20]
                          |OUT1_OP8_Pin|OUT1_OP7_Pin|OUT1_OP6_Pin|OUT1_OP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	4619      	mov	r1, r3
 80004aa:	4823      	ldr	r0, [pc, #140]	; (8000538 <MX_GPIO_Init+0x17c>)
 80004ac:	f002 ff32 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_BUZZ_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = ON_BUZZ_Pin|GPIO_W5500_CS_Pin;
 80004b0:	f241 0301 	movw	r3, #4097	; 0x1001
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2302      	movs	r3, #2
 80004c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	481a      	ldr	r0, [pc, #104]	; (8000534 <MX_GPIO_Init+0x178>)
 80004ca:	f002 ff23 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP12_Pin OUT1_OP11_Pin OUT1_OP15_Pin OUT1_OP16_Pin
                           OUT1_OP14_Pin OUT1_OP13_Pin */
  GPIO_InitStruct.Pin = OUT1_OP12_Pin|OUT1_OP11_Pin|OUT1_OP15_Pin|OUT1_OP16_Pin
 80004ce:	237e      	movs	r3, #126	; 0x7e
 80004d0:	617b      	str	r3, [r7, #20]
                          |OUT1_OP14_Pin|OUT1_OP13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	4814      	ldr	r0, [pc, #80]	; (8000534 <MX_GPIO_Init+0x178>)
 80004e2:	f002 ff17 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rst_Pin */
  GPIO_InitStruct.Pin = Rst_Pin;
 80004e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f0:	2301      	movs	r3, #1
 80004f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2302      	movs	r3, #2
 80004f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Rst_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	4619      	mov	r1, r3
 80004fe:	480e      	ldr	r0, [pc, #56]	; (8000538 <MX_GPIO_Init+0x17c>)
 8000500:	f002 ff08 	bl	8003314 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <MX_GPIO_Init+0x180>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	627b      	str	r3, [r7, #36]	; 0x24
 800050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000510:	627b      	str	r3, [r7, #36]	; 0x24
 8000512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <MX_GPIO_Init+0x180>)
 800051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051e:	6053      	str	r3, [r2, #4]

}
 8000520:	bf00      	nop
 8000522:	3728      	adds	r7, #40	; 0x28
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	40011000 	.word	0x40011000
 8000530:	40011400 	.word	0x40011400
 8000534:	40010c00 	.word	0x40010c00
 8000538:	40010800 	.word	0x40010800
 800053c:	40010000 	.word	0x40010000

08000540 <W5500_rxtx>:

/* USER CODE BEGIN 4 */
uint8_t W5500_rxtx(uint8_t data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af02      	add	r7, sp, #8
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	uint8_t rxdata;

	HAL_SPI_TransmitReceive(&hspi2, &data, &rxdata, 1, 50);
 800054a:	f107 020f 	add.w	r2, r7, #15
 800054e:	1df9      	adds	r1, r7, #7
 8000550:	2332      	movs	r3, #50	; 0x32
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2301      	movs	r3, #1
 8000556:	4804      	ldr	r0, [pc, #16]	; (8000568 <W5500_rxtx+0x28>)
 8000558:	f003 fe56 	bl	8004208 <HAL_SPI_TransmitReceive>

	return (rxdata);
 800055c:	7bfb      	ldrb	r3, [r7, #15]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20001b40 	.word	0x20001b40

0800056c <wizchip_select>:
/////////////////////////////////////////////////////////////////
// SPI Callback function for accessing WIZCHIP                 //
// WIZCHIP user should implement with your host spi peripheral //
/////////////////////////////////////////////////////////////////
void  wizchip_select(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	W5500_select();
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000576:	4802      	ldr	r0, [pc, #8]	; (8000580 <wizchip_select+0x14>)
 8000578:	f003 f826 	bl	80035c8 <HAL_GPIO_WritePin>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40010c00 	.word	0x40010c00

08000584 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	W5500_release();
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058e:	4802      	ldr	r0, [pc, #8]	; (8000598 <wizchip_deselect+0x14>)
 8000590:	f003 f81a 	bl	80035c8 <HAL_GPIO_WritePin>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40010c00 	.word	0x40010c00

0800059c <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	W5500_tx(wb);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ffc9 	bl	8000540 <W5500_rxtx>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <wizchip_read>:

uint8_t wizchip_read()
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0
   return W5500_rx();
 80005ba:	20ff      	movs	r0, #255	; 0xff
 80005bc:	f7ff ffc0 	bl	8000540 <W5500_rxtx>
 80005c0:	4603      	mov	r3, r0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
   uint8_t tmpstr[6];

	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 80005ce:	4906      	ldr	r1, [pc, #24]	; (80005e8 <network_init+0x20>)
 80005d0:	2000      	movs	r0, #0
 80005d2:	f002 f9db 	bl	800298c <ctlnetwork>

	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 80005d6:	463b      	mov	r3, r7
 80005d8:	4619      	mov	r1, r3
 80005da:	2008      	movs	r0, #8
 80005dc:	f002 f8f8 	bl	80027d0 <ctlwizchip>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000000 	.word	0x20000000

080005ec <HTTP_reset>:
#define len(some) (sizeof(some)/sizeof(some[0]))

//http server

void HTTP_reset(uint8_t sockn)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
    sentsize[sockn]=0;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <HTTP_reset+0x28>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	http_state[sockn]=HTTP_IDLE;
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4a05      	ldr	r2, [pc, #20]	; (8000618 <HTTP_reset+0x2c>)
 8000604:	2100      	movs	r1, #0
 8000606:	54d1      	strb	r1, [r2, r3]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20002c28 	.word	0x20002c28
 8000618:	20001c14 	.word	0x20001c14

0800061c <tcp_http_mt>:

int32_t tcp_http_mt(uint8_t sn, uint8_t* buf, uint16_t port)
{
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint32_t size = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
   uint8_t flagHtmlGen = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	76fb      	strb	r3, [r7, #27]
   char *url,*p;
   uint16_t blocklen=0;
 8000634:	2300      	movs	r3, #0
 8000636:	833b      	strh	r3, [r7, #24]

   switch(getSn_SR(sn))
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	3301      	adds	r3, #1
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fdf1 	bl	800222c <WIZCHIP_READ>
 800064a:	4603      	mov	r3, r0
 800064c:	2b1c      	cmp	r3, #28
 800064e:	f201 801b 	bhi.w	8001688 <tcp_http_mt+0x106c>
 8000652:	a201      	add	r2, pc, #4	; (adr r2, 8000658 <tcp_http_mt+0x3c>)
 8000654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000658:	08001665 	.word	0x08001665
 800065c:	08001689 	.word	0x08001689
 8000660:	08001689 	.word	0x08001689
 8000664:	08001689 	.word	0x08001689
 8000668:	08001689 	.word	0x08001689
 800066c:	08001689 	.word	0x08001689
 8000670:	08001689 	.word	0x08001689
 8000674:	08001689 	.word	0x08001689
 8000678:	08001689 	.word	0x08001689
 800067c:	08001689 	.word	0x08001689
 8000680:	08001689 	.word	0x08001689
 8000684:	08001689 	.word	0x08001689
 8000688:	08001689 	.word	0x08001689
 800068c:	08001689 	.word	0x08001689
 8000690:	08001689 	.word	0x08001689
 8000694:	08001689 	.word	0x08001689
 8000698:	08001689 	.word	0x08001689
 800069c:	08001689 	.word	0x08001689
 80006a0:	08001689 	.word	0x08001689
 80006a4:	08001647 	.word	0x08001647
 80006a8:	08001689 	.word	0x08001689
 80006ac:	08001689 	.word	0x08001689
 80006b0:	08001689 	.word	0x08001689
 80006b4:	080006cd 	.word	0x080006cd
 80006b8:	08001689 	.word	0x08001689
 80006bc:	08001689 	.word	0x08001689
 80006c0:	08001689 	.word	0x08001689
 80006c4:	08001689 	.word	0x08001689
 80006c8:	08001629 	.word	0x08001629
   {
      case SOCK_ESTABLISHED :

         if(getSn_IR(sn) & Sn_IR_CON)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	3301      	adds	r3, #1
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fda7 	bl	800222c <WIZCHIP_READ>
 80006de:	4603      	mov	r3, r0
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d009      	beq.n	80006fc <tcp_http_mt+0xe0>
         {
            setSn_IR(sn,Sn_IR_CON);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	3301      	adds	r3, #1
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006f4:	2101      	movs	r1, #1
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fdc8 	bl	800228c <WIZCHIP_WRITE>
         }

         if((size = getSn_RX_RSR(sn)) > 0)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fed1 	bl	80024a6 <getSn_RX_RSR>
 8000704:	4603      	mov	r3, r0
 8000706:	61fb      	str	r3, [r7, #28]
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	2b00      	cmp	r3, #0
 800070c:	f000 87c1 	beq.w	8001692 <tcp_http_mt+0x1076>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000716:	d902      	bls.n	800071e <tcp_http_mt+0x102>
 8000718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071c:	61fb      	str	r3, [r7, #28]
            ret = recv(sn,buf,size);
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	b29a      	uxth	r2, r3
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	6839      	ldr	r1, [r7, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fcca 	bl	80020c0 <recv>
 800072c:	6178      	str	r0, [r7, #20]

            HTTP_reset(sn);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff5b 	bl	80005ec <HTTP_reset>

            if(ret <= 0)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	2b00      	cmp	r3, #0
 800073a:	dc02      	bgt.n	8000742 <tcp_http_mt+0x126>
            return ret;
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	f000 bfb0 	b.w	80016a2 <tcp_http_mt+0x1086>

            url =(char*) buf + 4;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	3304      	adds	r3, #4
 8000746:	613b      	str	r3, [r7, #16]

            if((http_state[sn]==HTTP_IDLE)&&(memcmp(buf, "GET ", 4)==0)&&((p = strchr(url, ' '))))// extract URL from request header
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4aa1      	ldr	r2, [pc, #644]	; (80009d0 <tcp_http_mt+0x3b4>)
 800074c:	5cd3      	ldrb	r3, [r2, r3]
 800074e:	2b00      	cmp	r3, #0
 8000750:	f040 879f 	bne.w	8001692 <tcp_http_mt+0x1076>
 8000754:	2204      	movs	r2, #4
 8000756:	499f      	ldr	r1, [pc, #636]	; (80009d4 <tcp_http_mt+0x3b8>)
 8000758:	6838      	ldr	r0, [r7, #0]
 800075a:	f006 fea3 	bl	80074a4 <memcmp>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	f040 8796 	bne.w	8001692 <tcp_http_mt+0x1076>
 8000766:	2120      	movs	r1, #32
 8000768:	6938      	ldr	r0, [r7, #16]
 800076a:	f006 febd 	bl	80074e8 <strchr>
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b00      	cmp	r3, #0
 8000774:	f000 878d 	beq.w	8001692 <tcp_http_mt+0x1076>
            {
              *(p++) = 0;//making zeroed url string
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	60fa      	str	r2, [r7, #12]
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]

				if ((url != NULL)&&(strncmp("/favicon.ico",url,12) != 0))
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	2b00      	cmp	r3, #0
 8000786:	f000 8745 	beq.w	8001614 <tcp_http_mt+0xff8>
 800078a:	220c      	movs	r2, #12
 800078c:	6939      	ldr	r1, [r7, #16]
 800078e:	4892      	ldr	r0, [pc, #584]	; (80009d8 <tcp_http_mt+0x3bc>)
 8000790:	f006 feb7 	bl	8007502 <strncmp>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	f000 873c 	beq.w	8001614 <tcp_http_mt+0xff8>
				{
					flagHtmlGen = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	76fb      	strb	r3, [r7, #27]

					//Gera��o da HTML
					if(flagHtmlGen == 1)
 80007a0:	7efb      	ldrb	r3, [r7, #27]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	f040 873f 	bne.w	8001626 <tcp_http_mt+0x100a>
					{
						if(strncmp("/rede", url, 6) == 0)
 80007a8:	2206      	movs	r2, #6
 80007aa:	6939      	ldr	r1, [r7, #16]
 80007ac:	488b      	ldr	r0, [pc, #556]	; (80009dc <tcp_http_mt+0x3c0>)
 80007ae:	f006 fea8 	bl	8007502 <strncmp>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f040 8131 	bne.w	8000a1c <tcp_http_mt+0x400>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	4a88      	ldr	r2, [pc, #544]	; (80009e0 <tcp_http_mt+0x3c4>)
 80007be:	4614      	mov	r4, r2
 80007c0:	469c      	mov	ip, r3
 80007c2:	f104 0e20 	add.w	lr, r4, #32
 80007c6:	4665      	mov	r5, ip
 80007c8:	4626      	mov	r6, r4
 80007ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007cc:	6028      	str	r0, [r5, #0]
 80007ce:	6069      	str	r1, [r5, #4]
 80007d0:	60aa      	str	r2, [r5, #8]
 80007d2:	60eb      	str	r3, [r5, #12]
 80007d4:	3410      	adds	r4, #16
 80007d6:	f10c 0c10 	add.w	ip, ip, #16
 80007da:	4574      	cmp	r4, lr
 80007dc:	d1f3      	bne.n	80007c6 <tcp_http_mt+0x1aa>
 80007de:	4665      	mov	r5, ip
 80007e0:	4623      	mov	r3, r4
 80007e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007e4:	6028      	str	r0, [r5, #0]
 80007e6:	6069      	str	r1, [r5, #4]
 80007e8:	60aa      	str	r2, [r5, #8]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 80007ee:	6838      	ldr	r0, [r7, #0]
 80007f0:	f7ff fcae 	bl	8000150 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a79      	ldr	r2, [pc, #484]	; (80009e4 <tcp_http_mt+0x3c8>)
 80007fe:	461c      	mov	r4, r3
 8000800:	4613      	mov	r3, r2
 8000802:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000804:	6020      	str	r0, [r4, #0]
 8000806:	6061      	str	r1, [r4, #4]
 8000808:	60a2      	str	r2, [r4, #8]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Mestre Config</title>");
 800080e:	6838      	ldr	r0, [r7, #0]
 8000810:	f7ff fc9e 	bl	8000150 <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a72      	ldr	r2, [pc, #456]	; (80009e8 <tcp_http_mt+0x3cc>)
 800081e:	461d      	mov	r5, r3
 8000820:	4614      	mov	r4, r2
 8000822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000824:	6028      	str	r0, [r5, #0]
 8000826:	6069      	str	r1, [r5, #4]
 8000828:	60aa      	str	r2, [r5, #8]
 800082a:	60eb      	str	r3, [r5, #12]
 800082c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800082e:	6128      	str	r0, [r5, #16]
 8000830:	6169      	str	r1, [r5, #20]
 8000832:	61aa      	str	r2, [r5, #24]
 8000834:	7823      	ldrb	r3, [r4, #0]
 8000836:	772b      	strb	r3, [r5, #28]
							strcat((char*)buf, "</head>");
 8000838:	6838      	ldr	r0, [r7, #0]
 800083a:	f7ff fc89 	bl	8000150 <strlen>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	4969      	ldr	r1, [pc, #420]	; (80009ec <tcp_http_mt+0x3d0>)
 8000848:	461a      	mov	r2, r3
 800084a:	460b      	mov	r3, r1
 800084c:	cb03      	ldmia	r3!, {r0, r1}
 800084e:	6010      	str	r0, [r2, #0]
 8000850:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 8000852:	6838      	ldr	r0, [r7, #0]
 8000854:	f7ff fc7c 	bl	8000150 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a63      	ldr	r2, [pc, #396]	; (80009f0 <tcp_http_mt+0x3d4>)
 8000862:	6810      	ldr	r0, [r2, #0]
 8000864:	6018      	str	r0, [r3, #0]
 8000866:	8891      	ldrh	r1, [r2, #4]
 8000868:	7992      	ldrb	r2, [r2, #6]
 800086a:	8099      	strh	r1, [r3, #4]
 800086c:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<b><center>Configuracao da Placa de rede</b></center><br>");
 800086e:	6838      	ldr	r0, [r7, #0]
 8000870:	f7ff fc6e 	bl	8000150 <strlen>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a5d      	ldr	r2, [pc, #372]	; (80009f4 <tcp_http_mt+0x3d8>)
 800087e:	4614      	mov	r4, r2
 8000880:	469c      	mov	ip, r3
 8000882:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000886:	4665      	mov	r5, ip
 8000888:	4626      	mov	r6, r4
 800088a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800088c:	6028      	str	r0, [r5, #0]
 800088e:	6069      	str	r1, [r5, #4]
 8000890:	60aa      	str	r2, [r5, #8]
 8000892:	60eb      	str	r3, [r5, #12]
 8000894:	3410      	adds	r4, #16
 8000896:	f10c 0c10 	add.w	ip, ip, #16
 800089a:	4574      	cmp	r4, lr
 800089c:	d1f3      	bne.n	8000886 <tcp_http_mt+0x26a>
 800089e:	4662      	mov	r2, ip
 80008a0:	4623      	mov	r3, r4
 80008a2:	cb03      	ldmia	r3!, {r0, r1}
 80008a4:	6010      	str	r0, [r2, #0]
 80008a6:	6051      	str	r1, [r2, #4]
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "<center><form action=''>");
 80008ac:	6838      	ldr	r0, [r7, #0]
 80008ae:	f7ff fc4f 	bl	8000150 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a4f      	ldr	r2, [pc, #316]	; (80009f8 <tcp_http_mt+0x3dc>)
 80008bc:	461d      	mov	r5, r3
 80008be:	4614      	mov	r4, r2
 80008c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c2:	6028      	str	r0, [r5, #0]
 80008c4:	6069      	str	r1, [r5, #4]
 80008c6:	60aa      	str	r2, [r5, #8]
 80008c8:	60eb      	str	r3, [r5, #12]
 80008ca:	cc03      	ldmia	r4!, {r0, r1}
 80008cc:	6128      	str	r0, [r5, #16]
 80008ce:	6169      	str	r1, [r5, #20]
 80008d0:	7823      	ldrb	r3, [r4, #0]
 80008d2:	762b      	strb	r3, [r5, #24]
							strcat((char*)buf, "IP: <input type='text' name='ip'>		Mascara: <input type='text' name='mascara'><br><br>");
 80008d4:	6838      	ldr	r0, [r7, #0]
 80008d6:	f7ff fc3b 	bl	8000150 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a46      	ldr	r2, [pc, #280]	; (80009fc <tcp_http_mt+0x3e0>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	4611      	mov	r1, r2
 80008e8:	2357      	movs	r3, #87	; 0x57
 80008ea:	461a      	mov	r2, r3
 80008ec:	f006 fde9 	bl	80074c2 <memcpy>
							strcat((char*)buf, "Porta: <input type='text' name='porta'>		Gateway: <input type='text' name='gateway'><br><br>");
 80008f0:	6838      	ldr	r0, [r7, #0]
 80008f2:	f7ff fc2d 	bl	8000150 <strlen>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	4413      	add	r3, r2
 80008fe:	4a40      	ldr	r2, [pc, #256]	; (8000a00 <tcp_http_mt+0x3e4>)
 8000900:	4618      	mov	r0, r3
 8000902:	4611      	mov	r1, r2
 8000904:	235d      	movs	r3, #93	; 0x5d
 8000906:	461a      	mov	r2, r3
 8000908:	f006 fddb 	bl	80074c2 <memcpy>
							strcat((char*)buf, "DNS 1: <input type='text' name='dns1'>		DNS 2: <input type='text' name='dns2'><br><br>");
 800090c:	6838      	ldr	r0, [r7, #0]
 800090e:	f7ff fc1f 	bl	8000150 <strlen>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	4413      	add	r3, r2
 800091a:	4a3a      	ldr	r2, [pc, #232]	; (8000a04 <tcp_http_mt+0x3e8>)
 800091c:	4618      	mov	r0, r3
 800091e:	4611      	mov	r1, r2
 8000920:	2357      	movs	r3, #87	; 0x57
 8000922:	461a      	mov	r2, r3
 8000924:	f006 fdcd 	bl	80074c2 <memcpy>
							strcat((char*)buf, "DHCP: <button>On</button>  <button>Off</button>");
 8000928:	6838      	ldr	r0, [r7, #0]
 800092a:	f7ff fc11 	bl	8000150 <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	4413      	add	r3, r2
 8000936:	4a34      	ldr	r2, [pc, #208]	; (8000a08 <tcp_http_mt+0x3ec>)
 8000938:	4614      	mov	r4, r2
 800093a:	469c      	mov	ip, r3
 800093c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000940:	4665      	mov	r5, ip
 8000942:	4626      	mov	r6, r4
 8000944:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000946:	6028      	str	r0, [r5, #0]
 8000948:	6069      	str	r1, [r5, #4]
 800094a:	60aa      	str	r2, [r5, #8]
 800094c:	60eb      	str	r3, [r5, #12]
 800094e:	3410      	adds	r4, #16
 8000950:	f10c 0c10 	add.w	ip, ip, #16
 8000954:	4574      	cmp	r4, lr
 8000956:	d1f3      	bne.n	8000940 <tcp_http_mt+0x324>
							strcat((char*)buf, "</center></form>");
 8000958:	6838      	ldr	r0, [r7, #0]
 800095a:	f7ff fbf9 	bl	8000150 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	4413      	add	r3, r2
 8000966:	4a29      	ldr	r2, [pc, #164]	; (8000a0c <tcp_http_mt+0x3f0>)
 8000968:	461d      	mov	r5, r3
 800096a:	4614      	mov	r4, r2
 800096c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800096e:	6028      	str	r0, [r5, #0]
 8000970:	6069      	str	r1, [r5, #4]
 8000972:	60aa      	str	r2, [r5, #8]
 8000974:	60eb      	str	r3, [r5, #12]
 8000976:	7823      	ldrb	r3, [r4, #0]
 8000978:	742b      	strb	r3, [r5, #16]
							strcat((char*)buf, "<center><button>Salvar</button><br><br><a href='http://192.168.0.231'>Voltar</a><br></center>");
 800097a:	6838      	ldr	r0, [r7, #0]
 800097c:	f7ff fbe8 	bl	8000150 <strlen>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <tcp_http_mt+0x3f4>)
 800098a:	4618      	mov	r0, r3
 800098c:	4611      	mov	r1, r2
 800098e:	235e      	movs	r3, #94	; 0x5e
 8000990:	461a      	mov	r2, r3
 8000992:	f006 fd96 	bl	80074c2 <memcpy>

							strcat((char*)buf, "</body>");
 8000996:	6838      	ldr	r0, [r7, #0]
 8000998:	f7ff fbda 	bl	8000150 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	491b      	ldr	r1, [pc, #108]	; (8000a14 <tcp_http_mt+0x3f8>)
 80009a6:	461a      	mov	r2, r3
 80009a8:	460b      	mov	r3, r1
 80009aa:	cb03      	ldmia	r3!, {r0, r1}
 80009ac:	6010      	str	r0, [r2, #0]
 80009ae:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 80009b0:	6838      	ldr	r0, [r7, #0]
 80009b2:	f7ff fbcd 	bl	8000150 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461a      	mov	r2, r3
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	4916      	ldr	r1, [pc, #88]	; (8000a18 <tcp_http_mt+0x3fc>)
 80009c0:	461a      	mov	r2, r3
 80009c2:	460b      	mov	r3, r1
 80009c4:	cb03      	ldmia	r3!, {r0, r1}
 80009c6:	6010      	str	r0, [r2, #0]
 80009c8:	6051      	str	r1, [r2, #4]
 80009ca:	f000 be05 	b.w	80015d8 <tcp_http_mt+0xfbc>
 80009ce:	bf00      	nop
 80009d0:	20001c14 	.word	0x20001c14
 80009d4:	080075a0 	.word	0x080075a0
 80009d8:	080075a8 	.word	0x080075a8
 80009dc:	080075b8 	.word	0x080075b8
 80009e0:	080075c0 	.word	0x080075c0
 80009e4:	080075f0 	.word	0x080075f0
 80009e8:	08007600 	.word	0x08007600
 80009ec:	08007620 	.word	0x08007620
 80009f0:	08007628 	.word	0x08007628
 80009f4:	08007630 	.word	0x08007630
 80009f8:	0800766c 	.word	0x0800766c
 80009fc:	08007688 	.word	0x08007688
 8000a00:	080076e0 	.word	0x080076e0
 8000a04:	08007740 	.word	0x08007740
 8000a08:	08007798 	.word	0x08007798
 8000a0c:	080077c8 	.word	0x080077c8
 8000a10:	080077dc 	.word	0x080077dc
 8000a14:	0800783c 	.word	0x0800783c
 8000a18:	08007844 	.word	0x08007844
						}
						else if(strncmp("/interfaces", url, 6) == 0)
 8000a1c:	2206      	movs	r2, #6
 8000a1e:	6939      	ldr	r1, [r7, #16]
 8000a20:	48ce      	ldr	r0, [pc, #824]	; (8000d5c <tcp_http_mt+0x740>)
 8000a22:	f006 fd6e 	bl	8007502 <strncmp>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f040 84e9 	bne.w	8001400 <tcp_http_mt+0xde4>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	4acb      	ldr	r2, [pc, #812]	; (8000d60 <tcp_http_mt+0x744>)
 8000a32:	4614      	mov	r4, r2
 8000a34:	469c      	mov	ip, r3
 8000a36:	f104 0e20 	add.w	lr, r4, #32
 8000a3a:	4665      	mov	r5, ip
 8000a3c:	4626      	mov	r6, r4
 8000a3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a40:	6028      	str	r0, [r5, #0]
 8000a42:	6069      	str	r1, [r5, #4]
 8000a44:	60aa      	str	r2, [r5, #8]
 8000a46:	60eb      	str	r3, [r5, #12]
 8000a48:	3410      	adds	r4, #16
 8000a4a:	f10c 0c10 	add.w	ip, ip, #16
 8000a4e:	4574      	cmp	r4, lr
 8000a50:	d1f3      	bne.n	8000a3a <tcp_http_mt+0x41e>
 8000a52:	4665      	mov	r5, ip
 8000a54:	4623      	mov	r3, r4
 8000a56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a58:	6028      	str	r0, [r5, #0]
 8000a5a:	6069      	str	r1, [r5, #4]
 8000a5c:	60aa      	str	r2, [r5, #8]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head><title>Escrava Config</title>");
 8000a62:	6838      	ldr	r0, [r7, #0]
 8000a64:	f7ff fb74 	bl	8000150 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4abc      	ldr	r2, [pc, #752]	; (8000d64 <tcp_http_mt+0x748>)
 8000a72:	4614      	mov	r4, r2
 8000a74:	469c      	mov	ip, r3
 8000a76:	f104 0e20 	add.w	lr, r4, #32
 8000a7a:	4665      	mov	r5, ip
 8000a7c:	4626      	mov	r6, r4
 8000a7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a80:	6028      	str	r0, [r5, #0]
 8000a82:	6069      	str	r1, [r5, #4]
 8000a84:	60aa      	str	r2, [r5, #8]
 8000a86:	60eb      	str	r3, [r5, #12]
 8000a88:	3410      	adds	r4, #16
 8000a8a:	f10c 0c10 	add.w	ip, ip, #16
 8000a8e:	4574      	cmp	r4, lr
 8000a90:	d1f3      	bne.n	8000a7a <tcp_http_mt+0x45e>
 8000a92:	4662      	mov	r2, ip
 8000a94:	4623      	mov	r3, r4
 8000a96:	cb03      	ldmia	r3!, {r0, r1}
 8000a98:	6010      	str	r0, [r2, #0]
 8000a9a:	6051      	str	r1, [r2, #4]
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "<center><table border='1'><tr>");
 8000aa0:	6838      	ldr	r0, [r7, #0]
 8000aa2:	f7ff fb55 	bl	8000150 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	4aae      	ldr	r2, [pc, #696]	; (8000d68 <tcp_http_mt+0x74c>)
 8000ab0:	461d      	mov	r5, r3
 8000ab2:	4614      	mov	r4, r2
 8000ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ab6:	6028      	str	r0, [r5, #0]
 8000ab8:	6069      	str	r1, [r5, #4]
 8000aba:	60aa      	str	r2, [r5, #8]
 8000abc:	60eb      	str	r3, [r5, #12]
 8000abe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000ac0:	6128      	str	r0, [r5, #16]
 8000ac2:	6169      	str	r1, [r5, #20]
 8000ac4:	61aa      	str	r2, [r5, #24]
 8000ac6:	8823      	ldrh	r3, [r4, #0]
 8000ac8:	78a2      	ldrb	r2, [r4, #2]
 8000aca:	83ab      	strh	r3, [r5, #28]
 8000acc:	4613      	mov	r3, r2
 8000ace:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "<td><b>Entrada / IP da placa destino</b></td>");
 8000ad0:	6838      	ldr	r0, [r7, #0]
 8000ad2:	f7ff fb3d 	bl	8000150 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	4413      	add	r3, r2
 8000ade:	4aa3      	ldr	r2, [pc, #652]	; (8000d6c <tcp_http_mt+0x750>)
 8000ae0:	4614      	mov	r4, r2
 8000ae2:	469c      	mov	ip, r3
 8000ae4:	f104 0e20 	add.w	lr, r4, #32
 8000ae8:	4665      	mov	r5, ip
 8000aea:	4626      	mov	r6, r4
 8000aec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000aee:	6028      	str	r0, [r5, #0]
 8000af0:	6069      	str	r1, [r5, #4]
 8000af2:	60aa      	str	r2, [r5, #8]
 8000af4:	60eb      	str	r3, [r5, #12]
 8000af6:	3410      	adds	r4, #16
 8000af8:	f10c 0c10 	add.w	ip, ip, #16
 8000afc:	4574      	cmp	r4, lr
 8000afe:	d1f3      	bne.n	8000ae8 <tcp_http_mt+0x4cc>
 8000b00:	4665      	mov	r5, ip
 8000b02:	4623      	mov	r3, r4
 8000b04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b06:	6028      	str	r0, [r5, #0]
 8000b08:	6069      	str	r1, [r5, #4]
 8000b0a:	60aa      	str	r2, [r5, #8]
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><b>Rele da placa destino</b></td></tr>");
 8000b10:	6838      	ldr	r0, [r7, #0]
 8000b12:	f7ff fb1d 	bl	8000150 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a94      	ldr	r2, [pc, #592]	; (8000d70 <tcp_http_mt+0x754>)
 8000b20:	4614      	mov	r4, r2
 8000b22:	469c      	mov	ip, r3
 8000b24:	f104 0e20 	add.w	lr, r4, #32
 8000b28:	4665      	mov	r5, ip
 8000b2a:	4626      	mov	r6, r4
 8000b2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b2e:	6028      	str	r0, [r5, #0]
 8000b30:	6069      	str	r1, [r5, #4]
 8000b32:	60aa      	str	r2, [r5, #8]
 8000b34:	60eb      	str	r3, [r5, #12]
 8000b36:	3410      	adds	r4, #16
 8000b38:	f10c 0c10 	add.w	ip, ip, #16
 8000b3c:	4574      	cmp	r4, lr
 8000b3e:	d1f3      	bne.n	8000b28 <tcp_http_mt+0x50c>
 8000b40:	4662      	mov	r2, ip
 8000b42:	4623      	mov	r3, r4
 8000b44:	cb03      	ldmia	r3!, {r0, r1}
 8000b46:	6010      	str	r0, [r2, #0]
 8000b48:	6051      	str	r1, [r2, #4]
 8000b4a:	8819      	ldrh	r1, [r3, #0]
 8000b4c:	789b      	ldrb	r3, [r3, #2]
 8000b4e:	8111      	strh	r1, [r2, #8]
 8000b50:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>1:  <input type='text' name='ipDestino1'></td>");
 8000b52:	6838      	ldr	r0, [r7, #0]
 8000b54:	f7ff fafc 	bl	8000150 <strlen>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a84      	ldr	r2, [pc, #528]	; (8000d74 <tcp_http_mt+0x758>)
 8000b62:	4614      	mov	r4, r2
 8000b64:	469c      	mov	ip, r3
 8000b66:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000b6a:	4665      	mov	r5, ip
 8000b6c:	4626      	mov	r6, r4
 8000b6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b70:	6028      	str	r0, [r5, #0]
 8000b72:	6069      	str	r1, [r5, #4]
 8000b74:	60aa      	str	r2, [r5, #8]
 8000b76:	60eb      	str	r3, [r5, #12]
 8000b78:	3410      	adds	r4, #16
 8000b7a:	f10c 0c10 	add.w	ip, ip, #16
 8000b7e:	4574      	cmp	r4, lr
 8000b80:	d1f3      	bne.n	8000b6a <tcp_http_mt+0x54e>
 8000b82:	4663      	mov	r3, ip
 8000b84:	4622      	mov	r2, r4
 8000b86:	6810      	ldr	r0, [r2, #0]
 8000b88:	6018      	str	r0, [r3, #0]
 8000b8a:	8891      	ldrh	r1, [r2, #4]
 8000b8c:	7992      	ldrb	r2, [r2, #6]
 8000b8e:	8099      	strh	r1, [r3, #4]
 8000b90:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino1'></td></tr>");
 8000b92:	6838      	ldr	r0, [r7, #0]
 8000b94:	f7ff fadc 	bl	8000150 <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a75      	ldr	r2, [pc, #468]	; (8000d78 <tcp_http_mt+0x75c>)
 8000ba2:	4614      	mov	r4, r2
 8000ba4:	469c      	mov	ip, r3
 8000ba6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000baa:	4665      	mov	r5, ip
 8000bac:	4626      	mov	r6, r4
 8000bae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bb0:	6028      	str	r0, [r5, #0]
 8000bb2:	6069      	str	r1, [r5, #4]
 8000bb4:	60aa      	str	r2, [r5, #8]
 8000bb6:	60eb      	str	r3, [r5, #12]
 8000bb8:	3410      	adds	r4, #16
 8000bba:	f10c 0c10 	add.w	ip, ip, #16
 8000bbe:	4574      	cmp	r4, lr
 8000bc0:	d1f3      	bne.n	8000baa <tcp_http_mt+0x58e>
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	4622      	mov	r2, r4
 8000bc6:	6810      	ldr	r0, [r2, #0]
 8000bc8:	6018      	str	r0, [r3, #0]
 8000bca:	8892      	ldrh	r2, [r2, #4]
 8000bcc:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>2:  <input type='text' name='ipDestino2'></td>");
 8000bce:	6838      	ldr	r0, [r7, #0]
 8000bd0:	f7ff fabe 	bl	8000150 <strlen>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a67      	ldr	r2, [pc, #412]	; (8000d7c <tcp_http_mt+0x760>)
 8000bde:	4614      	mov	r4, r2
 8000be0:	469c      	mov	ip, r3
 8000be2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000be6:	4665      	mov	r5, ip
 8000be8:	4626      	mov	r6, r4
 8000bea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bec:	6028      	str	r0, [r5, #0]
 8000bee:	6069      	str	r1, [r5, #4]
 8000bf0:	60aa      	str	r2, [r5, #8]
 8000bf2:	60eb      	str	r3, [r5, #12]
 8000bf4:	3410      	adds	r4, #16
 8000bf6:	f10c 0c10 	add.w	ip, ip, #16
 8000bfa:	4574      	cmp	r4, lr
 8000bfc:	d1f3      	bne.n	8000be6 <tcp_http_mt+0x5ca>
 8000bfe:	4663      	mov	r3, ip
 8000c00:	4622      	mov	r2, r4
 8000c02:	6810      	ldr	r0, [r2, #0]
 8000c04:	6018      	str	r0, [r3, #0]
 8000c06:	8891      	ldrh	r1, [r2, #4]
 8000c08:	7992      	ldrb	r2, [r2, #6]
 8000c0a:	8099      	strh	r1, [r3, #4]
 8000c0c:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino2'></td></tr>");
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f7ff fa9e 	bl	8000150 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a58      	ldr	r2, [pc, #352]	; (8000d80 <tcp_http_mt+0x764>)
 8000c1e:	4614      	mov	r4, r2
 8000c20:	469c      	mov	ip, r3
 8000c22:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c26:	4665      	mov	r5, ip
 8000c28:	4626      	mov	r6, r4
 8000c2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c2c:	6028      	str	r0, [r5, #0]
 8000c2e:	6069      	str	r1, [r5, #4]
 8000c30:	60aa      	str	r2, [r5, #8]
 8000c32:	60eb      	str	r3, [r5, #12]
 8000c34:	3410      	adds	r4, #16
 8000c36:	f10c 0c10 	add.w	ip, ip, #16
 8000c3a:	4574      	cmp	r4, lr
 8000c3c:	d1f3      	bne.n	8000c26 <tcp_http_mt+0x60a>
 8000c3e:	4663      	mov	r3, ip
 8000c40:	4622      	mov	r2, r4
 8000c42:	6810      	ldr	r0, [r2, #0]
 8000c44:	6018      	str	r0, [r3, #0]
 8000c46:	8892      	ldrh	r2, [r2, #4]
 8000c48:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>3:  <input type='text' name='ipDestino3'></td>");
 8000c4a:	6838      	ldr	r0, [r7, #0]
 8000c4c:	f7ff fa80 	bl	8000150 <strlen>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a4a      	ldr	r2, [pc, #296]	; (8000d84 <tcp_http_mt+0x768>)
 8000c5a:	4614      	mov	r4, r2
 8000c5c:	469c      	mov	ip, r3
 8000c5e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c62:	4665      	mov	r5, ip
 8000c64:	4626      	mov	r6, r4
 8000c66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c68:	6028      	str	r0, [r5, #0]
 8000c6a:	6069      	str	r1, [r5, #4]
 8000c6c:	60aa      	str	r2, [r5, #8]
 8000c6e:	60eb      	str	r3, [r5, #12]
 8000c70:	3410      	adds	r4, #16
 8000c72:	f10c 0c10 	add.w	ip, ip, #16
 8000c76:	4574      	cmp	r4, lr
 8000c78:	d1f3      	bne.n	8000c62 <tcp_http_mt+0x646>
 8000c7a:	4663      	mov	r3, ip
 8000c7c:	4622      	mov	r2, r4
 8000c7e:	6810      	ldr	r0, [r2, #0]
 8000c80:	6018      	str	r0, [r3, #0]
 8000c82:	8891      	ldrh	r1, [r2, #4]
 8000c84:	7992      	ldrb	r2, [r2, #6]
 8000c86:	8099      	strh	r1, [r3, #4]
 8000c88:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino3'></td></tr>");
 8000c8a:	6838      	ldr	r0, [r7, #0]
 8000c8c:	f7ff fa60 	bl	8000150 <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a3b      	ldr	r2, [pc, #236]	; (8000d88 <tcp_http_mt+0x76c>)
 8000c9a:	4614      	mov	r4, r2
 8000c9c:	469c      	mov	ip, r3
 8000c9e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000ca2:	4665      	mov	r5, ip
 8000ca4:	4626      	mov	r6, r4
 8000ca6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ca8:	6028      	str	r0, [r5, #0]
 8000caa:	6069      	str	r1, [r5, #4]
 8000cac:	60aa      	str	r2, [r5, #8]
 8000cae:	60eb      	str	r3, [r5, #12]
 8000cb0:	3410      	adds	r4, #16
 8000cb2:	f10c 0c10 	add.w	ip, ip, #16
 8000cb6:	4574      	cmp	r4, lr
 8000cb8:	d1f3      	bne.n	8000ca2 <tcp_http_mt+0x686>
 8000cba:	4663      	mov	r3, ip
 8000cbc:	4622      	mov	r2, r4
 8000cbe:	6810      	ldr	r0, [r2, #0]
 8000cc0:	6018      	str	r0, [r3, #0]
 8000cc2:	8892      	ldrh	r2, [r2, #4]
 8000cc4:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>4:  <input type='text' name='ipDestino4'></td>");
 8000cc6:	6838      	ldr	r0, [r7, #0]
 8000cc8:	f7ff fa42 	bl	8000150 <strlen>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a2d      	ldr	r2, [pc, #180]	; (8000d8c <tcp_http_mt+0x770>)
 8000cd6:	4614      	mov	r4, r2
 8000cd8:	469c      	mov	ip, r3
 8000cda:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000cde:	4665      	mov	r5, ip
 8000ce0:	4626      	mov	r6, r4
 8000ce2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ce4:	6028      	str	r0, [r5, #0]
 8000ce6:	6069      	str	r1, [r5, #4]
 8000ce8:	60aa      	str	r2, [r5, #8]
 8000cea:	60eb      	str	r3, [r5, #12]
 8000cec:	3410      	adds	r4, #16
 8000cee:	f10c 0c10 	add.w	ip, ip, #16
 8000cf2:	4574      	cmp	r4, lr
 8000cf4:	d1f3      	bne.n	8000cde <tcp_http_mt+0x6c2>
 8000cf6:	4663      	mov	r3, ip
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	6810      	ldr	r0, [r2, #0]
 8000cfc:	6018      	str	r0, [r3, #0]
 8000cfe:	8891      	ldrh	r1, [r2, #4]
 8000d00:	7992      	ldrb	r2, [r2, #6]
 8000d02:	8099      	strh	r1, [r3, #4]
 8000d04:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino4'></td></tr>");
 8000d06:	6838      	ldr	r0, [r7, #0]
 8000d08:	f7ff fa22 	bl	8000150 <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <tcp_http_mt+0x774>)
 8000d16:	4614      	mov	r4, r2
 8000d18:	469c      	mov	ip, r3
 8000d1a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d1e:	4665      	mov	r5, ip
 8000d20:	4626      	mov	r6, r4
 8000d22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d24:	6028      	str	r0, [r5, #0]
 8000d26:	6069      	str	r1, [r5, #4]
 8000d28:	60aa      	str	r2, [r5, #8]
 8000d2a:	60eb      	str	r3, [r5, #12]
 8000d2c:	3410      	adds	r4, #16
 8000d2e:	f10c 0c10 	add.w	ip, ip, #16
 8000d32:	4574      	cmp	r4, lr
 8000d34:	d1f3      	bne.n	8000d1e <tcp_http_mt+0x702>
 8000d36:	4663      	mov	r3, ip
 8000d38:	4622      	mov	r2, r4
 8000d3a:	6810      	ldr	r0, [r2, #0]
 8000d3c:	6018      	str	r0, [r3, #0]
 8000d3e:	8892      	ldrh	r2, [r2, #4]
 8000d40:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>5:  <input type='text' name='ipDestino5'></td>");
 8000d42:	6838      	ldr	r0, [r7, #0]
 8000d44:	f7ff fa04 	bl	8000150 <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <tcp_http_mt+0x778>)
 8000d52:	4614      	mov	r4, r2
 8000d54:	469c      	mov	ip, r3
 8000d56:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d5a:	e01d      	b.n	8000d98 <tcp_http_mt+0x77c>
 8000d5c:	0800784c 	.word	0x0800784c
 8000d60:	080075c0 	.word	0x080075c0
 8000d64:	08007858 	.word	0x08007858
 8000d68:	08007884 	.word	0x08007884
 8000d6c:	080078a4 	.word	0x080078a4
 8000d70:	080078d4 	.word	0x080078d4
 8000d74:	08007900 	.word	0x08007900
 8000d78:	08007938 	.word	0x08007938
 8000d7c:	08007970 	.word	0x08007970
 8000d80:	080079a8 	.word	0x080079a8
 8000d84:	080079e0 	.word	0x080079e0
 8000d88:	08007a18 	.word	0x08007a18
 8000d8c:	08007a50 	.word	0x08007a50
 8000d90:	08007a88 	.word	0x08007a88
 8000d94:	08007ac0 	.word	0x08007ac0
 8000d98:	4665      	mov	r5, ip
 8000d9a:	4626      	mov	r6, r4
 8000d9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d9e:	6028      	str	r0, [r5, #0]
 8000da0:	6069      	str	r1, [r5, #4]
 8000da2:	60aa      	str	r2, [r5, #8]
 8000da4:	60eb      	str	r3, [r5, #12]
 8000da6:	3410      	adds	r4, #16
 8000da8:	f10c 0c10 	add.w	ip, ip, #16
 8000dac:	4574      	cmp	r4, lr
 8000dae:	d1f3      	bne.n	8000d98 <tcp_http_mt+0x77c>
 8000db0:	4663      	mov	r3, ip
 8000db2:	4622      	mov	r2, r4
 8000db4:	6810      	ldr	r0, [r2, #0]
 8000db6:	6018      	str	r0, [r3, #0]
 8000db8:	8891      	ldrh	r1, [r2, #4]
 8000dba:	7992      	ldrb	r2, [r2, #6]
 8000dbc:	8099      	strh	r1, [r3, #4]
 8000dbe:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino5'></td></tr>");
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	f7ff f9c5 	bl	8000150 <strlen>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4acb      	ldr	r2, [pc, #812]	; (80010fc <tcp_http_mt+0xae0>)
 8000dd0:	4614      	mov	r4, r2
 8000dd2:	469c      	mov	ip, r3
 8000dd4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000dd8:	4665      	mov	r5, ip
 8000dda:	4626      	mov	r6, r4
 8000ddc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dde:	6028      	str	r0, [r5, #0]
 8000de0:	6069      	str	r1, [r5, #4]
 8000de2:	60aa      	str	r2, [r5, #8]
 8000de4:	60eb      	str	r3, [r5, #12]
 8000de6:	3410      	adds	r4, #16
 8000de8:	f10c 0c10 	add.w	ip, ip, #16
 8000dec:	4574      	cmp	r4, lr
 8000dee:	d1f3      	bne.n	8000dd8 <tcp_http_mt+0x7bc>
 8000df0:	4663      	mov	r3, ip
 8000df2:	4622      	mov	r2, r4
 8000df4:	6810      	ldr	r0, [r2, #0]
 8000df6:	6018      	str	r0, [r3, #0]
 8000df8:	8892      	ldrh	r2, [r2, #4]
 8000dfa:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>6:  <input type='text' name='ipDestino6'></td>");
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f7ff f9a7 	bl	8000150 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4abd      	ldr	r2, [pc, #756]	; (8001100 <tcp_http_mt+0xae4>)
 8000e0c:	4614      	mov	r4, r2
 8000e0e:	469c      	mov	ip, r3
 8000e10:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e14:	4665      	mov	r5, ip
 8000e16:	4626      	mov	r6, r4
 8000e18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e1a:	6028      	str	r0, [r5, #0]
 8000e1c:	6069      	str	r1, [r5, #4]
 8000e1e:	60aa      	str	r2, [r5, #8]
 8000e20:	60eb      	str	r3, [r5, #12]
 8000e22:	3410      	adds	r4, #16
 8000e24:	f10c 0c10 	add.w	ip, ip, #16
 8000e28:	4574      	cmp	r4, lr
 8000e2a:	d1f3      	bne.n	8000e14 <tcp_http_mt+0x7f8>
 8000e2c:	4663      	mov	r3, ip
 8000e2e:	4622      	mov	r2, r4
 8000e30:	6810      	ldr	r0, [r2, #0]
 8000e32:	6018      	str	r0, [r3, #0]
 8000e34:	8891      	ldrh	r1, [r2, #4]
 8000e36:	7992      	ldrb	r2, [r2, #6]
 8000e38:	8099      	strh	r1, [r3, #4]
 8000e3a:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino6'></td></tr>");
 8000e3c:	6838      	ldr	r0, [r7, #0]
 8000e3e:	f7ff f987 	bl	8000150 <strlen>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4aae      	ldr	r2, [pc, #696]	; (8001104 <tcp_http_mt+0xae8>)
 8000e4c:	4614      	mov	r4, r2
 8000e4e:	469c      	mov	ip, r3
 8000e50:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e54:	4665      	mov	r5, ip
 8000e56:	4626      	mov	r6, r4
 8000e58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e5a:	6028      	str	r0, [r5, #0]
 8000e5c:	6069      	str	r1, [r5, #4]
 8000e5e:	60aa      	str	r2, [r5, #8]
 8000e60:	60eb      	str	r3, [r5, #12]
 8000e62:	3410      	adds	r4, #16
 8000e64:	f10c 0c10 	add.w	ip, ip, #16
 8000e68:	4574      	cmp	r4, lr
 8000e6a:	d1f3      	bne.n	8000e54 <tcp_http_mt+0x838>
 8000e6c:	4663      	mov	r3, ip
 8000e6e:	4622      	mov	r2, r4
 8000e70:	6810      	ldr	r0, [r2, #0]
 8000e72:	6018      	str	r0, [r3, #0]
 8000e74:	8892      	ldrh	r2, [r2, #4]
 8000e76:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>7:  <input type='text' name='ipDestino7'></td>");
 8000e78:	6838      	ldr	r0, [r7, #0]
 8000e7a:	f7ff f969 	bl	8000150 <strlen>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461a      	mov	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	4aa0      	ldr	r2, [pc, #640]	; (8001108 <tcp_http_mt+0xaec>)
 8000e88:	4614      	mov	r4, r2
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e90:	4665      	mov	r5, ip
 8000e92:	4626      	mov	r6, r4
 8000e94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e96:	6028      	str	r0, [r5, #0]
 8000e98:	6069      	str	r1, [r5, #4]
 8000e9a:	60aa      	str	r2, [r5, #8]
 8000e9c:	60eb      	str	r3, [r5, #12]
 8000e9e:	3410      	adds	r4, #16
 8000ea0:	f10c 0c10 	add.w	ip, ip, #16
 8000ea4:	4574      	cmp	r4, lr
 8000ea6:	d1f3      	bne.n	8000e90 <tcp_http_mt+0x874>
 8000ea8:	4663      	mov	r3, ip
 8000eaa:	4622      	mov	r2, r4
 8000eac:	6810      	ldr	r0, [r2, #0]
 8000eae:	6018      	str	r0, [r3, #0]
 8000eb0:	8891      	ldrh	r1, [r2, #4]
 8000eb2:	7992      	ldrb	r2, [r2, #6]
 8000eb4:	8099      	strh	r1, [r3, #4]
 8000eb6:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino7'></td></tr>");
 8000eb8:	6838      	ldr	r0, [r7, #0]
 8000eba:	f7ff f949 	bl	8000150 <strlen>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a91      	ldr	r2, [pc, #580]	; (800110c <tcp_http_mt+0xaf0>)
 8000ec8:	4614      	mov	r4, r2
 8000eca:	469c      	mov	ip, r3
 8000ecc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000ed0:	4665      	mov	r5, ip
 8000ed2:	4626      	mov	r6, r4
 8000ed4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ed6:	6028      	str	r0, [r5, #0]
 8000ed8:	6069      	str	r1, [r5, #4]
 8000eda:	60aa      	str	r2, [r5, #8]
 8000edc:	60eb      	str	r3, [r5, #12]
 8000ede:	3410      	adds	r4, #16
 8000ee0:	f10c 0c10 	add.w	ip, ip, #16
 8000ee4:	4574      	cmp	r4, lr
 8000ee6:	d1f3      	bne.n	8000ed0 <tcp_http_mt+0x8b4>
 8000ee8:	4663      	mov	r3, ip
 8000eea:	4622      	mov	r2, r4
 8000eec:	6810      	ldr	r0, [r2, #0]
 8000eee:	6018      	str	r0, [r3, #0]
 8000ef0:	8892      	ldrh	r2, [r2, #4]
 8000ef2:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>8:  <input type='text' name='ipDestino8'></td>");
 8000ef4:	6838      	ldr	r0, [r7, #0]
 8000ef6:	f7ff f92b 	bl	8000150 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a83      	ldr	r2, [pc, #524]	; (8001110 <tcp_http_mt+0xaf4>)
 8000f04:	4614      	mov	r4, r2
 8000f06:	469c      	mov	ip, r3
 8000f08:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f0c:	4665      	mov	r5, ip
 8000f0e:	4626      	mov	r6, r4
 8000f10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f12:	6028      	str	r0, [r5, #0]
 8000f14:	6069      	str	r1, [r5, #4]
 8000f16:	60aa      	str	r2, [r5, #8]
 8000f18:	60eb      	str	r3, [r5, #12]
 8000f1a:	3410      	adds	r4, #16
 8000f1c:	f10c 0c10 	add.w	ip, ip, #16
 8000f20:	4574      	cmp	r4, lr
 8000f22:	d1f3      	bne.n	8000f0c <tcp_http_mt+0x8f0>
 8000f24:	4663      	mov	r3, ip
 8000f26:	4622      	mov	r2, r4
 8000f28:	6810      	ldr	r0, [r2, #0]
 8000f2a:	6018      	str	r0, [r3, #0]
 8000f2c:	8891      	ldrh	r1, [r2, #4]
 8000f2e:	7992      	ldrb	r2, [r2, #6]
 8000f30:	8099      	strh	r1, [r3, #4]
 8000f32:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino8'></td></tr>");
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	f7ff f90b 	bl	8000150 <strlen>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a74      	ldr	r2, [pc, #464]	; (8001114 <tcp_http_mt+0xaf8>)
 8000f44:	4614      	mov	r4, r2
 8000f46:	469c      	mov	ip, r3
 8000f48:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f4c:	4665      	mov	r5, ip
 8000f4e:	4626      	mov	r6, r4
 8000f50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f52:	6028      	str	r0, [r5, #0]
 8000f54:	6069      	str	r1, [r5, #4]
 8000f56:	60aa      	str	r2, [r5, #8]
 8000f58:	60eb      	str	r3, [r5, #12]
 8000f5a:	3410      	adds	r4, #16
 8000f5c:	f10c 0c10 	add.w	ip, ip, #16
 8000f60:	4574      	cmp	r4, lr
 8000f62:	d1f3      	bne.n	8000f4c <tcp_http_mt+0x930>
 8000f64:	4663      	mov	r3, ip
 8000f66:	4622      	mov	r2, r4
 8000f68:	6810      	ldr	r0, [r2, #0]
 8000f6a:	6018      	str	r0, [r3, #0]
 8000f6c:	8892      	ldrh	r2, [r2, #4]
 8000f6e:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>9:  <input type='text' name='ipDestino9'></td>");
 8000f70:	6838      	ldr	r0, [r7, #0]
 8000f72:	f7ff f8ed 	bl	8000150 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a66      	ldr	r2, [pc, #408]	; (8001118 <tcp_http_mt+0xafc>)
 8000f80:	4614      	mov	r4, r2
 8000f82:	469c      	mov	ip, r3
 8000f84:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f88:	4665      	mov	r5, ip
 8000f8a:	4626      	mov	r6, r4
 8000f8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f8e:	6028      	str	r0, [r5, #0]
 8000f90:	6069      	str	r1, [r5, #4]
 8000f92:	60aa      	str	r2, [r5, #8]
 8000f94:	60eb      	str	r3, [r5, #12]
 8000f96:	3410      	adds	r4, #16
 8000f98:	f10c 0c10 	add.w	ip, ip, #16
 8000f9c:	4574      	cmp	r4, lr
 8000f9e:	d1f3      	bne.n	8000f88 <tcp_http_mt+0x96c>
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	4622      	mov	r2, r4
 8000fa4:	6810      	ldr	r0, [r2, #0]
 8000fa6:	6018      	str	r0, [r3, #0]
 8000fa8:	8891      	ldrh	r1, [r2, #4]
 8000faa:	7992      	ldrb	r2, [r2, #6]
 8000fac:	8099      	strh	r1, [r3, #4]
 8000fae:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino9'></td></tr>");
 8000fb0:	6838      	ldr	r0, [r7, #0]
 8000fb2:	f7ff f8cd 	bl	8000150 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a57      	ldr	r2, [pc, #348]	; (800111c <tcp_http_mt+0xb00>)
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	469c      	mov	ip, r3
 8000fc4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000fc8:	4665      	mov	r5, ip
 8000fca:	4626      	mov	r6, r4
 8000fcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fce:	6028      	str	r0, [r5, #0]
 8000fd0:	6069      	str	r1, [r5, #4]
 8000fd2:	60aa      	str	r2, [r5, #8]
 8000fd4:	60eb      	str	r3, [r5, #12]
 8000fd6:	3410      	adds	r4, #16
 8000fd8:	f10c 0c10 	add.w	ip, ip, #16
 8000fdc:	4574      	cmp	r4, lr
 8000fde:	d1f3      	bne.n	8000fc8 <tcp_http_mt+0x9ac>
 8000fe0:	4663      	mov	r3, ip
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	6810      	ldr	r0, [r2, #0]
 8000fe6:	6018      	str	r0, [r3, #0]
 8000fe8:	8892      	ldrh	r2, [r2, #4]
 8000fea:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>10: <input type='text' name='ipDestino10'></td>");
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f7ff f8af 	bl	8000150 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a49      	ldr	r2, [pc, #292]	; (8001120 <tcp_http_mt+0xb04>)
 8000ffc:	4614      	mov	r4, r2
 8000ffe:	469c      	mov	ip, r3
 8001000:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001004:	4665      	mov	r5, ip
 8001006:	4626      	mov	r6, r4
 8001008:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800100a:	6028      	str	r0, [r5, #0]
 800100c:	6069      	str	r1, [r5, #4]
 800100e:	60aa      	str	r2, [r5, #8]
 8001010:	60eb      	str	r3, [r5, #12]
 8001012:	3410      	adds	r4, #16
 8001014:	f10c 0c10 	add.w	ip, ip, #16
 8001018:	4574      	cmp	r4, lr
 800101a:	d1f3      	bne.n	8001004 <tcp_http_mt+0x9e8>
 800101c:	4662      	mov	r2, ip
 800101e:	4623      	mov	r3, r4
 8001020:	cb03      	ldmia	r3!, {r0, r1}
 8001022:	6010      	str	r0, [r2, #0]
 8001024:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino10'></td></tr>");
 8001026:	6838      	ldr	r0, [r7, #0]
 8001028:	f7ff f892 	bl	8000150 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a3b      	ldr	r2, [pc, #236]	; (8001124 <tcp_http_mt+0xb08>)
 8001036:	4614      	mov	r4, r2
 8001038:	469c      	mov	ip, r3
 800103a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800103e:	4665      	mov	r5, ip
 8001040:	4626      	mov	r6, r4
 8001042:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001044:	6028      	str	r0, [r5, #0]
 8001046:	6069      	str	r1, [r5, #4]
 8001048:	60aa      	str	r2, [r5, #8]
 800104a:	60eb      	str	r3, [r5, #12]
 800104c:	3410      	adds	r4, #16
 800104e:	f10c 0c10 	add.w	ip, ip, #16
 8001052:	4574      	cmp	r4, lr
 8001054:	d1f3      	bne.n	800103e <tcp_http_mt+0xa22>
 8001056:	4663      	mov	r3, ip
 8001058:	4622      	mov	r2, r4
 800105a:	6810      	ldr	r0, [r2, #0]
 800105c:	6018      	str	r0, [r3, #0]
 800105e:	8891      	ldrh	r1, [r2, #4]
 8001060:	7992      	ldrb	r2, [r2, #6]
 8001062:	8099      	strh	r1, [r3, #4]
 8001064:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>11: <input type='text' name='ipDestino11'></td>");
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f7ff f872 	bl	8000150 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a2c      	ldr	r2, [pc, #176]	; (8001128 <tcp_http_mt+0xb0c>)
 8001076:	4614      	mov	r4, r2
 8001078:	469c      	mov	ip, r3
 800107a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800107e:	4665      	mov	r5, ip
 8001080:	4626      	mov	r6, r4
 8001082:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001084:	6028      	str	r0, [r5, #0]
 8001086:	6069      	str	r1, [r5, #4]
 8001088:	60aa      	str	r2, [r5, #8]
 800108a:	60eb      	str	r3, [r5, #12]
 800108c:	3410      	adds	r4, #16
 800108e:	f10c 0c10 	add.w	ip, ip, #16
 8001092:	4574      	cmp	r4, lr
 8001094:	d1f3      	bne.n	800107e <tcp_http_mt+0xa62>
 8001096:	4662      	mov	r2, ip
 8001098:	4623      	mov	r3, r4
 800109a:	cb03      	ldmia	r3!, {r0, r1}
 800109c:	6010      	str	r0, [r2, #0]
 800109e:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino11'></td></tr>");
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f7ff f855 	bl	8000150 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a1f      	ldr	r2, [pc, #124]	; (800112c <tcp_http_mt+0xb10>)
 80010b0:	4614      	mov	r4, r2
 80010b2:	469c      	mov	ip, r3
 80010b4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010b8:	4665      	mov	r5, ip
 80010ba:	4626      	mov	r6, r4
 80010bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010be:	6028      	str	r0, [r5, #0]
 80010c0:	6069      	str	r1, [r5, #4]
 80010c2:	60aa      	str	r2, [r5, #8]
 80010c4:	60eb      	str	r3, [r5, #12]
 80010c6:	3410      	adds	r4, #16
 80010c8:	f10c 0c10 	add.w	ip, ip, #16
 80010cc:	4574      	cmp	r4, lr
 80010ce:	d1f3      	bne.n	80010b8 <tcp_http_mt+0xa9c>
 80010d0:	4663      	mov	r3, ip
 80010d2:	4622      	mov	r2, r4
 80010d4:	6810      	ldr	r0, [r2, #0]
 80010d6:	6018      	str	r0, [r3, #0]
 80010d8:	8891      	ldrh	r1, [r2, #4]
 80010da:	7992      	ldrb	r2, [r2, #6]
 80010dc:	8099      	strh	r1, [r3, #4]
 80010de:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>12: <input type='text' name='ipDestino12'></td>");
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	f7ff f835 	bl	8000150 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <tcp_http_mt+0xb14>)
 80010f0:	4614      	mov	r4, r2
 80010f2:	469c      	mov	ip, r3
 80010f4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010f8:	e01c      	b.n	8001134 <tcp_http_mt+0xb18>
 80010fa:	bf00      	nop
 80010fc:	08007af8 	.word	0x08007af8
 8001100:	08007b30 	.word	0x08007b30
 8001104:	08007b68 	.word	0x08007b68
 8001108:	08007ba0 	.word	0x08007ba0
 800110c:	08007bd8 	.word	0x08007bd8
 8001110:	08007c10 	.word	0x08007c10
 8001114:	08007c48 	.word	0x08007c48
 8001118:	08007c80 	.word	0x08007c80
 800111c:	08007cb8 	.word	0x08007cb8
 8001120:	08007cf0 	.word	0x08007cf0
 8001124:	08007d28 	.word	0x08007d28
 8001128:	08007d60 	.word	0x08007d60
 800112c:	08007d98 	.word	0x08007d98
 8001130:	08007dd0 	.word	0x08007dd0
 8001134:	4665      	mov	r5, ip
 8001136:	4626      	mov	r6, r4
 8001138:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800113a:	6028      	str	r0, [r5, #0]
 800113c:	6069      	str	r1, [r5, #4]
 800113e:	60aa      	str	r2, [r5, #8]
 8001140:	60eb      	str	r3, [r5, #12]
 8001142:	3410      	adds	r4, #16
 8001144:	f10c 0c10 	add.w	ip, ip, #16
 8001148:	4574      	cmp	r4, lr
 800114a:	d1f3      	bne.n	8001134 <tcp_http_mt+0xb18>
 800114c:	4662      	mov	r2, ip
 800114e:	4623      	mov	r3, r4
 8001150:	cb03      	ldmia	r3!, {r0, r1}
 8001152:	6010      	str	r0, [r2, #0]
 8001154:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino12'></td></tr>");
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f7fe fffa 	bl	8000150 <strlen>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a9a      	ldr	r2, [pc, #616]	; (80013d0 <tcp_http_mt+0xdb4>)
 8001166:	4614      	mov	r4, r2
 8001168:	469c      	mov	ip, r3
 800116a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800116e:	4665      	mov	r5, ip
 8001170:	4626      	mov	r6, r4
 8001172:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001174:	6028      	str	r0, [r5, #0]
 8001176:	6069      	str	r1, [r5, #4]
 8001178:	60aa      	str	r2, [r5, #8]
 800117a:	60eb      	str	r3, [r5, #12]
 800117c:	3410      	adds	r4, #16
 800117e:	f10c 0c10 	add.w	ip, ip, #16
 8001182:	4574      	cmp	r4, lr
 8001184:	d1f3      	bne.n	800116e <tcp_http_mt+0xb52>
 8001186:	4663      	mov	r3, ip
 8001188:	4622      	mov	r2, r4
 800118a:	6810      	ldr	r0, [r2, #0]
 800118c:	6018      	str	r0, [r3, #0]
 800118e:	8891      	ldrh	r1, [r2, #4]
 8001190:	7992      	ldrb	r2, [r2, #6]
 8001192:	8099      	strh	r1, [r3, #4]
 8001194:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>13: <input type='text' name='ipDestino13'></td>");
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f7fe ffda 	bl	8000150 <strlen>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a8b      	ldr	r2, [pc, #556]	; (80013d4 <tcp_http_mt+0xdb8>)
 80011a6:	4614      	mov	r4, r2
 80011a8:	469c      	mov	ip, r3
 80011aa:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011ae:	4665      	mov	r5, ip
 80011b0:	4626      	mov	r6, r4
 80011b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011b4:	6028      	str	r0, [r5, #0]
 80011b6:	6069      	str	r1, [r5, #4]
 80011b8:	60aa      	str	r2, [r5, #8]
 80011ba:	60eb      	str	r3, [r5, #12]
 80011bc:	3410      	adds	r4, #16
 80011be:	f10c 0c10 	add.w	ip, ip, #16
 80011c2:	4574      	cmp	r4, lr
 80011c4:	d1f3      	bne.n	80011ae <tcp_http_mt+0xb92>
 80011c6:	4662      	mov	r2, ip
 80011c8:	4623      	mov	r3, r4
 80011ca:	cb03      	ldmia	r3!, {r0, r1}
 80011cc:	6010      	str	r0, [r2, #0]
 80011ce:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino13'></td></tr>");
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f7fe ffbd 	bl	8000150 <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	4a7e      	ldr	r2, [pc, #504]	; (80013d8 <tcp_http_mt+0xdbc>)
 80011e0:	4614      	mov	r4, r2
 80011e2:	469c      	mov	ip, r3
 80011e4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011e8:	4665      	mov	r5, ip
 80011ea:	4626      	mov	r6, r4
 80011ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011ee:	6028      	str	r0, [r5, #0]
 80011f0:	6069      	str	r1, [r5, #4]
 80011f2:	60aa      	str	r2, [r5, #8]
 80011f4:	60eb      	str	r3, [r5, #12]
 80011f6:	3410      	adds	r4, #16
 80011f8:	f10c 0c10 	add.w	ip, ip, #16
 80011fc:	4574      	cmp	r4, lr
 80011fe:	d1f3      	bne.n	80011e8 <tcp_http_mt+0xbcc>
 8001200:	4663      	mov	r3, ip
 8001202:	4622      	mov	r2, r4
 8001204:	6810      	ldr	r0, [r2, #0]
 8001206:	6018      	str	r0, [r3, #0]
 8001208:	8891      	ldrh	r1, [r2, #4]
 800120a:	7992      	ldrb	r2, [r2, #6]
 800120c:	8099      	strh	r1, [r3, #4]
 800120e:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>14: <input type='text' name='ipDestino14'></td>");
 8001210:	6838      	ldr	r0, [r7, #0]
 8001212:	f7fe ff9d 	bl	8000150 <strlen>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	4413      	add	r3, r2
 800121e:	4a6f      	ldr	r2, [pc, #444]	; (80013dc <tcp_http_mt+0xdc0>)
 8001220:	4614      	mov	r4, r2
 8001222:	469c      	mov	ip, r3
 8001224:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001228:	4665      	mov	r5, ip
 800122a:	4626      	mov	r6, r4
 800122c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800122e:	6028      	str	r0, [r5, #0]
 8001230:	6069      	str	r1, [r5, #4]
 8001232:	60aa      	str	r2, [r5, #8]
 8001234:	60eb      	str	r3, [r5, #12]
 8001236:	3410      	adds	r4, #16
 8001238:	f10c 0c10 	add.w	ip, ip, #16
 800123c:	4574      	cmp	r4, lr
 800123e:	d1f3      	bne.n	8001228 <tcp_http_mt+0xc0c>
 8001240:	4662      	mov	r2, ip
 8001242:	4623      	mov	r3, r4
 8001244:	cb03      	ldmia	r3!, {r0, r1}
 8001246:	6010      	str	r0, [r2, #0]
 8001248:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino14'></td></tr>");
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f7fe ff80 	bl	8000150 <strlen>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a61      	ldr	r2, [pc, #388]	; (80013e0 <tcp_http_mt+0xdc4>)
 800125a:	4614      	mov	r4, r2
 800125c:	469c      	mov	ip, r3
 800125e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001262:	4665      	mov	r5, ip
 8001264:	4626      	mov	r6, r4
 8001266:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001268:	6028      	str	r0, [r5, #0]
 800126a:	6069      	str	r1, [r5, #4]
 800126c:	60aa      	str	r2, [r5, #8]
 800126e:	60eb      	str	r3, [r5, #12]
 8001270:	3410      	adds	r4, #16
 8001272:	f10c 0c10 	add.w	ip, ip, #16
 8001276:	4574      	cmp	r4, lr
 8001278:	d1f3      	bne.n	8001262 <tcp_http_mt+0xc46>
 800127a:	4663      	mov	r3, ip
 800127c:	4622      	mov	r2, r4
 800127e:	6810      	ldr	r0, [r2, #0]
 8001280:	6018      	str	r0, [r3, #0]
 8001282:	8891      	ldrh	r1, [r2, #4]
 8001284:	7992      	ldrb	r2, [r2, #6]
 8001286:	8099      	strh	r1, [r3, #4]
 8001288:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>15: <input type='text' name='ipDestino15'></td>");
 800128a:	6838      	ldr	r0, [r7, #0]
 800128c:	f7fe ff60 	bl	8000150 <strlen>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a52      	ldr	r2, [pc, #328]	; (80013e4 <tcp_http_mt+0xdc8>)
 800129a:	4614      	mov	r4, r2
 800129c:	469c      	mov	ip, r3
 800129e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80012a2:	4665      	mov	r5, ip
 80012a4:	4626      	mov	r6, r4
 80012a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012a8:	6028      	str	r0, [r5, #0]
 80012aa:	6069      	str	r1, [r5, #4]
 80012ac:	60aa      	str	r2, [r5, #8]
 80012ae:	60eb      	str	r3, [r5, #12]
 80012b0:	3410      	adds	r4, #16
 80012b2:	f10c 0c10 	add.w	ip, ip, #16
 80012b6:	4574      	cmp	r4, lr
 80012b8:	d1f3      	bne.n	80012a2 <tcp_http_mt+0xc86>
 80012ba:	4662      	mov	r2, ip
 80012bc:	4623      	mov	r3, r4
 80012be:	cb03      	ldmia	r3!, {r0, r1}
 80012c0:	6010      	str	r0, [r2, #0]
 80012c2:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino15'></td></tr>");
 80012c4:	6838      	ldr	r0, [r7, #0]
 80012c6:	f7fe ff43 	bl	8000150 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a45      	ldr	r2, [pc, #276]	; (80013e8 <tcp_http_mt+0xdcc>)
 80012d4:	4614      	mov	r4, r2
 80012d6:	469c      	mov	ip, r3
 80012d8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80012dc:	4665      	mov	r5, ip
 80012de:	4626      	mov	r6, r4
 80012e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012e2:	6028      	str	r0, [r5, #0]
 80012e4:	6069      	str	r1, [r5, #4]
 80012e6:	60aa      	str	r2, [r5, #8]
 80012e8:	60eb      	str	r3, [r5, #12]
 80012ea:	3410      	adds	r4, #16
 80012ec:	f10c 0c10 	add.w	ip, ip, #16
 80012f0:	4574      	cmp	r4, lr
 80012f2:	d1f3      	bne.n	80012dc <tcp_http_mt+0xcc0>
 80012f4:	4663      	mov	r3, ip
 80012f6:	4622      	mov	r2, r4
 80012f8:	6810      	ldr	r0, [r2, #0]
 80012fa:	6018      	str	r0, [r3, #0]
 80012fc:	8891      	ldrh	r1, [r2, #4]
 80012fe:	7992      	ldrb	r2, [r2, #6]
 8001300:	8099      	strh	r1, [r3, #4]
 8001302:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>16: <input type='text' name='ipDestino16'></td>");
 8001304:	6838      	ldr	r0, [r7, #0]
 8001306:	f7fe ff23 	bl	8000150 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	4413      	add	r3, r2
 8001312:	4a36      	ldr	r2, [pc, #216]	; (80013ec <tcp_http_mt+0xdd0>)
 8001314:	4614      	mov	r4, r2
 8001316:	469c      	mov	ip, r3
 8001318:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800131c:	4665      	mov	r5, ip
 800131e:	4626      	mov	r6, r4
 8001320:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001322:	6028      	str	r0, [r5, #0]
 8001324:	6069      	str	r1, [r5, #4]
 8001326:	60aa      	str	r2, [r5, #8]
 8001328:	60eb      	str	r3, [r5, #12]
 800132a:	3410      	adds	r4, #16
 800132c:	f10c 0c10 	add.w	ip, ip, #16
 8001330:	4574      	cmp	r4, lr
 8001332:	d1f3      	bne.n	800131c <tcp_http_mt+0xd00>
 8001334:	4662      	mov	r2, ip
 8001336:	4623      	mov	r3, r4
 8001338:	cb03      	ldmia	r3!, {r0, r1}
 800133a:	6010      	str	r0, [r2, #0]
 800133c:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino16'></td></tr>");
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f7fe ff06 	bl	8000150 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <tcp_http_mt+0xdd4>)
 800134e:	4614      	mov	r4, r2
 8001350:	469c      	mov	ip, r3
 8001352:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001356:	4665      	mov	r5, ip
 8001358:	4626      	mov	r6, r4
 800135a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800135c:	6028      	str	r0, [r5, #0]
 800135e:	6069      	str	r1, [r5, #4]
 8001360:	60aa      	str	r2, [r5, #8]
 8001362:	60eb      	str	r3, [r5, #12]
 8001364:	3410      	adds	r4, #16
 8001366:	f10c 0c10 	add.w	ip, ip, #16
 800136a:	4574      	cmp	r4, lr
 800136c:	d1f3      	bne.n	8001356 <tcp_http_mt+0xd3a>
 800136e:	4663      	mov	r3, ip
 8001370:	4622      	mov	r2, r4
 8001372:	6810      	ldr	r0, [r2, #0]
 8001374:	6018      	str	r0, [r3, #0]
 8001376:	8891      	ldrh	r1, [r2, #4]
 8001378:	7992      	ldrb	r2, [r2, #6]
 800137a:	8099      	strh	r1, [r3, #4]
 800137c:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "</table><br><button>Salvar</button><br><br><a href='http://192.168.0.231'>Voltar</a><br></center>");
 800137e:	6838      	ldr	r0, [r7, #0]
 8001380:	f7fe fee6 	bl	8000150 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <tcp_http_mt+0xdd8>)
 800138e:	4618      	mov	r0, r3
 8001390:	4611      	mov	r1, r2
 8001392:	2362      	movs	r3, #98	; 0x62
 8001394:	461a      	mov	r2, r3
 8001396:	f006 f894 	bl	80074c2 <memcpy>

							strcat((char*)buf, "</body>");
 800139a:	6838      	ldr	r0, [r7, #0]
 800139c:	f7fe fed8 	bl	8000150 <strlen>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4913      	ldr	r1, [pc, #76]	; (80013f8 <tcp_http_mt+0xddc>)
 80013aa:	461a      	mov	r2, r3
 80013ac:	460b      	mov	r3, r1
 80013ae:	cb03      	ldmia	r3!, {r0, r1}
 80013b0:	6010      	str	r0, [r2, #0]
 80013b2:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f7fe fecb 	bl	8000150 <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <tcp_http_mt+0xde0>)
 80013c4:	461a      	mov	r2, r3
 80013c6:	460b      	mov	r3, r1
 80013c8:	cb03      	ldmia	r3!, {r0, r1}
 80013ca:	6010      	str	r0, [r2, #0]
 80013cc:	6051      	str	r1, [r2, #4]
 80013ce:	e103      	b.n	80015d8 <tcp_http_mt+0xfbc>
 80013d0:	08007e08 	.word	0x08007e08
 80013d4:	08007e40 	.word	0x08007e40
 80013d8:	08007e78 	.word	0x08007e78
 80013dc:	08007eb0 	.word	0x08007eb0
 80013e0:	08007ee8 	.word	0x08007ee8
 80013e4:	08007f20 	.word	0x08007f20
 80013e8:	08007f58 	.word	0x08007f58
 80013ec:	08007f90 	.word	0x08007f90
 80013f0:	08007fc8 	.word	0x08007fc8
 80013f4:	08008000 	.word	0x08008000
 80013f8:	0800783c 	.word	0x0800783c
 80013fc:	08007844 	.word	0x08007844
						}
						else
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	4aaa      	ldr	r2, [pc, #680]	; (80016ac <tcp_http_mt+0x1090>)
 8001404:	4614      	mov	r4, r2
 8001406:	469c      	mov	ip, r3
 8001408:	f104 0e20 	add.w	lr, r4, #32
 800140c:	4665      	mov	r5, ip
 800140e:	4626      	mov	r6, r4
 8001410:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001412:	6028      	str	r0, [r5, #0]
 8001414:	6069      	str	r1, [r5, #4]
 8001416:	60aa      	str	r2, [r5, #8]
 8001418:	60eb      	str	r3, [r5, #12]
 800141a:	3410      	adds	r4, #16
 800141c:	f10c 0c10 	add.w	ip, ip, #16
 8001420:	4574      	cmp	r4, lr
 8001422:	d1f3      	bne.n	800140c <tcp_http_mt+0xdf0>
 8001424:	4665      	mov	r5, ip
 8001426:	4623      	mov	r3, r4
 8001428:	cb07      	ldmia	r3!, {r0, r1, r2}
 800142a:	6028      	str	r0, [r5, #0]
 800142c:	6069      	str	r1, [r5, #4]
 800142e:	60aa      	str	r2, [r5, #8]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f7fe fe8b 	bl	8000150 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	4a9b      	ldr	r2, [pc, #620]	; (80016b0 <tcp_http_mt+0x1094>)
 8001444:	461c      	mov	r4, r3
 8001446:	4613      	mov	r3, r2
 8001448:	cb07      	ldmia	r3!, {r0, r1, r2}
 800144a:	6020      	str	r0, [r4, #0]
 800144c:	6061      	str	r1, [r4, #4]
 800144e:	60a2      	str	r2, [r4, #8]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Escrava Config</title>");
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	f7fe fe7b 	bl	8000150 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	4413      	add	r3, r2
 8001462:	4a94      	ldr	r2, [pc, #592]	; (80016b4 <tcp_http_mt+0x1098>)
 8001464:	461d      	mov	r5, r3
 8001466:	4614      	mov	r4, r2
 8001468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146a:	6028      	str	r0, [r5, #0]
 800146c:	6069      	str	r1, [r5, #4]
 800146e:	60aa      	str	r2, [r5, #8]
 8001470:	60eb      	str	r3, [r5, #12]
 8001472:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001474:	6128      	str	r0, [r5, #16]
 8001476:	6169      	str	r1, [r5, #20]
 8001478:	61aa      	str	r2, [r5, #24]
 800147a:	8823      	ldrh	r3, [r4, #0]
 800147c:	83ab      	strh	r3, [r5, #28]
							strcat((char*)buf, "<link href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css' rel='stylesheet'></link>");
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f7fe fe66 	bl	8000150 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a8a      	ldr	r2, [pc, #552]	; (80016b8 <tcp_http_mt+0x109c>)
 800148e:	4618      	mov	r0, r3
 8001490:	4611      	mov	r1, r2
 8001492:	236c      	movs	r3, #108	; 0x6c
 8001494:	461a      	mov	r2, r3
 8001496:	f006 f814 	bl	80074c2 <memcpy>
							strcat((char*)buf, "</head>");
 800149a:	6838      	ldr	r0, [r7, #0]
 800149c:	f7fe fe58 	bl	8000150 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4984      	ldr	r1, [pc, #528]	; (80016bc <tcp_http_mt+0x10a0>)
 80014aa:	461a      	mov	r2, r3
 80014ac:	460b      	mov	r3, r1
 80014ae:	cb03      	ldmia	r3!, {r0, r1}
 80014b0:	6010      	str	r0, [r2, #0]
 80014b2:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 80014b4:	6838      	ldr	r0, [r7, #0]
 80014b6:	f7fe fe4b 	bl	8000150 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a7f      	ldr	r2, [pc, #508]	; (80016c0 <tcp_http_mt+0x10a4>)
 80014c4:	6810      	ldr	r0, [r2, #0]
 80014c6:	6018      	str	r0, [r3, #0]
 80014c8:	8891      	ldrh	r1, [r2, #4]
 80014ca:	7992      	ldrb	r2, [r2, #6]
 80014cc:	8099      	strh	r1, [r3, #4]
 80014ce:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<div class = 'entradas'>");
 80014d0:	6838      	ldr	r0, [r7, #0]
 80014d2:	f7fe fe3d 	bl	8000150 <strlen>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	4a79      	ldr	r2, [pc, #484]	; (80016c4 <tcp_http_mt+0x10a8>)
 80014e0:	461d      	mov	r5, r3
 80014e2:	4614      	mov	r4, r2
 80014e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e6:	6028      	str	r0, [r5, #0]
 80014e8:	6069      	str	r1, [r5, #4]
 80014ea:	60aa      	str	r2, [r5, #8]
 80014ec:	60eb      	str	r3, [r5, #12]
 80014ee:	cc03      	ldmia	r4!, {r0, r1}
 80014f0:	6128      	str	r0, [r5, #16]
 80014f2:	6169      	str	r1, [r5, #20]
 80014f4:	7823      	ldrb	r3, [r4, #0]
 80014f6:	762b      	strb	r3, [r5, #24]

							strcat((char*)buf, "<b><center>Menus para configuracao</b><br><br>");
 80014f8:	6838      	ldr	r0, [r7, #0]
 80014fa:	f7fe fe29 	bl	8000150 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	4413      	add	r3, r2
 8001506:	4a70      	ldr	r2, [pc, #448]	; (80016c8 <tcp_http_mt+0x10ac>)
 8001508:	4615      	mov	r5, r2
 800150a:	469c      	mov	ip, r3
 800150c:	f105 0e20 	add.w	lr, r5, #32
 8001510:	4664      	mov	r4, ip
 8001512:	462e      	mov	r6, r5
 8001514:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001516:	6020      	str	r0, [r4, #0]
 8001518:	6061      	str	r1, [r4, #4]
 800151a:	60a2      	str	r2, [r4, #8]
 800151c:	60e3      	str	r3, [r4, #12]
 800151e:	3510      	adds	r5, #16
 8001520:	f10c 0c10 	add.w	ip, ip, #16
 8001524:	4575      	cmp	r5, lr
 8001526:	d1f3      	bne.n	8001510 <tcp_http_mt+0xef4>
 8001528:	4664      	mov	r4, ip
 800152a:	462b      	mov	r3, r5
 800152c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800152e:	6020      	str	r0, [r4, #0]
 8001530:	6061      	str	r1, [r4, #4]
 8001532:	60a2      	str	r2, [r4, #8]
 8001534:	881a      	ldrh	r2, [r3, #0]
 8001536:	789b      	ldrb	r3, [r3, #2]
 8001538:	81a2      	strh	r2, [r4, #12]
 800153a:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "<a href='http://192.168.0.231/rede'>Configurar rede</a><br><br>");
 800153c:	6838      	ldr	r0, [r7, #0]
 800153e:	f7fe fe07 	bl	8000150 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	4413      	add	r3, r2
 800154a:	4a60      	ldr	r2, [pc, #384]	; (80016cc <tcp_http_mt+0x10b0>)
 800154c:	4614      	mov	r4, r2
 800154e:	469c      	mov	ip, r3
 8001550:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001554:	4665      	mov	r5, ip
 8001556:	4626      	mov	r6, r4
 8001558:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800155a:	6028      	str	r0, [r5, #0]
 800155c:	6069      	str	r1, [r5, #4]
 800155e:	60aa      	str	r2, [r5, #8]
 8001560:	60eb      	str	r3, [r5, #12]
 8001562:	3410      	adds	r4, #16
 8001564:	f10c 0c10 	add.w	ip, ip, #16
 8001568:	4574      	cmp	r4, lr
 800156a:	d1f3      	bne.n	8001554 <tcp_http_mt+0xf38>
							strcat((char*)buf, "<a href='http://192.168.0.231/interfaces'>Configurar interfaces\n</a><br>");
 800156c:	6838      	ldr	r0, [r7, #0]
 800156e:	f7fe fdef 	bl	8000150 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	4a55      	ldr	r2, [pc, #340]	; (80016d0 <tcp_http_mt+0x10b4>)
 800157c:	4618      	mov	r0, r3
 800157e:	4611      	mov	r1, r2
 8001580:	2349      	movs	r3, #73	; 0x49
 8001582:	461a      	mov	r2, r3
 8001584:	f005 ff9d 	bl	80074c2 <memcpy>

							strcat((char*)buf, "</div>");
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f7fe fde1 	bl	8000150 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	4413      	add	r3, r2
 8001596:	4a4f      	ldr	r2, [pc, #316]	; (80016d4 <tcp_http_mt+0x10b8>)
 8001598:	6810      	ldr	r0, [r2, #0]
 800159a:	6018      	str	r0, [r3, #0]
 800159c:	8891      	ldrh	r1, [r2, #4]
 800159e:	7992      	ldrb	r2, [r2, #6]
 80015a0:	8099      	strh	r1, [r3, #4]
 80015a2:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "</body>");
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7fe fdd3 	bl	8000150 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	4949      	ldr	r1, [pc, #292]	; (80016d8 <tcp_http_mt+0x10bc>)
 80015b4:	461a      	mov	r2, r3
 80015b6:	460b      	mov	r3, r1
 80015b8:	cb03      	ldmia	r3!, {r0, r1}
 80015ba:	6010      	str	r0, [r2, #0]
 80015bc:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f7fe fdc6 	bl	8000150 <strlen>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4943      	ldr	r1, [pc, #268]	; (80016dc <tcp_http_mt+0x10c0>)
 80015ce:	461a      	mov	r2, r3
 80015d0:	460b      	mov	r3, r1
 80015d2:	cb03      	ldmia	r3!, {r0, r1}
 80015d4:	6010      	str	r0, [r2, #0]
 80015d6:	6051      	str	r1, [r2, #4]
						}

						blocklen = strlen((char*)buf);
 80015d8:	6838      	ldr	r0, [r7, #0]
 80015da:	f7fe fdb9 	bl	8000150 <strlen>
 80015de:	4603      	mov	r3, r0
 80015e0:	833b      	strh	r3, [r7, #24]

						ret = send(sn,buf,blocklen);
 80015e2:	8b3a      	ldrh	r2, [r7, #24]
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fc6f 	bl	8001ecc <send>
 80015ee:	6178      	str	r0, [r7, #20]
						if(ret < 0)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da05      	bge.n	8001602 <tcp_http_mt+0xfe6>
						{
							close(sn);
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fb2f 	bl	8001c5c <close>
							return ret;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	e04f      	b.n	80016a2 <tcp_http_mt+0x1086>
						}
						else
						{
							HTTP_reset(sn);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fff1 	bl	80005ec <HTTP_reset>
							disconnect(sn);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fbe7 	bl	8001de0 <disconnect>
					if(flagHtmlGen == 1)
 8001612:	e008      	b.n	8001626 <tcp_http_mt+0x100a>
						}
					}
				}
				else
				{
					HTTP_reset(sn);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ffe8 	bl	80005ec <HTTP_reset>
					disconnect(sn);
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fbde 	bl	8001de0 <disconnect>
				}

        	  }
         }
         break;
 8001624:	e035      	b.n	8001692 <tcp_http_mt+0x1076>
 8001626:	e034      	b.n	8001692 <tcp_http_mt+0x1076>
      case SOCK_CLOSE_WAIT :

    	  HTTP_reset(sn);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ffde 	bl	80005ec <HTTP_reset>

         if((ret=disconnect(sn)) != SOCK_OK)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fbd4 	bl	8001de0 <disconnect>
 8001638:	4603      	mov	r3, r0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d029      	beq.n	8001696 <tcp_http_mt+0x107a>
         return ret;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	e02d      	b.n	80016a2 <tcp_http_mt+0x1086>

         break;
      case SOCK_INIT :

    	  HTTP_reset(sn);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ffcf 	bl	80005ec <HTTP_reset>

         if( (ret = listen(sn)) != SOCK_OK) return ret;
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fb5f 	bl	8001d14 <listen>
 8001656:	4603      	mov	r3, r0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d01c      	beq.n	800169a <tcp_http_mt+0x107e>
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	e01e      	b.n	80016a2 <tcp_http_mt+0x1086>
         break;
      case SOCK_CLOSED:

    	  HTTP_reset(sn);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ffc0 	bl	80005ec <HTTP_reset>

         if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)
 800166c:	88ba      	ldrh	r2, [r7, #4]
 800166e:	79f8      	ldrb	r0, [r7, #7]
 8001670:	2300      	movs	r3, #0
 8001672:	2101      	movs	r1, #1
 8001674:	f000 f9fa 	bl	8001a6c <socket>
 8001678:	4603      	mov	r3, r0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	d00c      	beq.n	800169e <tcp_http_mt+0x1082>
         return ret;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	e00c      	b.n	80016a2 <tcp_http_mt+0x1086>

         break;

      default:
    	  HTTP_reset(sn);
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ffae 	bl	80005ec <HTTP_reset>
         break;
 8001690:	e006      	b.n	80016a0 <tcp_http_mt+0x1084>
         break;
 8001692:	bf00      	nop
 8001694:	e004      	b.n	80016a0 <tcp_http_mt+0x1084>
         break;
 8001696:	bf00      	nop
 8001698:	e002      	b.n	80016a0 <tcp_http_mt+0x1084>
         break;
 800169a:	bf00      	nop
 800169c:	e000      	b.n	80016a0 <tcp_http_mt+0x1084>
         break;
 800169e:	bf00      	nop
   }
   return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	080075c0 	.word	0x080075c0
 80016b0:	080075f0 	.word	0x080075f0
 80016b4:	08008064 	.word	0x08008064
 80016b8:	08008084 	.word	0x08008084
 80016bc:	08007620 	.word	0x08007620
 80016c0:	08007628 	.word	0x08007628
 80016c4:	080080f0 	.word	0x080080f0
 80016c8:	0800810c 	.word	0x0800810c
 80016cc:	0800813c 	.word	0x0800813c
 80016d0:	0800817c 	.word	0x0800817c
 80016d4:	080081c8 	.word	0x080081c8
 80016d8:	0800783c 	.word	0x0800783c
 80016dc:	08007844 	.word	0x08007844

080016e0 <StartEthernet>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEthernet */
void StartEthernet(void *argument)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t i;
  /* Infinite loop */
  for(;;)
  {
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 80016e8:	2304      	movs	r3, #4
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e008      	b.n	8001700 <StartEthernet+0x20>
	  {
	  	tcp_http_mt(i, gDATABUF, 80);
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	2250      	movs	r2, #80	; 0x50
 80016f2:	490d      	ldr	r1, [pc, #52]	; (8001728 <StartEthernet+0x48>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff91 	bl	800061c <tcp_http_mt>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	3301      	adds	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	2b07      	cmp	r3, #7
 8001704:	d9f3      	bls.n	80016ee <StartEthernet+0xe>
	  }
	  //4 sockets para modbus TCP
	  for(i=0;i<4;i++)
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e009      	b.n	8001720 <StartEthernet+0x40>
	  {
	  	tcp_http_mt(i, gDATABUF, 502);
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8001712:	4905      	ldr	r1, [pc, #20]	; (8001728 <StartEthernet+0x48>)
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff81 	bl	800061c <tcp_http_mt>
	  for(i=0;i<4;i++)
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	3301      	adds	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d9f2      	bls.n	800170c <StartEthernet+0x2c>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 8001726:	e7df      	b.n	80016e8 <StartEthernet+0x8>
 8001728:	20001c1c 	.word	0x20001c1c

0800172c <StartReadInput1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput1 */
void StartReadInput1(void *argument)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001734:	2001      	movs	r0, #1
 8001736:	f003 fb09 	bl	8004d4c <osDelay>
 800173a:	e7fb      	b.n	8001734 <StartReadInput1+0x8>

0800173c <StartReadInput2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput2 */
void StartReadInput2(void *argument)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f003 fb01 	bl	8004d4c <osDelay>
 800174a:	e7fb      	b.n	8001744 <StartReadInput2+0x8>

0800174c <StartReadInput3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput3 */
void StartReadInput3(void *argument)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001754:	2001      	movs	r0, #1
 8001756:	f003 faf9 	bl	8004d4c <osDelay>
 800175a:	e7fb      	b.n	8001754 <StartReadInput3+0x8>

0800175c <StartReadInput4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput4 */
void StartReadInput4(void *argument)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput4 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001764:	2001      	movs	r0, #1
 8001766:	f003 faf1 	bl	8004d4c <osDelay>
 800176a:	e7fb      	b.n	8001764 <StartReadInput4+0x8>

0800176c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800177e:	f001 fccd 	bl	800311c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40012c00 	.word	0x40012c00

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_MspInit+0x68>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_MspInit+0x68>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_MspInit+0x68>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_MspInit+0x68>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_MspInit+0x68>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_MspInit+0x68>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	210f      	movs	r1, #15
 80017d6:	f06f 0001 	mvn.w	r0, #1
 80017da:	f001 fd70 	bl	80032be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_MspInit+0x6c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_MspInit+0x6c>)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	40010000 	.word	0x40010000

0800180c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a16      	ldr	r2, [pc, #88]	; (8001880 <HAL_I2C_MspInit+0x74>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d124      	bne.n	8001876 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_I2C_MspInit+0x78>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <HAL_I2C_MspInit+0x78>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_I2C_MspInit+0x78>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001844:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184a:	2312      	movs	r3, #18
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4619      	mov	r1, r3
 8001858:	480b      	ldr	r0, [pc, #44]	; (8001888 <HAL_I2C_MspInit+0x7c>)
 800185a:	f001 fd5b 	bl	8003314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_I2C_MspInit+0x78>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a08      	ldr	r2, [pc, #32]	; (8001884 <HAL_I2C_MspInit+0x78>)
 8001864:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_I2C_MspInit+0x78>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40005800 	.word	0x40005800
 8001884:	40021000 	.word	0x40021000
 8001888:	40010c00 	.word	0x40010c00

0800188c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <HAL_SPI_MspInit+0x8c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d131      	bne.n	8001910 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_SPI_MspInit+0x90>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	4a1a      	ldr	r2, [pc, #104]	; (800191c <HAL_SPI_MspInit+0x90>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	61d3      	str	r3, [r2, #28]
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_SPI_MspInit+0x90>)
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_SPI_MspInit+0x90>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <HAL_SPI_MspInit+0x90>)
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_SPI_MspInit+0x90>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 80018dc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80018e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	4619      	mov	r1, r3
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <HAL_SPI_MspInit+0x94>)
 80018f2:	f001 fd0f 	bl	8003314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 80018f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4619      	mov	r1, r3
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <HAL_SPI_MspInit+0x94>)
 800190c:	f001 fd02 	bl	8003314 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001910:	bf00      	nop
 8001912:	3720      	adds	r7, #32
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40003800 	.word	0x40003800
 800191c:	40021000 	.word	0x40021000
 8001920:	40010c00 	.word	0x40010c00

08001924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	2019      	movs	r0, #25
 800193a:	f001 fcc0 	bl	80032be <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800193e:	2019      	movs	r0, #25
 8001940:	f001 fcd9 	bl	80032f6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <HAL_InitTick+0x9c>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <HAL_InitTick+0x9c>)
 800194a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_InitTick+0x9c>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800195c:	f107 0210 	add.w	r2, r7, #16
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fb7c 	bl	8004064 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800196c:	f002 fb66 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 8001970:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001974:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <HAL_InitTick+0xa0>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0c9b      	lsrs	r3, r3, #18
 800197c:	3b01      	subs	r3, #1
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_InitTick+0xa4>)
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <HAL_InitTick+0xa8>)
 8001984:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_InitTick+0xa4>)
 8001988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800198c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <HAL_InitTick+0xa4>)
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_InitTick+0xa4>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_InitTick+0xa4>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019a0:	4809      	ldr	r0, [pc, #36]	; (80019c8 <HAL_InitTick+0xa4>)
 80019a2:	f002 fe79 	bl	8004698 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d104      	bne.n	80019b6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019ac:	4806      	ldr	r0, [pc, #24]	; (80019c8 <HAL_InitTick+0xa4>)
 80019ae:	f002 fecb 	bl	8004748 <HAL_TIM_Base_Start_IT>
 80019b2:	4603      	mov	r3, r0
 80019b4:	e000      	b.n	80019b8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3730      	adds	r7, #48	; 0x30
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	431bde83 	.word	0x431bde83
 80019c8:	20002c48 	.word	0x20002c48
 80019cc:	40012c00 	.word	0x40012c00

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <HardFault_Handler+0x4>

080019e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <MemManage_Handler+0x4>

080019e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <BusFault_Handler+0x4>

080019ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <UsageFault_Handler+0x4>

080019f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <TIM1_UP_IRQHandler+0x10>)
 8001a06:	f002 fef1 	bl	80047ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20002c48 	.word	0x20002c48

08001a14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a20:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a22:	e003      	b.n	8001a2c <LoopCopyDataInit>

08001a24 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a26:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a28:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a2a:	3104      	adds	r1, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a2c:	480a      	ldr	r0, [pc, #40]	; (8001a58 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a30:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a32:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a34:	d3f6      	bcc.n	8001a24 <CopyDataInit>
  ldr r2, =_sbss
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a38:	e002      	b.n	8001a40 <LoopFillZerobss>

08001a3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a3c:	f842 3b04 	str.w	r3, [r2], #4

08001a40 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a42:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a44:	d3f9      	bcc.n	8001a3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a46:	f7ff ffe5 	bl	8001a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a4a:	f005 fd07 	bl	800745c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a4e:	f7fe fb87 	bl	8000160 <main>
  bx lr
 8001a52:	4770      	bx	lr
  ldr r3, =_sidata
 8001a54:	080082d0 	.word	0x080082d0
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a5c:	2000004c 	.word	0x2000004c
  ldr r2, =_sbss
 8001a60:	2000004c 	.word	0x2000004c
  ldr r3, = _ebss
 8001a64:	20002cd4 	.word	0x20002cd4

08001a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC1_2_IRQHandler>
	...

08001a6c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4604      	mov	r4, r0
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71bb      	strb	r3, [r7, #6]
 8001a82:	460b      	mov	r3, r1
 8001a84:	80bb      	strh	r3, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d902      	bls.n	8001a96 <socket+0x2a>
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
 8001a94:	e0d3      	b.n	8001c3e <socket+0x1d2>
	switch(protocol)
 8001a96:	79bb      	ldrb	r3, [r7, #6]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	db03      	blt.n	8001aa4 <socket+0x38>
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	dd04      	ble.n	8001aaa <socket+0x3e>
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d002      	beq.n	8001aaa <socket+0x3e>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001aa4:	f06f 0304 	mvn.w	r3, #4
 8001aa8:	e0c9      	b.n	8001c3e <socket+0x1d2>
         break;
 8001aaa:	bf00      	nop
	}
	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f003 0306 	and.w	r3, r3, #6
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <socket+0x50>
 8001ab6:	f06f 0305 	mvn.w	r3, #5
 8001aba:	e0c0      	b.n	8001c3e <socket+0x1d2>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif

	if(flag != 0)
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d025      	beq.n	8001b0e <socket+0xa2>
	{
   	switch(protocol)
 8001ac2:	79bb      	ldrb	r3, [r7, #6]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d002      	beq.n	8001ace <socket+0x62>
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d008      	beq.n	8001ade <socket+0x72>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001acc:	e024      	b.n	8001b18 <socket+0xac>
   	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d11c      	bne.n	8001b12 <socket+0xa6>
 8001ad8:	f06f 0305 	mvn.w	r3, #5
 8001adc:	e0af      	b.n	8001c3e <socket+0x1d2>
   	      if(flag & SF_IGMP_VER2)
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <socket+0x8a>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db02      	blt.n	8001af6 <socket+0x8a>
 8001af0:	f06f 0305 	mvn.w	r3, #5
 8001af4:	e0a3      	b.n	8001c3e <socket+0x1d2>
      	      if(flag & SF_UNI_BLOCK)
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00a      	beq.n	8001b16 <socket+0xaa>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db06      	blt.n	8001b16 <socket+0xaa>
 8001b08:	f06f 0305 	mvn.w	r3, #5
 8001b0c:	e097      	b.n	8001c3e <socket+0x1d2>
   	}
   }
 8001b0e:	bf00      	nop
 8001b10:	e002      	b.n	8001b18 <socket+0xac>
   	      break;
 8001b12:	bf00      	nop
 8001b14:	e000      	b.n	8001b18 <socket+0xac>
   	      break;
 8001b16:	bf00      	nop
	close(sn);
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f89e 	bl	8001c5c <close>
	setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	3301      	adds	r3, #1
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b2e:	f023 030f 	bic.w	r3, r3, #15
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f000 fba4 	bl	800228c <WIZCHIP_WRITE>
	if(!port)
 8001b44:	88bb      	ldrh	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d110      	bne.n	8001b6c <socket+0x100>
	{
	   port = sock_any_port++;
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <socket+0x1dc>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	b291      	uxth	r1, r2
 8001b52:	4a3d      	ldr	r2, [pc, #244]	; (8001c48 <socket+0x1dc>)
 8001b54:	8011      	strh	r1, [r2, #0]
 8001b56:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001b58:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <socket+0x1dc>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d103      	bne.n	8001b6c <socket+0x100>
 8001b64:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <socket+0x1dc>)
 8001b66:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001b6a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	3301      	adds	r3, #1
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b78:	461a      	mov	r2, r3
 8001b7a:	88bb      	ldrh	r3, [r7, #4]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f000 fb81 	bl	800228c <WIZCHIP_WRITE>
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	3301      	adds	r3, #1
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b96:	461a      	mov	r2, r3
 8001b98:	88bb      	ldrh	r3, [r7, #4]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	f000 fb74 	bl	800228c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	3301      	adds	r3, #1
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fb6a 	bl	800228c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001bb8:	bf00      	nop
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fb30 	bl	800222c <WIZCHIP_READ>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f3      	bne.n	8001bba <socket+0x14e>
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	f003 0201 	and.w	r2, r3, #1
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <socket+0x1e0>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <socket+0x1e0>)
 8001bee:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <socket+0x1e4>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4013      	ands	r3, r2
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <socket+0x1e4>)
 8001c0c:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <socket+0x1e8>)
 8001c12:	2100      	movs	r1, #0
 8001c14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = 0;
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4a0f      	ldr	r2, [pc, #60]	; (8001c58 <socket+0x1ec>)
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001c20:	bf00      	nop
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	3301      	adds	r3, #1
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fafc 	bl	800222c <WIZCHIP_READ>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f3      	beq.n	8001c22 <socket+0x1b6>
   return (int8_t)sn;
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000001c 	.word	0x2000001c
 8001c4c:	20000068 	.word	0x20000068
 8001c50:	2000006a 	.word	0x2000006a
 8001c54:	2000006c 	.word	0x2000006c
 8001c58:	2000007c 	.word	0x2000007c

08001c5c <close>:

int8_t close(uint8_t sn)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d902      	bls.n	8001c72 <close+0x16>
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	e046      	b.n	8001d00 <close+0xa4>

	setSn_CR(sn,Sn_CR_CLOSE);
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	3301      	adds	r3, #1
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c7e:	2110      	movs	r1, #16
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fb03 	bl	800228c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001c86:	bf00      	nop
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fac9 	bl	800222c <WIZCHIP_READ>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f3      	bne.n	8001c88 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001cac:	211f      	movs	r1, #31
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 faec 	bl	800228c <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <close+0xac>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	b21b      	sxth	r3, r3
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <close+0xac>)
 8001cd0:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <close+0xb0>)
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <close+0xb4>)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001ce4:	bf00      	nop
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	3301      	adds	r3, #1
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fa9a 	bl	800222c <WIZCHIP_READ>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f3      	bne.n	8001ce6 <close+0x8a>
	return SOCK_OK;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	2000006a 	.word	0x2000006a
 8001d0c:	2000006c 	.word	0x2000006c
 8001d10:	2000007c 	.word	0x2000007c

08001d14 <listen>:

int8_t listen(uint8_t sn)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d902      	bls.n	8001d2a <listen+0x16>
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e055      	b.n	8001dd6 <listen+0xc2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	3301      	adds	r3, #1
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fa7a 	bl	800222c <WIZCHIP_READ>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d002      	beq.n	8001d48 <listen+0x34>
 8001d42:	f06f 0304 	mvn.w	r3, #4
 8001d46:	e046      	b.n	8001dd6 <listen+0xc2>
	CHECK_SOCKINIT();
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fa69 	bl	800222c <WIZCHIP_READ>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b13      	cmp	r3, #19
 8001d5e:	d002      	beq.n	8001d66 <listen+0x52>
 8001d60:	f06f 0302 	mvn.w	r3, #2
 8001d64:	e037      	b.n	8001dd6 <listen+0xc2>
	setSn_CR(sn,Sn_CR_LISTEN);
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d72:	2102      	movs	r1, #2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fa89 	bl	800228c <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8001d7a:	bf00      	nop
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	3301      	adds	r3, #1
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fa4f 	bl	800222c <WIZCHIP_READ>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f3      	bne.n	8001d7c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001d94:	e012      	b.n	8001dbc <listen+0xa8>
   {
      if(getSn_CR(sn) == SOCK_CLOSED)
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fa42 	bl	800222c <WIZCHIP_READ>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d106      	bne.n	8001dbc <listen+0xa8>
      {
         close(sn);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff53 	bl	8001c5c <close>
         return SOCKERR_SOCKCLOSED;
 8001db6:	f06f 0303 	mvn.w	r3, #3
 8001dba:	e00c      	b.n	8001dd6 <listen+0xc2>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fa2f 	bl	800222c <WIZCHIP_READ>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b14      	cmp	r3, #20
 8001dd2:	d1e0      	bne.n	8001d96 <listen+0x82>
      }
   }
   return SOCK_OK;
 8001dd4:	2301      	movs	r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <disconnect>:

   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d902      	bls.n	8001df6 <disconnect+0x16>
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	e062      	b.n	8001ebc <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fa14 	bl	800222c <WIZCHIP_READ>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d002      	beq.n	8001e14 <disconnect+0x34>
 8001e0e:	f06f 0304 	mvn.w	r3, #4
 8001e12:	e053      	b.n	8001ebc <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	3301      	adds	r3, #1
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e20:	2108      	movs	r1, #8
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fa32 	bl	800228c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001e28:	bf00      	nop
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	3301      	adds	r3, #1
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f9f8 	bl	800222c <WIZCHIP_READ>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f3      	bne.n	8001e2a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2201      	movs	r2, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	b21b      	sxth	r3, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <disconnect+0xe4>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	4013      	ands	r3, r2
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <disconnect+0xe4>)
 8001e5e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <disconnect+0xe8>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	fa42 f303 	asr.w	r3, r2, r3
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d016      	beq.n	8001ea2 <disconnect+0xc2>
 8001e74:	2300      	movs	r3, #0
 8001e76:	e021      	b.n	8001ebc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 f9d1 	bl	800222c <WIZCHIP_READ>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <disconnect+0xc2>
	   {
	      close(sn);
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fee0 	bl	8001c5c <close>
	      return SOCKERR_TIMEOUT;
 8001e9c:	f06f 030c 	mvn.w	r3, #12
 8001ea0:	e00c      	b.n	8001ebc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f9bc 	bl	800222c <WIZCHIP_READ>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1de      	bne.n	8001e78 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000006a 	.word	0x2000006a
 8001ec8:	20000068 	.word	0x20000068

08001ecc <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	81bb      	strh	r3, [r7, #12]

   CHECK_SOCKNUM();
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d902      	bls.n	8001ef0 <send+0x24>
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e0de      	b.n	80020ae <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f997 	bl	800222c <WIZCHIP_READ>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d002      	beq.n	8001f0e <send+0x42>
 8001f08:	f06f 0304 	mvn.w	r3, #4
 8001f0c:	e0cf      	b.n	80020ae <send+0x1e2>
   CHECK_SOCKDATA();
 8001f0e:	88bb      	ldrh	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <send+0x4e>
 8001f14:	f06f 030d 	mvn.w	r3, #13
 8001f18:	e0c9      	b.n	80020ae <send+0x1e2>
   tmp = getSn_SR(sn);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	3301      	adds	r3, #1
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f980 	bl	800222c <WIZCHIP_READ>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	2b17      	cmp	r3, #23
 8001f34:	d005      	beq.n	8001f42 <send+0x76>
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	2b1c      	cmp	r3, #28
 8001f3a:	d002      	beq.n	8001f42 <send+0x76>
 8001f3c:	f06f 0306 	mvn.w	r3, #6
 8001f40:	e0b5      	b.n	80020ae <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001f42:	4b5d      	ldr	r3, [pc, #372]	; (80020b8 <send+0x1ec>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	fa42 f303 	asr.w	r3, r2, r3
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d039      	beq.n	8001fca <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f962 	bl	800222c <WIZCHIP_READ>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d019      	beq.n	8001fae <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	3301      	adds	r3, #1
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f86:	2110      	movs	r1, #16
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 f97f 	bl	800228c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2201      	movs	r2, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <send+0x1ec>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <send+0x1ec>)
 8001faa:	801a      	strh	r2, [r3, #0]
 8001fac:	e00d      	b.n	8001fca <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <send+0xfa>
      {
         close(sn);
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe4e 	bl	8001c5c <close>
         return SOCKERR_TIMEOUT;
 8001fc0:	f06f 030c 	mvn.w	r3, #12
 8001fc4:	e073      	b.n	80020ae <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e071      	b.n	80020ae <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	3301      	adds	r3, #1
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f928 	bl	800222c <WIZCHIP_READ>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	029b      	lsls	r3, r3, #10
 8001fe2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001fe4:	88ba      	ldrh	r2, [r7, #4]
 8001fe6:	89bb      	ldrh	r3, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d901      	bls.n	8001ff0 <send+0x124>
 8001fec:	89bb      	ldrh	r3, [r7, #12]
 8001fee:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fa0c 	bl	8002410 <getSn_TX_FSR>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	3301      	adds	r3, #1
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f90f 	bl	800222c <WIZCHIP_READ>
 800200e:	4603      	mov	r3, r0
 8002010:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b17      	cmp	r3, #23
 8002016:	d009      	beq.n	800202c <send+0x160>
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	2b1c      	cmp	r3, #28
 800201c:	d006      	beq.n	800202c <send+0x160>
      {
         close(sn);
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fe1b 	bl	8001c5c <close>
         return SOCKERR_SOCKSTATUS;
 8002026:	f06f 0306 	mvn.w	r3, #6
 800202a:	e040      	b.n	80020ae <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <send+0x1f0>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	fa42 f303 	asr.w	r3, r2, r3
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <send+0x180>
 8002040:	88ba      	ldrh	r2, [r7, #4]
 8002042:	89bb      	ldrh	r3, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d901      	bls.n	800204c <send+0x180>
 8002048:	2300      	movs	r3, #0
 800204a:	e030      	b.n	80020ae <send+0x1e2>
      if(len <= freesize) break;
 800204c:	88ba      	ldrh	r2, [r7, #4]
 800204e:	89bb      	ldrh	r3, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d900      	bls.n	8002056 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8002054:	e7cc      	b.n	8001ff0 <send+0x124>
      if(len <= freesize) break;
 8002056:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002058:	88ba      	ldrh	r2, [r7, #4]
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fa6c 	bl	800253c <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	3301      	adds	r3, #1
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002070:	2120      	movs	r1, #32
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f90a 	bl	800228c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002078:	bf00      	nop
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	3301      	adds	r3, #1
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f8d0 	bl	800222c <WIZCHIP_READ>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f3      	bne.n	800207a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2201      	movs	r2, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	b21a      	sxth	r2, r3
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <send+0x1ec>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <send+0x1ec>)
 80020aa:	801a      	strh	r2, [r3, #0]
   return len;
 80020ac:	88bb      	ldrh	r3, [r7, #4]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000006a 	.word	0x2000006a
 80020bc:	20000068 	.word	0x20000068

080020c0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	4613      	mov	r3, r2
 80020ce:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	81bb      	strh	r3, [r7, #12]
   CHECK_SOCKNUM();
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d902      	bls.n	80020e4 <recv+0x24>
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e09c      	b.n	800221e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	3301      	adds	r3, #1
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 f89d 	bl	800222c <WIZCHIP_READ>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d002      	beq.n	8002102 <recv+0x42>
 80020fc:	f06f 0304 	mvn.w	r3, #4
 8002100:	e08d      	b.n	800221e <recv+0x15e>
   CHECK_SOCKDATA();
 8002102:	88bb      	ldrh	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <recv+0x4e>
 8002108:	f06f 030d 	mvn.w	r3, #13
 800210c:	e087      	b.n	800221e <recv+0x15e>

   recvsize = getSn_RxMAX(sn);
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	3301      	adds	r3, #1
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f886 	bl	800222c <WIZCHIP_READ>
 8002120:	4603      	mov	r3, r0
 8002122:	b29b      	uxth	r3, r3
 8002124:	029b      	lsls	r3, r3, #10
 8002126:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002128:	89ba      	ldrh	r2, [r7, #12]
 800212a:	88bb      	ldrh	r3, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	d201      	bcs.n	8002134 <recv+0x74>
 8002130:	89bb      	ldrh	r3, [r7, #12]
 8002132:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f9b5 	bl	80024a6 <getSn_RX_RSR>
 800213c:	4603      	mov	r3, r0
 800213e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	3301      	adds	r3, #1
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800214c:	4618      	mov	r0, r3
 800214e:	f000 f86d 	bl	800222c <WIZCHIP_READ>
 8002152:	4603      	mov	r3, r0
 8002154:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	2b17      	cmp	r3, #23
 800215a:	d026      	beq.n	80021aa <recv+0xea>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b1c      	cmp	r3, #28
 8002160:	d11c      	bne.n	800219c <recv+0xdc>
         {
            if(recvsize != 0) break;
 8002162:	89bb      	ldrh	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d133      	bne.n	80021d0 <recv+0x110>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f950 	bl	8002410 <getSn_TX_FSR>
 8002170:	4603      	mov	r3, r0
 8002172:	461c      	mov	r4, r3
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	3301      	adds	r3, #1
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f853 	bl	800222c <WIZCHIP_READ>
 8002186:	4603      	mov	r3, r0
 8002188:	029b      	lsls	r3, r3, #10
 800218a:	429c      	cmp	r4, r3
 800218c:	d10d      	bne.n	80021aa <recv+0xea>
            {
               close(sn);
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fd63 	bl	8001c5c <close>
               return SOCKERR_SOCKSTATUS;
 8002196:	f06f 0306 	mvn.w	r3, #6
 800219a:	e040      	b.n	800221e <recv+0x15e>
            }
         }
         else
         {
            close(sn);
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fd5c 	bl	8001c5c <close>
            return SOCKERR_SOCKSTATUS;
 80021a4:	f06f 0306 	mvn.w	r3, #6
 80021a8:	e039      	b.n	800221e <recv+0x15e>
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <recv+0x168>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	fa42 f303 	asr.w	r3, r2, r3
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <recv+0x108>
 80021be:	89bb      	ldrh	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <recv+0x108>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e02a      	b.n	800221e <recv+0x15e>
      if(recvsize != 0) break;
 80021c8:	89bb      	ldrh	r3, [r7, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <recv+0x114>
      recvsize = getSn_RX_RSR(sn);
 80021ce:	e7b1      	b.n	8002134 <recv+0x74>
            if(recvsize != 0) break;
 80021d0:	bf00      	nop
 80021d2:	e000      	b.n	80021d6 <recv+0x116>
      if(recvsize != 0) break;
 80021d4:	bf00      	nop
   };
   if(recvsize < len) len = recvsize;
 80021d6:	89ba      	ldrh	r2, [r7, #12]
 80021d8:	88bb      	ldrh	r3, [r7, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d201      	bcs.n	80021e2 <recv+0x122>
 80021de:	89bb      	ldrh	r3, [r7, #12]
 80021e0:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80021e2:	88ba      	ldrh	r2, [r7, #4]
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fa03 	bl	80025f4 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	3301      	adds	r3, #1
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80021fa:	2140      	movs	r1, #64	; 0x40
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f845 	bl	800228c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002202:	bf00      	nop
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	3301      	adds	r3, #1
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f80b 	bl	800222c <WIZCHIP_READ>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f3      	bne.n	8002204 <recv+0x144>
   return len;
 800221c:	88bb      	ldrh	r3, [r7, #4]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}
 8002226:	bf00      	nop
 8002228:	20000068 	.word	0x20000068

0800222c <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <WIZCHIP_READ+0x5c>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4798      	blx	r3
   WIZCHIP.CS._select();
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <WIZCHIP_READ+0x5c>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	4798      	blx	r3
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <WIZCHIP_READ+0x5c>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	0c12      	lsrs	r2, r2, #16
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	4610      	mov	r0, r2
 800224c:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <WIZCHIP_READ+0x5c>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	4610      	mov	r0, r2
 800225a:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <WIZCHIP_READ+0x5c>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	4610      	mov	r0, r2
 8002266:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <WIZCHIP_READ+0x5c>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4798      	blx	r3
 800226e:	4603      	mov	r3, r0
 8002270:	73fb      	strb	r3, [r7, #15]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"
#endif

   WIZCHIP.CS._deselect();
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <WIZCHIP_READ+0x5c>)
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <WIZCHIP_READ+0x5c>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4798      	blx	r3
   return ret;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000020 	.word	0x20000020

0800228c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
    WIZCHIP_CRITICAL_ENTER();
 8002298:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <WIZCHIP_WRITE+0x68>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4798      	blx	r3
    WIZCHIP.CS._select();
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <WIZCHIP_WRITE+0x68>)
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	607b      	str	r3, [r7, #4]
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <WIZCHIP_WRITE+0x68>)
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	0c12      	lsrs	r2, r2, #16
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	4610      	mov	r0, r2
 80022b8:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <WIZCHIP_WRITE+0x68>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	0a12      	lsrs	r2, r2, #8
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	4610      	mov	r0, r2
 80022c6:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <WIZCHIP_WRITE+0x68>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	4610      	mov	r0, r2
 80022d2:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <WIZCHIP_WRITE+0x68>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	4610      	mov	r0, r2
 80022dc:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <WIZCHIP_WRITE+0x68>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <WIZCHIP_WRITE+0x68>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4798      	blx	r3
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000020 	.word	0x20000020

080022f8 <WIZCHIP_READ_BUF>:

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <WIZCHIP_READ_BUF+0x84>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <WIZCHIP_READ_BUF+0x84>)
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <WIZCHIP_READ_BUF+0x84>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	0c12      	lsrs	r2, r2, #16
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	4610      	mov	r0, r2
 8002326:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <WIZCHIP_READ_BUF+0x84>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	0a12      	lsrs	r2, r2, #8
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	4610      	mov	r0, r2
 8002334:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <WIZCHIP_READ_BUF+0x84>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	4610      	mov	r0, r2
 8002340:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8002342:	2300      	movs	r3, #0
 8002344:	82fb      	strh	r3, [r7, #22]
 8002346:	e00a      	b.n	800235e <WIZCHIP_READ_BUF+0x66>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <WIZCHIP_READ_BUF+0x84>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	8afa      	ldrh	r2, [r7, #22]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	188c      	adds	r4, r1, r2
 8002352:	4798      	blx	r3
 8002354:	4603      	mov	r3, r0
 8002356:	7023      	strb	r3, [r4, #0]
      for(i = 0; i < len; i++,j)
 8002358:	8afb      	ldrh	r3, [r7, #22]
 800235a:	3301      	adds	r3, #1
 800235c:	82fb      	strh	r3, [r7, #22]
 800235e:	8afa      	ldrh	r2, [r7, #22]
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	429a      	cmp	r2, r3
 8002364:	d3f0      	bcc.n	8002348 <WIZCHIP_READ_BUF+0x50>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <WIZCHIP_READ_BUF+0x84>)
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <WIZCHIP_READ_BUF+0x84>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4798      	blx	r3
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd90      	pop	{r4, r7, pc}
 800237a:	bf00      	nop
 800237c:	20000020 	.word	0x20000020

08002380 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <WIZCHIP_WRITE_BUF+0x8c>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <WIZCHIP_WRITE_BUF+0x8c>)
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	60fb      	str	r3, [r7, #12]
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <WIZCHIP_WRITE_BUF+0x8c>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	0c12      	lsrs	r2, r2, #16
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	4610      	mov	r0, r2
 80023b6:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <WIZCHIP_WRITE_BUF+0x8c>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	0a12      	lsrs	r2, r2, #8
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	4610      	mov	r0, r2
 80023c4:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <WIZCHIP_WRITE_BUF+0x8c>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	4610      	mov	r0, r2
 80023d0:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 80023d2:	2300      	movs	r3, #0
 80023d4:	82fb      	strh	r3, [r7, #22]
 80023d6:	e00a      	b.n	80023ee <WIZCHIP_WRITE_BUF+0x6e>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <WIZCHIP_WRITE_BUF+0x8c>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	8afa      	ldrh	r2, [r7, #22]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	440a      	add	r2, r1
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	4610      	mov	r0, r2
 80023e6:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 80023e8:	8afb      	ldrh	r3, [r7, #22]
 80023ea:	3301      	adds	r3, #1
 80023ec:	82fb      	strh	r3, [r7, #22]
 80023ee:	8afa      	ldrh	r2, [r7, #22]
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3f0      	bcc.n	80023d8 <WIZCHIP_WRITE_BUF+0x58>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <WIZCHIP_WRITE_BUF+0x8c>)
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <WIZCHIP_WRITE_BUF+0x8c>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4798      	blx	r3
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000020 	.word	0x20000020

08002410 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800241a:	2300      	movs	r3, #0
 800241c:	81fb      	strh	r3, [r7, #14]
 800241e:	2300      	movs	r3, #0
 8002420:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	3301      	adds	r3, #1
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fefc 	bl	800222c <WIZCHIP_READ>
 8002434:	4603      	mov	r3, r0
 8002436:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002438:	89bb      	ldrh	r3, [r7, #12]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	b29c      	uxth	r4, r3
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	3301      	adds	r3, #1
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff feee 	bl	800222c <WIZCHIP_READ>
 8002450:	4603      	mov	r3, r0
 8002452:	b29b      	uxth	r3, r3
 8002454:	4423      	add	r3, r4
 8002456:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002458:	89bb      	ldrh	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01a      	beq.n	8002494 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	3301      	adds	r3, #1
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fede 	bl	800222c <WIZCHIP_READ>
 8002470:	4603      	mov	r3, r0
 8002472:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002474:	89fb      	ldrh	r3, [r7, #14]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	b29c      	uxth	r4, r3
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	3301      	adds	r3, #1
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fed0 	bl	800222c <WIZCHIP_READ>
 800248c:	4603      	mov	r3, r0
 800248e:	b29b      	uxth	r3, r3
 8002490:	4423      	add	r3, r4
 8002492:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002494:	89fa      	ldrh	r2, [r7, #14]
 8002496:	89bb      	ldrh	r3, [r7, #12]
 8002498:	429a      	cmp	r2, r3
 800249a:	d1c2      	bne.n	8002422 <getSn_TX_FSR+0x12>
   return val;
 800249c:	89fb      	ldrh	r3, [r7, #14]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd90      	pop	{r4, r7, pc}

080024a6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80024a6:	b590      	push	{r4, r7, lr}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	81fb      	strh	r3, [r7, #14]
 80024b4:	2300      	movs	r3, #0
 80024b6:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	3301      	adds	r3, #1
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff feb1 	bl	800222c <WIZCHIP_READ>
 80024ca:	4603      	mov	r3, r0
 80024cc:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80024ce:	89bb      	ldrh	r3, [r7, #12]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	b29c      	uxth	r4, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	3301      	adds	r3, #1
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fea3 	bl	800222c <WIZCHIP_READ>
 80024e6:	4603      	mov	r3, r0
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	4423      	add	r3, r4
 80024ec:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80024ee:	89bb      	ldrh	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01a      	beq.n	800252a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	3301      	adds	r3, #1
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fe93 	bl	800222c <WIZCHIP_READ>
 8002506:	4603      	mov	r3, r0
 8002508:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800250a:	89fb      	ldrh	r3, [r7, #14]
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	b29c      	uxth	r4, r3
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	3301      	adds	r3, #1
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fe85 	bl	800222c <WIZCHIP_READ>
 8002522:	4603      	mov	r3, r0
 8002524:	b29b      	uxth	r3, r3
 8002526:	4423      	add	r3, r4
 8002528:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800252a:	89fa      	ldrh	r2, [r7, #14]
 800252c:	89bb      	ldrh	r3, [r7, #12]
 800252e:	429a      	cmp	r2, r3
 8002530:	d1c2      	bne.n	80024b8 <getSn_RX_RSR+0x12>
   return val;
 8002532:	89fb      	ldrh	r3, [r7, #14]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}

0800253c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
 8002548:	4613      	mov	r3, r2
 800254a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
   if(len == 0)  return;
 8002554:	88bb      	ldrh	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d048      	beq.n	80025ec <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	3301      	adds	r3, #1
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fe60 	bl	800222c <WIZCHIP_READ>
 800256c:	4603      	mov	r3, r0
 800256e:	b29b      	uxth	r3, r3
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	b29c      	uxth	r4, r3
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	3301      	adds	r3, #1
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fe53 	bl	800222c <WIZCHIP_READ>
 8002586:	4603      	mov	r3, r0
 8002588:	b29b      	uxth	r3, r3
 800258a:	4423      	add	r3, r4
 800258c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800258e:	89fb      	ldrh	r3, [r7, #14]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	79fa      	ldrb	r2, [r7, #7]
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	3202      	adds	r2, #2
 8002598:	00d2      	lsls	r2, r2, #3
 800259a:	4413      	add	r3, r2
 800259c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800259e:	88bb      	ldrh	r3, [r7, #4]
 80025a0:	461a      	mov	r2, r3
 80025a2:	6839      	ldr	r1, [r7, #0]
 80025a4:	68b8      	ldr	r0, [r7, #8]
 80025a6:	f7ff feeb 	bl	8002380 <WIZCHIP_WRITE_BUF>

   ptr += len;
 80025aa:	89fa      	ldrh	r2, [r7, #14]
 80025ac:	88bb      	ldrh	r3, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	3301      	adds	r3, #1
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80025be:	461a      	mov	r2, r3
 80025c0:	89fb      	ldrh	r3, [r7, #14]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4619      	mov	r1, r3
 80025ca:	4610      	mov	r0, r2
 80025cc:	f7ff fe5e 	bl	800228c <WIZCHIP_WRITE>
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	3301      	adds	r3, #1
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80025dc:	461a      	mov	r2, r3
 80025de:	89fb      	ldrh	r3, [r7, #14]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4619      	mov	r1, r3
 80025e4:	4610      	mov	r0, r2
 80025e6:	f7ff fe51 	bl	800228c <WIZCHIP_WRITE>
 80025ea:	e000      	b.n	80025ee <wiz_send_data+0xb2>
   if(len == 0)  return;
 80025ec:	bf00      	nop
}
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}

080025f4 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
 8002600:	4613      	mov	r3, r2
 8002602:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]

   if(len == 0) return;
 800260c:	88bb      	ldrh	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d048      	beq.n	80026a4 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	3301      	adds	r3, #1
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fe04 	bl	800222c <WIZCHIP_READ>
 8002624:	4603      	mov	r3, r0
 8002626:	b29b      	uxth	r3, r3
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	b29c      	uxth	r4, r3
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	3301      	adds	r3, #1
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fdf7 	bl	800222c <WIZCHIP_READ>
 800263e:	4603      	mov	r3, r0
 8002640:	b29b      	uxth	r3, r3
 8002642:	4423      	add	r3, r4
 8002644:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002646:	89fb      	ldrh	r3, [r7, #14]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	79fa      	ldrb	r2, [r7, #7]
 800264c:	0092      	lsls	r2, r2, #2
 800264e:	3203      	adds	r2, #3
 8002650:	00d2      	lsls	r2, r2, #3
 8002652:	4413      	add	r3, r2
 8002654:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002656:	88bb      	ldrh	r3, [r7, #4]
 8002658:	461a      	mov	r2, r3
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	68b8      	ldr	r0, [r7, #8]
 800265e:	f7ff fe4b 	bl	80022f8 <WIZCHIP_READ_BUF>
   ptr += len;
 8002662:	89fa      	ldrh	r2, [r7, #14]
 8002664:	88bb      	ldrh	r3, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	81fb      	strh	r3, [r7, #14]

   setSn_RX_RD(sn,ptr);
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	3301      	adds	r3, #1
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002676:	461a      	mov	r2, r3
 8002678:	89fb      	ldrh	r3, [r7, #14]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	b29b      	uxth	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f7ff fe02 	bl	800228c <WIZCHIP_WRITE>
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	3301      	adds	r3, #1
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002694:	461a      	mov	r2, r3
 8002696:	89fb      	ldrh	r3, [r7, #14]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4619      	mov	r1, r3
 800269c:	4610      	mov	r0, r2
 800269e:	f7ff fdf5 	bl	800228c <WIZCHIP_WRITE>
 80026a2:	e000      	b.n	80026a6 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80026a4:	bf00      	nop
}
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}

080026ac <wizchip_cris_enter>:
/**
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_enter(void)           {};
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <wizchip_cris_exit>:
/**
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_exit(void)          {};
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <wizchip_cs_select>:
/**
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_select(void)            {};
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <wizchip_cs_deselect>:
/**
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_deselect(void)          {};
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <wizchip_bus_readbyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20140501 : Explict pointer type casting
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); };
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <wizchip_bus_writebyte>:
 * null function is called.
 */

//M20140501 : Explict pointer type casting
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*) AddrSel) = wb; };
void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; };
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	70fb      	strb	r3, [r7, #3]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <wizchip_spi_readbyte>:
/**
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_spi_readbyte(void)        {return 0;};
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
 8002714:	2300      	movs	r3, #0
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <wizchip_spi_writebyte>:
/**
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_spi_writebyte(uint8_t wb) {};
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	71fb      	strb	r3, [r7, #7]
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
	...

08002734 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <reg_wizchip_cs_cbfunc+0x16>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d106      	bne.n	8002758 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <reg_wizchip_cs_cbfunc+0x3c>)
 800274c:	4a09      	ldr	r2, [pc, #36]	; (8002774 <reg_wizchip_cs_cbfunc+0x40>)
 800274e:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <reg_wizchip_cs_cbfunc+0x3c>)
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <reg_wizchip_cs_cbfunc+0x44>)
 8002754:	615a      	str	r2, [r3, #20]
 8002756:	e005      	b.n	8002764 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002758:	4a05      	ldr	r2, [pc, #20]	; (8002770 <reg_wizchip_cs_cbfunc+0x3c>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <reg_wizchip_cs_cbfunc+0x3c>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6153      	str	r3, [r2, #20]
   }
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000020 	.word	0x20000020
 8002774:	080026c5 	.word	0x080026c5
 8002778:	080026d1 	.word	0x080026d1

0800277c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002786:	bf00      	nop
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <reg_wizchip_spi_cbfunc+0x48>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f9      	beq.n	8002788 <reg_wizchip_spi_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <reg_wizchip_spi_cbfunc+0x24>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <reg_wizchip_spi_cbfunc+0x48>)
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <reg_wizchip_spi_cbfunc+0x4c>)
 80027a4:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <reg_wizchip_spi_cbfunc+0x48>)
 80027a8:	4a08      	ldr	r2, [pc, #32]	; (80027cc <reg_wizchip_spi_cbfunc+0x50>)
 80027aa:	61da      	str	r2, [r3, #28]
 80027ac:	e005      	b.n	80027ba <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80027ae:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <reg_wizchip_spi_cbfunc+0x48>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80027b4:	4a03      	ldr	r2, [pc, #12]	; (80027c4 <reg_wizchip_spi_cbfunc+0x48>)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	61d3      	str	r3, [r2, #28]
   }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	20000020 	.word	0x20000020
 80027c8:	08002711 	.word	0x08002711
 80027cc:	0800271f 	.word	0x0800271f

080027d0 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	75fb      	strb	r3, [r7, #23]
   uint8_t* ptmp[2] = {0,0};
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	f200 80c2 	bhi.w	8002974 <ctlwizchip+0x1a4>
 80027f0:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <ctlwizchip+0x28>)
 80027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f6:	bf00      	nop
 80027f8:	08002839 	.word	0x08002839
 80027fc:	0800283f 	.word	0x0800283f
 8002800:	0800286b 	.word	0x0800286b
 8002804:	0800285f 	.word	0x0800285f
 8002808:	08002879 	.word	0x08002879
 800280c:	08002885 	.word	0x08002885
 8002810:	08002893 	.word	0x08002893
 8002814:	080028b9 	.word	0x080028b9
 8002818:	080028df 	.word	0x080028df
 800281c:	08002919 	.word	0x08002919
 8002820:	0800291f 	.word	0x0800291f
 8002824:	08002927 	.word	0x08002927
 8002828:	0800297b 	.word	0x0800297b
 800282c:	0800292f 	.word	0x0800292f
 8002830:	0800293d 	.word	0x0800293d
 8002834:	08002959 	.word	0x08002959
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002838:	f000 f8e6 	bl	8002a08 <wizchip_sw_reset>
         break;
 800283c:	e09e      	b.n	800297c <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3308      	adds	r3, #8
 800284c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f000 f923 	bl	8002aa0 <wizchip_init>
 800285a:	4603      	mov	r3, r0
 800285c:	e08f      	b.n	800297e <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f9a8 	bl	8002bb8 <wizchip_clrinterrupt>
         break;
 8002868:	e088      	b.n	800297c <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800286a:	f000 f9c3 	bl	8002bf4 <wizchip_getinterrupt>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	801a      	strh	r2, [r3, #0]
         break;
 8002876:	e081      	b.n	800297c <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 f9de 	bl	8002c3e <wizchip_setinterruptmask>
         break;
 8002882:	e07b      	b.n	800297c <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002884:	f000 f9f6 	bl	8002c74 <wizchip_getinterruptmask>
 8002888:	4603      	mov	r3, r0
 800288a:	461a      	mov	r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	801a      	strh	r2, [r3, #0]
         break;
 8002890:	e074      	b.n	800297c <ctlwizchip+0x1ac>
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	b29b      	uxth	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	4619      	mov	r1, r3
 800289e:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80028a2:	f7ff fcf3 	bl	800228c <WIZCHIP_WRITE>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	4619      	mov	r1, r3
 80028ae:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80028b2:	f7ff fceb 	bl	800228c <WIZCHIP_WRITE>
         break;
 80028b6:	e061      	b.n	800297c <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80028b8:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80028bc:	f7ff fcb6 	bl	800222c <WIZCHIP_READ>
 80028c0:	4603      	mov	r3, r0
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	b29c      	uxth	r4, r3
 80028c8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80028cc:	f7ff fcae 	bl	800222c <WIZCHIP_READ>
 80028d0:	4603      	mov	r3, r0
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4423      	add	r3, r4
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	801a      	strh	r2, [r3, #0]
         break;
 80028dc:	e04e      	b.n	800297c <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80028de:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <ctlwizchip+0x1b8>)
 80028e0:	789a      	ldrb	r2, [r3, #2]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	3301      	adds	r3, #1
 80028ea:	4a27      	ldr	r2, [pc, #156]	; (8002988 <ctlwizchip+0x1b8>)
 80028ec:	78d2      	ldrb	r2, [r2, #3]
 80028ee:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	3302      	adds	r3, #2
 80028f4:	4a24      	ldr	r2, [pc, #144]	; (8002988 <ctlwizchip+0x1b8>)
 80028f6:	7912      	ldrb	r2, [r2, #4]
 80028f8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	3303      	adds	r3, #3
 80028fe:	4a22      	ldr	r2, [pc, #136]	; (8002988 <ctlwizchip+0x1b8>)
 8002900:	7952      	ldrb	r2, [r2, #5]
 8002902:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	3304      	adds	r3, #4
 8002908:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <ctlwizchip+0x1b8>)
 800290a:	7992      	ldrb	r2, [r2, #6]
 800290c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	3305      	adds	r3, #5
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
         break;
 8002916:	e031      	b.n	800297c <ctlwizchip+0x1ac>
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002918:	f000 f9ff 	bl	8002d1a <wizphy_reset>
         break;
 800291c:	e02e      	b.n	800297c <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800291e:	6838      	ldr	r0, [r7, #0]
 8002920:	f000 fa22 	bl	8002d68 <wizphy_setphyconf>
         break;
 8002924:	e02a      	b.n	800297c <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002926:	6838      	ldr	r0, [r7, #0]
 8002928:	f000 fa60 	bl	8002dec <wizphy_getphyconf>
         break;
 800292c:	e026      	b.n	800297c <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 faa3 	bl	8002e7e <wizphy_setphypmode>
 8002938:	4603      	mov	r3, r0
 800293a:	e020      	b.n	800297e <ctlwizchip+0x1ae>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800293c:	f000 f9d4 	bl	8002ce8 <wizphy_getphypmode>
 8002940:	4603      	mov	r3, r0
 8002942:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	2bff      	cmp	r3, #255	; 0xff
 8002948:	d102      	bne.n	8002950 <ctlwizchip+0x180>
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	e016      	b.n	800297e <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	7dfa      	ldrb	r2, [r7, #23]
 8002954:	701a      	strb	r2, [r3, #0]
         break;
 8002956:	e011      	b.n	800297c <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8002958:	f000 f9af 	bl	8002cba <wizphy_getphylink>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2bff      	cmp	r3, #255	; 0xff
 8002964:	d102      	bne.n	800296c <ctlwizchip+0x19c>
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e008      	b.n	800297e <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	7dfa      	ldrb	r2, [r7, #23]
 8002970:	701a      	strb	r2, [r3, #0]
         break;
 8002972:	e003      	b.n	800297c <ctlwizchip+0x1ac>
      default:
         return -1;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
 8002978:	e001      	b.n	800297e <ctlwizchip+0x1ae>
         break;
 800297a:	bf00      	nop
   }
   return 0;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd90      	pop	{r4, r7, pc}
 8002986:	bf00      	nop
 8002988:	20000020 	.word	0x20000020

0800298c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]

   switch(cntype)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d82c      	bhi.n	80029f8 <ctlnetwork+0x6c>
 800299e:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <ctlnetwork+0x18>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	080029bd 	.word	0x080029bd
 80029a8:	080029c5 	.word	0x080029c5
 80029ac:	080029cd 	.word	0x080029cd
 80029b0:	080029db 	.word	0x080029db
 80029b4:	080029e9 	.word	0x080029e9
 80029b8:	080029f1 	.word	0x080029f1
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80029bc:	6838      	ldr	r0, [r7, #0]
 80029be:	f000 faa9 	bl	8002f14 <wizchip_setnetinfo>
         break;
 80029c2:	e01c      	b.n	80029fe <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80029c4:	6838      	ldr	r0, [r7, #0]
 80029c6:	f000 fae5 	bl	8002f94 <wizchip_getnetinfo>
         break;
 80029ca:	e018      	b.n	80029fe <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fb1f 	bl	8003014 <wizchip_setnetmode>
 80029d6:	4603      	mov	r3, r0
 80029d8:	e012      	b.n	8002a00 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80029da:	f000 fb3d 	bl	8003058 <wizchip_getnetmode>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	701a      	strb	r2, [r3, #0]
         break;
 80029e6:	e00a      	b.n	80029fe <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80029e8:	6838      	ldr	r0, [r7, #0]
 80029ea:	f000 fb3d 	bl	8003068 <wizchip_settimeout>
         break;
 80029ee:	e006      	b.n	80029fe <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80029f0:	6838      	ldr	r0, [r7, #0]
 80029f2:	f000 fb5a 	bl	80030aa <wizchip_gettimeout>
         break;
 80029f6:	e002      	b.n	80029fe <ctlnetwork+0x72>
      default:
         return -1;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	e000      	b.n	8002a00 <ctlnetwork+0x74>
   }
   return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4];
   uint8_t mac[6];
   getSHAR(mac);
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2206      	movs	r2, #6
 8002a12:	4619      	mov	r1, r3
 8002a14:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002a18:	f7ff fc6e 	bl	80022f8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2204      	movs	r2, #4
 8002a22:	4619      	mov	r1, r3
 8002a24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a28:	f7ff fc66 	bl	80022f8 <WIZCHIP_READ_BUF>
 8002a2c:	f107 0310 	add.w	r3, r7, #16
 8002a30:	2204      	movs	r2, #4
 8002a32:	4619      	mov	r1, r3
 8002a34:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002a38:	f7ff fc5e 	bl	80022f8 <WIZCHIP_READ_BUF>
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	2204      	movs	r2, #4
 8002a42:	4619      	mov	r1, r3
 8002a44:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002a48:	f7ff fc56 	bl	80022f8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002a4c:	2180      	movs	r1, #128	; 0x80
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7ff fc1c 	bl	800228c <WIZCHIP_WRITE>
   getMR(); // for delay
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7ff fbe9 	bl	800222c <WIZCHIP_READ>
   setSHAR(mac);
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	2206      	movs	r2, #6
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002a64:	f7ff fc8c 	bl	8002380 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a74:	f7ff fc84 	bl	8002380 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002a84:	f7ff fc7c 	bl	8002380 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002a94:	f7ff fc74 	bl	8002380 <WIZCHIP_WRITE_BUF>
}
 8002a98:	bf00      	nop
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002aae:	f7ff ffab 	bl	8002a08 <wizchip_sw_reset>
   if(txsize)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d03b      	beq.n	8002b30 <wizchip_init+0x90>
   {
      tmp = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e00e      	b.n	8002ae0 <wizchip_init+0x40>
         tmp += txsize[i];
 8002ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	7bbb      	ldrb	r3, [r7, #14]
 8002ace:	4413      	add	r3, r2
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	ddec      	ble.n	8002ac2 <wizchip_init+0x22>
      if(tmp > 16) return -1;
 8002ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	dd02      	ble.n	8002af6 <wizchip_init+0x56>
 8002af0:	f04f 33ff 	mov.w	r3, #4294967295
 8002af4:	e05c      	b.n	8002bb0 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
 8002afa:	e015      	b.n	8002b28 <wizchip_init+0x88>
         setSn_TXBUF_SIZE(i, txsize[i]);
 8002afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	3301      	adds	r3, #1
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	4619      	mov	r1, r3
 8002b18:	f7ff fbb8 	bl	800228c <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2c:	2b07      	cmp	r3, #7
 8002b2e:	dde5      	ble.n	8002afc <wizchip_init+0x5c>
   }
   if(rxsize)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d03b      	beq.n	8002bae <wizchip_init+0x10e>
   {
      tmp = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	e00e      	b.n	8002b5e <wizchip_init+0xbe>
         tmp += rxsize[i];
 8002b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	7bbb      	ldrb	r3, [r7, #14]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b62:	2b07      	cmp	r3, #7
 8002b64:	ddec      	ble.n	8002b40 <wizchip_init+0xa0>
      if(tmp > 16) return -1;
 8002b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	dd02      	ble.n	8002b74 <wizchip_init+0xd4>
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	e01d      	b.n	8002bb0 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
 8002b78:	e015      	b.n	8002ba6 <wizchip_init+0x106>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 8002b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	3301      	adds	r3, #1
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	4413      	add	r3, r2
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f7ff fb79 	bl	800228c <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002baa:	2b07      	cmp	r3, #7
 8002bac:	dde5      	ble.n	8002b7a <wizchip_init+0xda>
   }
   return 0;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   ir |= sir;
   setIR(ir);
#else
   setIR(ir);
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	f023 030f 	bic.w	r3, r3, #15
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002bdc:	f7ff fb56 	bl	800228c <WIZCHIP_WRITE>
   setSIR(sir);
 8002be0:	7bbb      	ldrb	r3, [r7, #14]
 8002be2:	4619      	mov	r1, r3
 8002be4:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002be8:	f7ff fb50 	bl	800228c <WIZCHIP_WRITE>
#endif
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   ir = getIR();
   sir = ir 0x0F;
#else
   ir  = getIR();
 8002c06:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002c0a:	f7ff fb0f 	bl	800222c <WIZCHIP_READ>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f023 030f 	bic.w	r3, r3, #15
 8002c14:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002c16:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002c1a:	f7ff fb07 	bl	800222c <WIZCHIP_READ>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002c22:	79bb      	ldrb	r3, [r7, #6]
 8002c24:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002c26:	88bb      	ldrh	r3, [r7, #4]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002c34:	88bb      	ldrh	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   imr |= simr;
   setIMR(imr);
#else
   setIMR(imr);
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	4619      	mov	r1, r3
 8002c58:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002c5c:	f7ff fb16 	bl	800228c <WIZCHIP_WRITE>
   setSIMR(simr);
 8002c60:	7bbb      	ldrb	r3, [r7, #14]
 8002c62:	4619      	mov	r1, r3
 8002c64:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002c68:	f7ff fb10 	bl	800228c <WIZCHIP_WRITE>
#endif
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   imr  = getIMR();
   simr = imr 0x0F;
#else
   imr  = getIMR();
 8002c86:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002c8a:	f7ff facf 	bl	800222c <WIZCHIP_READ>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002c92:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002c96:	f7ff fac9 	bl	800222c <WIZCHIP_READ>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002c9e:	79bb      	ldrb	r3, [r7, #6]
 8002ca0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002ca2:	88bb      	ldrh	r3, [r7, #4]
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002cb0:	88bb      	ldrh	r3, [r7, #4]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
   else
      tmp = PHY_LINK_OFF;
#elif _WIZCHIP_ == 5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002cc0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002cc4:	f7ff fab2 	bl	800222c <WIZCHIP_READ>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <wizphy_getphylink+0x1e>
      tmp = PHY_LINK_ON;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	71fb      	strb	r3, [r7, #7]
 8002cd6:	e001      	b.n	8002cdc <wizphy_getphylink+0x22>
   else
      tmp = PHY_LINK_OFF;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	71fb      	strb	r3, [r7, #7]
#else
   tmp = -1;
#endif
   return tmp;
 8002cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <wizphy_getphypmode>:

#if _WIZCHIP_ > 5100

int8_t wizphy_getphypmode(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if(getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
 8002cf2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002cf6:	f7ff fa99 	bl	800222c <WIZCHIP_READ>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002d04:	2301      	movs	r3, #1
 8002d06:	71fb      	strb	r3, [r7, #7]
 8002d08:	e001      	b.n	8002d0e <wizphy_getphypmode+0x26>
      else
         tmp = PHY_POWER_NORM;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <wizphy_reset>:
#endif

#if _WIZCHIP_ == 5500
void wizphy_reset(void)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002d20:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d24:	f7ff fa82 	bl	800222c <WIZCHIP_READ>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d32:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4619      	mov	r1, r3
 8002d38:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d3c:	f7ff faa6 	bl	800228c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002d40:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d44:	f7ff fa72 	bl	800222c <WIZCHIP_READ>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d52:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	4619      	mov	r1, r3
 8002d58:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d5c:	f7ff fa96 	bl	800228c <WIZCHIP_WRITE>
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d104      	bne.n	8002d86 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e003      	b.n	8002d8e <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d8c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	785b      	ldrb	r3, [r3, #1]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d104      	bne.n	8002da0 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e019      	b.n	8002dd4 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	78db      	ldrb	r3, [r3, #3]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d10d      	bne.n	8002dc4 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	789b      	ldrb	r3, [r3, #2]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d104      	bne.n	8002dba <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	f043 0318 	orr.w	r3, r3, #24
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e00c      	b.n	8002dd4 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	f043 0308 	orr.w	r3, r3, #8
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	e007      	b.n	8002dd4 <wizphy_setphyconf+0x6c>
      }
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	789b      	ldrb	r3, [r3, #2]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d103      	bne.n	8002dd4 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	f043 0310 	orr.w	r3, r3, #16
 8002dd2:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002ddc:	f7ff fa56 	bl	800228c <WIZCHIP_WRITE>
   wizphy_reset();
 8002de0:	f7ff ff9b 	bl	8002d1a <wizphy_reset>
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002df8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002dfc:	f7ff fa16 	bl	800222c <WIZCHIP_READ>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	119b      	asrs	r3, r3, #6
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d001      	beq.n	8002e22 <wizphy_getphyconf+0x36>
 8002e1e:	2b38      	cmp	r3, #56	; 0x38
 8002e20:	d103      	bne.n	8002e2a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA:
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	705a      	strb	r2, [r3, #1]
         break;
 8002e28:	e003      	b.n	8002e32 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	705a      	strb	r2, [r3, #1]
         break;
 8002e30:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e38:	2b18      	cmp	r3, #24
 8002e3a:	d003      	beq.n	8002e44 <wizphy_getphyconf+0x58>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d001      	beq.n	8002e44 <wizphy_getphyconf+0x58>
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d103      	bne.n	8002e4c <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	709a      	strb	r2, [r3, #2]
         break;
 8002e4a:	e003      	b.n	8002e54 <wizphy_getphyconf+0x68>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	709a      	strb	r2, [r3, #2]
         break;
 8002e52:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e5a:	2b18      	cmp	r3, #24
 8002e5c:	d003      	beq.n	8002e66 <wizphy_getphyconf+0x7a>
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d001      	beq.n	8002e66 <wizphy_getphyconf+0x7a>
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d103      	bne.n	8002e6e <wizphy_getphyconf+0x82>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	70da      	strb	r2, [r3, #3]
         break;
 8002e6c:	e003      	b.n	8002e76 <wizphy_getphyconf+0x8a>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	70da      	strb	r2, [r3, #3]
         break;
 8002e74:	bf00      	nop
   }
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002e8c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e90:	f7ff f9cc 	bl	800222c <WIZCHIP_READ>
 8002e94:	4603      	mov	r3, r0
 8002e96:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <wizphy_setphypmode+0x2a>
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	e030      	b.n	8002f0a <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002eae:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d104      	bne.n	8002ec0 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	e003      	b.n	8002ec8 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002ec6:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002ed0:	f7ff f9dc 	bl	800228c <WIZCHIP_WRITE>
   wizphy_reset();
 8002ed4:	f7ff ff21 	bl	8002d1a <wizphy_reset>
   tmp = getPHYCFGR();
 8002ed8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002edc:	f7ff f9a6 	bl	800222c <WIZCHIP_READ>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d106      	bne.n	8002ef8 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <wizphy_setphypmode+0x88>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e008      	b.n	8002f0a <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <wizphy_setphypmode+0x88>
 8002f02:	2300      	movs	r3, #0
 8002f04:	e001      	b.n	8002f0a <wizphy_setphypmode+0x8c>
   }
   return -1;
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2206      	movs	r2, #6
 8002f20:	4619      	mov	r1, r3
 8002f22:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002f26:	f7ff fa2b 	bl	8002380 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	330e      	adds	r3, #14
 8002f2e:	2204      	movs	r2, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f36:	f7ff fa23 	bl	8002380 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	330a      	adds	r3, #10
 8002f3e:	2204      	movs	r2, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002f46:	f7ff fa1b 	bl	8002380 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3306      	adds	r3, #6
 8002f4e:	2204      	movs	r2, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002f56:	f7ff fa13 	bl	8002380 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7c9a      	ldrb	r2, [r3, #18]
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <wizchip_setnetinfo+0x78>)
 8002f60:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7cda      	ldrb	r2, [r3, #19]
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <wizchip_setnetinfo+0x78>)
 8002f68:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7d1a      	ldrb	r2, [r3, #20]
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <wizchip_setnetinfo+0x78>)
 8002f70:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7d5a      	ldrb	r2, [r3, #21]
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <wizchip_setnetinfo+0x78>)
 8002f78:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7d9a      	ldrb	r2, [r3, #22]
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <wizchip_setnetinfo+0x7c>)
 8002f80:	701a      	strb	r2, [r3, #0]
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000084 	.word	0x20000084
 8002f90:	20000088 	.word	0x20000088

08002f94 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2206      	movs	r2, #6
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002fa6:	f7ff f9a7 	bl	80022f8 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	330e      	adds	r3, #14
 8002fae:	2204      	movs	r2, #4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fb6:	f7ff f99f 	bl	80022f8 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	330a      	adds	r3, #10
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002fc6:	f7ff f997 	bl	80022f8 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3306      	adds	r3, #6
 8002fce:	2204      	movs	r2, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002fd6:	f7ff f98f 	bl	80022f8 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <wizchip_getnetinfo+0x78>)
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <wizchip_getnetinfo+0x78>)
 8002fe4:	785a      	ldrb	r2, [r3, #1]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <wizchip_getnetinfo+0x78>)
 8002fec:	789a      	ldrb	r2, [r3, #2]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <wizchip_getnetinfo+0x78>)
 8002ff4:	78da      	ldrb	r2, [r3, #3]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <wizchip_getnetinfo+0x7c>)
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	759a      	strb	r2, [r3, #22]
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000084 	.word	0x20000084
 8003010:	20000088 	.word	0x20000088

08003014 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != 5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <wizchip_setnetmode+0x1e>
 800302c:	f04f 33ff 	mov.w	r3, #4294967295
 8003030:	e00e      	b.n	8003050 <wizchip_setnetmode+0x3c>
#endif
   tmp = getMR();
 8003032:	2000      	movs	r0, #0
 8003034:	f7ff f8fa 	bl	800222c <WIZCHIP_READ>
 8003038:	4603      	mov	r3, r0
 800303a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	4313      	orrs	r3, r2
 8003042:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	4619      	mov	r1, r3
 8003048:	2000      	movs	r0, #0
 800304a:	f7ff f91f 	bl	800228c <WIZCHIP_WRITE>
   return 0;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800305c:	2000      	movs	r0, #0
 800305e:	f7ff f8e5 	bl	800222c <WIZCHIP_READ>
 8003062:	4603      	mov	r3, r0
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}

08003068 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4619      	mov	r1, r3
 8003076:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800307a:	f7ff f907 	bl	800228c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	885b      	ldrh	r3, [r3, #2]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	b29b      	uxth	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800308e:	f7ff f8fd 	bl	800228c <WIZCHIP_WRITE>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	885b      	ldrh	r3, [r3, #2]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4619      	mov	r1, r3
 800309a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800309e:	f7ff f8f5 	bl	800228c <WIZCHIP_WRITE>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80030aa:	b590      	push	{r4, r7, lr}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80030b2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80030b6:	f7ff f8b9 	bl	800222c <WIZCHIP_READ>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80030c2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80030c6:	f7ff f8b1 	bl	800222c <WIZCHIP_READ>
 80030ca:	4603      	mov	r3, r0
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	b29c      	uxth	r4, r3
 80030d2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80030d6:	f7ff f8a9 	bl	800222c <WIZCHIP_READ>
 80030da:	4603      	mov	r3, r0
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4423      	add	r3, r4
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	805a      	strh	r2, [r3, #2]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd90      	pop	{r4, r7, pc}
	...

080030f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <HAL_Init+0x28>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a07      	ldr	r2, [pc, #28]	; (8003118 <HAL_Init+0x28>)
 80030fa:	f043 0310 	orr.w	r3, r3, #16
 80030fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003100:	2003      	movs	r0, #3
 8003102:	f000 f8d1 	bl	80032a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003106:	2000      	movs	r0, #0
 8003108:	f7fe fc0c 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800310c:	f7fe fb46 	bl	800179c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40022000 	.word	0x40022000

0800311c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_IncTick+0x1c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_IncTick+0x20>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4413      	add	r3, r2
 800312c:	4a03      	ldr	r2, [pc, #12]	; (800313c <HAL_IncTick+0x20>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	20000044 	.word	0x20000044
 800313c:	20002c90 	.word	0x20002c90

08003140 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return uwTick;
 8003144:	4b02      	ldr	r3, [pc, #8]	; (8003150 <HAL_GetTick+0x10>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	20002c90 	.word	0x20002c90

08003154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <__NVIC_SetPriorityGrouping+0x44>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003170:	4013      	ands	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800317c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003186:	4a04      	ldr	r2, [pc, #16]	; (8003198 <__NVIC_SetPriorityGrouping+0x44>)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	60d3      	str	r3, [r2, #12]
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a0:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <__NVIC_GetPriorityGrouping+0x18>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	f003 0307 	and.w	r3, r3, #7
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	db0b      	blt.n	80031e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	4906      	ldr	r1, [pc, #24]	; (80031ec <__NVIC_EnableIRQ+0x34>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2001      	movs	r0, #1
 80031da:	fa00 f202 	lsl.w	r2, r0, r2
 80031de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	e000e100 	.word	0xe000e100

080031f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003200:	2b00      	cmp	r3, #0
 8003202:	db0a      	blt.n	800321a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	490c      	ldr	r1, [pc, #48]	; (800323c <__NVIC_SetPriority+0x4c>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	0112      	lsls	r2, r2, #4
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	440b      	add	r3, r1
 8003214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003218:	e00a      	b.n	8003230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4908      	ldr	r1, [pc, #32]	; (8003240 <__NVIC_SetPriority+0x50>)
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	3b04      	subs	r3, #4
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	440b      	add	r3, r1
 800322e:	761a      	strb	r2, [r3, #24]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e100 	.word	0xe000e100
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f1c3 0307 	rsb	r3, r3, #7
 800325e:	2b04      	cmp	r3, #4
 8003260:	bf28      	it	cs
 8003262:	2304      	movcs	r3, #4
 8003264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3304      	adds	r3, #4
 800326a:	2b06      	cmp	r3, #6
 800326c:	d902      	bls.n	8003274 <NVIC_EncodePriority+0x30>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3b03      	subs	r3, #3
 8003272:	e000      	b.n	8003276 <NVIC_EncodePriority+0x32>
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	f04f 32ff 	mov.w	r2, #4294967295
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	401a      	ands	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800328c:	f04f 31ff 	mov.w	r1, #4294967295
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43d9      	mvns	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	4313      	orrs	r3, r2
         );
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff4f 	bl	8003154 <__NVIC_SetPriorityGrouping>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d0:	f7ff ff64 	bl	800319c <__NVIC_GetPriorityGrouping>
 80032d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ffb2 	bl	8003244 <NVIC_EncodePriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff81 	bl	80031f0 <__NVIC_SetPriority>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff57 	bl	80031b8 <__NVIC_EnableIRQ>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003314:	b480      	push	{r7}
 8003316:	b08b      	sub	sp, #44	; 0x2c
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003322:	2300      	movs	r3, #0
 8003324:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003326:	e127      	b.n	8003578 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003328:	2201      	movs	r2, #1
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	429a      	cmp	r2, r3
 8003342:	f040 8116 	bne.w	8003572 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b12      	cmp	r3, #18
 800334c:	d034      	beq.n	80033b8 <HAL_GPIO_Init+0xa4>
 800334e:	2b12      	cmp	r3, #18
 8003350:	d80d      	bhi.n	800336e <HAL_GPIO_Init+0x5a>
 8003352:	2b02      	cmp	r3, #2
 8003354:	d02b      	beq.n	80033ae <HAL_GPIO_Init+0x9a>
 8003356:	2b02      	cmp	r3, #2
 8003358:	d804      	bhi.n	8003364 <HAL_GPIO_Init+0x50>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d031      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
 800335e:	2b01      	cmp	r3, #1
 8003360:	d01c      	beq.n	800339c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003362:	e048      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003364:	2b03      	cmp	r3, #3
 8003366:	d043      	beq.n	80033f0 <HAL_GPIO_Init+0xdc>
 8003368:	2b11      	cmp	r3, #17
 800336a:	d01b      	beq.n	80033a4 <HAL_GPIO_Init+0x90>
          break;
 800336c:	e043      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800336e:	4a89      	ldr	r2, [pc, #548]	; (8003594 <HAL_GPIO_Init+0x280>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d026      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
 8003374:	4a87      	ldr	r2, [pc, #540]	; (8003594 <HAL_GPIO_Init+0x280>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d806      	bhi.n	8003388 <HAL_GPIO_Init+0x74>
 800337a:	4a87      	ldr	r2, [pc, #540]	; (8003598 <HAL_GPIO_Init+0x284>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d020      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
 8003380:	4a86      	ldr	r2, [pc, #536]	; (800359c <HAL_GPIO_Init+0x288>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01d      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
          break;
 8003386:	e036      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003388:	4a85      	ldr	r2, [pc, #532]	; (80035a0 <HAL_GPIO_Init+0x28c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
 800338e:	4a85      	ldr	r2, [pc, #532]	; (80035a4 <HAL_GPIO_Init+0x290>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d016      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
 8003394:	4a84      	ldr	r2, [pc, #528]	; (80035a8 <HAL_GPIO_Init+0x294>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
          break;
 800339a:	e02c      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	623b      	str	r3, [r7, #32]
          break;
 80033a2:	e028      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	3304      	adds	r3, #4
 80033aa:	623b      	str	r3, [r7, #32]
          break;
 80033ac:	e023      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	3308      	adds	r3, #8
 80033b4:	623b      	str	r3, [r7, #32]
          break;
 80033b6:	e01e      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	330c      	adds	r3, #12
 80033be:	623b      	str	r3, [r7, #32]
          break;
 80033c0:	e019      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033ca:	2304      	movs	r3, #4
 80033cc:	623b      	str	r3, [r7, #32]
          break;
 80033ce:	e012      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033d8:	2308      	movs	r3, #8
 80033da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	611a      	str	r2, [r3, #16]
          break;
 80033e2:	e008      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033e4:	2308      	movs	r3, #8
 80033e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	615a      	str	r2, [r3, #20]
          break;
 80033ee:	e002      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033f0:	2300      	movs	r3, #0
 80033f2:	623b      	str	r3, [r7, #32]
          break;
 80033f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2bff      	cmp	r3, #255	; 0xff
 80033fa:	d801      	bhi.n	8003400 <HAL_GPIO_Init+0xec>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	e001      	b.n	8003404 <HAL_GPIO_Init+0xf0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2bff      	cmp	r3, #255	; 0xff
 800340a:	d802      	bhi.n	8003412 <HAL_GPIO_Init+0xfe>
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	e002      	b.n	8003418 <HAL_GPIO_Init+0x104>
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	3b08      	subs	r3, #8
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	210f      	movs	r1, #15
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	401a      	ands	r2, r3
 800342a:	6a39      	ldr	r1, [r7, #32]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	431a      	orrs	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8096 	beq.w	8003572 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003446:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_GPIO_Init+0x298>)
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	4a58      	ldr	r2, [pc, #352]	; (80035ac <HAL_GPIO_Init+0x298>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6193      	str	r3, [r2, #24]
 8003452:	4b56      	ldr	r3, [pc, #344]	; (80035ac <HAL_GPIO_Init+0x298>)
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800345e:	4a54      	ldr	r2, [pc, #336]	; (80035b0 <HAL_GPIO_Init+0x29c>)
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	3302      	adds	r3, #2
 8003466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	220f      	movs	r2, #15
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4b      	ldr	r2, [pc, #300]	; (80035b4 <HAL_GPIO_Init+0x2a0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_GPIO_Init+0x19e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a4a      	ldr	r2, [pc, #296]	; (80035b8 <HAL_GPIO_Init+0x2a4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00d      	beq.n	80034ae <HAL_GPIO_Init+0x19a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a49      	ldr	r2, [pc, #292]	; (80035bc <HAL_GPIO_Init+0x2a8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <HAL_GPIO_Init+0x196>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a48      	ldr	r2, [pc, #288]	; (80035c0 <HAL_GPIO_Init+0x2ac>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_GPIO_Init+0x192>
 80034a2:	2303      	movs	r3, #3
 80034a4:	e006      	b.n	80034b4 <HAL_GPIO_Init+0x1a0>
 80034a6:	2304      	movs	r3, #4
 80034a8:	e004      	b.n	80034b4 <HAL_GPIO_Init+0x1a0>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e002      	b.n	80034b4 <HAL_GPIO_Init+0x1a0>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_GPIO_Init+0x1a0>
 80034b2:	2300      	movs	r3, #0
 80034b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b6:	f002 0203 	and.w	r2, r2, #3
 80034ba:	0092      	lsls	r2, r2, #2
 80034bc:	4093      	lsls	r3, r2
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034c4:	493a      	ldr	r1, [pc, #232]	; (80035b0 <HAL_GPIO_Init+0x29c>)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	3302      	adds	r3, #2
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4938      	ldr	r1, [pc, #224]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
 80034ea:	e006      	b.n	80034fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034ec:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	4933      	ldr	r1, [pc, #204]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003506:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	492e      	ldr	r1, [pc, #184]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
 8003512:	e006      	b.n	8003522 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	43db      	mvns	r3, r3
 800351c:	4929      	ldr	r1, [pc, #164]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 800351e:	4013      	ands	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800352e:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	4924      	ldr	r1, [pc, #144]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
 800353a:	e006      	b.n	800354a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800353c:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	43db      	mvns	r3, r3
 8003544:	491f      	ldr	r1, [pc, #124]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003546:	4013      	ands	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	491a      	ldr	r1, [pc, #104]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	60cb      	str	r3, [r1, #12]
 8003562:	e006      	b.n	8003572 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003564:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	43db      	mvns	r3, r3
 800356c:	4915      	ldr	r1, [pc, #84]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 800356e:	4013      	ands	r3, r2
 8003570:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	3301      	adds	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	fa22 f303 	lsr.w	r3, r2, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	f47f aed0 	bne.w	8003328 <HAL_GPIO_Init+0x14>
  }
}
 8003588:	bf00      	nop
 800358a:	372c      	adds	r7, #44	; 0x2c
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	10210000 	.word	0x10210000
 8003598:	10110000 	.word	0x10110000
 800359c:	10120000 	.word	0x10120000
 80035a0:	10310000 	.word	0x10310000
 80035a4:	10320000 	.word	0x10320000
 80035a8:	10220000 	.word	0x10220000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40010000 	.word	0x40010000
 80035b4:	40010800 	.word	0x40010800
 80035b8:	40010c00 	.word	0x40010c00
 80035bc:	40011000 	.word	0x40011000
 80035c0:	40011400 	.word	0x40011400
 80035c4:	40010400 	.word	0x40010400

080035c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035e4:	e003      	b.n	80035ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	611a      	str	r2, [r3, #16]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e11f      	b.n	800384a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe f8f4 	bl	800180c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800364a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800365a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800365c:	f000 fcda 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8003660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4a7b      	ldr	r2, [pc, #492]	; (8003854 <HAL_I2C_Init+0x25c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d807      	bhi.n	800367c <HAL_I2C_Init+0x84>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a7a      	ldr	r2, [pc, #488]	; (8003858 <HAL_I2C_Init+0x260>)
 8003670:	4293      	cmp	r3, r2
 8003672:	bf94      	ite	ls
 8003674:	2301      	movls	r3, #1
 8003676:	2300      	movhi	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e006      	b.n	800368a <HAL_I2C_Init+0x92>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a77      	ldr	r2, [pc, #476]	; (800385c <HAL_I2C_Init+0x264>)
 8003680:	4293      	cmp	r3, r2
 8003682:	bf94      	ite	ls
 8003684:	2301      	movls	r3, #1
 8003686:	2300      	movhi	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0db      	b.n	800384a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a72      	ldr	r2, [pc, #456]	; (8003860 <HAL_I2C_Init+0x268>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0c9b      	lsrs	r3, r3, #18
 800369c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4a64      	ldr	r2, [pc, #400]	; (8003854 <HAL_I2C_Init+0x25c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d802      	bhi.n	80036cc <HAL_I2C_Init+0xd4>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3301      	adds	r3, #1
 80036ca:	e009      	b.n	80036e0 <HAL_I2C_Init+0xe8>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	4a63      	ldr	r2, [pc, #396]	; (8003864 <HAL_I2C_Init+0x26c>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	3301      	adds	r3, #1
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4956      	ldr	r1, [pc, #344]	; (8003854 <HAL_I2C_Init+0x25c>)
 80036fc:	428b      	cmp	r3, r1
 80036fe:	d80d      	bhi.n	800371c <HAL_I2C_Init+0x124>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1e59      	subs	r1, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fbb1 f3f3 	udiv	r3, r1, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	2b04      	cmp	r3, #4
 8003716:	bf38      	it	cc
 8003718:	2304      	movcc	r3, #4
 800371a:	e04f      	b.n	80037bc <HAL_I2C_Init+0x1c4>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d111      	bne.n	8003748 <HAL_I2C_Init+0x150>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e58      	subs	r0, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	440b      	add	r3, r1
 8003732:	fbb0 f3f3 	udiv	r3, r0, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e012      	b.n	800376e <HAL_I2C_Init+0x176>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1e58      	subs	r0, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	0099      	lsls	r1, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	fbb0 f3f3 	udiv	r3, r0, r3
 800375e:	3301      	adds	r3, #1
 8003760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Init+0x17e>
 8003772:	2301      	movs	r3, #1
 8003774:	e022      	b.n	80037bc <HAL_I2C_Init+0x1c4>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10e      	bne.n	800379c <HAL_I2C_Init+0x1a4>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1e58      	subs	r0, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6859      	ldr	r1, [r3, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	440b      	add	r3, r1
 800378c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003790:	3301      	adds	r3, #1
 8003792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379a:	e00f      	b.n	80037bc <HAL_I2C_Init+0x1c4>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1e58      	subs	r0, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	0099      	lsls	r1, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	6809      	ldr	r1, [r1, #0]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6911      	ldr	r1, [r2, #16]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68d2      	ldr	r2, [r2, #12]
 80037f6:	4311      	orrs	r1, r2
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	000186a0 	.word	0x000186a0
 8003858:	001e847f 	.word	0x001e847f
 800385c:	003d08ff 	.word	0x003d08ff
 8003860:	431bde83 	.word	0x431bde83
 8003864:	10624dd3 	.word	0x10624dd3

08003868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e26c      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8087 	beq.w	8003996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003888:	4b92      	ldr	r3, [pc, #584]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b04      	cmp	r3, #4
 8003892:	d00c      	beq.n	80038ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003894:	4b8f      	ldr	r3, [pc, #572]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d112      	bne.n	80038c6 <HAL_RCC_OscConfig+0x5e>
 80038a0:	4b8c      	ldr	r3, [pc, #560]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d10b      	bne.n	80038c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ae:	4b89      	ldr	r3, [pc, #548]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d06c      	beq.n	8003994 <HAL_RCC_OscConfig+0x12c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d168      	bne.n	8003994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e246      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x76>
 80038d0:	4b80      	ldr	r3, [pc, #512]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a7f      	ldr	r2, [pc, #508]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e02e      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x98>
 80038e6:	4b7b      	ldr	r3, [pc, #492]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a7a      	ldr	r2, [pc, #488]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b78      	ldr	r3, [pc, #480]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a77      	ldr	r2, [pc, #476]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e01d      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0xbc>
 800390a:	4b72      	ldr	r3, [pc, #456]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a71      	ldr	r2, [pc, #452]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b6f      	ldr	r3, [pc, #444]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6e      	ldr	r2, [pc, #440]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 8003924:	4b6b      	ldr	r3, [pc, #428]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6a      	ldr	r2, [pc, #424]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b68      	ldr	r3, [pc, #416]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a67      	ldr	r2, [pc, #412]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7ff fbfc 	bl	8003140 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7ff fbf8 	bl	8003140 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1fa      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b5d      	ldr	r3, [pc, #372]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0xe4>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7ff fbe8 	bl	8003140 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7ff fbe4 	bl	8003140 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e1e6      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x10c>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d063      	beq.n	8003a6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039a2:	4b4c      	ldr	r3, [pc, #304]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039ae:	4b49      	ldr	r3, [pc, #292]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d11c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x18c>
 80039ba:	4b46      	ldr	r3, [pc, #280]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d116      	bne.n	80039f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	4b43      	ldr	r3, [pc, #268]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x176>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e1ba      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b3d      	ldr	r3, [pc, #244]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4939      	ldr	r1, [pc, #228]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f2:	e03a      	b.n	8003a6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039fc:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <HAL_RCC_OscConfig+0x270>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7ff fb9d 	bl	8003140 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0a:	f7ff fb99 	bl	8003140 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e19b      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a28:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4927      	ldr	r1, [pc, #156]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]
 8003a3c:	e015      	b.n	8003a6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3e:	4b26      	ldr	r3, [pc, #152]	; (8003ad8 <HAL_RCC_OscConfig+0x270>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7ff fb7c 	bl	8003140 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4c:	f7ff fb78 	bl	8003140 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e17a      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03a      	beq.n	8003aec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d019      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <HAL_RCC_OscConfig+0x274>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7ff fb5c 	bl	8003140 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7ff fb58 	bl	8003140 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e15a      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003aaa:	2001      	movs	r0, #1
 8003aac:	f000 fb0a 	bl	80040c4 <RCC_Delay>
 8003ab0:	e01c      	b.n	8003aec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <HAL_RCC_OscConfig+0x274>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab8:	f7ff fb42 	bl	8003140 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003abe:	e00f      	b.n	8003ae0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac0:	f7ff fb3e 	bl	8003140 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d908      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e140      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	42420000 	.word	0x42420000
 8003adc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	4b9e      	ldr	r3, [pc, #632]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e9      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a6 	beq.w	8003c46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afe:	4b97      	ldr	r3, [pc, #604]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10d      	bne.n	8003b26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	4b94      	ldr	r3, [pc, #592]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4a93      	ldr	r2, [pc, #588]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b14:	61d3      	str	r3, [r2, #28]
 8003b16:	4b91      	ldr	r3, [pc, #580]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	4b8e      	ldr	r3, [pc, #568]	; (8003d60 <HAL_RCC_OscConfig+0x4f8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d118      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b32:	4b8b      	ldr	r3, [pc, #556]	; (8003d60 <HAL_RCC_OscConfig+0x4f8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a8a      	ldr	r2, [pc, #552]	; (8003d60 <HAL_RCC_OscConfig+0x4f8>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3e:	f7ff faff 	bl	8003140 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7ff fafb 	bl	8003140 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b64      	cmp	r3, #100	; 0x64
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e0fd      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b81      	ldr	r3, [pc, #516]	; (8003d60 <HAL_RCC_OscConfig+0x4f8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x312>
 8003b6c:	4b7b      	ldr	r3, [pc, #492]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a7a      	ldr	r2, [pc, #488]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6213      	str	r3, [r2, #32]
 8003b78:	e02d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x334>
 8003b82:	4b76      	ldr	r3, [pc, #472]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a75      	ldr	r2, [pc, #468]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	6213      	str	r3, [r2, #32]
 8003b8e:	4b73      	ldr	r3, [pc, #460]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4a72      	ldr	r2, [pc, #456]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003b94:	f023 0304 	bic.w	r3, r3, #4
 8003b98:	6213      	str	r3, [r2, #32]
 8003b9a:	e01c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d10c      	bne.n	8003bbe <HAL_RCC_OscConfig+0x356>
 8003ba4:	4b6d      	ldr	r3, [pc, #436]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a6c      	ldr	r2, [pc, #432]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	4b6a      	ldr	r3, [pc, #424]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4a69      	ldr	r2, [pc, #420]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6213      	str	r3, [r2, #32]
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003bbe:	4b67      	ldr	r3, [pc, #412]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4a66      	ldr	r2, [pc, #408]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	6213      	str	r3, [r2, #32]
 8003bca:	4b64      	ldr	r3, [pc, #400]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4a63      	ldr	r2, [pc, #396]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003bd0:	f023 0304 	bic.w	r3, r3, #4
 8003bd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d015      	beq.n	8003c0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7ff faaf 	bl	8003140 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7ff faab 	bl	8003140 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e0ab      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfc:	4b57      	ldr	r3, [pc, #348]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ee      	beq.n	8003be6 <HAL_RCC_OscConfig+0x37e>
 8003c08:	e014      	b.n	8003c34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7ff fa99 	bl	8003140 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7ff fa95 	bl	8003140 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e095      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c28:	4b4c      	ldr	r3, [pc, #304]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ee      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3a:	4b48      	ldr	r3, [pc, #288]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4a47      	ldr	r2, [pc, #284]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8081 	beq.w	8003d52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c50:	4b42      	ldr	r3, [pc, #264]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d061      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d146      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c64:	4b3f      	ldr	r3, [pc, #252]	; (8003d64 <HAL_RCC_OscConfig+0x4fc>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7ff fa69 	bl	8003140 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7ff fa65 	bl	8003140 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e067      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c84:	4b35      	ldr	r3, [pc, #212]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c98:	d108      	bne.n	8003cac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c9a:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	492d      	ldr	r1, [pc, #180]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cac:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a19      	ldr	r1, [r3, #32]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	4927      	ldr	r1, [pc, #156]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <HAL_RCC_OscConfig+0x4fc>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7ff fa39 	bl	8003140 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7ff fa35 	bl	8003140 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e037      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x46a>
 8003cf0:	e02f      	b.n	8003d52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <HAL_RCC_OscConfig+0x4fc>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7ff fa22 	bl	8003140 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7ff fa1e 	bl	8003140 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e020      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x498>
 8003d1e:	e018      	b.n	8003d52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e013      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_OscConfig+0x4f4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40007000 	.word	0x40007000
 8003d64:	42420060 	.word	0x42420060

08003d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0d0      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b6a      	ldr	r3, [pc, #424]	; (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d910      	bls.n	8003dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b67      	ldr	r3, [pc, #412]	; (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 0207 	bic.w	r2, r3, #7
 8003d92:	4965      	ldr	r1, [pc, #404]	; (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b63      	ldr	r3, [pc, #396]	; (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0b8      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d020      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc4:	4b59      	ldr	r3, [pc, #356]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4a58      	ldr	r2, [pc, #352]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ddc:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a52      	ldr	r2, [pc, #328]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003de2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003de6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de8:	4b50      	ldr	r3, [pc, #320]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	494d      	ldr	r1, [pc, #308]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d040      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	4b47      	ldr	r3, [pc, #284]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d115      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e07f      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d107      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e073      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e36:	4b3d      	ldr	r3, [pc, #244]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e06b      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e46:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f023 0203 	bic.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4936      	ldr	r1, [pc, #216]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e58:	f7ff f972 	bl	8003140 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e60:	f7ff f96e 	bl	8003140 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e053      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	4b2d      	ldr	r3, [pc, #180]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 020c 	and.w	r2, r3, #12
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d1eb      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e88:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d210      	bcs.n	8003eb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 0207 	bic.w	r2, r3, #7
 8003e9e:	4922      	ldr	r1, [pc, #136]	; (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea6:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e032      	b.n	8003f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec4:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4916      	ldr	r1, [pc, #88]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	490e      	ldr	r1, [pc, #56]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ef6:	f000 f821 	bl	8003f3c <HAL_RCC_GetSysClockFreq>
 8003efa:	4601      	mov	r1, r0
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_RCC_ClockConfig+0x1c4>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <HAL_RCC_ClockConfig+0x1c8>)
 8003f08:	5cd3      	ldrb	r3, [r2, r3]
 8003f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f0e:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <HAL_RCC_ClockConfig+0x1cc>)
 8003f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCC_ClockConfig+0x1d0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fd fd04 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40022000 	.word	0x40022000
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	080082b0 	.word	0x080082b0
 8003f34:	20000018 	.word	0x20000018
 8003f38:	20000040 	.word	0x20000040

08003f3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f3c:	b490      	push	{r4, r7}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f42:	4b2a      	ldr	r3, [pc, #168]	; (8003fec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f44:	1d3c      	adds	r4, r7, #4
 8003f46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f4c:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f66:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d002      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x40>
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d003      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0x46>
 8003f7a:	e02d      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f7e:	623b      	str	r3, [r7, #32]
      break;
 8003f80:	e02d      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	0c9b      	lsrs	r3, r3, #18
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f8e:	4413      	add	r3, r2
 8003f90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d013      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fa0:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	0c5b      	lsrs	r3, r3, #17
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fae:	4413      	add	r3, r2
 8003fb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003fb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	4a0f      	ldr	r2, [pc, #60]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fba:	fb02 f203 	mul.w	r2, r2, r3
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc6:	e004      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4a0c      	ldr	r2, [pc, #48]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fcc:	fb02 f303 	mul.w	r3, r2, r3
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	623b      	str	r3, [r7, #32]
      break;
 8003fd6:	e002      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fda:	623b      	str	r3, [r7, #32]
      break;
 8003fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fde:	6a3b      	ldr	r3, [r7, #32]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3728      	adds	r7, #40	; 0x28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc90      	pop	{r4, r7}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	080081d0 	.word	0x080081d0
 8003ff0:	080081e0 	.word	0x080081e0
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	007a1200 	.word	0x007a1200
 8003ffc:	003d0900 	.word	0x003d0900

08004000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004004:	4b02      	ldr	r3, [pc, #8]	; (8004010 <HAL_RCC_GetHCLKFreq+0x10>)
 8004006:	681b      	ldr	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	20000018 	.word	0x20000018

08004014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004018:	f7ff fff2 	bl	8004000 <HAL_RCC_GetHCLKFreq>
 800401c:	4601      	mov	r1, r0
 800401e:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	4a03      	ldr	r2, [pc, #12]	; (8004038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800402a:	5cd3      	ldrb	r3, [r2, r3]
 800402c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	080082c0 	.word	0x080082c0

0800403c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004040:	f7ff ffde 	bl	8004000 <HAL_RCC_GetHCLKFreq>
 8004044:	4601      	mov	r1, r0
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	0adb      	lsrs	r3, r3, #11
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	4a03      	ldr	r2, [pc, #12]	; (8004060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004052:	5cd3      	ldrb	r3, [r2, r3]
 8004054:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000
 8004060:	080082c0 	.word	0x080082c0

08004064 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	220f      	movs	r2, #15
 8004072:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <HAL_RCC_GetClockConfig+0x58>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 0203 	and.w	r2, r3, #3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <HAL_RCC_GetClockConfig+0x58>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_GetClockConfig+0x58>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <HAL_RCC_GetClockConfig+0x58>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	08db      	lsrs	r3, r3, #3
 800409e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCC_GetClockConfig+0x5c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0207 	and.w	r2, r3, #7
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40022000 	.word	0x40022000

080040c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <RCC_Delay+0x34>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <RCC_Delay+0x38>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	0a5b      	lsrs	r3, r3, #9
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040e0:	bf00      	nop
  }
  while (Delay --);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1e5a      	subs	r2, r3, #1
 80040e6:	60fa      	str	r2, [r7, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f9      	bne.n	80040e0 <RCC_Delay+0x1c>
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000018 	.word	0x20000018
 80040fc:	10624dd3 	.word	0x10624dd3

08004100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e076      	b.n	8004200 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	d108      	bne.n	800412c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004122:	d009      	beq.n	8004138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	61da      	str	r2, [r3, #28]
 800412a:	e005      	b.n	8004138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd fb9a 	bl	800188c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800416e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	ea42 0103 	orr.w	r1, r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	0c1a      	lsrs	r2, r3, #16
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f002 0204 	and.w	r2, r2, #4
 80041de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	; 0x30
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004216:	2301      	movs	r3, #1
 8004218:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_SPI_TransmitReceive+0x26>
 800422a:	2302      	movs	r3, #2
 800422c:	e18a      	b.n	8004544 <HAL_SPI_TransmitReceive+0x33c>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004236:	f7fe ff83 	bl	8003140 <HAL_GetTick>
 800423a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800424c:	887b      	ldrh	r3, [r7, #2]
 800424e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004250:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004254:	2b01      	cmp	r3, #1
 8004256:	d00f      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x70>
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800425e:	d107      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d103      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x68>
 8004268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800426c:	2b04      	cmp	r3, #4
 800426e:	d003      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004270:	2302      	movs	r3, #2
 8004272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004276:	e15b      	b.n	8004530 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d005      	beq.n	800428a <HAL_SPI_TransmitReceive+0x82>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_SPI_TransmitReceive+0x82>
 8004284:	887b      	ldrh	r3, [r7, #2]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004290:	e14e      	b.n	8004530 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b04      	cmp	r3, #4
 800429c:	d003      	beq.n	80042a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2205      	movs	r2, #5
 80042a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	887a      	ldrh	r2, [r7, #2]
 80042b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	887a      	ldrh	r2, [r7, #2]
 80042bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	887a      	ldrh	r2, [r7, #2]
 80042ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d007      	beq.n	80042fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004302:	d178      	bne.n	80043f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <HAL_SPI_TransmitReceive+0x10a>
 800430c:	8b7b      	ldrh	r3, [r7, #26]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d166      	bne.n	80043e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	881a      	ldrh	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	1c9a      	adds	r2, r3, #2
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004336:	e053      	b.n	80043e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d11b      	bne.n	800437e <HAL_SPI_TransmitReceive+0x176>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d016      	beq.n	800437e <HAL_SPI_TransmitReceive+0x176>
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d113      	bne.n	800437e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	881a      	ldrh	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	1c9a      	adds	r2, r3, #2
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d119      	bne.n	80043c0 <HAL_SPI_TransmitReceive+0x1b8>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d014      	beq.n	80043c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	b292      	uxth	r2, r2
 80043a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	1c9a      	adds	r2, r3, #2
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043bc:	2301      	movs	r3, #1
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043c0:	f7fe febe 	bl	8003140 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d807      	bhi.n	80043e0 <HAL_SPI_TransmitReceive+0x1d8>
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d003      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80043de:	e0a7      	b.n	8004530 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1a6      	bne.n	8004338 <HAL_SPI_TransmitReceive+0x130>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1a1      	bne.n	8004338 <HAL_SPI_TransmitReceive+0x130>
 80043f4:	e07c      	b.n	80044f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_SPI_TransmitReceive+0x1fc>
 80043fe:	8b7b      	ldrh	r3, [r7, #26]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d16b      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800442a:	e057      	b.n	80044dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d11c      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x26c>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d017      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x26c>
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d114      	bne.n	8004474 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	7812      	ldrb	r2, [r2, #0]
 8004456:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b01      	cmp	r3, #1
 8004480:	d119      	bne.n	80044b6 <HAL_SPI_TransmitReceive+0x2ae>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d014      	beq.n	80044b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044b2:	2301      	movs	r3, #1
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044b6:	f7fe fe43 	bl	8003140 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d803      	bhi.n	80044ce <HAL_SPI_TransmitReceive+0x2c6>
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d102      	bne.n	80044d4 <HAL_SPI_TransmitReceive+0x2cc>
 80044ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044da:	e029      	b.n	8004530 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1a2      	bne.n	800442c <HAL_SPI_TransmitReceive+0x224>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d19d      	bne.n	800442c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f8b1 	bl	800465c <SPI_EndRxTxTransaction>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d006      	beq.n	800450e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800450c:	e010      	b.n	8004530 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	e000      	b.n	8004530 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800452e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004540:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004544:	4618      	mov	r0, r3
 8004546:	3730      	adds	r7, #48	; 0x30
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800455c:	f7fe fdf0 	bl	8003140 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	4413      	add	r3, r2
 800456a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800456c:	f7fe fde8 	bl	8003140 <HAL_GetTick>
 8004570:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004572:	4b39      	ldr	r3, [pc, #228]	; (8004658 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	015b      	lsls	r3, r3, #5
 8004578:	0d1b      	lsrs	r3, r3, #20
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	fb02 f303 	mul.w	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004582:	e054      	b.n	800462e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d050      	beq.n	800462e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800458c:	f7fe fdd8 	bl	8003140 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	429a      	cmp	r2, r3
 800459a:	d902      	bls.n	80045a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d13d      	bne.n	800461e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ba:	d111      	bne.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c4:	d004      	beq.n	80045d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ce:	d107      	bne.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e8:	d10f      	bne.n	800460a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e017      	b.n	800464e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3b01      	subs	r3, #1
 800462c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4013      	ands	r3, r2
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	429a      	cmp	r2, r3
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	429a      	cmp	r2, r3
 800464a:	d19b      	bne.n	8004584 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000018 	.word	0x20000018

0800465c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2200      	movs	r2, #0
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7ff ff6a 	bl	800454c <SPI_WaitFlagStateUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	f043 0220 	orr.w	r2, r3, #32
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e000      	b.n	8004690 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e041      	b.n	800472e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f839 	bl	8004736 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f000 f9b4 	bl	8004a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr

08004748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d001      	beq.n	8004760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e03a      	b.n	80047d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <HAL_TIM_Base_Start_IT+0x98>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00e      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x58>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478a:	d009      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x58>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a14      	ldr	r2, [pc, #80]	; (80047e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_TIM_Base_Start_IT+0x58>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a13      	ldr	r2, [pc, #76]	; (80047e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d111      	bne.n	80047c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b06      	cmp	r3, #6
 80047b0:	d010      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c2:	e007      	b.n	80047d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800

080047ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d122      	bne.n	8004848 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d11b      	bne.n	8004848 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0202 	mvn.w	r2, #2
 8004818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f8ed 	bl	8004a0e <HAL_TIM_IC_CaptureCallback>
 8004834:	e005      	b.n	8004842 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f8e0 	bl	80049fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f8ef 	bl	8004a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b04      	cmp	r3, #4
 8004854:	d122      	bne.n	800489c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b04      	cmp	r3, #4
 8004862:	d11b      	bne.n	800489c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0204 	mvn.w	r2, #4
 800486c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8c3 	bl	8004a0e <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f8b6 	bl	80049fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f8c5 	bl	8004a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d122      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d11b      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0208 	mvn.w	r2, #8
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2204      	movs	r2, #4
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f899 	bl	8004a0e <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f88c 	bl	80049fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f89b 	bl	8004a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d122      	bne.n	8004944 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b10      	cmp	r3, #16
 800490a:	d11b      	bne.n	8004944 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0210 	mvn.w	r2, #16
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2208      	movs	r2, #8
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f86f 	bl	8004a0e <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f862 	bl	80049fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f871 	bl	8004a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b01      	cmp	r3, #1
 8004950:	d10e      	bne.n	8004970 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b01      	cmp	r3, #1
 800495e:	d107      	bne.n	8004970 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0201 	mvn.w	r2, #1
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc fefe 	bl	800176c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d10e      	bne.n	800499c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004988:	2b80      	cmp	r3, #128	; 0x80
 800498a:	d107      	bne.n	800499c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8bf 	bl	8004b1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d10e      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d107      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f835 	bl	8004a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d10e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d107      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0220 	mvn.w	r2, #32
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f88a 	bl	8004b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a29      	ldr	r2, [pc, #164]	; (8004afc <TIM_Base_SetConfig+0xb8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00b      	beq.n	8004a74 <TIM_Base_SetConfig+0x30>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a62:	d007      	beq.n	8004a74 <TIM_Base_SetConfig+0x30>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <TIM_Base_SetConfig+0xbc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <TIM_Base_SetConfig+0x30>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a25      	ldr	r2, [pc, #148]	; (8004b04 <TIM_Base_SetConfig+0xc0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d108      	bne.n	8004a86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a1c      	ldr	r2, [pc, #112]	; (8004afc <TIM_Base_SetConfig+0xb8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00b      	beq.n	8004aa6 <TIM_Base_SetConfig+0x62>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a94:	d007      	beq.n	8004aa6 <TIM_Base_SetConfig+0x62>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <TIM_Base_SetConfig+0xbc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d003      	beq.n	8004aa6 <TIM_Base_SetConfig+0x62>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <TIM_Base_SetConfig+0xc0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d108      	bne.n	8004ab8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a07      	ldr	r2, [pc, #28]	; (8004afc <TIM_Base_SetConfig+0xb8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d103      	bne.n	8004aec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	615a      	str	r2, [r3, #20]
}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800

08004b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b32:	f3ef 8305 	mrs	r3, IPSR
 8004b36:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10f      	bne.n	8004b5e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b42:	607b      	str	r3, [r7, #4]
  return(result);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <osKernelInitialize+0x32>
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <osKernelInitialize+0x60>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d109      	bne.n	8004b66 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b52:	f3ef 8311 	mrs	r3, BASEPRI
 8004b56:	603b      	str	r3, [r7, #0]
  return(result);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004b5e:	f06f 0305 	mvn.w	r3, #5
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e00c      	b.n	8004b80 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <osKernelInitialize+0x60>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004b6e:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <osKernelInitialize+0x60>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e002      	b.n	8004b80 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b80:	68fb      	ldr	r3, [r7, #12]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	2000008c 	.word	0x2000008c

08004b90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b96:	f3ef 8305 	mrs	r3, IPSR
 8004b9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10f      	bne.n	8004bc2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba6:	607b      	str	r3, [r7, #4]
  return(result);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <osKernelStart+0x32>
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <osKernelStart+0x64>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d109      	bne.n	8004bca <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8004bba:	603b      	str	r3, [r7, #0]
  return(result);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <osKernelStart+0x3a>
    stat = osErrorISR;
 8004bc2:	f06f 0305 	mvn.w	r3, #5
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e00e      	b.n	8004be8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <osKernelStart+0x64>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <osKernelStart+0x64>)
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004bd8:	f001 f864 	bl	8005ca4 <vTaskStartScheduler>
      stat = osOK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e002      	b.n	8004be8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004be2:	f04f 33ff 	mov.w	r3, #4294967295
 8004be6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004be8:	68fb      	ldr	r3, [r7, #12]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	2000008c 	.word	0x2000008c

08004bf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b092      	sub	sp, #72	; 0x48
 8004bfc:	af04      	add	r7, sp, #16
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c08:	f3ef 8305 	mrs	r3, IPSR
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f040 8094 	bne.w	8004d3e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c16:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1a:	623b      	str	r3, [r7, #32]
  return(result);
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f040 808d 	bne.w	8004d3e <osThreadNew+0x146>
 8004c24:	4b48      	ldr	r3, [pc, #288]	; (8004d48 <osThreadNew+0x150>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d106      	bne.n	8004c3a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c30:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f040 8082 	bne.w	8004d3e <osThreadNew+0x146>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d07e      	beq.n	8004d3e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004c44:	2318      	movs	r3, #24
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004c48:	2300      	movs	r3, #0
 8004c4a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004c4c:	f107 031b 	add.w	r3, r7, #27
 8004c50:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004c52:	f04f 33ff 	mov.w	r3, #4294967295
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d045      	beq.n	8004cea <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <osThreadNew+0x74>
        name = attr->name;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <osThreadNew+0x9a>
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	2b38      	cmp	r3, #56	; 0x38
 8004c84:	d805      	bhi.n	8004c92 <osThreadNew+0x9a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <osThreadNew+0x9e>
        return (NULL);
 8004c92:	2300      	movs	r3, #0
 8004c94:	e054      	b.n	8004d40 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	089b      	lsrs	r3, r3, #2
 8004ca4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00e      	beq.n	8004ccc <osThreadNew+0xd4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2b5b      	cmp	r3, #91	; 0x5b
 8004cb4:	d90a      	bls.n	8004ccc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d006      	beq.n	8004ccc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <osThreadNew+0xd4>
        mem = 1;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cca:	e010      	b.n	8004cee <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10c      	bne.n	8004cee <osThreadNew+0xf6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d108      	bne.n	8004cee <osThreadNew+0xf6>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <osThreadNew+0xf6>
          mem = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ce8:	e001      	b.n	8004cee <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d110      	bne.n	8004d16 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cfc:	9202      	str	r2, [sp, #8]
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fe02 	bl	8005914 <xTaskCreateStatic>
 8004d10:	4603      	mov	r3, r0
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e013      	b.n	8004d3e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d110      	bne.n	8004d3e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	f107 0314 	add.w	r3, r7, #20
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fe49 	bl	80059c6 <xTaskCreate>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d001      	beq.n	8004d3e <osThreadNew+0x146>
          hTask = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d3e:	697b      	ldr	r3, [r7, #20]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3738      	adds	r7, #56	; 0x38
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	2000008c 	.word	0x2000008c

08004d4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d54:	f3ef 8305 	mrs	r3, IPSR
 8004d58:	613b      	str	r3, [r7, #16]
  return(result);
 8004d5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10f      	bne.n	8004d80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d60:	f3ef 8310 	mrs	r3, PRIMASK
 8004d64:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <osDelay+0x34>
 8004d6c:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <osDelay+0x58>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d109      	bne.n	8004d88 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d74:	f3ef 8311 	mrs	r3, BASEPRI
 8004d78:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <osDelay+0x3c>
    stat = osErrorISR;
 8004d80:	f06f 0305 	mvn.w	r3, #5
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e007      	b.n	8004d98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 ff52 	bl	8005c3c <vTaskDelay>
    }
  }

  return (stat);
 8004d98:	697b      	ldr	r3, [r7, #20]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	2000008c 	.word	0x2000008c

08004da8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4a06      	ldr	r2, [pc, #24]	; (8004dd0 <vApplicationGetIdleTaskMemory+0x28>)
 8004db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2280      	movs	r2, #128	; 0x80
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr
 8004dd0:	20000090 	.word	0x20000090
 8004dd4:	200000ec 	.word	0x200000ec

08004dd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a07      	ldr	r2, [pc, #28]	; (8004e04 <vApplicationGetTimerTaskMemory+0x2c>)
 8004de8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4a06      	ldr	r2, [pc, #24]	; (8004e08 <vApplicationGetTimerTaskMemory+0x30>)
 8004dee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004df6:	601a      	str	r2, [r3, #0]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	200002ec 	.word	0x200002ec
 8004e08:	20000348 	.word	0x20000348

08004e0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f103 0208 	add.w	r2, r3, #8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f103 0208 	add.w	r2, r3, #8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f103 0208 	add.w	r2, r3, #8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr

08004e4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr

08004e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr

08004ea8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d103      	bne.n	8004ec8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	e00c      	b.n	8004ee2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	e002      	b.n	8004ed6 <vListInsert+0x2e>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d2f6      	bcs.n	8004ed0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	601a      	str	r2, [r3, #0]
}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6892      	ldr	r2, [r2, #8]
 8004f2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6852      	ldr	r2, [r2, #4]
 8004f38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d103      	bne.n	8004f4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	1e5a      	subs	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr
	...

08004f6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	e7fe      	b.n	8004f92 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004f94:	f001 ff98 	bl	8006ec8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa0:	68f9      	ldr	r1, [r7, #12]
 8004fa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	441a      	add	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	68f9      	ldr	r1, [r7, #12]
 8004fc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	441a      	add	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	22ff      	movs	r2, #255	; 0xff
 8004fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d114      	bne.n	8005014 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01a      	beq.n	8005028 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 f8d8 	bl	80061ac <xTaskRemoveFromEventList>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d012      	beq.n	8005028 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005002:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <xQueueGenericReset+0xcc>)
 8005004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	e009      	b.n	8005028 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3310      	adds	r3, #16
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff fef7 	bl	8004e0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3324      	adds	r3, #36	; 0x24
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fef2 	bl	8004e0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005028:	f001 ff7c 	bl	8006f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800502c:	2301      	movs	r3, #1
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08e      	sub	sp, #56	; 0x38
 8005040:	af02      	add	r7, sp, #8
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d109      	bne.n	8005064 <xQueueGenericCreateStatic+0x28>
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
 8005062:	e7fe      	b.n	8005062 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <xQueueGenericCreateStatic+0x42>
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
 800507c:	e7fe      	b.n	800507c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <xQueueGenericCreateStatic+0x4e>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <xQueueGenericCreateStatic+0x52>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <xQueueGenericCreateStatic+0x54>
 800508e:	2300      	movs	r3, #0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d109      	bne.n	80050a8 <xQueueGenericCreateStatic+0x6c>
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	623b      	str	r3, [r7, #32]
 80050a6:	e7fe      	b.n	80050a6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <xQueueGenericCreateStatic+0x78>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <xQueueGenericCreateStatic+0x7c>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <xQueueGenericCreateStatic+0x7e>
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <xQueueGenericCreateStatic+0x96>
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	61fb      	str	r3, [r7, #28]
 80050d0:	e7fe      	b.n	80050d0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050d2:	2350      	movs	r3, #80	; 0x50
 80050d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b50      	cmp	r3, #80	; 0x50
 80050da:	d009      	beq.n	80050f0 <xQueueGenericCreateStatic+0xb4>
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	e7fe      	b.n	80050ee <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00d      	beq.n	8005116 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005102:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	4613      	mov	r3, r2
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f805 	bl	8005120 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005118:	4618      	mov	r0, r3
 800511a:	3730      	adds	r7, #48	; 0x30
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d103      	bne.n	800513c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	e002      	b.n	8005142 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800514e:	2101      	movs	r1, #1
 8005150:	69b8      	ldr	r0, [r7, #24]
 8005152:	f7ff ff0b 	bl	8004f6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	78fa      	ldrb	r2, [r7, #3]
 800515a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08e      	sub	sp, #56	; 0x38
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005176:	2300      	movs	r3, #0
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	2b00      	cmp	r3, #0
 8005182:	d109      	bne.n	8005198 <xQueueGenericSend+0x30>
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28
 8005196:	e7fe      	b.n	8005196 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <xQueueGenericSend+0x3e>
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <xQueueGenericSend+0x42>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <xQueueGenericSend+0x44>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d109      	bne.n	80051c4 <xQueueGenericSend+0x5c>
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
 80051c2:	e7fe      	b.n	80051c2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d103      	bne.n	80051d2 <xQueueGenericSend+0x6a>
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <xQueueGenericSend+0x6e>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <xQueueGenericSend+0x70>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <xQueueGenericSend+0x88>
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	623b      	str	r3, [r7, #32]
 80051ee:	e7fe      	b.n	80051ee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051f0:	f001 f996 	bl	8006520 <xTaskGetSchedulerState>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <xQueueGenericSend+0x98>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <xQueueGenericSend+0x9c>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <xQueueGenericSend+0x9e>
 8005204:	2300      	movs	r3, #0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <xQueueGenericSend+0xb6>
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	e7fe      	b.n	800521c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800521e:	f001 fe53 	bl	8006ec8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522a:	429a      	cmp	r2, r3
 800522c:	d302      	bcc.n	8005234 <xQueueGenericSend+0xcc>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d129      	bne.n	8005288 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800523a:	f000 f9ff 	bl	800563c <prvCopyDataToQueue>
 800523e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d010      	beq.n	800526a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	3324      	adds	r3, #36	; 0x24
 800524c:	4618      	mov	r0, r3
 800524e:	f000 ffad 	bl	80061ac <xTaskRemoveFromEventList>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d013      	beq.n	8005280 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005258:	4b3f      	ldr	r3, [pc, #252]	; (8005358 <xQueueGenericSend+0x1f0>)
 800525a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	e00a      	b.n	8005280 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005270:	4b39      	ldr	r3, [pc, #228]	; (8005358 <xQueueGenericSend+0x1f0>)
 8005272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005280:	f001 fe50 	bl	8006f24 <vPortExitCritical>
				return pdPASS;
 8005284:	2301      	movs	r3, #1
 8005286:	e063      	b.n	8005350 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d103      	bne.n	8005296 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800528e:	f001 fe49 	bl	8006f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005292:	2300      	movs	r3, #0
 8005294:	e05c      	b.n	8005350 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800529c:	f107 0314 	add.w	r3, r7, #20
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 ffe5 	bl	8006270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052a6:	2301      	movs	r3, #1
 80052a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052aa:	f001 fe3b 	bl	8006f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052ae:	f000 fd5d 	bl	8005d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052b2:	f001 fe09 	bl	8006ec8 <vPortEnterCritical>
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052bc:	b25b      	sxtb	r3, r3
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d103      	bne.n	80052cc <xQueueGenericSend+0x164>
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052d2:	b25b      	sxtb	r3, r3
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d103      	bne.n	80052e2 <xQueueGenericSend+0x17a>
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052e2:	f001 fe1f 	bl	8006f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052e6:	1d3a      	adds	r2, r7, #4
 80052e8:	f107 0314 	add.w	r3, r7, #20
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 ffd4 	bl	800629c <xTaskCheckForTimeOut>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d124      	bne.n	8005344 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052fc:	f000 fa96 	bl	800582c <prvIsQueueFull>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d018      	beq.n	8005338 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	3310      	adds	r3, #16
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fefe 	bl	8006110 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005316:	f000 fa21 	bl	800575c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800531a:	f000 fd35 	bl	8005d88 <xTaskResumeAll>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	f47f af7c 	bne.w	800521e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <xQueueGenericSend+0x1f0>)
 8005328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	e772      	b.n	800521e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800533a:	f000 fa0f 	bl	800575c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800533e:	f000 fd23 	bl	8005d88 <xTaskResumeAll>
 8005342:	e76c      	b.n	800521e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005346:	f000 fa09 	bl	800575c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800534a:	f000 fd1d 	bl	8005d88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800534e:	2300      	movs	r3, #0
		}
	}
}
 8005350:	4618      	mov	r0, r3
 8005352:	3738      	adds	r7, #56	; 0x38
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08e      	sub	sp, #56	; 0x38
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	2b00      	cmp	r3, #0
 8005372:	d109      	bne.n	8005388 <xQueueGenericSendFromISR+0x2c>
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
 8005386:	e7fe      	b.n	8005386 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <xQueueGenericSendFromISR+0x3a>
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <xQueueGenericSendFromISR+0x3e>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <xQueueGenericSendFromISR+0x40>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <xQueueGenericSendFromISR+0x58>
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	e7fe      	b.n	80053b2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d103      	bne.n	80053c2 <xQueueGenericSendFromISR+0x66>
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <xQueueGenericSendFromISR+0x6a>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <xQueueGenericSendFromISR+0x6c>
 80053c6:	2300      	movs	r3, #0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <xQueueGenericSendFromISR+0x84>
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	e7fe      	b.n	80053de <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053e0:	f001 fe2c 	bl	800703c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053e4:	f3ef 8211 	mrs	r2, BASEPRI
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	61ba      	str	r2, [r7, #24]
 80053fa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	429a      	cmp	r2, r3
 800540a:	d302      	bcc.n	8005412 <xQueueGenericSendFromISR+0xb6>
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d12c      	bne.n	800546c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005422:	f000 f90b 	bl	800563c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005426:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542e:	d112      	bne.n	8005456 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	2b00      	cmp	r3, #0
 8005436:	d016      	beq.n	8005466 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	3324      	adds	r3, #36	; 0x24
 800543c:	4618      	mov	r0, r3
 800543e:	f000 feb5 	bl	80061ac <xTaskRemoveFromEventList>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00e      	beq.n	8005466 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	e007      	b.n	8005466 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800545a:	3301      	adds	r3, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	b25a      	sxtb	r2, r3
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005466:	2301      	movs	r3, #1
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800546a:	e001      	b.n	8005470 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800546c:	2300      	movs	r3, #0
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800547c:	4618      	mov	r0, r3
 800547e:	3738      	adds	r7, #56	; 0x38
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08c      	sub	sp, #48	; 0x30
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005490:	2300      	movs	r3, #0
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <xQueueReceive+0x2e>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	623b      	str	r3, [r7, #32]
 80054b0:	e7fe      	b.n	80054b0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d103      	bne.n	80054c0 <xQueueReceive+0x3c>
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <xQueueReceive+0x40>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <xQueueReceive+0x42>
 80054c4:	2300      	movs	r3, #0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <xQueueReceive+0x5a>
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	e7fe      	b.n	80054dc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054de:	f001 f81f 	bl	8006520 <xTaskGetSchedulerState>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <xQueueReceive+0x6a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <xQueueReceive+0x6e>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <xQueueReceive+0x70>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <xQueueReceive+0x88>
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	e7fe      	b.n	800550a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800550c:	f001 fcdc 	bl	8006ec8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01f      	beq.n	800555c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005520:	f000 f8f6 	bl	8005710 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	1e5a      	subs	r2, r3, #1
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00f      	beq.n	8005554 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	3310      	adds	r3, #16
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fe37 	bl	80061ac <xTaskRemoveFromEventList>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005544:	4b3c      	ldr	r3, [pc, #240]	; (8005638 <xQueueReceive+0x1b4>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005554:	f001 fce6 	bl	8006f24 <vPortExitCritical>
				return pdPASS;
 8005558:	2301      	movs	r3, #1
 800555a:	e069      	b.n	8005630 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005562:	f001 fcdf 	bl	8006f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005566:	2300      	movs	r3, #0
 8005568:	e062      	b.n	8005630 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005570:	f107 0310 	add.w	r3, r7, #16
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fe7b 	bl	8006270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800557a:	2301      	movs	r3, #1
 800557c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800557e:	f001 fcd1 	bl	8006f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005582:	f000 fbf3 	bl	8005d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005586:	f001 fc9f 	bl	8006ec8 <vPortEnterCritical>
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005590:	b25b      	sxtb	r3, r3
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d103      	bne.n	80055a0 <xQueueReceive+0x11c>
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a6:	b25b      	sxtb	r3, r3
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d103      	bne.n	80055b6 <xQueueReceive+0x132>
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055b6:	f001 fcb5 	bl	8006f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ba:	1d3a      	adds	r2, r7, #4
 80055bc:	f107 0310 	add.w	r3, r7, #16
 80055c0:	4611      	mov	r1, r2
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fe6a 	bl	800629c <xTaskCheckForTimeOut>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d123      	bne.n	8005616 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d0:	f000 f916 	bl	8005800 <prvIsQueueEmpty>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d017      	beq.n	800560a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	3324      	adds	r3, #36	; 0x24
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4611      	mov	r1, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fd94 	bl	8006110 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ea:	f000 f8b7 	bl	800575c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055ee:	f000 fbcb 	bl	8005d88 <xTaskResumeAll>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d189      	bne.n	800550c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80055f8:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <xQueueReceive+0x1b4>)
 80055fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	e780      	b.n	800550c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800560a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800560c:	f000 f8a6 	bl	800575c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005610:	f000 fbba 	bl	8005d88 <xTaskResumeAll>
 8005614:	e77a      	b.n	800550c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005618:	f000 f8a0 	bl	800575c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800561c:	f000 fbb4 	bl	8005d88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005622:	f000 f8ed 	bl	8005800 <prvIsQueueEmpty>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	f43f af6f 	beq.w	800550c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800562e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005630:	4618      	mov	r0, r3
 8005632:	3730      	adds	r7, #48	; 0x30
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d14d      	bne.n	80056fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4618      	mov	r0, r3
 8005668:	f000 ff78 	bl	800655c <xTaskPriorityDisinherit>
 800566c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	605a      	str	r2, [r3, #4]
 8005674:	e043      	b.n	80056fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d119      	bne.n	80056b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6898      	ldr	r0, [r3, #8]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	461a      	mov	r2, r3
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	f001 ff1b 	bl	80074c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	441a      	add	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d32b      	bcc.n	80056fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	609a      	str	r2, [r3, #8]
 80056ae:	e026      	b.n	80056fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68d8      	ldr	r0, [r3, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	461a      	mov	r2, r3
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	f001 ff01 	bl	80074c2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	425b      	negs	r3, r3
 80056ca:	441a      	add	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d207      	bcs.n	80056ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	425b      	negs	r3, r3
 80056e6:	441a      	add	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d105      	bne.n	80056fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005706:	697b      	ldr	r3, [r7, #20]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d018      	beq.n	8005754 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	441a      	add	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	d303      	bcc.n	8005744 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68d9      	ldr	r1, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	461a      	mov	r2, r3
 800574e:	6838      	ldr	r0, [r7, #0]
 8005750:	f001 feb7 	bl	80074c2 <memcpy>
	}
}
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005764:	f001 fbb0 	bl	8006ec8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800576e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005770:	e011      	b.n	8005796 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d012      	beq.n	80057a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3324      	adds	r3, #36	; 0x24
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fd14 	bl	80061ac <xTaskRemoveFromEventList>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800578a:	f000 fde7 	bl	800635c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	3b01      	subs	r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800579a:	2b00      	cmp	r3, #0
 800579c:	dce9      	bgt.n	8005772 <prvUnlockQueue+0x16>
 800579e:	e000      	b.n	80057a2 <prvUnlockQueue+0x46>
					break;
 80057a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	22ff      	movs	r2, #255	; 0xff
 80057a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80057aa:	f001 fbbb 	bl	8006f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057ae:	f001 fb8b 	bl	8006ec8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ba:	e011      	b.n	80057e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d012      	beq.n	80057ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3310      	adds	r3, #16
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fcef 	bl	80061ac <xTaskRemoveFromEventList>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057d4:	f000 fdc2 	bl	800635c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057d8:	7bbb      	ldrb	r3, [r7, #14]
 80057da:	3b01      	subs	r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	dce9      	bgt.n	80057bc <prvUnlockQueue+0x60>
 80057e8:	e000      	b.n	80057ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	22ff      	movs	r2, #255	; 0xff
 80057f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80057f4:	f001 fb96 	bl	8006f24 <vPortExitCritical>
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005808:	f001 fb5e 	bl	8006ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005814:	2301      	movs	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	e001      	b.n	800581e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800581e:	f001 fb81 	bl	8006f24 <vPortExitCritical>

	return xReturn;
 8005822:	68fb      	ldr	r3, [r7, #12]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005834:	f001 fb48 	bl	8006ec8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005840:	429a      	cmp	r2, r3
 8005842:	d102      	bne.n	800584a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e001      	b.n	800584e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800584e:	f001 fb69 	bl	8006f24 <vPortExitCritical>

	return xReturn;
 8005852:	68fb      	ldr	r3, [r7, #12]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	e014      	b.n	8005896 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800586c:	4a0e      	ldr	r2, [pc, #56]	; (80058a8 <vQueueAddToRegistry+0x4c>)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005878:	490b      	ldr	r1, [pc, #44]	; (80058a8 <vQueueAddToRegistry+0x4c>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005882:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <vQueueAddToRegistry+0x4c>)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	4413      	add	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800588e:	e005      	b.n	800589c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3301      	adds	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b07      	cmp	r3, #7
 800589a:	d9e7      	bls.n	800586c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20002c94 	.word	0x20002c94

080058ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80058bc:	f001 fb04 	bl	8006ec8 <vPortEnterCritical>
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c6:	b25b      	sxtb	r3, r3
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d103      	bne.n	80058d6 <vQueueWaitForMessageRestricted+0x2a>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058dc:	b25b      	sxtb	r3, r3
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e2:	d103      	bne.n	80058ec <vQueueWaitForMessageRestricted+0x40>
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ec:	f001 fb1a 	bl	8006f24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	3324      	adds	r3, #36	; 0x24
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fc29 	bl	8006158 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005906:	6978      	ldr	r0, [r7, #20]
 8005908:	f7ff ff28 	bl	800575c <prvUnlockQueue>
	}
 800590c:	bf00      	nop
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08e      	sub	sp, #56	; 0x38
 8005918:	af04      	add	r7, sp, #16
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	2b00      	cmp	r3, #0
 8005926:	d109      	bne.n	800593c <xTaskCreateStatic+0x28>
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	623b      	str	r3, [r7, #32]
 800593a:	e7fe      	b.n	800593a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <xTaskCreateStatic+0x42>
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	e7fe      	b.n	8005954 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005956:	235c      	movs	r3, #92	; 0x5c
 8005958:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b5c      	cmp	r3, #92	; 0x5c
 800595e:	d009      	beq.n	8005974 <xTaskCreateStatic+0x60>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e7fe      	b.n	8005972 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01e      	beq.n	80059b8 <xTaskCreateStatic+0xa4>
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01b      	beq.n	80059b8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005988:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	2202      	movs	r2, #2
 800598e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005992:	2300      	movs	r3, #0
 8005994:	9303      	str	r3, [sp, #12]
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	9302      	str	r3, [sp, #8]
 800599a:	f107 0314 	add.w	r3, r7, #20
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f850 	bl	8005a50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059b2:	f000 f8d3 	bl	8005b5c <prvAddNewTaskToReadyList>
 80059b6:	e001      	b.n	80059bc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059bc:	697b      	ldr	r3, [r7, #20]
	}
 80059be:	4618      	mov	r0, r3
 80059c0:	3728      	adds	r7, #40	; 0x28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b08c      	sub	sp, #48	; 0x30
 80059ca:	af04      	add	r7, sp, #16
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	603b      	str	r3, [r7, #0]
 80059d2:	4613      	mov	r3, r2
 80059d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fb6a 	bl	80070b4 <pvPortMalloc>
 80059e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00e      	beq.n	8005a06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80059e8:	205c      	movs	r0, #92	; 0x5c
 80059ea:	f001 fb63 	bl	80070b4 <pvPortMalloc>
 80059ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30
 80059fc:	e005      	b.n	8005a0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059fe:	6978      	ldr	r0, [r7, #20]
 8005a00:	f001 fc1a 	bl	8007238 <vPortFree>
 8005a04:	e001      	b.n	8005a0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d017      	beq.n	8005a40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a18:	88fa      	ldrh	r2, [r7, #6]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9303      	str	r3, [sp, #12]
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	9302      	str	r3, [sp, #8]
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f80e 	bl	8005a50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a34:	69f8      	ldr	r0, [r7, #28]
 8005a36:	f000 f891 	bl	8005b5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e002      	b.n	8005a46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a40:	f04f 33ff 	mov.w	r3, #4294967295
 8005a44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a46:	69bb      	ldr	r3, [r7, #24]
	}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	461a      	mov	r2, r3
 8005a68:	21a5      	movs	r1, #165	; 0xa5
 8005a6a:	f001 fd35 	bl	80074d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	f023 0307 	bic.w	r3, r3, #7
 8005a86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <prvInitialiseNewTask+0x56>
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e7fe      	b.n	8005aa4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	e012      	b.n	8005ad2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	7819      	ldrb	r1, [r3, #0]
 8005ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	3334      	adds	r3, #52	; 0x34
 8005abc:	460a      	mov	r2, r1
 8005abe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d006      	beq.n	8005ada <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	2b0f      	cmp	r3, #15
 8005ad6:	d9e9      	bls.n	8005aac <prvInitialiseNewTask+0x5c>
 8005ad8:	e000      	b.n	8005adc <prvInitialiseNewTask+0x8c>
		{
			break;
 8005ada:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	2b37      	cmp	r3, #55	; 0x37
 8005ae8:	d901      	bls.n	8005aee <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005aea:	2337      	movs	r3, #55	; 0x37
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005af8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	2200      	movs	r2, #0
 8005afe:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	3304      	adds	r3, #4
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff f9a0 	bl	8004e4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	3318      	adds	r3, #24
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff f99b 	bl	8004e4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	69b8      	ldr	r0, [r7, #24]
 8005b3e:	f001 f8d7 	bl	8006cf0 <pxPortInitialiseStack>
 8005b42:	4602      	mov	r2, r0
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b54:	bf00      	nop
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b64:	f001 f9b0 	bl	8006ec8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b68:	4b2d      	ldr	r3, [pc, #180]	; (8005c20 <prvAddNewTaskToReadyList+0xc4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4a2c      	ldr	r2, [pc, #176]	; (8005c20 <prvAddNewTaskToReadyList+0xc4>)
 8005b70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b72:	4b2c      	ldr	r3, [pc, #176]	; (8005c24 <prvAddNewTaskToReadyList+0xc8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d109      	bne.n	8005b8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b7a:	4a2a      	ldr	r2, [pc, #168]	; (8005c24 <prvAddNewTaskToReadyList+0xc8>)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b80:	4b27      	ldr	r3, [pc, #156]	; (8005c20 <prvAddNewTaskToReadyList+0xc4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d110      	bne.n	8005baa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b88:	f000 fc0c 	bl	80063a4 <prvInitialiseTaskLists>
 8005b8c:	e00d      	b.n	8005baa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b8e:	4b26      	ldr	r3, [pc, #152]	; (8005c28 <prvAddNewTaskToReadyList+0xcc>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b96:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <prvAddNewTaskToReadyList+0xc8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d802      	bhi.n	8005baa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ba4:	4a1f      	ldr	r2, [pc, #124]	; (8005c24 <prvAddNewTaskToReadyList+0xc8>)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005baa:	4b20      	ldr	r3, [pc, #128]	; (8005c2c <prvAddNewTaskToReadyList+0xd0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	4a1e      	ldr	r2, [pc, #120]	; (8005c2c <prvAddNewTaskToReadyList+0xd0>)
 8005bb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <prvAddNewTaskToReadyList+0xd0>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <prvAddNewTaskToReadyList+0xd4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d903      	bls.n	8005bd0 <prvAddNewTaskToReadyList+0x74>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	4a18      	ldr	r2, [pc, #96]	; (8005c30 <prvAddNewTaskToReadyList+0xd4>)
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <prvAddNewTaskToReadyList+0xd8>)
 8005bde:	441a      	add	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f7ff f93b 	bl	8004e62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bec:	f001 f99a 	bl	8006f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <prvAddNewTaskToReadyList+0xcc>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00e      	beq.n	8005c16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <prvAddNewTaskToReadyList+0xc8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d207      	bcs.n	8005c16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <prvAddNewTaskToReadyList+0xdc>)
 8005c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000c1c 	.word	0x20000c1c
 8005c24:	20000748 	.word	0x20000748
 8005c28:	20000c28 	.word	0x20000c28
 8005c2c:	20000c38 	.word	0x20000c38
 8005c30:	20000c24 	.word	0x20000c24
 8005c34:	2000074c 	.word	0x2000074c
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <vTaskDelay+0x60>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <vTaskDelay+0x2e>
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	e7fe      	b.n	8005c68 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005c6a:	f000 f87f 	bl	8005d6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c6e:	2100      	movs	r1, #0
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fcdf 	bl	8006634 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c76:	f000 f887 	bl	8005d88 <xTaskResumeAll>
 8005c7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d107      	bne.n	8005c92 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <vTaskDelay+0x64>)
 8005c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000c44 	.word	0x20000c44
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08a      	sub	sp, #40	; 0x28
 8005ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005cb2:	463a      	mov	r2, r7
 8005cb4:	1d39      	adds	r1, r7, #4
 8005cb6:	f107 0308 	add.w	r3, r7, #8
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff f874 	bl	8004da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	9202      	str	r2, [sp, #8]
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	4920      	ldr	r1, [pc, #128]	; (8005d54 <vTaskStartScheduler+0xb0>)
 8005cd4:	4820      	ldr	r0, [pc, #128]	; (8005d58 <vTaskStartScheduler+0xb4>)
 8005cd6:	f7ff fe1d 	bl	8005914 <xTaskCreateStatic>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	4b1f      	ldr	r3, [pc, #124]	; (8005d5c <vTaskStartScheduler+0xb8>)
 8005cde:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ce0:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <vTaskStartScheduler+0xb8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e001      	b.n	8005cf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d102      	bne.n	8005cfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005cf8:	f000 fcf0 	bl	80066dc <xTimerCreateTimerTask>
 8005cfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d115      	bne.n	8005d30 <vTaskStartScheduler+0x8c>
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d16:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <vTaskStartScheduler+0xbc>)
 8005d18:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d1e:	4b11      	ldr	r3, [pc, #68]	; (8005d64 <vTaskStartScheduler+0xc0>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d24:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <vTaskStartScheduler+0xc4>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d2a:	f001 f85d 	bl	8006de8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d2e:	e00d      	b.n	8005d4c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	d109      	bne.n	8005d4c <vTaskStartScheduler+0xa8>
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e7fe      	b.n	8005d4a <vTaskStartScheduler+0xa6>
}
 8005d4c:	bf00      	nop
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	080081e4 	.word	0x080081e4
 8005d58:	08006375 	.word	0x08006375
 8005d5c:	20000c40 	.word	0x20000c40
 8005d60:	20000c3c 	.word	0x20000c3c
 8005d64:	20000c28 	.word	0x20000c28
 8005d68:	20000c20 	.word	0x20000c20

08005d6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <vTaskSuspendAll+0x18>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	4a03      	ldr	r2, [pc, #12]	; (8005d84 <vTaskSuspendAll+0x18>)
 8005d78:	6013      	str	r3, [r2, #0]
}
 8005d7a:	bf00      	nop
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20000c44 	.word	0x20000c44

08005d88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d96:	4b41      	ldr	r3, [pc, #260]	; (8005e9c <xTaskResumeAll+0x114>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <xTaskResumeAll+0x2a>
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	e7fe      	b.n	8005db0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005db2:	f001 f889 	bl	8006ec8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005db6:	4b39      	ldr	r3, [pc, #228]	; (8005e9c <xTaskResumeAll+0x114>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	4a37      	ldr	r2, [pc, #220]	; (8005e9c <xTaskResumeAll+0x114>)
 8005dbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dc0:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <xTaskResumeAll+0x114>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d162      	bne.n	8005e8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dc8:	4b35      	ldr	r3, [pc, #212]	; (8005ea0 <xTaskResumeAll+0x118>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d05e      	beq.n	8005e8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dd0:	e02f      	b.n	8005e32 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005dd2:	4b34      	ldr	r3, [pc, #208]	; (8005ea4 <xTaskResumeAll+0x11c>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3318      	adds	r3, #24
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff f89a 	bl	8004f18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff f895 	bl	8004f18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df2:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <xTaskResumeAll+0x120>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d903      	bls.n	8005e02 <xTaskResumeAll+0x7a>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	4a2a      	ldr	r2, [pc, #168]	; (8005ea8 <xTaskResumeAll+0x120>)
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4a27      	ldr	r2, [pc, #156]	; (8005eac <xTaskResumeAll+0x124>)
 8005e10:	441a      	add	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f7ff f822 	bl	8004e62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e22:	4b23      	ldr	r3, [pc, #140]	; (8005eb0 <xTaskResumeAll+0x128>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d302      	bcc.n	8005e32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005e2c:	4b21      	ldr	r3, [pc, #132]	; (8005eb4 <xTaskResumeAll+0x12c>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e32:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <xTaskResumeAll+0x11c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1cb      	bne.n	8005dd2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e40:	f000 fb4a 	bl	80064d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e44:	4b1c      	ldr	r3, [pc, #112]	; (8005eb8 <xTaskResumeAll+0x130>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d010      	beq.n	8005e72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e50:	f000 f844 	bl	8005edc <xTaskIncrementTick>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005e5a:	4b16      	ldr	r3, [pc, #88]	; (8005eb4 <xTaskResumeAll+0x12c>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f1      	bne.n	8005e50 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005e6c:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <xTaskResumeAll+0x130>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <xTaskResumeAll+0x12c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e7e:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <xTaskResumeAll+0x134>)
 8005e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e8e:	f001 f849 	bl	8006f24 <vPortExitCritical>

	return xAlreadyYielded;
 8005e92:	68bb      	ldr	r3, [r7, #8]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000c44 	.word	0x20000c44
 8005ea0:	20000c1c 	.word	0x20000c1c
 8005ea4:	20000bdc 	.word	0x20000bdc
 8005ea8:	20000c24 	.word	0x20000c24
 8005eac:	2000074c 	.word	0x2000074c
 8005eb0:	20000748 	.word	0x20000748
 8005eb4:	20000c30 	.word	0x20000c30
 8005eb8:	20000c2c 	.word	0x20000c2c
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ec6:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <xTaskGetTickCount+0x18>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ecc:	687b      	ldr	r3, [r7, #4]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr
 8005ed8:	20000c20 	.word	0x20000c20

08005edc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ee6:	4b51      	ldr	r3, [pc, #324]	; (800602c <xTaskIncrementTick+0x150>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f040 808d 	bne.w	800600a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ef0:	4b4f      	ldr	r3, [pc, #316]	; (8006030 <xTaskIncrementTick+0x154>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ef8:	4a4d      	ldr	r2, [pc, #308]	; (8006030 <xTaskIncrementTick+0x154>)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d11f      	bne.n	8005f44 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f04:	4b4b      	ldr	r3, [pc, #300]	; (8006034 <xTaskIncrementTick+0x158>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <xTaskIncrementTick+0x46>
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	e7fe      	b.n	8005f20 <xTaskIncrementTick+0x44>
 8005f22:	4b44      	ldr	r3, [pc, #272]	; (8006034 <xTaskIncrementTick+0x158>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	4b43      	ldr	r3, [pc, #268]	; (8006038 <xTaskIncrementTick+0x15c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a41      	ldr	r2, [pc, #260]	; (8006034 <xTaskIncrementTick+0x158>)
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	4a41      	ldr	r2, [pc, #260]	; (8006038 <xTaskIncrementTick+0x15c>)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	4b41      	ldr	r3, [pc, #260]	; (800603c <xTaskIncrementTick+0x160>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	4a3f      	ldr	r2, [pc, #252]	; (800603c <xTaskIncrementTick+0x160>)
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	f000 faca 	bl	80064d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f44:	4b3e      	ldr	r3, [pc, #248]	; (8006040 <xTaskIncrementTick+0x164>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d34e      	bcc.n	8005fec <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f4e:	4b39      	ldr	r3, [pc, #228]	; (8006034 <xTaskIncrementTick+0x158>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <xTaskIncrementTick+0x80>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <xTaskIncrementTick+0x82>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d004      	beq.n	8005f6c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f62:	4b37      	ldr	r3, [pc, #220]	; (8006040 <xTaskIncrementTick+0x164>)
 8005f64:	f04f 32ff 	mov.w	r2, #4294967295
 8005f68:	601a      	str	r2, [r3, #0]
					break;
 8005f6a:	e03f      	b.n	8005fec <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f6c:	4b31      	ldr	r3, [pc, #196]	; (8006034 <xTaskIncrementTick+0x158>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d203      	bcs.n	8005f8c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f84:	4a2e      	ldr	r2, [pc, #184]	; (8006040 <xTaskIncrementTick+0x164>)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6013      	str	r3, [r2, #0]
						break;
 8005f8a:	e02f      	b.n	8005fec <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe ffc1 	bl	8004f18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fe ffb8 	bl	8004f18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fac:	4b25      	ldr	r3, [pc, #148]	; (8006044 <xTaskIncrementTick+0x168>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d903      	bls.n	8005fbc <xTaskIncrementTick+0xe0>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	4a22      	ldr	r2, [pc, #136]	; (8006044 <xTaskIncrementTick+0x168>)
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4a1f      	ldr	r2, [pc, #124]	; (8006048 <xTaskIncrementTick+0x16c>)
 8005fca:	441a      	add	r2, r3
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f7fe ff45 	bl	8004e62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fdc:	4b1b      	ldr	r3, [pc, #108]	; (800604c <xTaskIncrementTick+0x170>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d3b3      	bcc.n	8005f4e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fea:	e7b0      	b.n	8005f4e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fec:	4b17      	ldr	r3, [pc, #92]	; (800604c <xTaskIncrementTick+0x170>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff2:	4915      	ldr	r1, [pc, #84]	; (8006048 <xTaskIncrementTick+0x16c>)
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d907      	bls.n	8006014 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006004:	2301      	movs	r3, #1
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e004      	b.n	8006014 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <xTaskIncrementTick+0x174>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3301      	adds	r3, #1
 8006010:	4a0f      	ldr	r2, [pc, #60]	; (8006050 <xTaskIncrementTick+0x174>)
 8006012:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006014:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <xTaskIncrementTick+0x178>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800601c:	2301      	movs	r3, #1
 800601e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006020:	697b      	ldr	r3, [r7, #20]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000c44 	.word	0x20000c44
 8006030:	20000c20 	.word	0x20000c20
 8006034:	20000bd4 	.word	0x20000bd4
 8006038:	20000bd8 	.word	0x20000bd8
 800603c:	20000c34 	.word	0x20000c34
 8006040:	20000c3c 	.word	0x20000c3c
 8006044:	20000c24 	.word	0x20000c24
 8006048:	2000074c 	.word	0x2000074c
 800604c:	20000748 	.word	0x20000748
 8006050:	20000c2c 	.word	0x20000c2c
 8006054:	20000c30 	.word	0x20000c30

08006058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800605e:	4b27      	ldr	r3, [pc, #156]	; (80060fc <vTaskSwitchContext+0xa4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006066:	4b26      	ldr	r3, [pc, #152]	; (8006100 <vTaskSwitchContext+0xa8>)
 8006068:	2201      	movs	r2, #1
 800606a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800606c:	e040      	b.n	80060f0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800606e:	4b24      	ldr	r3, [pc, #144]	; (8006100 <vTaskSwitchContext+0xa8>)
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006074:	4b23      	ldr	r3, [pc, #140]	; (8006104 <vTaskSwitchContext+0xac>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	e00f      	b.n	800609c <vTaskSwitchContext+0x44>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <vTaskSwitchContext+0x3e>
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	607b      	str	r3, [r7, #4]
 8006094:	e7fe      	b.n	8006094 <vTaskSwitchContext+0x3c>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3b01      	subs	r3, #1
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	491a      	ldr	r1, [pc, #104]	; (8006108 <vTaskSwitchContext+0xb0>)
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0e5      	beq.n	800607c <vTaskSwitchContext+0x24>
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4a13      	ldr	r2, [pc, #76]	; (8006108 <vTaskSwitchContext+0xb0>)
 80060bc:	4413      	add	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	3308      	adds	r3, #8
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d104      	bne.n	80060e0 <vTaskSwitchContext+0x88>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	605a      	str	r2, [r3, #4]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <vTaskSwitchContext+0xb4>)
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	4a06      	ldr	r2, [pc, #24]	; (8006104 <vTaskSwitchContext+0xac>)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6013      	str	r3, [r2, #0]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000c44 	.word	0x20000c44
 8006100:	20000c30 	.word	0x20000c30
 8006104:	20000c24 	.word	0x20000c24
 8006108:	2000074c 	.word	0x2000074c
 800610c:	20000748 	.word	0x20000748

08006110 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <vTaskPlaceOnEventList+0x24>
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	e7fe      	b.n	8006132 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006134:	4b07      	ldr	r3, [pc, #28]	; (8006154 <vTaskPlaceOnEventList+0x44>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3318      	adds	r3, #24
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fe feb3 	bl	8004ea8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006142:	2101      	movs	r1, #1
 8006144:	6838      	ldr	r0, [r7, #0]
 8006146:	f000 fa75 	bl	8006634 <prvAddCurrentTaskToDelayedList>
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000748 	.word	0x20000748

08006158 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d109      	bne.n	800617e <vTaskPlaceOnEventListRestricted+0x26>
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	e7fe      	b.n	800617c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800617e:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <vTaskPlaceOnEventListRestricted+0x50>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3318      	adds	r3, #24
 8006184:	4619      	mov	r1, r3
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7fe fe6b 	bl	8004e62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006192:	f04f 33ff 	mov.w	r3, #4294967295
 8006196:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	68b8      	ldr	r0, [r7, #8]
 800619c:	f000 fa4a 	bl	8006634 <prvAddCurrentTaskToDelayedList>
	}
 80061a0:	bf00      	nop
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20000748 	.word	0x20000748

080061ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <xTaskRemoveFromEventList+0x2a>
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	e7fe      	b.n	80061d4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	3318      	adds	r3, #24
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fe9c 	bl	8004f18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e0:	4b1d      	ldr	r3, [pc, #116]	; (8006258 <xTaskRemoveFromEventList+0xac>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11d      	bne.n	8006224 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fe93 	bl	8004f18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f6:	4b19      	ldr	r3, [pc, #100]	; (800625c <xTaskRemoveFromEventList+0xb0>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d903      	bls.n	8006206 <xTaskRemoveFromEventList+0x5a>
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006202:	4a16      	ldr	r2, [pc, #88]	; (800625c <xTaskRemoveFromEventList+0xb0>)
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4a13      	ldr	r2, [pc, #76]	; (8006260 <xTaskRemoveFromEventList+0xb4>)
 8006214:	441a      	add	r2, r3
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	3304      	adds	r3, #4
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f7fe fe20 	bl	8004e62 <vListInsertEnd>
 8006222:	e005      	b.n	8006230 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	3318      	adds	r3, #24
 8006228:	4619      	mov	r1, r3
 800622a:	480e      	ldr	r0, [pc, #56]	; (8006264 <xTaskRemoveFromEventList+0xb8>)
 800622c:	f7fe fe19 	bl	8004e62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006234:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <xTaskRemoveFromEventList+0xbc>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	429a      	cmp	r2, r3
 800623c:	d905      	bls.n	800624a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800623e:	2301      	movs	r3, #1
 8006240:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006242:	4b0a      	ldr	r3, [pc, #40]	; (800626c <xTaskRemoveFromEventList+0xc0>)
 8006244:	2201      	movs	r2, #1
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	e001      	b.n	800624e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800624e:	697b      	ldr	r3, [r7, #20]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20000c44 	.word	0x20000c44
 800625c:	20000c24 	.word	0x20000c24
 8006260:	2000074c 	.word	0x2000074c
 8006264:	20000bdc 	.word	0x20000bdc
 8006268:	20000748 	.word	0x20000748
 800626c:	20000c30 	.word	0x20000c30

08006270 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <vTaskInternalSetTimeOutState+0x24>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <vTaskInternalSetTimeOutState+0x28>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	605a      	str	r2, [r3, #4]
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000c34 	.word	0x20000c34
 8006298:	20000c20 	.word	0x20000c20

0800629c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d109      	bne.n	80062c0 <xTaskCheckForTimeOut+0x24>
 80062ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	e7fe      	b.n	80062be <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <xTaskCheckForTimeOut+0x3e>
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e7fe      	b.n	80062d8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80062da:	f000 fdf5 	bl	8006ec8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062de:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <xTaskCheckForTimeOut+0xb8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d102      	bne.n	80062fe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e023      	b.n	8006346 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <xTaskCheckForTimeOut+0xbc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d007      	beq.n	800631a <xTaskCheckForTimeOut+0x7e>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	429a      	cmp	r2, r3
 8006312:	d302      	bcc.n	800631a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006314:	2301      	movs	r3, #1
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	e015      	b.n	8006346 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	429a      	cmp	r2, r3
 8006322:	d20b      	bcs.n	800633c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ff9d 	bl	8006270 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	e004      	b.n	8006346 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006342:	2301      	movs	r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006346:	f000 fded 	bl	8006f24 <vPortExitCritical>

	return xReturn;
 800634a:	69fb      	ldr	r3, [r7, #28]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000c20 	.word	0x20000c20
 8006358:	20000c34 	.word	0x20000c34

0800635c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006360:	4b03      	ldr	r3, [pc, #12]	; (8006370 <vTaskMissedYield+0x14>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]
}
 8006366:	bf00      	nop
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	20000c30 	.word	0x20000c30

08006374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800637c:	f000 f852 	bl	8006424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <prvIdleTask+0x28>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d9f9      	bls.n	800637c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <prvIdleTask+0x2c>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006398:	e7f0      	b.n	800637c <prvIdleTask+0x8>
 800639a:	bf00      	nop
 800639c:	2000074c 	.word	0x2000074c
 80063a0:	e000ed04 	.word	0xe000ed04

080063a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063aa:	2300      	movs	r3, #0
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	e00c      	b.n	80063ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4a12      	ldr	r2, [pc, #72]	; (8006404 <prvInitialiseTaskLists+0x60>)
 80063bc:	4413      	add	r3, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe fd24 	bl	8004e0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3301      	adds	r3, #1
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b37      	cmp	r3, #55	; 0x37
 80063ce:	d9ef      	bls.n	80063b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063d0:	480d      	ldr	r0, [pc, #52]	; (8006408 <prvInitialiseTaskLists+0x64>)
 80063d2:	f7fe fd1b 	bl	8004e0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063d6:	480d      	ldr	r0, [pc, #52]	; (800640c <prvInitialiseTaskLists+0x68>)
 80063d8:	f7fe fd18 	bl	8004e0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063dc:	480c      	ldr	r0, [pc, #48]	; (8006410 <prvInitialiseTaskLists+0x6c>)
 80063de:	f7fe fd15 	bl	8004e0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063e2:	480c      	ldr	r0, [pc, #48]	; (8006414 <prvInitialiseTaskLists+0x70>)
 80063e4:	f7fe fd12 	bl	8004e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063e8:	480b      	ldr	r0, [pc, #44]	; (8006418 <prvInitialiseTaskLists+0x74>)
 80063ea:	f7fe fd0f 	bl	8004e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <prvInitialiseTaskLists+0x78>)
 80063f0:	4a05      	ldr	r2, [pc, #20]	; (8006408 <prvInitialiseTaskLists+0x64>)
 80063f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <prvInitialiseTaskLists+0x7c>)
 80063f6:	4a05      	ldr	r2, [pc, #20]	; (800640c <prvInitialiseTaskLists+0x68>)
 80063f8:	601a      	str	r2, [r3, #0]
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	2000074c 	.word	0x2000074c
 8006408:	20000bac 	.word	0x20000bac
 800640c:	20000bc0 	.word	0x20000bc0
 8006410:	20000bdc 	.word	0x20000bdc
 8006414:	20000bf0 	.word	0x20000bf0
 8006418:	20000c08 	.word	0x20000c08
 800641c:	20000bd4 	.word	0x20000bd4
 8006420:	20000bd8 	.word	0x20000bd8

08006424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800642a:	e019      	b.n	8006460 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800642c:	f000 fd4c 	bl	8006ec8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <prvCheckTasksWaitingTermination+0x4c>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	4618      	mov	r0, r3
 800643e:	f7fe fd6b 	bl	8004f18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <prvCheckTasksWaitingTermination+0x50>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3b01      	subs	r3, #1
 8006448:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <prvCheckTasksWaitingTermination+0x50>)
 800644a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <prvCheckTasksWaitingTermination+0x54>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3b01      	subs	r3, #1
 8006452:	4a09      	ldr	r2, [pc, #36]	; (8006478 <prvCheckTasksWaitingTermination+0x54>)
 8006454:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006456:	f000 fd65 	bl	8006f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f80e 	bl	800647c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <prvCheckTasksWaitingTermination+0x54>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e1      	bne.n	800642c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000bf0 	.word	0x20000bf0
 8006474:	20000c1c 	.word	0x20000c1c
 8006478:	20000c04 	.word	0x20000c04

0800647c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800648a:	2b00      	cmp	r3, #0
 800648c:	d108      	bne.n	80064a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fed0 	bl	8007238 <vPortFree>
				vPortFree( pxTCB );
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fecd 	bl	8007238 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800649e:	e017      	b.n	80064d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d103      	bne.n	80064b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fec4 	bl	8007238 <vPortFree>
	}
 80064b0:	e00e      	b.n	80064d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d009      	beq.n	80064d0 <prvDeleteTCB+0x54>
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e7fe      	b.n	80064ce <prvDeleteTCB+0x52>
	}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064de:	4b0e      	ldr	r3, [pc, #56]	; (8006518 <prvResetNextTaskUnblockTime+0x40>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <prvResetNextTaskUnblockTime+0x14>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <prvResetNextTaskUnblockTime+0x16>
 80064ec:	2300      	movs	r3, #0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064f2:	4b0a      	ldr	r3, [pc, #40]	; (800651c <prvResetNextTaskUnblockTime+0x44>)
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295
 80064f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064fa:	e008      	b.n	800650e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <prvResetNextTaskUnblockTime+0x40>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	4a04      	ldr	r2, [pc, #16]	; (800651c <prvResetNextTaskUnblockTime+0x44>)
 800650c:	6013      	str	r3, [r2, #0]
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr
 8006518:	20000bd4 	.word	0x20000bd4
 800651c:	20000c3c 	.word	0x20000c3c

08006520 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006526:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <xTaskGetSchedulerState+0x34>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800652e:	2301      	movs	r3, #1
 8006530:	607b      	str	r3, [r7, #4]
 8006532:	e008      	b.n	8006546 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006534:	4b08      	ldr	r3, [pc, #32]	; (8006558 <xTaskGetSchedulerState+0x38>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800653c:	2302      	movs	r3, #2
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	e001      	b.n	8006546 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006542:	2300      	movs	r3, #0
 8006544:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006546:	687b      	ldr	r3, [r7, #4]
	}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000c28 	.word	0x20000c28
 8006558:	20000c44 	.word	0x20000c44

0800655c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d054      	beq.n	800661c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006572:	4b2d      	ldr	r3, [pc, #180]	; (8006628 <xTaskPriorityDisinherit+0xcc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	429a      	cmp	r2, r3
 800657a:	d009      	beq.n	8006590 <xTaskPriorityDisinherit+0x34>
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	e7fe      	b.n	800658e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <xTaskPriorityDisinherit+0x50>
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	60bb      	str	r3, [r7, #8]
 80065aa:	e7fe      	b.n	80065aa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065be:	429a      	cmp	r2, r3
 80065c0:	d02c      	beq.n	800661c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d128      	bne.n	800661c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	3304      	adds	r3, #4
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fca2 	bl	8004f18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ec:	4b0f      	ldr	r3, [pc, #60]	; (800662c <xTaskPriorityDisinherit+0xd0>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d903      	bls.n	80065fc <xTaskPriorityDisinherit+0xa0>
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	4a0c      	ldr	r2, [pc, #48]	; (800662c <xTaskPriorityDisinherit+0xd0>)
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4a09      	ldr	r2, [pc, #36]	; (8006630 <xTaskPriorityDisinherit+0xd4>)
 800660a:	441a      	add	r2, r3
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	3304      	adds	r3, #4
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f7fe fc25 	bl	8004e62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800661c:	697b      	ldr	r3, [r7, #20]
	}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20000748 	.word	0x20000748
 800662c:	20000c24 	.word	0x20000c24
 8006630:	2000074c 	.word	0x2000074c

08006634 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800663e:	4b21      	ldr	r3, [pc, #132]	; (80066c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006644:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3304      	adds	r3, #4
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fc64 	bl	8004f18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	d10a      	bne.n	800666e <prvAddCurrentTaskToDelayedList+0x3a>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d007      	beq.n	800666e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800665e:	4b1a      	ldr	r3, [pc, #104]	; (80066c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3304      	adds	r3, #4
 8006664:	4619      	mov	r1, r3
 8006666:	4819      	ldr	r0, [pc, #100]	; (80066cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006668:	f7fe fbfb 	bl	8004e62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800666c:	e026      	b.n	80066bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4413      	add	r3, r2
 8006674:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006676:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	429a      	cmp	r2, r3
 8006684:	d209      	bcs.n	800669a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006686:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4b0f      	ldr	r3, [pc, #60]	; (80066c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3304      	adds	r3, #4
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f7fe fc08 	bl	8004ea8 <vListInsert>
}
 8006698:	e010      	b.n	80066bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800669a:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7fe fbfe 	bl	8004ea8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d202      	bcs.n	80066bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066b6:	4a08      	ldr	r2, [pc, #32]	; (80066d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6013      	str	r3, [r2, #0]
}
 80066bc:	bf00      	nop
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20000c20 	.word	0x20000c20
 80066c8:	20000748 	.word	0x20000748
 80066cc:	20000c08 	.word	0x20000c08
 80066d0:	20000bd8 	.word	0x20000bd8
 80066d4:	20000bd4 	.word	0x20000bd4
 80066d8:	20000c3c 	.word	0x20000c3c

080066dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80066e6:	f000 fac3 	bl	8006c70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80066ea:	4b1c      	ldr	r3, [pc, #112]	; (800675c <xTimerCreateTimerTask+0x80>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d021      	beq.n	8006736 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80066fa:	1d3a      	adds	r2, r7, #4
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	f107 030c 	add.w	r3, r7, #12
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe fb67 	bl	8004dd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	9202      	str	r2, [sp, #8]
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	2302      	movs	r3, #2
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	2300      	movs	r3, #0
 800671a:	460a      	mov	r2, r1
 800671c:	4910      	ldr	r1, [pc, #64]	; (8006760 <xTimerCreateTimerTask+0x84>)
 800671e:	4811      	ldr	r0, [pc, #68]	; (8006764 <xTimerCreateTimerTask+0x88>)
 8006720:	f7ff f8f8 	bl	8005914 <xTaskCreateStatic>
 8006724:	4602      	mov	r2, r0
 8006726:	4b10      	ldr	r3, [pc, #64]	; (8006768 <xTimerCreateTimerTask+0x8c>)
 8006728:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800672a:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <xTimerCreateTimerTask+0x8c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006732:	2301      	movs	r3, #1
 8006734:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d109      	bne.n	8006750 <xTimerCreateTimerTask+0x74>
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	e7fe      	b.n	800674e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006750:	697b      	ldr	r3, [r7, #20]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000c78 	.word	0x20000c78
 8006760:	080081ec 	.word	0x080081ec
 8006764:	08006885 	.word	0x08006885
 8006768:	20000c7c 	.word	0x20000c7c

0800676c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08a      	sub	sp, #40	; 0x28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800677a:	2300      	movs	r3, #0
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d109      	bne.n	8006798 <xTimerGenericCommand+0x2c>
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	623b      	str	r3, [r7, #32]
 8006796:	e7fe      	b.n	8006796 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006798:	4b19      	ldr	r3, [pc, #100]	; (8006800 <xTimerGenericCommand+0x94>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d02a      	beq.n	80067f6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b05      	cmp	r3, #5
 80067b0:	dc18      	bgt.n	80067e4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067b2:	f7ff feb5 	bl	8006520 <xTaskGetSchedulerState>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d109      	bne.n	80067d0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <xTimerGenericCommand+0x94>)
 80067be:	6818      	ldr	r0, [r3, #0]
 80067c0:	f107 0110 	add.w	r1, r7, #16
 80067c4:	2300      	movs	r3, #0
 80067c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c8:	f7fe fcce 	bl	8005168 <xQueueGenericSend>
 80067cc:	6278      	str	r0, [r7, #36]	; 0x24
 80067ce:	e012      	b.n	80067f6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <xTimerGenericCommand+0x94>)
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	f107 0110 	add.w	r1, r7, #16
 80067d8:	2300      	movs	r3, #0
 80067da:	2200      	movs	r2, #0
 80067dc:	f7fe fcc4 	bl	8005168 <xQueueGenericSend>
 80067e0:	6278      	str	r0, [r7, #36]	; 0x24
 80067e2:	e008      	b.n	80067f6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <xTimerGenericCommand+0x94>)
 80067e6:	6818      	ldr	r0, [r3, #0]
 80067e8:	f107 0110 	add.w	r1, r7, #16
 80067ec:	2300      	movs	r3, #0
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	f7fe fdb4 	bl	800535c <xQueueGenericSendFromISR>
 80067f4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3728      	adds	r7, #40	; 0x28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000c78 	.word	0x20000c78

08006804 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af02      	add	r7, sp, #8
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800680e:	4b1c      	ldr	r3, [pc, #112]	; (8006880 <prvProcessExpiredTimer+0x7c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	3304      	adds	r3, #4
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fb7b 	bl	8004f18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d121      	bne.n	800686e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	18d1      	adds	r1, r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	6978      	ldr	r0, [r7, #20]
 8006838:	f000 f8c8 	bl	80069cc <prvInsertTimerInActiveList>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d015      	beq.n	800686e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006842:	2300      	movs	r3, #0
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	2300      	movs	r3, #0
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	2100      	movs	r1, #0
 800684c:	6978      	ldr	r0, [r7, #20]
 800684e:	f7ff ff8d 	bl	800676c <xTimerGenericCommand>
 8006852:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <prvProcessExpiredTimer+0x6a>
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e7fe      	b.n	800686c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	6978      	ldr	r0, [r7, #20]
 8006874:	4798      	blx	r3
}
 8006876:	bf00      	nop
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000c70 	.word	0x20000c70

08006884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800688c:	f107 0308 	add.w	r3, r7, #8
 8006890:	4618      	mov	r0, r3
 8006892:	f000 f857 	bl	8006944 <prvGetNextExpireTime>
 8006896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4619      	mov	r1, r3
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f803 	bl	80068a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068a2:	f000 f8d5 	bl	8006a50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068a6:	e7f1      	b.n	800688c <prvTimerTask+0x8>

080068a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068b2:	f7ff fa5b 	bl	8005d6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068b6:	f107 0308 	add.w	r3, r7, #8
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f866 	bl	800698c <prvSampleTimeNow>
 80068c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d130      	bne.n	800692a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <prvProcessTimerOrBlockTask+0x3c>
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d806      	bhi.n	80068e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80068d6:	f7ff fa57 	bl	8005d88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80068da:	68f9      	ldr	r1, [r7, #12]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff ff91 	bl	8006804 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80068e2:	e024      	b.n	800692e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d008      	beq.n	80068fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80068ea:	4b13      	ldr	r3, [pc, #76]	; (8006938 <prvProcessTimerOrBlockTask+0x90>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068fc:	4b0f      	ldr	r3, [pc, #60]	; (800693c <prvProcessTimerOrBlockTask+0x94>)
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	4619      	mov	r1, r3
 800690a:	f7fe ffcf 	bl	80058ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800690e:	f7ff fa3b 	bl	8005d88 <xTaskResumeAll>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006918:	4b09      	ldr	r3, [pc, #36]	; (8006940 <prvProcessTimerOrBlockTask+0x98>)
 800691a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	f3bf 8f6f 	isb	sy
}
 8006928:	e001      	b.n	800692e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800692a:	f7ff fa2d 	bl	8005d88 <xTaskResumeAll>
}
 800692e:	bf00      	nop
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20000c74 	.word	0x20000c74
 800693c:	20000c78 	.word	0x20000c78
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800694c:	4b0e      	ldr	r3, [pc, #56]	; (8006988 <prvGetNextExpireTime+0x44>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	bf0c      	ite	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	2300      	movne	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <prvGetNextExpireTime+0x44>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e001      	b.n	800697a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800697a:	68fb      	ldr	r3, [r7, #12]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	bc80      	pop	{r7}
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	20000c70 	.word	0x20000c70

0800698c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006994:	f7ff fa94 	bl	8005ec0 <xTaskGetTickCount>
 8006998:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800699a:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <prvSampleTimeNow+0x3c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d205      	bcs.n	80069b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069a4:	f000 f904 	bl	8006bb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e002      	b.n	80069b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069b6:	4a04      	ldr	r2, [pc, #16]	; (80069c8 <prvSampleTimeNow+0x3c>)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069bc:	68fb      	ldr	r3, [r7, #12]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000c80 	.word	0x20000c80

080069cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d812      	bhi.n	8006a18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d302      	bcc.n	8006a06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a00:	2301      	movs	r3, #1
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	e01b      	b.n	8006a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a06:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <prvInsertTimerInActiveList+0x7c>)
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4610      	mov	r0, r2
 8006a12:	f7fe fa49 	bl	8004ea8 <vListInsert>
 8006a16:	e012      	b.n	8006a3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d206      	bcs.n	8006a2e <prvInsertTimerInActiveList+0x62>
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d302      	bcc.n	8006a2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e007      	b.n	8006a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a2e:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <prvInsertTimerInActiveList+0x80>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4619      	mov	r1, r3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	f7fe fa35 	bl	8004ea8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a3e:	697b      	ldr	r3, [r7, #20]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20000c74 	.word	0x20000c74
 8006a4c:	20000c70 	.word	0x20000c70

08006a50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08e      	sub	sp, #56	; 0x38
 8006a54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a56:	e099      	b.n	8006b8c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	da17      	bge.n	8006a8e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a5e:	1d3b      	adds	r3, r7, #4
 8006a60:	3304      	adds	r3, #4
 8006a62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <prvProcessReceivedCommands+0x2e>
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	61fb      	str	r3, [r7, #28]
 8006a7c:	e7fe      	b.n	8006a7c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a84:	6850      	ldr	r0, [r2, #4]
 8006a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a88:	6892      	ldr	r2, [r2, #8]
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	db7a      	blt.n	8006b8a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d004      	beq.n	8006aaa <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fe fa37 	bl	8004f18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006aaa:	463b      	mov	r3, r7
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff ff6d 	bl	800698c <prvSampleTimeNow>
 8006ab2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b09      	cmp	r3, #9
 8006ab8:	d868      	bhi.n	8006b8c <prvProcessReceivedCommands+0x13c>
 8006aba:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <prvProcessReceivedCommands+0x70>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006ae9 	.word	0x08006ae9
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006ae9 	.word	0x08006ae9
 8006acc:	08006b8d 	.word	0x08006b8d
 8006ad0:	08006b43 	.word	0x08006b43
 8006ad4:	08006b79 	.word	0x08006b79
 8006ad8:	08006ae9 	.word	0x08006ae9
 8006adc:	08006ae9 	.word	0x08006ae9
 8006ae0:	08006b8d 	.word	0x08006b8d
 8006ae4:	08006b43 	.word	0x08006b43
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	18d1      	adds	r1, r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af6:	f7ff ff69 	bl	80069cc <prvInsertTimerInActiveList>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d045      	beq.n	8006b8c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b06:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d13d      	bne.n	8006b8c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	441a      	add	r2, r3
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2100      	movs	r1, #0
 8006b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b22:	f7ff fe23 	bl	800676c <xTimerGenericCommand>
 8006b26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d12e      	bne.n	8006b8c <prvProcessReceivedCommands+0x13c>
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	e7fe      	b.n	8006b40 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <prvProcessReceivedCommands+0x114>
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	e7fe      	b.n	8006b62 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	699a      	ldr	r2, [r3, #24]
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	18d1      	adds	r1, r2, r3
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b72:	f7ff ff2b 	bl	80069cc <prvInsertTimerInActiveList>
					break;
 8006b76:	e009      	b.n	8006b8c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d104      	bne.n	8006b8c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b84:	f000 fb58 	bl	8007238 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b88:	e000      	b.n	8006b8c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b8a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b8c:	4b07      	ldr	r3, [pc, #28]	; (8006bac <prvProcessReceivedCommands+0x15c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	1d39      	adds	r1, r7, #4
 8006b92:	2200      	movs	r2, #0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fe fc75 	bl	8005484 <xQueueReceive>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f47f af5b 	bne.w	8006a58 <prvProcessReceivedCommands+0x8>
	}
}
 8006ba2:	bf00      	nop
 8006ba4:	3730      	adds	r7, #48	; 0x30
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000c78 	.word	0x20000c78

08006bb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bb6:	e044      	b.n	8006c42 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bb8:	4b2b      	ldr	r3, [pc, #172]	; (8006c68 <prvSwitchTimerLists+0xb8>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bc2:	4b29      	ldr	r3, [pc, #164]	; (8006c68 <prvSwitchTimerLists+0xb8>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe f9a1 	bl	8004f18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d12d      	bne.n	8006c42 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4413      	add	r3, r2
 8006bee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d90e      	bls.n	8006c16 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c04:	4b18      	ldr	r3, [pc, #96]	; (8006c68 <prvSwitchTimerLists+0xb8>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f7fe f94a 	bl	8004ea8 <vListInsert>
 8006c14:	e015      	b.n	8006c42 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c16:	2300      	movs	r3, #0
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	2100      	movs	r1, #0
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fda3 	bl	800676c <xTimerGenericCommand>
 8006c26:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d109      	bne.n	8006c42 <prvSwitchTimerLists+0x92>
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	e7fe      	b.n	8006c40 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c42:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <prvSwitchTimerLists+0xb8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1b5      	bne.n	8006bb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <prvSwitchTimerLists+0xb8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c52:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <prvSwitchTimerLists+0xbc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <prvSwitchTimerLists+0xb8>)
 8006c58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c5a:	4a04      	ldr	r2, [pc, #16]	; (8006c6c <prvSwitchTimerLists+0xbc>)
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	6013      	str	r3, [r2, #0]
}
 8006c60:	bf00      	nop
 8006c62:	3718      	adds	r7, #24
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20000c70 	.word	0x20000c70
 8006c6c:	20000c74 	.word	0x20000c74

08006c70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c76:	f000 f927 	bl	8006ec8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c7a:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <prvCheckForValidListAndQueue+0x60>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d120      	bne.n	8006cc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c82:	4814      	ldr	r0, [pc, #80]	; (8006cd4 <prvCheckForValidListAndQueue+0x64>)
 8006c84:	f7fe f8c2 	bl	8004e0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c88:	4813      	ldr	r0, [pc, #76]	; (8006cd8 <prvCheckForValidListAndQueue+0x68>)
 8006c8a:	f7fe f8bf 	bl	8004e0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c8e:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <prvCheckForValidListAndQueue+0x6c>)
 8006c90:	4a10      	ldr	r2, [pc, #64]	; (8006cd4 <prvCheckForValidListAndQueue+0x64>)
 8006c92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c94:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <prvCheckForValidListAndQueue+0x70>)
 8006c96:	4a10      	ldr	r2, [pc, #64]	; (8006cd8 <prvCheckForValidListAndQueue+0x68>)
 8006c98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <prvCheckForValidListAndQueue+0x74>)
 8006ca0:	4a11      	ldr	r2, [pc, #68]	; (8006ce8 <prvCheckForValidListAndQueue+0x78>)
 8006ca2:	2110      	movs	r1, #16
 8006ca4:	200a      	movs	r0, #10
 8006ca6:	f7fe f9c9 	bl	800503c <xQueueGenericCreateStatic>
 8006caa:	4602      	mov	r2, r0
 8006cac:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <prvCheckForValidListAndQueue+0x60>)
 8006cae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006cb0:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <prvCheckForValidListAndQueue+0x60>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d005      	beq.n	8006cc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <prvCheckForValidListAndQueue+0x60>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	490b      	ldr	r1, [pc, #44]	; (8006cec <prvCheckForValidListAndQueue+0x7c>)
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe fdcc 	bl	800585c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cc4:	f000 f92e 	bl	8006f24 <vPortExitCritical>
}
 8006cc8:	bf00      	nop
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000c78 	.word	0x20000c78
 8006cd4:	20000c48 	.word	0x20000c48
 8006cd8:	20000c5c 	.word	0x20000c5c
 8006cdc:	20000c70 	.word	0x20000c70
 8006ce0:	20000c74 	.word	0x20000c74
 8006ce4:	20000d24 	.word	0x20000d24
 8006ce8:	20000c84 	.word	0x20000c84
 8006cec:	080081f4 	.word	0x080081f4

08006cf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3b04      	subs	r3, #4
 8006d00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3b04      	subs	r3, #4
 8006d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f023 0201 	bic.w	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3b04      	subs	r3, #4
 8006d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d20:	4a08      	ldr	r2, [pc, #32]	; (8006d44 <pxPortInitialiseStack+0x54>)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3b14      	subs	r3, #20
 8006d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3b20      	subs	r3, #32
 8006d36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d38:	68fb      	ldr	r3, [r7, #12]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr
 8006d44:	08006d49 	.word	0x08006d49

08006d48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d52:	4b10      	ldr	r3, [pc, #64]	; (8006d94 <prvTaskExitError+0x4c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5a:	d009      	beq.n	8006d70 <prvTaskExitError+0x28>
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	e7fe      	b.n	8006d6e <prvTaskExitError+0x26>
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d82:	bf00      	nop
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0fc      	beq.n	8006d84 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bc80      	pop	{r7}
 8006d92:	4770      	bx	lr
 8006d94:	20000048 	.word	0x20000048
	...

08006da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <pxCurrentTCBConst2>)
 8006da2:	6819      	ldr	r1, [r3, #0]
 8006da4:	6808      	ldr	r0, [r1, #0]
 8006da6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006daa:	f380 8809 	msr	PSP, r0
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f380 8811 	msr	BASEPRI, r0
 8006dba:	f04e 0e0d 	orr.w	lr, lr, #13
 8006dbe:	4770      	bx	lr

08006dc0 <pxCurrentTCBConst2>:
 8006dc0:	20000748 	.word	0x20000748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop

08006dc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006dc8:	4806      	ldr	r0, [pc, #24]	; (8006de4 <prvPortStartFirstTask+0x1c>)
 8006dca:	6800      	ldr	r0, [r0, #0]
 8006dcc:	6800      	ldr	r0, [r0, #0]
 8006dce:	f380 8808 	msr	MSP, r0
 8006dd2:	b662      	cpsie	i
 8006dd4:	b661      	cpsie	f
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	df00      	svc	0
 8006de0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006de2:	bf00      	nop
 8006de4:	e000ed08 	.word	0xe000ed08

08006de8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006dee:	4b31      	ldr	r3, [pc, #196]	; (8006eb4 <xPortStartScheduler+0xcc>)
 8006df0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	22ff      	movs	r2, #255	; 0xff
 8006dfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	4b29      	ldr	r3, [pc, #164]	; (8006eb8 <xPortStartScheduler+0xd0>)
 8006e14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e16:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <xPortStartScheduler+0xd4>)
 8006e18:	2207      	movs	r2, #7
 8006e1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e1c:	e009      	b.n	8006e32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006e1e:	4b27      	ldr	r3, [pc, #156]	; (8006ebc <xPortStartScheduler+0xd4>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	4a25      	ldr	r2, [pc, #148]	; (8006ebc <xPortStartScheduler+0xd4>)
 8006e26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3a:	2b80      	cmp	r3, #128	; 0x80
 8006e3c:	d0ef      	beq.n	8006e1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e3e:	4b1f      	ldr	r3, [pc, #124]	; (8006ebc <xPortStartScheduler+0xd4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f1c3 0307 	rsb	r3, r3, #7
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d009      	beq.n	8006e5e <xPortStartScheduler+0x76>
 8006e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	60bb      	str	r3, [r7, #8]
 8006e5c:	e7fe      	b.n	8006e5c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e5e:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <xPortStartScheduler+0xd4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	4a15      	ldr	r2, [pc, #84]	; (8006ebc <xPortStartScheduler+0xd4>)
 8006e66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e68:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <xPortStartScheduler+0xd4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e70:	4a12      	ldr	r2, [pc, #72]	; (8006ebc <xPortStartScheduler+0xd4>)
 8006e72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e7c:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <xPortStartScheduler+0xd8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a0f      	ldr	r2, [pc, #60]	; (8006ec0 <xPortStartScheduler+0xd8>)
 8006e82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <xPortStartScheduler+0xd8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a0c      	ldr	r2, [pc, #48]	; (8006ec0 <xPortStartScheduler+0xd8>)
 8006e8e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e94:	f000 f8b0 	bl	8006ff8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <xPortStartScheduler+0xdc>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e9e:	f7ff ff93 	bl	8006dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ea2:	f7ff f8d9 	bl	8006058 <vTaskSwitchContext>
	prvTaskExitError();
 8006ea6:	f7ff ff4f 	bl	8006d48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	e000e400 	.word	0xe000e400
 8006eb8:	20000d74 	.word	0x20000d74
 8006ebc:	20000d78 	.word	0x20000d78
 8006ec0:	e000ed20 	.word	0xe000ed20
 8006ec4:	20000048 	.word	0x20000048

08006ec8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <vPortEnterCritical+0x54>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	4a0d      	ldr	r2, [pc, #52]	; (8006f1c <vPortEnterCritical+0x54>)
 8006ee8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <vPortEnterCritical+0x54>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d10e      	bne.n	8006f10 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <vPortEnterCritical+0x58>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d009      	beq.n	8006f10 <vPortEnterCritical+0x48>
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	603b      	str	r3, [r7, #0]
 8006f0e:	e7fe      	b.n	8006f0e <vPortEnterCritical+0x46>
	}
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bc80      	pop	{r7}
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000048 	.word	0x20000048
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f2a:	4b10      	ldr	r3, [pc, #64]	; (8006f6c <vPortExitCritical+0x48>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d109      	bne.n	8006f46 <vPortExitCritical+0x22>
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	607b      	str	r3, [r7, #4]
 8006f44:	e7fe      	b.n	8006f44 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006f46:	4b09      	ldr	r3, [pc, #36]	; (8006f6c <vPortExitCritical+0x48>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	4a07      	ldr	r2, [pc, #28]	; (8006f6c <vPortExitCritical+0x48>)
 8006f4e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f50:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <vPortExitCritical+0x48>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <vPortExitCritical+0x3e>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bc80      	pop	{r7}
 8006f6a:	4770      	bx	lr
 8006f6c:	20000048 	.word	0x20000048

08006f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f70:	f3ef 8009 	mrs	r0, PSP
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <pxCurrentTCBConst>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f80:	6010      	str	r0, [r2, #0]
 8006f82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006f86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f8a:	f380 8811 	msr	BASEPRI, r0
 8006f8e:	f7ff f863 	bl	8006058 <vTaskSwitchContext>
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	6808      	ldr	r0, [r1, #0]
 8006fa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fa6:	f380 8809 	msr	PSP, r0
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	4770      	bx	lr

08006fb0 <pxCurrentTCBConst>:
 8006fb0:	20000748 	.word	0x20000748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop

08006fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fd0:	f7fe ff84 	bl	8005edc <xTaskIncrementTick>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <SysTick_Handler+0x3c>)
 8006fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	e000ed04 	.word	0xe000ed04

08006ff8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <vPortSetupTimerInterrupt+0x30>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007002:	4b0a      	ldr	r3, [pc, #40]	; (800702c <vPortSetupTimerInterrupt+0x34>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <vPortSetupTimerInterrupt+0x38>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a09      	ldr	r2, [pc, #36]	; (8007034 <vPortSetupTimerInterrupt+0x3c>)
 800700e:	fba2 2303 	umull	r2, r3, r2, r3
 8007012:	099b      	lsrs	r3, r3, #6
 8007014:	4a08      	ldr	r2, [pc, #32]	; (8007038 <vPortSetupTimerInterrupt+0x40>)
 8007016:	3b01      	subs	r3, #1
 8007018:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800701a:	4b03      	ldr	r3, [pc, #12]	; (8007028 <vPortSetupTimerInterrupt+0x30>)
 800701c:	2207      	movs	r2, #7
 800701e:	601a      	str	r2, [r3, #0]
}
 8007020:	bf00      	nop
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr
 8007028:	e000e010 	.word	0xe000e010
 800702c:	e000e018 	.word	0xe000e018
 8007030:	20000018 	.word	0x20000018
 8007034:	10624dd3 	.word	0x10624dd3
 8007038:	e000e014 	.word	0xe000e014

0800703c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007042:	f3ef 8305 	mrs	r3, IPSR
 8007046:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b0f      	cmp	r3, #15
 800704c:	d913      	bls.n	8007076 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800704e:	4a15      	ldr	r2, [pc, #84]	; (80070a4 <vPortValidateInterruptPriority+0x68>)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007058:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <vPortValidateInterruptPriority+0x6c>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	7afa      	ldrb	r2, [r7, #11]
 800705e:	429a      	cmp	r2, r3
 8007060:	d209      	bcs.n	8007076 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	e7fe      	b.n	8007074 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007076:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <vPortValidateInterruptPriority+0x70>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800707e:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <vPortValidateInterruptPriority+0x74>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d909      	bls.n	800709a <vPortValidateInterruptPriority+0x5e>
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	603b      	str	r3, [r7, #0]
 8007098:	e7fe      	b.n	8007098 <vPortValidateInterruptPriority+0x5c>
	}
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	bc80      	pop	{r7}
 80070a2:	4770      	bx	lr
 80070a4:	e000e3f0 	.word	0xe000e3f0
 80070a8:	20000d74 	.word	0x20000d74
 80070ac:	e000ed0c 	.word	0xe000ed0c
 80070b0:	20000d78 	.word	0x20000d78

080070b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08a      	sub	sp, #40	; 0x28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070bc:	2300      	movs	r3, #0
 80070be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070c0:	f7fe fe54 	bl	8005d6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070c4:	4b57      	ldr	r3, [pc, #348]	; (8007224 <pvPortMalloc+0x170>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070cc:	f000 f90c 	bl	80072e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070d0:	4b55      	ldr	r3, [pc, #340]	; (8007228 <pvPortMalloc+0x174>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f040 808c 	bne.w	80071f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01c      	beq.n	800711e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80070e4:	2208      	movs	r2, #8
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4413      	add	r3, r2
 80070ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d013      	beq.n	800711e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f023 0307 	bic.w	r3, r3, #7
 80070fc:	3308      	adds	r3, #8
 80070fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <pvPortMalloc+0x6a>
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	e7fe      	b.n	800711c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d068      	beq.n	80071f6 <pvPortMalloc+0x142>
 8007124:	4b41      	ldr	r3, [pc, #260]	; (800722c <pvPortMalloc+0x178>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	429a      	cmp	r2, r3
 800712c:	d863      	bhi.n	80071f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800712e:	4b40      	ldr	r3, [pc, #256]	; (8007230 <pvPortMalloc+0x17c>)
 8007130:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007132:	4b3f      	ldr	r3, [pc, #252]	; (8007230 <pvPortMalloc+0x17c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007138:	e004      	b.n	8007144 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	429a      	cmp	r2, r3
 800714c:	d903      	bls.n	8007156 <pvPortMalloc+0xa2>
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f1      	bne.n	800713a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007156:	4b33      	ldr	r3, [pc, #204]	; (8007224 <pvPortMalloc+0x170>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715c:	429a      	cmp	r2, r3
 800715e:	d04a      	beq.n	80071f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2208      	movs	r2, #8
 8007166:	4413      	add	r3, r2
 8007168:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	1ad2      	subs	r2, r2, r3
 800717a:	2308      	movs	r3, #8
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	429a      	cmp	r2, r3
 8007180:	d91e      	bls.n	80071c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4413      	add	r3, r2
 8007188:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	2b00      	cmp	r3, #0
 8007192:	d009      	beq.n	80071a8 <pvPortMalloc+0xf4>
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	e7fe      	b.n	80071a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071ba:	69b8      	ldr	r0, [r7, #24]
 80071bc:	f000 f8f6 	bl	80073ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071c0:	4b1a      	ldr	r3, [pc, #104]	; (800722c <pvPortMalloc+0x178>)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	4a18      	ldr	r2, [pc, #96]	; (800722c <pvPortMalloc+0x178>)
 80071cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071ce:	4b17      	ldr	r3, [pc, #92]	; (800722c <pvPortMalloc+0x178>)
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b18      	ldr	r3, [pc, #96]	; (8007234 <pvPortMalloc+0x180>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d203      	bcs.n	80071e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071da:	4b14      	ldr	r3, [pc, #80]	; (800722c <pvPortMalloc+0x178>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a15      	ldr	r2, [pc, #84]	; (8007234 <pvPortMalloc+0x180>)
 80071e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	4b10      	ldr	r3, [pc, #64]	; (8007228 <pvPortMalloc+0x174>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	431a      	orrs	r2, r3
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071f6:	f7fe fdc7 	bl	8005d88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	2b00      	cmp	r3, #0
 8007202:	d009      	beq.n	8007218 <pvPortMalloc+0x164>
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	e7fe      	b.n	8007216 <pvPortMalloc+0x162>
	return pvReturn;
 8007218:	69fb      	ldr	r3, [r7, #28]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3728      	adds	r7, #40	; 0x28
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20001b30 	.word	0x20001b30
 8007228:	20001b3c 	.word	0x20001b3c
 800722c:	20001b34 	.word	0x20001b34
 8007230:	20001b28 	.word	0x20001b28
 8007234:	20001b38 	.word	0x20001b38

08007238 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d046      	beq.n	80072d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800724a:	2308      	movs	r3, #8
 800724c:	425b      	negs	r3, r3
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4413      	add	r3, r2
 8007252:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <vPortFree+0xa8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4013      	ands	r3, r2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d109      	bne.n	800727a <vPortFree+0x42>
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e7fe      	b.n	8007278 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d009      	beq.n	8007296 <vPortFree+0x5e>
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	60bb      	str	r3, [r7, #8]
 8007294:	e7fe      	b.n	8007294 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <vPortFree+0xa8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4013      	ands	r3, r2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d019      	beq.n	80072d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d115      	bne.n	80072d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <vPortFree+0xa8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	43db      	mvns	r3, r3
 80072b6:	401a      	ands	r2, r3
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072bc:	f7fe fd56 	bl	8005d6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <vPortFree+0xac>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4413      	add	r3, r2
 80072ca:	4a06      	ldr	r2, [pc, #24]	; (80072e4 <vPortFree+0xac>)
 80072cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072ce:	6938      	ldr	r0, [r7, #16]
 80072d0:	f000 f86c 	bl	80073ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80072d4:	f7fe fd58 	bl	8005d88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072d8:	bf00      	nop
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20001b3c 	.word	0x20001b3c
 80072e4:	20001b34 	.word	0x20001b34

080072e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072ee:	f640 53ac 	movw	r3, #3500	; 0xdac
 80072f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072f4:	4b27      	ldr	r3, [pc, #156]	; (8007394 <prvHeapInit+0xac>)
 80072f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00c      	beq.n	800731c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3307      	adds	r3, #7
 8007306:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 0307 	bic.w	r3, r3, #7
 800730e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	4a1f      	ldr	r2, [pc, #124]	; (8007394 <prvHeapInit+0xac>)
 8007318:	4413      	add	r3, r2
 800731a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007320:	4a1d      	ldr	r2, [pc, #116]	; (8007398 <prvHeapInit+0xb0>)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007326:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <prvHeapInit+0xb0>)
 8007328:	2200      	movs	r2, #0
 800732a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	4413      	add	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007334:	2208      	movs	r2, #8
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0307 	bic.w	r3, r3, #7
 8007342:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a15      	ldr	r2, [pc, #84]	; (800739c <prvHeapInit+0xb4>)
 8007348:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800734a:	4b14      	ldr	r3, [pc, #80]	; (800739c <prvHeapInit+0xb4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2200      	movs	r2, #0
 8007350:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007352:	4b12      	ldr	r3, [pc, #72]	; (800739c <prvHeapInit+0xb4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	1ad2      	subs	r2, r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007368:	4b0c      	ldr	r3, [pc, #48]	; (800739c <prvHeapInit+0xb4>)
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	4a0a      	ldr	r2, [pc, #40]	; (80073a0 <prvHeapInit+0xb8>)
 8007376:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	4a09      	ldr	r2, [pc, #36]	; (80073a4 <prvHeapInit+0xbc>)
 800737e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007380:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <prvHeapInit+0xc0>)
 8007382:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007386:	601a      	str	r2, [r3, #0]
}
 8007388:	bf00      	nop
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	bc80      	pop	{r7}
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000d7c 	.word	0x20000d7c
 8007398:	20001b28 	.word	0x20001b28
 800739c:	20001b30 	.word	0x20001b30
 80073a0:	20001b38 	.word	0x20001b38
 80073a4:	20001b34 	.word	0x20001b34
 80073a8:	20001b3c 	.word	0x20001b3c

080073ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073b4:	4b27      	ldr	r3, [pc, #156]	; (8007454 <prvInsertBlockIntoFreeList+0xa8>)
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	e002      	b.n	80073c0 <prvInsertBlockIntoFreeList+0x14>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d8f7      	bhi.n	80073ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	4413      	add	r3, r2
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d108      	bne.n	80073ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	441a      	add	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	441a      	add	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d118      	bne.n	8007434 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	4b14      	ldr	r3, [pc, #80]	; (8007458 <prvInsertBlockIntoFreeList+0xac>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d00d      	beq.n	800742a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	441a      	add	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	e008      	b.n	800743c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800742a:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <prvInsertBlockIntoFreeList+0xac>)
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	e003      	b.n	800743c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d002      	beq.n	800744a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800744a:	bf00      	nop
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	bc80      	pop	{r7}
 8007452:	4770      	bx	lr
 8007454:	20001b28 	.word	0x20001b28
 8007458:	20001b30 	.word	0x20001b30

0800745c <__libc_init_array>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	2500      	movs	r5, #0
 8007460:	4e0c      	ldr	r6, [pc, #48]	; (8007494 <__libc_init_array+0x38>)
 8007462:	4c0d      	ldr	r4, [pc, #52]	; (8007498 <__libc_init_array+0x3c>)
 8007464:	1ba4      	subs	r4, r4, r6
 8007466:	10a4      	asrs	r4, r4, #2
 8007468:	42a5      	cmp	r5, r4
 800746a:	d109      	bne.n	8007480 <__libc_init_array+0x24>
 800746c:	f000 f85c 	bl	8007528 <_init>
 8007470:	2500      	movs	r5, #0
 8007472:	4e0a      	ldr	r6, [pc, #40]	; (800749c <__libc_init_array+0x40>)
 8007474:	4c0a      	ldr	r4, [pc, #40]	; (80074a0 <__libc_init_array+0x44>)
 8007476:	1ba4      	subs	r4, r4, r6
 8007478:	10a4      	asrs	r4, r4, #2
 800747a:	42a5      	cmp	r5, r4
 800747c:	d105      	bne.n	800748a <__libc_init_array+0x2e>
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007484:	4798      	blx	r3
 8007486:	3501      	adds	r5, #1
 8007488:	e7ee      	b.n	8007468 <__libc_init_array+0xc>
 800748a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800748e:	4798      	blx	r3
 8007490:	3501      	adds	r5, #1
 8007492:	e7f2      	b.n	800747a <__libc_init_array+0x1e>
 8007494:	080082c8 	.word	0x080082c8
 8007498:	080082c8 	.word	0x080082c8
 800749c:	080082c8 	.word	0x080082c8
 80074a0:	080082cc 	.word	0x080082cc

080074a4 <memcmp>:
 80074a4:	b530      	push	{r4, r5, lr}
 80074a6:	2400      	movs	r4, #0
 80074a8:	42a2      	cmp	r2, r4
 80074aa:	d101      	bne.n	80074b0 <memcmp+0xc>
 80074ac:	2000      	movs	r0, #0
 80074ae:	e007      	b.n	80074c0 <memcmp+0x1c>
 80074b0:	5d03      	ldrb	r3, [r0, r4]
 80074b2:	3401      	adds	r4, #1
 80074b4:	190d      	adds	r5, r1, r4
 80074b6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80074ba:	42ab      	cmp	r3, r5
 80074bc:	d0f4      	beq.n	80074a8 <memcmp+0x4>
 80074be:	1b58      	subs	r0, r3, r5
 80074c0:	bd30      	pop	{r4, r5, pc}

080074c2 <memcpy>:
 80074c2:	b510      	push	{r4, lr}
 80074c4:	1e43      	subs	r3, r0, #1
 80074c6:	440a      	add	r2, r1
 80074c8:	4291      	cmp	r1, r2
 80074ca:	d100      	bne.n	80074ce <memcpy+0xc>
 80074cc:	bd10      	pop	{r4, pc}
 80074ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d6:	e7f7      	b.n	80074c8 <memcpy+0x6>

080074d8 <memset>:
 80074d8:	4603      	mov	r3, r0
 80074da:	4402      	add	r2, r0
 80074dc:	4293      	cmp	r3, r2
 80074de:	d100      	bne.n	80074e2 <memset+0xa>
 80074e0:	4770      	bx	lr
 80074e2:	f803 1b01 	strb.w	r1, [r3], #1
 80074e6:	e7f9      	b.n	80074dc <memset+0x4>

080074e8 <strchr>:
 80074e8:	b2c9      	uxtb	r1, r1
 80074ea:	4603      	mov	r3, r0
 80074ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f0:	b11a      	cbz	r2, 80074fa <strchr+0x12>
 80074f2:	428a      	cmp	r2, r1
 80074f4:	d1f9      	bne.n	80074ea <strchr+0x2>
 80074f6:	4618      	mov	r0, r3
 80074f8:	4770      	bx	lr
 80074fa:	2900      	cmp	r1, #0
 80074fc:	bf18      	it	ne
 80074fe:	2300      	movne	r3, #0
 8007500:	e7f9      	b.n	80074f6 <strchr+0xe>

08007502 <strncmp>:
 8007502:	b510      	push	{r4, lr}
 8007504:	b16a      	cbz	r2, 8007522 <strncmp+0x20>
 8007506:	3901      	subs	r1, #1
 8007508:	1884      	adds	r4, r0, r2
 800750a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800750e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007512:	4293      	cmp	r3, r2
 8007514:	d103      	bne.n	800751e <strncmp+0x1c>
 8007516:	42a0      	cmp	r0, r4
 8007518:	d001      	beq.n	800751e <strncmp+0x1c>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1f5      	bne.n	800750a <strncmp+0x8>
 800751e:	1a98      	subs	r0, r3, r2
 8007520:	bd10      	pop	{r4, pc}
 8007522:	4610      	mov	r0, r2
 8007524:	e7fc      	b.n	8007520 <strncmp+0x1e>
	...

08007528 <_init>:
 8007528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752a:	bf00      	nop
 800752c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752e:	bc08      	pop	{r3}
 8007530:	469e      	mov	lr, r3
 8007532:	4770      	bx	lr

08007534 <_fini>:
 8007534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007536:	bf00      	nop
 8007538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800753a:	bc08      	pop	{r3}
 800753c:	469e      	mov	lr, r3
 800753e:	4770      	bx	lr
