
libertyMestre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eb4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001678  08008fc4  08008fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a63c  0800a63c  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  0800a63c  0800a63c  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a63c  0800a63c  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a63c  0800a63c  0001a63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800a644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e1c  20000220  0800a864  00020220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000303c  0800a864  0002303c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf39  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ad9  00000000  00000000  0003d182  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f8  00000000  00000000  00040c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001778  00000000  00000000  00042558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000047bb  00000000  00000000  00043cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013baf  00000000  00000000  0004848b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a592  00000000  00000000  0005c03a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f65cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006da4  00000000  00000000  000f6648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	08008fac 	.word	0x08008fac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	08008fac 	.word	0x08008fac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f004 f8d0 	bl	8004308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f856 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8fa 	bl	8000364 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000170:	f000 f8c2 	bl	80002f8 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000174:	f000 f892 	bl	800029c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  configNetwork();
 8000178:	f001 fefe 	bl	8001f78 <configNetwork>
  configInterfaces();
 800017c:	f002 f91a 	bl	80023b4 <configInterfaces>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000180:	f006 f846 	bl	8006210 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethernetTask */
  ethernetTaskHandle = osThreadNew(StartEthernet, NULL, &ethernetTask_attributes);
 8000184:	4a15      	ldr	r2, [pc, #84]	; (80001dc <main+0x7c>)
 8000186:	2100      	movs	r1, #0
 8000188:	4815      	ldr	r0, [pc, #84]	; (80001e0 <main+0x80>)
 800018a:	f006 f8a7 	bl	80062dc <osThreadNew>
 800018e:	4602      	mov	r2, r0
 8000190:	4b14      	ldr	r3, [pc, #80]	; (80001e4 <main+0x84>)
 8000192:	601a      	str	r2, [r3, #0]

  /* creation of readInput1Task */
  readInput1TaskHandle = osThreadNew(StartReadInput1, NULL, &readInput1Task_attributes);
 8000194:	4a14      	ldr	r2, [pc, #80]	; (80001e8 <main+0x88>)
 8000196:	2100      	movs	r1, #0
 8000198:	4814      	ldr	r0, [pc, #80]	; (80001ec <main+0x8c>)
 800019a:	f006 f89f 	bl	80062dc <osThreadNew>
 800019e:	4602      	mov	r2, r0
 80001a0:	4b13      	ldr	r3, [pc, #76]	; (80001f0 <main+0x90>)
 80001a2:	601a      	str	r2, [r3, #0]

  /* creation of readInput2Task */
  readInput2TaskHandle = osThreadNew(StartReadInput2, NULL, &readInput2Task_attributes);
 80001a4:	4a13      	ldr	r2, [pc, #76]	; (80001f4 <main+0x94>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	4813      	ldr	r0, [pc, #76]	; (80001f8 <main+0x98>)
 80001aa:	f006 f897 	bl	80062dc <osThreadNew>
 80001ae:	4602      	mov	r2, r0
 80001b0:	4b12      	ldr	r3, [pc, #72]	; (80001fc <main+0x9c>)
 80001b2:	601a      	str	r2, [r3, #0]

  /* creation of readInput3Task */
  readInput3TaskHandle = osThreadNew(StartReadInput3, NULL, &readInput3Task_attributes);
 80001b4:	4a12      	ldr	r2, [pc, #72]	; (8000200 <main+0xa0>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4812      	ldr	r0, [pc, #72]	; (8000204 <main+0xa4>)
 80001ba:	f006 f88f 	bl	80062dc <osThreadNew>
 80001be:	4602      	mov	r2, r0
 80001c0:	4b11      	ldr	r3, [pc, #68]	; (8000208 <main+0xa8>)
 80001c2:	601a      	str	r2, [r3, #0]

  /* creation of readInput4Task */
  readInput4TaskHandle = osThreadNew(StartReadInput4, NULL, &readInput4Task_attributes);
 80001c4:	4a11      	ldr	r2, [pc, #68]	; (800020c <main+0xac>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4811      	ldr	r0, [pc, #68]	; (8000210 <main+0xb0>)
 80001ca:	f006 f887 	bl	80062dc <osThreadNew>
 80001ce:	4602      	mov	r2, r0
 80001d0:	4b10      	ldr	r3, [pc, #64]	; (8000214 <main+0xb4>)
 80001d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001d4:	f006 f84e 	bl	8006274 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <main+0x78>
 80001da:	bf00      	nop
 80001dc:	0800a464 	.word	0x0800a464
 80001e0:	08002759 	.word	0x08002759
 80001e4:	20002e34 	.word	0x20002e34
 80001e8:	0800a488 	.word	0x0800a488
 80001ec:	080027ad 	.word	0x080027ad
 80001f0:	20001e0c 	.word	0x20001e0c
 80001f4:	0800a4ac 	.word	0x0800a4ac
 80001f8:	08002805 	.word	0x08002805
 80001fc:	20002e30 	.word	0x20002e30
 8000200:	0800a4d0 	.word	0x0800a4d0
 8000204:	0800285d 	.word	0x0800285d
 8000208:	20002e18 	.word	0x20002e18
 800020c:	0800a4f4 	.word	0x0800a4f4
 8000210:	080028c1 	.word	0x080028c1
 8000214:	20001de8 	.word	0x20001de8

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	; 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f008 fce9 	bl	8008bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800024a:	2300      	movs	r3, #0
 800024c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800024e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000252:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0318 	add.w	r3, r7, #24
 8000258:	4618      	mov	r0, r3
 800025a:	f004 fe77 	bl	8004f4c <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000264:	f002 fb6a 	bl	800293c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2302      	movs	r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f005 f8e2 	bl	800544c <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800028e:	f002 fb55 	bl	800293c <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	; 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <MX_I2C2_Init+0x50>)
 80002a2:	4a13      	ldr	r2, [pc, #76]	; (80002f0 <MX_I2C2_Init+0x54>)
 80002a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002a6:	4b11      	ldr	r3, [pc, #68]	; (80002ec <MX_I2C2_Init+0x50>)
 80002a8:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <MX_I2C2_Init+0x58>)
 80002aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002ac:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <MX_I2C2_Init+0x50>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <MX_I2C2_Init+0x50>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <MX_I2C2_Init+0x50>)
 80002ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c0:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <MX_I2C2_Init+0x50>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <MX_I2C2_Init+0x50>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002cc:	4b07      	ldr	r3, [pc, #28]	; (80002ec <MX_I2C2_Init+0x50>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002d2:	4b06      	ldr	r3, [pc, #24]	; (80002ec <MX_I2C2_Init+0x50>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <MX_I2C2_Init+0x50>)
 80002da:	f004 fcff 	bl	8004cdc <HAL_I2C_Init>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002e4:	f002 fb2a 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20001d8c 	.word	0x20001d8c
 80002f0:	40005800 	.word	0x40005800
 80002f4:	000186a0 	.word	0x000186a0

080002f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_SPI2_Init+0x64>)
 80002fe:	4a18      	ldr	r2, [pc, #96]	; (8000360 <MX_SPI2_Init+0x68>)
 8000300:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <MX_SPI2_Init+0x64>)
 8000304:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000308:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_SPI2_Init+0x64>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_SPI2_Init+0x64>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_SPI2_Init+0x64>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_SPI2_Init+0x64>)
 800031e:	2200      	movs	r2, #0
 8000320:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_SPI2_Init+0x64>)
 8000324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000328:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <MX_SPI2_Init+0x64>)
 800032c:	2218      	movs	r2, #24
 800032e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <MX_SPI2_Init+0x64>)
 8000332:	2200      	movs	r2, #0
 8000334:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_SPI2_Init+0x64>)
 8000338:	2200      	movs	r2, #0
 800033a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <MX_SPI2_Init+0x64>)
 800033e:	2200      	movs	r2, #0
 8000340:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_SPI2_Init+0x64>)
 8000344:	220a      	movs	r2, #10
 8000346:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_SPI2_Init+0x64>)
 800034a:	f005 fa4b 	bl	80057e4 <HAL_SPI_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000354:	f002 faf2 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20001d34 	.word	0x20001d34
 8000360:	40003800 	.word	0x40003800

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b08a      	sub	sp, #40	; 0x28
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0314 	add.w	r3, r7, #20
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000378:	4b55      	ldr	r3, [pc, #340]	; (80004d0 <MX_GPIO_Init+0x16c>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a54      	ldr	r2, [pc, #336]	; (80004d0 <MX_GPIO_Init+0x16c>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b52      	ldr	r3, [pc, #328]	; (80004d0 <MX_GPIO_Init+0x16c>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	613b      	str	r3, [r7, #16]
 800038e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000390:	4b4f      	ldr	r3, [pc, #316]	; (80004d0 <MX_GPIO_Init+0x16c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a4e      	ldr	r2, [pc, #312]	; (80004d0 <MX_GPIO_Init+0x16c>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b4c      	ldr	r3, [pc, #304]	; (80004d0 <MX_GPIO_Init+0x16c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b49      	ldr	r3, [pc, #292]	; (80004d0 <MX_GPIO_Init+0x16c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a48      	ldr	r2, [pc, #288]	; (80004d0 <MX_GPIO_Init+0x16c>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b46      	ldr	r3, [pc, #280]	; (80004d0 <MX_GPIO_Init+0x16c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b43      	ldr	r3, [pc, #268]	; (80004d0 <MX_GPIO_Init+0x16c>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a42      	ldr	r2, [pc, #264]	; (80004d0 <MX_GPIO_Init+0x16c>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b40      	ldr	r3, [pc, #256]	; (80004d0 <MX_GPIO_Init+0x16c>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT1_OP9_Pin|OUT1_OP10_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80003de:	483d      	ldr	r0, [pc, #244]	; (80004d4 <MX_GPIO_Init+0x170>)
 80003e0:	f004 fc63 	bl	8004caa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_LED1_GPIO_Port, ON_LED1_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2102      	movs	r1, #2
 80003e8:	483b      	ldr	r0, [pc, #236]	; (80004d8 <MX_GPIO_Init+0x174>)
 80003ea:	f004 fc5e 	bl	8004caa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ON_BUZZ_Pin|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f241 0101 	movw	r1, #4097	; 0x1001
 80003f4:	4839      	ldr	r0, [pc, #228]	; (80004dc <MX_GPIO_Init+0x178>)
 80003f6:	f004 fc58 	bl	8004caa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rst_GPIO_Port, Rst_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000400:	4837      	ldr	r0, [pc, #220]	; (80004e0 <MX_GPIO_Init+0x17c>)
 8000402:	f004 fc52 	bl	8004caa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_OP9_Pin OUT1_OP10_Pin */
  GPIO_InitStruct.Pin = OUT1_OP9_Pin|OUT1_OP10_Pin;
 8000406:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000414:	2302      	movs	r3, #2
 8000416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4619      	mov	r1, r3
 800041e:	482d      	ldr	r0, [pc, #180]	; (80004d4 <MX_GPIO_Init+0x170>)
 8000420:	f004 fad2 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_LED1_Pin */
  GPIO_InitStruct.Pin = ON_LED1_Pin;
 8000424:	2302      	movs	r3, #2
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2302      	movs	r3, #2
 8000432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ON_LED1_GPIO_Port, &GPIO_InitStruct);
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	4619      	mov	r1, r3
 800043a:	4827      	ldr	r0, [pc, #156]	; (80004d8 <MX_GPIO_Init+0x174>)
 800043c:	f004 fac4 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP4_Pin OUT1_OP3_Pin OUT1_OP2_Pin OUT1_OP1_Pin
                           OUT1_OP8_Pin OUT1_OP7_Pin OUT1_OP6_Pin OUT1_OP5_Pin */
  GPIO_InitStruct.Pin = OUT1_OP4_Pin|OUT1_OP3_Pin|OUT1_OP2_Pin|OUT1_OP1_Pin
 8000440:	23ff      	movs	r3, #255	; 0xff
 8000442:	617b      	str	r3, [r7, #20]
                          |OUT1_OP8_Pin|OUT1_OP7_Pin|OUT1_OP6_Pin|OUT1_OP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	4619      	mov	r1, r3
 8000452:	4823      	ldr	r0, [pc, #140]	; (80004e0 <MX_GPIO_Init+0x17c>)
 8000454:	f004 fab8 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_BUZZ_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = ON_BUZZ_Pin|GPIO_W5500_CS_Pin;
 8000458:	f241 0301 	movw	r3, #4097	; 0x1001
 800045c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045e:	2301      	movs	r3, #1
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000466:	2302      	movs	r3, #2
 8000468:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	4619      	mov	r1, r3
 8000470:	481a      	ldr	r0, [pc, #104]	; (80004dc <MX_GPIO_Init+0x178>)
 8000472:	f004 faa9 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP12_Pin OUT1_OP11_Pin OUT1_OP15_Pin OUT1_OP16_Pin
                           OUT1_OP14_Pin OUT1_OP13_Pin */
  GPIO_InitStruct.Pin = OUT1_OP12_Pin|OUT1_OP11_Pin|OUT1_OP15_Pin|OUT1_OP16_Pin
 8000476:	237e      	movs	r3, #126	; 0x7e
 8000478:	617b      	str	r3, [r7, #20]
                          |OUT1_OP14_Pin|OUT1_OP13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000482:	f107 0314 	add.w	r3, r7, #20
 8000486:	4619      	mov	r1, r3
 8000488:	4814      	ldr	r0, [pc, #80]	; (80004dc <MX_GPIO_Init+0x178>)
 800048a:	f004 fa9d 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rst_Pin */
  GPIO_InitStruct.Pin = Rst_Pin;
 800048e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000494:	2301      	movs	r3, #1
 8000496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000498:	2301      	movs	r3, #1
 800049a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	2302      	movs	r3, #2
 800049e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Rst_GPIO_Port, &GPIO_InitStruct);
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	4619      	mov	r1, r3
 80004a6:	480e      	ldr	r0, [pc, #56]	; (80004e0 <MX_GPIO_Init+0x17c>)
 80004a8:	f004 fa8e 	bl	80049c8 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80004ac:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <MX_GPIO_Init+0x180>)
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	627b      	str	r3, [r7, #36]	; 0x24
 80004b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004b8:	627b      	str	r3, [r7, #36]	; 0x24
 80004ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004c0:	627b      	str	r3, [r7, #36]	; 0x24
 80004c2:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <MX_GPIO_Init+0x180>)
 80004c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c6:	6053      	str	r3, [r2, #4]

}
 80004c8:	bf00      	nop
 80004ca:	3728      	adds	r7, #40	; 0x28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40011000 	.word	0x40011000
 80004d8:	40011400 	.word	0x40011400
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	40010800 	.word	0x40010800
 80004e4:	40010000 	.word	0x40010000

080004e8 <W5500_rxtx>:

/* USER CODE BEGIN 4 */
uint8_t W5500_rxtx(uint8_t data)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	uint8_t rxdata;

	HAL_SPI_TransmitReceive(&hspi2, &data, &rxdata, 1, 50);
 80004f2:	f107 020f 	add.w	r2, r7, #15
 80004f6:	1df9      	adds	r1, r7, #7
 80004f8:	2332      	movs	r3, #50	; 0x32
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2301      	movs	r3, #1
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <W5500_rxtx+0x28>)
 8000500:	f005 f9f4 	bl	80058ec <HAL_SPI_TransmitReceive>

	return (rxdata);
 8000504:	7bfb      	ldrb	r3, [r7, #15]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20001d34 	.word	0x20001d34

08000514 <wizchip_select>:
/////////////////////////////////////////////////////////////////
// SPI Callback function for accessing WIZCHIP                 //
// WIZCHIP user should implement with your host spi peripheral //
/////////////////////////////////////////////////////////////////
void  wizchip_select(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	W5500_select();
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051e:	4802      	ldr	r0, [pc, #8]	; (8000528 <wizchip_select+0x14>)
 8000520:	f004 fbc3 	bl	8004caa <HAL_GPIO_WritePin>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40010c00 	.word	0x40010c00

0800052c <wizchip_deselect>:

void  wizchip_deselect(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	W5500_release();
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000536:	4802      	ldr	r0, [pc, #8]	; (8000540 <wizchip_deselect+0x14>)
 8000538:	f004 fbb7 	bl	8004caa <HAL_GPIO_WritePin>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40010c00 	.word	0x40010c00

08000544 <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	W5500_tx(wb);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ffc9 	bl	80004e8 <W5500_rxtx>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <wizchip_read>:

uint8_t wizchip_read()
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
   return W5500_rx();
 8000562:	20ff      	movs	r0, #255	; 0xff
 8000564:	f7ff ffc0 	bl	80004e8 <W5500_rxtx>
 8000568:	4603      	mov	r3, r0
}
 800056a:	4618      	mov	r0, r3
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
   uint8_t tmpstr[6];

	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000576:	4906      	ldr	r1, [pc, #24]	; (8000590 <network_init+0x20>)
 8000578:	2000      	movs	r0, #0
 800057a:	f003 fb13 	bl	8003ba4 <ctlnetwork>

	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 800057e:	463b      	mov	r3, r7
 8000580:	4619      	mov	r1, r3
 8000582:	2008      	movs	r0, #8
 8000584:	f003 fa30 	bl	80039e8 <ctlwizchip>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000004 	.word	0x20000004

08000594 <HTTP_reset>:
#define len(some) (sizeof(some)/sizeof(some[0]))

//http server

void HTTP_reset(uint8_t sockn)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
    sentsize[sockn]=0;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <HTTP_reset+0x28>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	http_state[sockn]=HTTP_IDLE;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <HTTP_reset+0x2c>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	54d1      	strb	r1, [r2, r3]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20002e38 	.word	0x20002e38
 80005c0:	20001e10 	.word	0x20001e10

080005c4 <tcp_http_mt>:

int32_t tcp_http_mt(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	b089      	sub	sp, #36	; 0x24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	4613      	mov	r3, r2
 80005d2:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint32_t size = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
   uint8_t flagHtmlGen = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	76fb      	strb	r3, [r7, #27]
   char *url,*p;
   uint16_t blocklen=0;
 80005dc:	2300      	movs	r3, #0
 80005de:	833b      	strh	r3, [r7, #24]

   switch(getSn_SR(sn))
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	3301      	adds	r3, #1
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 ff29 	bl	8003444 <WIZCHIP_READ>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b1c      	cmp	r3, #28
 80005f6:	f201 835d 	bhi.w	8001cb4 <tcp_http_mt+0x16f0>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <tcp_http_mt+0x3c>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08001c91 	.word	0x08001c91
 8000604:	08001cb5 	.word	0x08001cb5
 8000608:	08001cb5 	.word	0x08001cb5
 800060c:	08001cb5 	.word	0x08001cb5
 8000610:	08001cb5 	.word	0x08001cb5
 8000614:	08001cb5 	.word	0x08001cb5
 8000618:	08001cb5 	.word	0x08001cb5
 800061c:	08001cb5 	.word	0x08001cb5
 8000620:	08001cb5 	.word	0x08001cb5
 8000624:	08001cb5 	.word	0x08001cb5
 8000628:	08001cb5 	.word	0x08001cb5
 800062c:	08001cb5 	.word	0x08001cb5
 8000630:	08001cb5 	.word	0x08001cb5
 8000634:	08001cb5 	.word	0x08001cb5
 8000638:	08001cb5 	.word	0x08001cb5
 800063c:	08001cb5 	.word	0x08001cb5
 8000640:	08001cb5 	.word	0x08001cb5
 8000644:	08001cb5 	.word	0x08001cb5
 8000648:	08001cb5 	.word	0x08001cb5
 800064c:	08001c73 	.word	0x08001c73
 8000650:	08001cb5 	.word	0x08001cb5
 8000654:	08001cb5 	.word	0x08001cb5
 8000658:	08001cb5 	.word	0x08001cb5
 800065c:	08000675 	.word	0x08000675
 8000660:	08001cb5 	.word	0x08001cb5
 8000664:	08001cb5 	.word	0x08001cb5
 8000668:	08001cb5 	.word	0x08001cb5
 800066c:	08001cb5 	.word	0x08001cb5
 8000670:	08001c55 	.word	0x08001c55
   {
      case SOCK_ESTABLISHED :

         if(getSn_IR(sn) & Sn_IR_CON)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	3301      	adds	r3, #1
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000680:	4618      	mov	r0, r3
 8000682:	f002 fedf 	bl	8003444 <WIZCHIP_READ>
 8000686:	4603      	mov	r3, r0
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d009      	beq.n	80006a4 <tcp_http_mt+0xe0>
         {
            setSn_IR(sn,Sn_IR_CON);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	3301      	adds	r3, #1
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800069c:	2101      	movs	r1, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 ff00 	bl	80034a4 <WIZCHIP_WRITE>
         }

         if((size = getSn_RX_RSR(sn)) > 0)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 f809 	bl	80036be <getSn_RX_RSR>
 80006ac:	4603      	mov	r3, r0
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f001 8303 	beq.w	8001cbe <tcp_http_mt+0x16fa>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006be:	d902      	bls.n	80006c6 <tcp_http_mt+0x102>
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	61fb      	str	r3, [r7, #28]
            ret = recv(sn,buf,size);
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	6839      	ldr	r1, [r7, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fe02 	bl	80032d8 <recv>
 80006d4:	6178      	str	r0, [r7, #20]

            HTTP_reset(sn);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff5b 	bl	8000594 <HTTP_reset>

            if(ret <= 0)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dc02      	bgt.n	80006ea <tcp_http_mt+0x126>
            return ret;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	f001 baf2 	b.w	8001cce <tcp_http_mt+0x170a>

            url =(char*) buf + 4;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	3304      	adds	r3, #4
 80006ee:	613b      	str	r3, [r7, #16]

            if((http_state[sn]==HTTP_IDLE)&&(memcmp(buf, "GET ", 4)==0)&&((p = strchr(url, ' '))))// extract URL from request header
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4aca      	ldr	r2, [pc, #808]	; (8000a1c <tcp_http_mt+0x458>)
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	f041 82e1 	bne.w	8001cbe <tcp_http_mt+0x16fa>
 80006fc:	2204      	movs	r2, #4
 80006fe:	49c8      	ldr	r1, [pc, #800]	; (8000a20 <tcp_http_mt+0x45c>)
 8000700:	6838      	ldr	r0, [r7, #0]
 8000702:	f008 fa49 	bl	8008b98 <memcmp>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	f041 82d8 	bne.w	8001cbe <tcp_http_mt+0x16fa>
 800070e:	2120      	movs	r1, #32
 8000710:	6938      	ldr	r0, [r7, #16]
 8000712:	f008 fa8b 	bl	8008c2c <strchr>
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2b00      	cmp	r3, #0
 800071c:	f001 82cf 	beq.w	8001cbe <tcp_http_mt+0x16fa>
            {
              *(p++) = 0;//making zeroed url string
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	60fa      	str	r2, [r7, #12]
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]

				if ((url != NULL)&&(strncmp("/favicon.ico",url,12) != 0))
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	2b00      	cmp	r3, #0
 800072e:	f001 8287 	beq.w	8001c40 <tcp_http_mt+0x167c>
 8000732:	220c      	movs	r2, #12
 8000734:	6939      	ldr	r1, [r7, #16]
 8000736:	48bb      	ldr	r0, [pc, #748]	; (8000a24 <tcp_http_mt+0x460>)
 8000738:	f008 fa8d 	bl	8008c56 <strncmp>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	f001 827e 	beq.w	8001c40 <tcp_http_mt+0x167c>
				{
					flagHtmlGen = 1;
 8000744:	2301      	movs	r3, #1
 8000746:	76fb      	strb	r3, [r7, #27]
					if (strncmp("/ip:",url,4) == 0)
 8000748:	2204      	movs	r2, #4
 800074a:	6939      	ldr	r1, [r7, #16]
 800074c:	48b6      	ldr	r0, [pc, #728]	; (8000a28 <tcp_http_mt+0x464>)
 800074e:	f008 fa82 	bl	8008c56 <strncmp>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d10f      	bne.n	8000778 <tcp_http_mt+0x1b4>
					{
						memset(config_data, 0, sizeof(config_data));
 8000758:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800075c:	2100      	movs	r1, #0
 800075e:	48b3      	ldr	r0, [pc, #716]	; (8000a2c <tcp_http_mt+0x468>)
 8000760:	f008 fa4d 	bl	8008bfe <memset>
						strcpy(config_data, url);
 8000764:	6939      	ldr	r1, [r7, #16]
 8000766:	48b1      	ldr	r0, [pc, #708]	; (8000a2c <tcp_http_mt+0x468>)
 8000768:	f008 fa6d 	bl	8008c46 <strcpy>
						save_to_flash(config_data, NETWORK_STORAGE);
 800076c:	49b0      	ldr	r1, [pc, #704]	; (8000a30 <tcp_http_mt+0x46c>)
 800076e:	48af      	ldr	r0, [pc, #700]	; (8000a2c <tcp_http_mt+0x468>)
 8000770:	f001 face 	bl	8001d10 <save_to_flash>
						configNetwork();
 8000774:	f001 fc00 	bl	8001f78 <configNetwork>
					}
					if(strncmp("/interfaces2/ip", url, 14) == 0)
 8000778:	220e      	movs	r2, #14
 800077a:	6939      	ldr	r1, [r7, #16]
 800077c:	48ad      	ldr	r0, [pc, #692]	; (8000a34 <tcp_http_mt+0x470>)
 800077e:	f008 fa6a 	bl	8008c56 <strncmp>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d10d      	bne.n	80007a4 <tcp_http_mt+0x1e0>
					{
						memset(config_data, 0, sizeof(config_data));
 8000788:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800078c:	2100      	movs	r1, #0
 800078e:	48a7      	ldr	r0, [pc, #668]	; (8000a2c <tcp_http_mt+0x468>)
 8000790:	f008 fa35 	bl	8008bfe <memset>
						strcpy(config_data, url);
 8000794:	6939      	ldr	r1, [r7, #16]
 8000796:	48a5      	ldr	r0, [pc, #660]	; (8000a2c <tcp_http_mt+0x468>)
 8000798:	f008 fa55 	bl	8008c46 <strcpy>
						save_to_flash(config_data, INTERFACE_STORAGE);
 800079c:	49a6      	ldr	r1, [pc, #664]	; (8000a38 <tcp_http_mt+0x474>)
 800079e:	48a3      	ldr	r0, [pc, #652]	; (8000a2c <tcp_http_mt+0x468>)
 80007a0:	f001 fab6 	bl	8001d10 <save_to_flash>
					}
					if(strncmp("/con/ip", url, 7) == 0)
 80007a4:	2207      	movs	r2, #7
 80007a6:	6939      	ldr	r1, [r7, #16]
 80007a8:	48a4      	ldr	r0, [pc, #656]	; (8000a3c <tcp_http_mt+0x478>)
 80007aa:	f008 fa54 	bl	8008c56 <strncmp>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d107      	bne.n	80007c4 <tcp_http_mt+0x200>
					{
						strcat(config_data, url);
 80007b4:	6939      	ldr	r1, [r7, #16]
 80007b6:	489d      	ldr	r0, [pc, #628]	; (8000a2c <tcp_http_mt+0x468>)
 80007b8:	f008 fa29 	bl	8008c0e <strcat>
						save_to_flash(config_data, INTERFACE_STORAGE);
 80007bc:	499e      	ldr	r1, [pc, #632]	; (8000a38 <tcp_http_mt+0x474>)
 80007be:	489b      	ldr	r0, [pc, #620]	; (8000a2c <tcp_http_mt+0x468>)
 80007c0:	f001 faa6 	bl	8001d10 <save_to_flash>
					}

					//Gera��o da HTML
					if(flagHtmlGen == 1)
 80007c4:	7efb      	ldrb	r3, [r7, #27]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	f041 8243 	bne.w	8001c52 <tcp_http_mt+0x168e>
					{
						if(strncmp("/rede", url, 4) == 0)
 80007cc:	2204      	movs	r2, #4
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	489b      	ldr	r0, [pc, #620]	; (8000a40 <tcp_http_mt+0x47c>)
 80007d2:	f008 fa40 	bl	8008c56 <strncmp>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f040 81bf 	bne.w	8000b5c <tcp_http_mt+0x598>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	4a98      	ldr	r2, [pc, #608]	; (8000a44 <tcp_http_mt+0x480>)
 80007e2:	4614      	mov	r4, r2
 80007e4:	469c      	mov	ip, r3
 80007e6:	f104 0e20 	add.w	lr, r4, #32
 80007ea:	4665      	mov	r5, ip
 80007ec:	4626      	mov	r6, r4
 80007ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007f0:	6028      	str	r0, [r5, #0]
 80007f2:	6069      	str	r1, [r5, #4]
 80007f4:	60aa      	str	r2, [r5, #8]
 80007f6:	60eb      	str	r3, [r5, #12]
 80007f8:	3410      	adds	r4, #16
 80007fa:	f10c 0c10 	add.w	ip, ip, #16
 80007fe:	4574      	cmp	r4, lr
 8000800:	d1f3      	bne.n	80007ea <tcp_http_mt+0x226>
 8000802:	4665      	mov	r5, ip
 8000804:	4623      	mov	r3, r4
 8000806:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000808:	6028      	str	r0, [r5, #0]
 800080a:	6069      	str	r1, [r5, #4]
 800080c:	60aa      	str	r2, [r5, #8]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 8000812:	6838      	ldr	r0, [r7, #0]
 8000814:	f7ff fc9c 	bl	8000150 <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a89      	ldr	r2, [pc, #548]	; (8000a48 <tcp_http_mt+0x484>)
 8000822:	461c      	mov	r4, r3
 8000824:	4613      	mov	r3, r2
 8000826:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000828:	6020      	str	r0, [r4, #0]
 800082a:	6061      	str	r1, [r4, #4]
 800082c:	60a2      	str	r2, [r4, #8]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Mestre Config</title>");
 8000832:	6838      	ldr	r0, [r7, #0]
 8000834:	f7ff fc8c 	bl	8000150 <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a82      	ldr	r2, [pc, #520]	; (8000a4c <tcp_http_mt+0x488>)
 8000842:	461d      	mov	r5, r3
 8000844:	4614      	mov	r4, r2
 8000846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000848:	6028      	str	r0, [r5, #0]
 800084a:	6069      	str	r1, [r5, #4]
 800084c:	60aa      	str	r2, [r5, #8]
 800084e:	60eb      	str	r3, [r5, #12]
 8000850:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000852:	6128      	str	r0, [r5, #16]
 8000854:	6169      	str	r1, [r5, #20]
 8000856:	61aa      	str	r2, [r5, #24]
 8000858:	7823      	ldrb	r3, [r4, #0]
 800085a:	772b      	strb	r3, [r5, #28]
							strcat((char*)buf, "</head>");
 800085c:	6838      	ldr	r0, [r7, #0]
 800085e:	f7ff fc77 	bl	8000150 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4979      	ldr	r1, [pc, #484]	; (8000a50 <tcp_http_mt+0x48c>)
 800086c:	461a      	mov	r2, r3
 800086e:	460b      	mov	r3, r1
 8000870:	cb03      	ldmia	r3!, {r0, r1}
 8000872:	6010      	str	r0, [r2, #0]
 8000874:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 8000876:	6838      	ldr	r0, [r7, #0]
 8000878:	f7ff fc6a 	bl	8000150 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4a73      	ldr	r2, [pc, #460]	; (8000a54 <tcp_http_mt+0x490>)
 8000886:	6810      	ldr	r0, [r2, #0]
 8000888:	6018      	str	r0, [r3, #0]
 800088a:	8891      	ldrh	r1, [r2, #4]
 800088c:	7992      	ldrb	r2, [r2, #6]
 800088e:	8099      	strh	r1, [r3, #4]
 8000890:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<b><center>Configuracao da Placa de rede</b></center><br>");
 8000892:	6838      	ldr	r0, [r7, #0]
 8000894:	f7ff fc5c 	bl	8000150 <strlen>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a6d      	ldr	r2, [pc, #436]	; (8000a58 <tcp_http_mt+0x494>)
 80008a2:	4614      	mov	r4, r2
 80008a4:	469c      	mov	ip, r3
 80008a6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80008aa:	4665      	mov	r5, ip
 80008ac:	4626      	mov	r6, r4
 80008ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008b0:	6028      	str	r0, [r5, #0]
 80008b2:	6069      	str	r1, [r5, #4]
 80008b4:	60aa      	str	r2, [r5, #8]
 80008b6:	60eb      	str	r3, [r5, #12]
 80008b8:	3410      	adds	r4, #16
 80008ba:	f10c 0c10 	add.w	ip, ip, #16
 80008be:	4574      	cmp	r4, lr
 80008c0:	d1f3      	bne.n	80008aa <tcp_http_mt+0x2e6>
 80008c2:	4662      	mov	r2, ip
 80008c4:	4623      	mov	r3, r4
 80008c6:	cb03      	ldmia	r3!, {r0, r1}
 80008c8:	6010      	str	r0, [r2, #0]
 80008ca:	6051      	str	r1, [r2, #4]
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "<center><form action=''>");
 80008d0:	6838      	ldr	r0, [r7, #0]
 80008d2:	f7ff fc3d 	bl	8000150 <strlen>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	4a5f      	ldr	r2, [pc, #380]	; (8000a5c <tcp_http_mt+0x498>)
 80008e0:	461d      	mov	r5, r3
 80008e2:	4614      	mov	r4, r2
 80008e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e6:	6028      	str	r0, [r5, #0]
 80008e8:	6069      	str	r1, [r5, #4]
 80008ea:	60aa      	str	r2, [r5, #8]
 80008ec:	60eb      	str	r3, [r5, #12]
 80008ee:	cc03      	ldmia	r4!, {r0, r1}
 80008f0:	6128      	str	r0, [r5, #16]
 80008f2:	6169      	str	r1, [r5, #20]
 80008f4:	7823      	ldrb	r3, [r4, #0]
 80008f6:	762b      	strb	r3, [r5, #24]
							strcat((char*)buf, "IP: <input type='text' id='ip'>		Mascara: <input type='text' id='mascara'><br><br>");
 80008f8:	6838      	ldr	r0, [r7, #0]
 80008fa:	f7ff fc29 	bl	8000150 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	4413      	add	r3, r2
 8000906:	4a56      	ldr	r2, [pc, #344]	; (8000a60 <tcp_http_mt+0x49c>)
 8000908:	4618      	mov	r0, r3
 800090a:	4611      	mov	r1, r2
 800090c:	2353      	movs	r3, #83	; 0x53
 800090e:	461a      	mov	r2, r3
 8000910:	f008 f951 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "Porta: <input type='text' id='porta'>		Gateway: <input type='text' id='gateway'><br><br>");
 8000914:	6838      	ldr	r0, [r7, #0]
 8000916:	f7ff fc1b 	bl	8000150 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	4413      	add	r3, r2
 8000922:	4a50      	ldr	r2, [pc, #320]	; (8000a64 <tcp_http_mt+0x4a0>)
 8000924:	4618      	mov	r0, r3
 8000926:	4611      	mov	r1, r2
 8000928:	2359      	movs	r3, #89	; 0x59
 800092a:	461a      	mov	r2, r3
 800092c:	f008 f943 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "DNS 1: <input type='text' id='dns1'>		DNS 2: <input type='text' id='dns2'><br><br>");
 8000930:	6838      	ldr	r0, [r7, #0]
 8000932:	f7ff fc0d 	bl	8000150 <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	4413      	add	r3, r2
 800093e:	4a4a      	ldr	r2, [pc, #296]	; (8000a68 <tcp_http_mt+0x4a4>)
 8000940:	4618      	mov	r0, r3
 8000942:	4611      	mov	r1, r2
 8000944:	2353      	movs	r3, #83	; 0x53
 8000946:	461a      	mov	r2, r3
 8000948:	f008 f935 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "DHCP: <button>On</button>  <button>Off</button>");
 800094c:	6838      	ldr	r0, [r7, #0]
 800094e:	f7ff fbff 	bl	8000150 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	4413      	add	r3, r2
 800095a:	4a44      	ldr	r2, [pc, #272]	; (8000a6c <tcp_http_mt+0x4a8>)
 800095c:	4614      	mov	r4, r2
 800095e:	469c      	mov	ip, r3
 8000960:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000964:	4665      	mov	r5, ip
 8000966:	4626      	mov	r6, r4
 8000968:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800096a:	6028      	str	r0, [r5, #0]
 800096c:	6069      	str	r1, [r5, #4]
 800096e:	60aa      	str	r2, [r5, #8]
 8000970:	60eb      	str	r3, [r5, #12]
 8000972:	3410      	adds	r4, #16
 8000974:	f10c 0c10 	add.w	ip, ip, #16
 8000978:	4574      	cmp	r4, lr
 800097a:	d1f3      	bne.n	8000964 <tcp_http_mt+0x3a0>
							strcat((char*)buf, "</center></form>");
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f7ff fbe7 	bl	8000150 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	4413      	add	r3, r2
 800098a:	4a39      	ldr	r2, [pc, #228]	; (8000a70 <tcp_http_mt+0x4ac>)
 800098c:	461d      	mov	r5, r3
 800098e:	4614      	mov	r4, r2
 8000990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000992:	6028      	str	r0, [r5, #0]
 8000994:	6069      	str	r1, [r5, #4]
 8000996:	60aa      	str	r2, [r5, #8]
 8000998:	60eb      	str	r3, [r5, #12]
 800099a:	7823      	ldrb	r3, [r4, #0]
 800099c:	742b      	strb	r3, [r5, #16]

							strcat((char*)buf, "<script>function configNet() {");
 800099e:	6838      	ldr	r0, [r7, #0]
 80009a0:	f7ff fbd6 	bl	8000150 <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a31      	ldr	r2, [pc, #196]	; (8000a74 <tcp_http_mt+0x4b0>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80009be:	6128      	str	r0, [r5, #16]
 80009c0:	6169      	str	r1, [r5, #20]
 80009c2:	61aa      	str	r2, [r5, #24]
 80009c4:	8823      	ldrh	r3, [r4, #0]
 80009c6:	78a2      	ldrb	r2, [r4, #2]
 80009c8:	83ab      	strh	r3, [r5, #28]
 80009ca:	4613      	mov	r3, r2
 80009cc:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "window.open('http://");
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f7ff fbbe 	bl	8000150 <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a26      	ldr	r2, [pc, #152]	; (8000a78 <tcp_http_mt+0x4b4>)
 80009de:	461d      	mov	r5, r3
 80009e0:	4614      	mov	r4, r2
 80009e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e4:	6028      	str	r0, [r5, #0]
 80009e6:	6069      	str	r1, [r5, #4]
 80009e8:	60aa      	str	r2, [r5, #8]
 80009ea:	60eb      	str	r3, [r5, #12]
 80009ec:	6820      	ldr	r0, [r4, #0]
 80009ee:	6128      	str	r0, [r5, #16]
 80009f0:	7923      	ldrb	r3, [r4, #4]
 80009f2:	752b      	strb	r3, [r5, #20]
							strcat((char*)buf, &ipStr);
 80009f4:	4921      	ldr	r1, [pc, #132]	; (8000a7c <tcp_http_mt+0x4b8>)
 80009f6:	6838      	ldr	r0, [r7, #0]
 80009f8:	f008 f909 	bl	8008c0e <strcat>
							strcat((char*)buf, "/ip:' + document.getElementById('ip').value + ',mask:' + document.getElementById('mascara').value + ',port:' +");
 80009fc:	6838      	ldr	r0, [r7, #0]
 80009fe:	f7ff fba7 	bl	8000150 <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <tcp_http_mt+0x4bc>)
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	4611      	mov	r1, r2
 8000a10:	236f      	movs	r3, #111	; 0x6f
 8000a12:	461a      	mov	r2, r3
 8000a14:	f008 f8cf 	bl	8008bb6 <memcpy>
 8000a18:	e034      	b.n	8000a84 <tcp_http_mt+0x4c0>
 8000a1a:	bf00      	nop
 8000a1c:	20001e10 	.word	0x20001e10
 8000a20:	08009014 	.word	0x08009014
 8000a24:	0800901c 	.word	0x0800901c
 8000a28:	0800902c 	.word	0x0800902c
 8000a2c:	20002e5c 	.word	0x20002e5c
 8000a30:	0800c000 	.word	0x0800c000
 8000a34:	08009034 	.word	0x08009034
 8000a38:	0800d000 	.word	0x0800d000
 8000a3c:	08009044 	.word	0x08009044
 8000a40:	0800904c 	.word	0x0800904c
 8000a44:	08009054 	.word	0x08009054
 8000a48:	08009084 	.word	0x08009084
 8000a4c:	08009094 	.word	0x08009094
 8000a50:	080090b4 	.word	0x080090b4
 8000a54:	080090bc 	.word	0x080090bc
 8000a58:	080090c4 	.word	0x080090c4
 8000a5c:	08009100 	.word	0x08009100
 8000a60:	0800911c 	.word	0x0800911c
 8000a64:	08009170 	.word	0x08009170
 8000a68:	080091cc 	.word	0x080091cc
 8000a6c:	08009220 	.word	0x08009220
 8000a70:	08009250 	.word	0x08009250
 8000a74:	08009264 	.word	0x08009264
 8000a78:	08009284 	.word	0x08009284
 8000a7c:	20002e20 	.word	0x20002e20
 8000a80:	0800929c 	.word	0x0800929c
							strcat((char*)buf, "document.getElementById('porta').value + ',gateway:' + document.getElementById('gateway').value + ',dns1:' + document.getElementById('dns1').value +");
 8000a84:	6838      	ldr	r0, [r7, #0]
 8000a86:	f7ff fb63 	bl	8000150 <strlen>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <tcp_http_mt+0x57c>)
 8000a94:	4618      	mov	r0, r3
 8000a96:	4611      	mov	r1, r2
 8000a98:	2395      	movs	r3, #149	; 0x95
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	f008 f88b 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "',dns2:' + document.getElementById('dns2').value, '_self');}</script>");
 8000aa0:	6838      	ldr	r0, [r7, #0]
 8000aa2:	f7ff fb55 	bl	8000150 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <tcp_http_mt+0x580>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	2346      	movs	r3, #70	; 0x46
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	f008 f87d 	bl	8008bb6 <memcpy>

							strcat((char*)buf, "<center><button onClick = 'configNet()'>Salvar</button><br><br><a href='http://");
 8000abc:	6838      	ldr	r0, [r7, #0]
 8000abe:	f7ff fb47 	bl	8000150 <strlen>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <tcp_http_mt+0x584>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	4611      	mov	r1, r2
 8000ad0:	2350      	movs	r3, #80	; 0x50
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	f008 f86f 	bl	8008bb6 <memcpy>
							strcat((char*)buf, &ipStr);
 8000ad8:	491c      	ldr	r1, [pc, #112]	; (8000b4c <tcp_http_mt+0x588>)
 8000ada:	6838      	ldr	r0, [r7, #0]
 8000adc:	f008 f897 	bl	8008c0e <strcat>
							strcat((char*)buf, "'>Voltar</a><br></center>");
 8000ae0:	6838      	ldr	r0, [r7, #0]
 8000ae2:	f7ff fb35 	bl	8000150 <strlen>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	461a      	mov	r2, r3
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <tcp_http_mt+0x58c>)
 8000af0:	461d      	mov	r5, r3
 8000af2:	4614      	mov	r4, r2
 8000af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af6:	6028      	str	r0, [r5, #0]
 8000af8:	6069      	str	r1, [r5, #4]
 8000afa:	60aa      	str	r2, [r5, #8]
 8000afc:	60eb      	str	r3, [r5, #12]
 8000afe:	cc03      	ldmia	r4!, {r0, r1}
 8000b00:	6128      	str	r0, [r5, #16]
 8000b02:	6169      	str	r1, [r5, #20]
 8000b04:	8823      	ldrh	r3, [r4, #0]
 8000b06:	832b      	strh	r3, [r5, #24]

							strcat((char*)buf, "</body>");
 8000b08:	6838      	ldr	r0, [r7, #0]
 8000b0a:	f7ff fb21 	bl	8000150 <strlen>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	490f      	ldr	r1, [pc, #60]	; (8000b54 <tcp_http_mt+0x590>)
 8000b18:	461a      	mov	r2, r3
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	cb03      	ldmia	r3!, {r0, r1}
 8000b1e:	6010      	str	r0, [r2, #0]
 8000b20:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8000b22:	6838      	ldr	r0, [r7, #0]
 8000b24:	f7ff fb14 	bl	8000150 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4909      	ldr	r1, [pc, #36]	; (8000b58 <tcp_http_mt+0x594>)
 8000b32:	461a      	mov	r2, r3
 8000b34:	460b      	mov	r3, r1
 8000b36:	cb03      	ldmia	r3!, {r0, r1}
 8000b38:	6010      	str	r0, [r2, #0]
 8000b3a:	6051      	str	r1, [r2, #4]
 8000b3c:	f001 b862 	b.w	8001c04 <tcp_http_mt+0x1640>
 8000b40:	0800930c 	.word	0x0800930c
 8000b44:	080093a4 	.word	0x080093a4
 8000b48:	080093ec 	.word	0x080093ec
 8000b4c:	20002e20 	.word	0x20002e20
 8000b50:	0800943c 	.word	0x0800943c
 8000b54:	08009458 	.word	0x08009458
 8000b58:	08009460 	.word	0x08009460
						}
						else if(strncmp("/interfaces1", url, 12) == 0)
 8000b5c:	220c      	movs	r2, #12
 8000b5e:	6939      	ldr	r1, [r7, #16]
 8000b60:	48d0      	ldr	r0, [pc, #832]	; (8000ea4 <tcp_http_mt+0x8e0>)
 8000b62:	f008 f878 	bl	8008c56 <strncmp>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f040 83a6 	bne.w	80012ba <tcp_http_mt+0xcf6>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	4acd      	ldr	r2, [pc, #820]	; (8000ea8 <tcp_http_mt+0x8e4>)
 8000b72:	4614      	mov	r4, r2
 8000b74:	469c      	mov	ip, r3
 8000b76:	f104 0e20 	add.w	lr, r4, #32
 8000b7a:	4665      	mov	r5, ip
 8000b7c:	4626      	mov	r6, r4
 8000b7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b80:	6028      	str	r0, [r5, #0]
 8000b82:	6069      	str	r1, [r5, #4]
 8000b84:	60aa      	str	r2, [r5, #8]
 8000b86:	60eb      	str	r3, [r5, #12]
 8000b88:	3410      	adds	r4, #16
 8000b8a:	f10c 0c10 	add.w	ip, ip, #16
 8000b8e:	4574      	cmp	r4, lr
 8000b90:	d1f3      	bne.n	8000b7a <tcp_http_mt+0x5b6>
 8000b92:	4665      	mov	r5, ip
 8000b94:	4623      	mov	r3, r4
 8000b96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b98:	6028      	str	r0, [r5, #0]
 8000b9a:	6069      	str	r1, [r5, #4]
 8000b9c:	60aa      	str	r2, [r5, #8]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head><title>Escrava Config</title>");
 8000ba2:	6838      	ldr	r0, [r7, #0]
 8000ba4:	f7ff fad4 	bl	8000150 <strlen>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4abe      	ldr	r2, [pc, #760]	; (8000eac <tcp_http_mt+0x8e8>)
 8000bb2:	4614      	mov	r4, r2
 8000bb4:	469c      	mov	ip, r3
 8000bb6:	f104 0e20 	add.w	lr, r4, #32
 8000bba:	4665      	mov	r5, ip
 8000bbc:	4626      	mov	r6, r4
 8000bbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bc0:	6028      	str	r0, [r5, #0]
 8000bc2:	6069      	str	r1, [r5, #4]
 8000bc4:	60aa      	str	r2, [r5, #8]
 8000bc6:	60eb      	str	r3, [r5, #12]
 8000bc8:	3410      	adds	r4, #16
 8000bca:	f10c 0c10 	add.w	ip, ip, #16
 8000bce:	4574      	cmp	r4, lr
 8000bd0:	d1f3      	bne.n	8000bba <tcp_http_mt+0x5f6>
 8000bd2:	4662      	mov	r2, ip
 8000bd4:	4623      	mov	r3, r4
 8000bd6:	cb03      	ldmia	r3!, {r0, r1}
 8000bd8:	6010      	str	r0, [r2, #0]
 8000bda:	6051      	str	r1, [r2, #4]
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "<center><table border='1'><tr>");
 8000be0:	6838      	ldr	r0, [r7, #0]
 8000be2:	f7ff fab5 	bl	8000150 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	4413      	add	r3, r2
 8000bee:	4ab0      	ldr	r2, [pc, #704]	; (8000eb0 <tcp_http_mt+0x8ec>)
 8000bf0:	461d      	mov	r5, r3
 8000bf2:	4614      	mov	r4, r2
 8000bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf6:	6028      	str	r0, [r5, #0]
 8000bf8:	6069      	str	r1, [r5, #4]
 8000bfa:	60aa      	str	r2, [r5, #8]
 8000bfc:	60eb      	str	r3, [r5, #12]
 8000bfe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000c00:	6128      	str	r0, [r5, #16]
 8000c02:	6169      	str	r1, [r5, #20]
 8000c04:	61aa      	str	r2, [r5, #24]
 8000c06:	8823      	ldrh	r3, [r4, #0]
 8000c08:	78a2      	ldrb	r2, [r4, #2]
 8000c0a:	83ab      	strh	r3, [r5, #28]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "<td><b>Entrada / IP da placa destino</b></td>");
 8000c10:	6838      	ldr	r0, [r7, #0]
 8000c12:	f7ff fa9d 	bl	8000150 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4aa5      	ldr	r2, [pc, #660]	; (8000eb4 <tcp_http_mt+0x8f0>)
 8000c20:	4614      	mov	r4, r2
 8000c22:	469c      	mov	ip, r3
 8000c24:	f104 0e20 	add.w	lr, r4, #32
 8000c28:	4665      	mov	r5, ip
 8000c2a:	4626      	mov	r6, r4
 8000c2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c2e:	6028      	str	r0, [r5, #0]
 8000c30:	6069      	str	r1, [r5, #4]
 8000c32:	60aa      	str	r2, [r5, #8]
 8000c34:	60eb      	str	r3, [r5, #12]
 8000c36:	3410      	adds	r4, #16
 8000c38:	f10c 0c10 	add.w	ip, ip, #16
 8000c3c:	4574      	cmp	r4, lr
 8000c3e:	d1f3      	bne.n	8000c28 <tcp_http_mt+0x664>
 8000c40:	4665      	mov	r5, ip
 8000c42:	4623      	mov	r3, r4
 8000c44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c46:	6028      	str	r0, [r5, #0]
 8000c48:	6069      	str	r1, [r5, #4]
 8000c4a:	60aa      	str	r2, [r5, #8]
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><b>Rele da placa destino</b></td></tr>");
 8000c50:	6838      	ldr	r0, [r7, #0]
 8000c52:	f7ff fa7d 	bl	8000150 <strlen>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a96      	ldr	r2, [pc, #600]	; (8000eb8 <tcp_http_mt+0x8f4>)
 8000c60:	4614      	mov	r4, r2
 8000c62:	469c      	mov	ip, r3
 8000c64:	f104 0e20 	add.w	lr, r4, #32
 8000c68:	4665      	mov	r5, ip
 8000c6a:	4626      	mov	r6, r4
 8000c6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c6e:	6028      	str	r0, [r5, #0]
 8000c70:	6069      	str	r1, [r5, #4]
 8000c72:	60aa      	str	r2, [r5, #8]
 8000c74:	60eb      	str	r3, [r5, #12]
 8000c76:	3410      	adds	r4, #16
 8000c78:	f10c 0c10 	add.w	ip, ip, #16
 8000c7c:	4574      	cmp	r4, lr
 8000c7e:	d1f3      	bne.n	8000c68 <tcp_http_mt+0x6a4>
 8000c80:	4662      	mov	r2, ip
 8000c82:	4623      	mov	r3, r4
 8000c84:	cb03      	ldmia	r3!, {r0, r1}
 8000c86:	6010      	str	r0, [r2, #0]
 8000c88:	6051      	str	r1, [r2, #4]
 8000c8a:	8819      	ldrh	r1, [r3, #0]
 8000c8c:	789b      	ldrb	r3, [r3, #2]
 8000c8e:	8111      	strh	r1, [r2, #8]
 8000c90:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>1:  <input type='text' id='ip1'></td>");
 8000c92:	6838      	ldr	r0, [r7, #0]
 8000c94:	f7ff fa5c 	bl	8000150 <strlen>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a86      	ldr	r2, [pc, #536]	; (8000ebc <tcp_http_mt+0x8f8>)
 8000ca2:	4614      	mov	r4, r2
 8000ca4:	469c      	mov	ip, r3
 8000ca6:	f104 0e20 	add.w	lr, r4, #32
 8000caa:	4665      	mov	r5, ip
 8000cac:	4626      	mov	r6, r4
 8000cae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cb0:	6028      	str	r0, [r5, #0]
 8000cb2:	6069      	str	r1, [r5, #4]
 8000cb4:	60aa      	str	r2, [r5, #8]
 8000cb6:	60eb      	str	r3, [r5, #12]
 8000cb8:	3410      	adds	r4, #16
 8000cba:	f10c 0c10 	add.w	ip, ip, #16
 8000cbe:	4574      	cmp	r4, lr
 8000cc0:	d1f3      	bne.n	8000caa <tcp_http_mt+0x6e6>
 8000cc2:	4665      	mov	r5, ip
 8000cc4:	4623      	mov	r3, r4
 8000cc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000cc8:	6028      	str	r0, [r5, #0]
 8000cca:	6069      	str	r1, [r5, #4]
 8000ccc:	60aa      	str	r2, [r5, #8]
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><input type='text' id='r1'></td></tr>");
 8000cd2:	6838      	ldr	r0, [r7, #0]
 8000cd4:	f7ff fa3c 	bl	8000150 <strlen>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a77      	ldr	r2, [pc, #476]	; (8000ec0 <tcp_http_mt+0x8fc>)
 8000ce2:	4614      	mov	r4, r2
 8000ce4:	469c      	mov	ip, r3
 8000ce6:	f104 0e20 	add.w	lr, r4, #32
 8000cea:	4665      	mov	r5, ip
 8000cec:	4626      	mov	r6, r4
 8000cee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cf0:	6028      	str	r0, [r5, #0]
 8000cf2:	6069      	str	r1, [r5, #4]
 8000cf4:	60aa      	str	r2, [r5, #8]
 8000cf6:	60eb      	str	r3, [r5, #12]
 8000cf8:	3410      	adds	r4, #16
 8000cfa:	f10c 0c10 	add.w	ip, ip, #16
 8000cfe:	4574      	cmp	r4, lr
 8000d00:	d1f3      	bne.n	8000cea <tcp_http_mt+0x726>
 8000d02:	4662      	mov	r2, ip
 8000d04:	4623      	mov	r3, r4
 8000d06:	cb03      	ldmia	r3!, {r0, r1}
 8000d08:	6010      	str	r0, [r2, #0]
 8000d0a:	6051      	str	r1, [r2, #4]
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	8113      	strh	r3, [r2, #8]

							strcat((char*)buf, "<tr><td>2:  <input type='text' id='ip2'></td>");
 8000d10:	6838      	ldr	r0, [r7, #0]
 8000d12:	f7ff fa1d 	bl	8000150 <strlen>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a69      	ldr	r2, [pc, #420]	; (8000ec4 <tcp_http_mt+0x900>)
 8000d20:	4614      	mov	r4, r2
 8000d22:	469c      	mov	ip, r3
 8000d24:	f104 0e20 	add.w	lr, r4, #32
 8000d28:	4665      	mov	r5, ip
 8000d2a:	4626      	mov	r6, r4
 8000d2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d2e:	6028      	str	r0, [r5, #0]
 8000d30:	6069      	str	r1, [r5, #4]
 8000d32:	60aa      	str	r2, [r5, #8]
 8000d34:	60eb      	str	r3, [r5, #12]
 8000d36:	3410      	adds	r4, #16
 8000d38:	f10c 0c10 	add.w	ip, ip, #16
 8000d3c:	4574      	cmp	r4, lr
 8000d3e:	d1f3      	bne.n	8000d28 <tcp_http_mt+0x764>
 8000d40:	4665      	mov	r5, ip
 8000d42:	4623      	mov	r3, r4
 8000d44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d46:	6028      	str	r0, [r5, #0]
 8000d48:	6069      	str	r1, [r5, #4]
 8000d4a:	60aa      	str	r2, [r5, #8]
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><input type='text' id='r2'></td></tr>");
 8000d50:	6838      	ldr	r0, [r7, #0]
 8000d52:	f7ff f9fd 	bl	8000150 <strlen>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a5a      	ldr	r2, [pc, #360]	; (8000ec8 <tcp_http_mt+0x904>)
 8000d60:	4614      	mov	r4, r2
 8000d62:	469c      	mov	ip, r3
 8000d64:	f104 0e20 	add.w	lr, r4, #32
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4626      	mov	r6, r4
 8000d6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d6e:	6028      	str	r0, [r5, #0]
 8000d70:	6069      	str	r1, [r5, #4]
 8000d72:	60aa      	str	r2, [r5, #8]
 8000d74:	60eb      	str	r3, [r5, #12]
 8000d76:	3410      	adds	r4, #16
 8000d78:	f10c 0c10 	add.w	ip, ip, #16
 8000d7c:	4574      	cmp	r4, lr
 8000d7e:	d1f3      	bne.n	8000d68 <tcp_http_mt+0x7a4>
 8000d80:	4662      	mov	r2, ip
 8000d82:	4623      	mov	r3, r4
 8000d84:	cb03      	ldmia	r3!, {r0, r1}
 8000d86:	6010      	str	r0, [r2, #0]
 8000d88:	6051      	str	r1, [r2, #4]
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	8113      	strh	r3, [r2, #8]

							strcat((char*)buf, "<tr><td>3:  <input type='text' id='ip3'></td>");
 8000d8e:	6838      	ldr	r0, [r7, #0]
 8000d90:	f7ff f9de 	bl	8000150 <strlen>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a4b      	ldr	r2, [pc, #300]	; (8000ecc <tcp_http_mt+0x908>)
 8000d9e:	4614      	mov	r4, r2
 8000da0:	469c      	mov	ip, r3
 8000da2:	f104 0e20 	add.w	lr, r4, #32
 8000da6:	4665      	mov	r5, ip
 8000da8:	4626      	mov	r6, r4
 8000daa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dac:	6028      	str	r0, [r5, #0]
 8000dae:	6069      	str	r1, [r5, #4]
 8000db0:	60aa      	str	r2, [r5, #8]
 8000db2:	60eb      	str	r3, [r5, #12]
 8000db4:	3410      	adds	r4, #16
 8000db6:	f10c 0c10 	add.w	ip, ip, #16
 8000dba:	4574      	cmp	r4, lr
 8000dbc:	d1f3      	bne.n	8000da6 <tcp_http_mt+0x7e2>
 8000dbe:	4665      	mov	r5, ip
 8000dc0:	4623      	mov	r3, r4
 8000dc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000dc4:	6028      	str	r0, [r5, #0]
 8000dc6:	6069      	str	r1, [r5, #4]
 8000dc8:	60aa      	str	r2, [r5, #8]
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><input type='text' id='r3'></td></tr>");
 8000dce:	6838      	ldr	r0, [r7, #0]
 8000dd0:	f7ff f9be 	bl	8000150 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <tcp_http_mt+0x90c>)
 8000dde:	4614      	mov	r4, r2
 8000de0:	469c      	mov	ip, r3
 8000de2:	f104 0e20 	add.w	lr, r4, #32
 8000de6:	4665      	mov	r5, ip
 8000de8:	4626      	mov	r6, r4
 8000dea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dec:	6028      	str	r0, [r5, #0]
 8000dee:	6069      	str	r1, [r5, #4]
 8000df0:	60aa      	str	r2, [r5, #8]
 8000df2:	60eb      	str	r3, [r5, #12]
 8000df4:	3410      	adds	r4, #16
 8000df6:	f10c 0c10 	add.w	ip, ip, #16
 8000dfa:	4574      	cmp	r4, lr
 8000dfc:	d1f3      	bne.n	8000de6 <tcp_http_mt+0x822>
 8000dfe:	4662      	mov	r2, ip
 8000e00:	4623      	mov	r3, r4
 8000e02:	cb03      	ldmia	r3!, {r0, r1}
 8000e04:	6010      	str	r0, [r2, #0]
 8000e06:	6051      	str	r1, [r2, #4]
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	8113      	strh	r3, [r2, #8]

							strcat((char*)buf, "<tr><td>4:  <input type='text' id='ip4'></td>");
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f7ff f99f 	bl	8000150 <strlen>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a2e      	ldr	r2, [pc, #184]	; (8000ed4 <tcp_http_mt+0x910>)
 8000e1c:	4614      	mov	r4, r2
 8000e1e:	469c      	mov	ip, r3
 8000e20:	f104 0e20 	add.w	lr, r4, #32
 8000e24:	4665      	mov	r5, ip
 8000e26:	4626      	mov	r6, r4
 8000e28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e2a:	6028      	str	r0, [r5, #0]
 8000e2c:	6069      	str	r1, [r5, #4]
 8000e2e:	60aa      	str	r2, [r5, #8]
 8000e30:	60eb      	str	r3, [r5, #12]
 8000e32:	3410      	adds	r4, #16
 8000e34:	f10c 0c10 	add.w	ip, ip, #16
 8000e38:	4574      	cmp	r4, lr
 8000e3a:	d1f3      	bne.n	8000e24 <tcp_http_mt+0x860>
 8000e3c:	4665      	mov	r5, ip
 8000e3e:	4623      	mov	r3, r4
 8000e40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e42:	6028      	str	r0, [r5, #0]
 8000e44:	6069      	str	r1, [r5, #4]
 8000e46:	60aa      	str	r2, [r5, #8]
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><input type='text' id='r4'></td></tr>");
 8000e4c:	6838      	ldr	r0, [r7, #0]
 8000e4e:	f7ff f97f 	bl	8000150 <strlen>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ed8 <tcp_http_mt+0x914>)
 8000e5c:	4614      	mov	r4, r2
 8000e5e:	469c      	mov	ip, r3
 8000e60:	f104 0e20 	add.w	lr, r4, #32
 8000e64:	4665      	mov	r5, ip
 8000e66:	4626      	mov	r6, r4
 8000e68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e6a:	6028      	str	r0, [r5, #0]
 8000e6c:	6069      	str	r1, [r5, #4]
 8000e6e:	60aa      	str	r2, [r5, #8]
 8000e70:	60eb      	str	r3, [r5, #12]
 8000e72:	3410      	adds	r4, #16
 8000e74:	f10c 0c10 	add.w	ip, ip, #16
 8000e78:	4574      	cmp	r4, lr
 8000e7a:	d1f3      	bne.n	8000e64 <tcp_http_mt+0x8a0>
 8000e7c:	4662      	mov	r2, ip
 8000e7e:	4623      	mov	r3, r4
 8000e80:	cb03      	ldmia	r3!, {r0, r1}
 8000e82:	6010      	str	r0, [r2, #0]
 8000e84:	6051      	str	r1, [r2, #4]
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	8113      	strh	r3, [r2, #8]

							strcat((char*)buf, "<tr><td>5:  <input type='text' id='ip5'></td>");
 8000e8a:	6838      	ldr	r0, [r7, #0]
 8000e8c:	f7ff f960 	bl	8000150 <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <tcp_http_mt+0x918>)
 8000e9a:	4614      	mov	r4, r2
 8000e9c:	469c      	mov	ip, r3
 8000e9e:	f104 0e20 	add.w	lr, r4, #32
 8000ea2:	e01d      	b.n	8000ee0 <tcp_http_mt+0x91c>
 8000ea4:	08009468 	.word	0x08009468
 8000ea8:	08009054 	.word	0x08009054
 8000eac:	08009478 	.word	0x08009478
 8000eb0:	080094a4 	.word	0x080094a4
 8000eb4:	080094c4 	.word	0x080094c4
 8000eb8:	080094f4 	.word	0x080094f4
 8000ebc:	08009520 	.word	0x08009520
 8000ec0:	08009550 	.word	0x08009550
 8000ec4:	0800957c 	.word	0x0800957c
 8000ec8:	080095ac 	.word	0x080095ac
 8000ecc:	080095d8 	.word	0x080095d8
 8000ed0:	08009608 	.word	0x08009608
 8000ed4:	08009634 	.word	0x08009634
 8000ed8:	08009664 	.word	0x08009664
 8000edc:	08009690 	.word	0x08009690
 8000ee0:	4665      	mov	r5, ip
 8000ee2:	4626      	mov	r6, r4
 8000ee4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ee6:	6028      	str	r0, [r5, #0]
 8000ee8:	6069      	str	r1, [r5, #4]
 8000eea:	60aa      	str	r2, [r5, #8]
 8000eec:	60eb      	str	r3, [r5, #12]
 8000eee:	3410      	adds	r4, #16
 8000ef0:	f10c 0c10 	add.w	ip, ip, #16
 8000ef4:	4574      	cmp	r4, lr
 8000ef6:	d1f3      	bne.n	8000ee0 <tcp_http_mt+0x91c>
 8000ef8:	4665      	mov	r5, ip
 8000efa:	4623      	mov	r3, r4
 8000efc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000efe:	6028      	str	r0, [r5, #0]
 8000f00:	6069      	str	r1, [r5, #4]
 8000f02:	60aa      	str	r2, [r5, #8]
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><input type='text' id='r5'></td></tr>");
 8000f08:	6838      	ldr	r0, [r7, #0]
 8000f0a:	f7ff f921 	bl	8000150 <strlen>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	4ad1      	ldr	r2, [pc, #836]	; (800125c <tcp_http_mt+0xc98>)
 8000f18:	4614      	mov	r4, r2
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	f104 0e20 	add.w	lr, r4, #32
 8000f20:	4665      	mov	r5, ip
 8000f22:	4626      	mov	r6, r4
 8000f24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f26:	6028      	str	r0, [r5, #0]
 8000f28:	6069      	str	r1, [r5, #4]
 8000f2a:	60aa      	str	r2, [r5, #8]
 8000f2c:	60eb      	str	r3, [r5, #12]
 8000f2e:	3410      	adds	r4, #16
 8000f30:	f10c 0c10 	add.w	ip, ip, #16
 8000f34:	4574      	cmp	r4, lr
 8000f36:	d1f3      	bne.n	8000f20 <tcp_http_mt+0x95c>
 8000f38:	4662      	mov	r2, ip
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	cb03      	ldmia	r3!, {r0, r1}
 8000f3e:	6010      	str	r0, [r2, #0]
 8000f40:	6051      	str	r1, [r2, #4]
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	8113      	strh	r3, [r2, #8]

							strcat((char*)buf, "<tr><td>6:  <input type='text' id='ip6'></td>");
 8000f46:	6838      	ldr	r0, [r7, #0]
 8000f48:	f7ff f902 	bl	8000150 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4ac2      	ldr	r2, [pc, #776]	; (8001260 <tcp_http_mt+0xc9c>)
 8000f56:	4614      	mov	r4, r2
 8000f58:	469c      	mov	ip, r3
 8000f5a:	f104 0e20 	add.w	lr, r4, #32
 8000f5e:	4665      	mov	r5, ip
 8000f60:	4626      	mov	r6, r4
 8000f62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f64:	6028      	str	r0, [r5, #0]
 8000f66:	6069      	str	r1, [r5, #4]
 8000f68:	60aa      	str	r2, [r5, #8]
 8000f6a:	60eb      	str	r3, [r5, #12]
 8000f6c:	3410      	adds	r4, #16
 8000f6e:	f10c 0c10 	add.w	ip, ip, #16
 8000f72:	4574      	cmp	r4, lr
 8000f74:	d1f3      	bne.n	8000f5e <tcp_http_mt+0x99a>
 8000f76:	4665      	mov	r5, ip
 8000f78:	4623      	mov	r3, r4
 8000f7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f7c:	6028      	str	r0, [r5, #0]
 8000f7e:	6069      	str	r1, [r5, #4]
 8000f80:	60aa      	str	r2, [r5, #8]
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><input type='text' id='r6'></td></tr>");
 8000f86:	6838      	ldr	r0, [r7, #0]
 8000f88:	f7ff f8e2 	bl	8000150 <strlen>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4ab3      	ldr	r2, [pc, #716]	; (8001264 <tcp_http_mt+0xca0>)
 8000f96:	4614      	mov	r4, r2
 8000f98:	469c      	mov	ip, r3
 8000f9a:	f104 0e20 	add.w	lr, r4, #32
 8000f9e:	4665      	mov	r5, ip
 8000fa0:	4626      	mov	r6, r4
 8000fa2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fa4:	6028      	str	r0, [r5, #0]
 8000fa6:	6069      	str	r1, [r5, #4]
 8000fa8:	60aa      	str	r2, [r5, #8]
 8000faa:	60eb      	str	r3, [r5, #12]
 8000fac:	3410      	adds	r4, #16
 8000fae:	f10c 0c10 	add.w	ip, ip, #16
 8000fb2:	4574      	cmp	r4, lr
 8000fb4:	d1f3      	bne.n	8000f9e <tcp_http_mt+0x9da>
 8000fb6:	4662      	mov	r2, ip
 8000fb8:	4623      	mov	r3, r4
 8000fba:	cb03      	ldmia	r3!, {r0, r1}
 8000fbc:	6010      	str	r0, [r2, #0]
 8000fbe:	6051      	str	r1, [r2, #4]
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	8113      	strh	r3, [r2, #8]

							strcat((char*)buf, "<tr><td>7:  <input type='text' id='ip7'></td>");
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f7ff f8c3 	bl	8000150 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4aa5      	ldr	r2, [pc, #660]	; (8001268 <tcp_http_mt+0xca4>)
 8000fd4:	4614      	mov	r4, r2
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	f104 0e20 	add.w	lr, r4, #32
 8000fdc:	4665      	mov	r5, ip
 8000fde:	4626      	mov	r6, r4
 8000fe0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fe2:	6028      	str	r0, [r5, #0]
 8000fe4:	6069      	str	r1, [r5, #4]
 8000fe6:	60aa      	str	r2, [r5, #8]
 8000fe8:	60eb      	str	r3, [r5, #12]
 8000fea:	3410      	adds	r4, #16
 8000fec:	f10c 0c10 	add.w	ip, ip, #16
 8000ff0:	4574      	cmp	r4, lr
 8000ff2:	d1f3      	bne.n	8000fdc <tcp_http_mt+0xa18>
 8000ff4:	4665      	mov	r5, ip
 8000ff6:	4623      	mov	r3, r4
 8000ff8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ffa:	6028      	str	r0, [r5, #0]
 8000ffc:	6069      	str	r1, [r5, #4]
 8000ffe:	60aa      	str	r2, [r5, #8]
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><input type='text' id='r7'></td></tr>");
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f7ff f8a3 	bl	8000150 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	4a96      	ldr	r2, [pc, #600]	; (800126c <tcp_http_mt+0xca8>)
 8001014:	4614      	mov	r4, r2
 8001016:	469c      	mov	ip, r3
 8001018:	f104 0e20 	add.w	lr, r4, #32
 800101c:	4665      	mov	r5, ip
 800101e:	4626      	mov	r6, r4
 8001020:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001022:	6028      	str	r0, [r5, #0]
 8001024:	6069      	str	r1, [r5, #4]
 8001026:	60aa      	str	r2, [r5, #8]
 8001028:	60eb      	str	r3, [r5, #12]
 800102a:	3410      	adds	r4, #16
 800102c:	f10c 0c10 	add.w	ip, ip, #16
 8001030:	4574      	cmp	r4, lr
 8001032:	d1f3      	bne.n	800101c <tcp_http_mt+0xa58>
 8001034:	4662      	mov	r2, ip
 8001036:	4623      	mov	r3, r4
 8001038:	cb03      	ldmia	r3!, {r0, r1}
 800103a:	6010      	str	r0, [r2, #0]
 800103c:	6051      	str	r1, [r2, #4]
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	8113      	strh	r3, [r2, #8]

							strcat((char*)buf, "<tr><td>8:  <input type='text' id='ip8'></td>");
 8001042:	6838      	ldr	r0, [r7, #0]
 8001044:	f7ff f884 	bl	8000150 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a87      	ldr	r2, [pc, #540]	; (8001270 <tcp_http_mt+0xcac>)
 8001052:	4614      	mov	r4, r2
 8001054:	469c      	mov	ip, r3
 8001056:	f104 0e20 	add.w	lr, r4, #32
 800105a:	4665      	mov	r5, ip
 800105c:	4626      	mov	r6, r4
 800105e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001060:	6028      	str	r0, [r5, #0]
 8001062:	6069      	str	r1, [r5, #4]
 8001064:	60aa      	str	r2, [r5, #8]
 8001066:	60eb      	str	r3, [r5, #12]
 8001068:	3410      	adds	r4, #16
 800106a:	f10c 0c10 	add.w	ip, ip, #16
 800106e:	4574      	cmp	r4, lr
 8001070:	d1f3      	bne.n	800105a <tcp_http_mt+0xa96>
 8001072:	4665      	mov	r5, ip
 8001074:	4623      	mov	r3, r4
 8001076:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001078:	6028      	str	r0, [r5, #0]
 800107a:	6069      	str	r1, [r5, #4]
 800107c:	60aa      	str	r2, [r5, #8]
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><input type='text' id='r8'></td></tr></table><br>");
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f7ff f864 	bl	8000150 <strlen>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a78      	ldr	r2, [pc, #480]	; (8001274 <tcp_http_mt+0xcb0>)
 8001092:	4614      	mov	r4, r2
 8001094:	469c      	mov	ip, r3
 8001096:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800109a:	4665      	mov	r5, ip
 800109c:	4626      	mov	r6, r4
 800109e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010a0:	6028      	str	r0, [r5, #0]
 80010a2:	6069      	str	r1, [r5, #4]
 80010a4:	60aa      	str	r2, [r5, #8]
 80010a6:	60eb      	str	r3, [r5, #12]
 80010a8:	3410      	adds	r4, #16
 80010aa:	f10c 0c10 	add.w	ip, ip, #16
 80010ae:	4574      	cmp	r4, lr
 80010b0:	d1f3      	bne.n	800109a <tcp_http_mt+0xad6>
 80010b2:	4663      	mov	r3, ip
 80010b4:	4622      	mov	r2, r4
 80010b6:	6810      	ldr	r0, [r2, #0]
 80010b8:	6018      	str	r0, [r3, #0]
 80010ba:	8892      	ldrh	r2, [r2, #4]
 80010bc:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<script>function configInt() {");
 80010be:	6838      	ldr	r0, [r7, #0]
 80010c0:	f7ff f846 	bl	8000150 <strlen>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a6a      	ldr	r2, [pc, #424]	; (8001278 <tcp_http_mt+0xcb4>)
 80010ce:	461d      	mov	r5, r3
 80010d0:	4614      	mov	r4, r2
 80010d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d4:	6028      	str	r0, [r5, #0]
 80010d6:	6069      	str	r1, [r5, #4]
 80010d8:	60aa      	str	r2, [r5, #8]
 80010da:	60eb      	str	r3, [r5, #12]
 80010dc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80010de:	6128      	str	r0, [r5, #16]
 80010e0:	6169      	str	r1, [r5, #20]
 80010e2:	61aa      	str	r2, [r5, #24]
 80010e4:	8823      	ldrh	r3, [r4, #0]
 80010e6:	78a2      	ldrb	r2, [r4, #2]
 80010e8:	83ab      	strh	r3, [r5, #28]
 80010ea:	4613      	mov	r3, r2
 80010ec:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "window.open('http://");
 80010ee:	6838      	ldr	r0, [r7, #0]
 80010f0:	f7ff f82e 	bl	8000150 <strlen>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a5f      	ldr	r2, [pc, #380]	; (800127c <tcp_http_mt+0xcb8>)
 80010fe:	461d      	mov	r5, r3
 8001100:	4614      	mov	r4, r2
 8001102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001104:	6028      	str	r0, [r5, #0]
 8001106:	6069      	str	r1, [r5, #4]
 8001108:	60aa      	str	r2, [r5, #8]
 800110a:	60eb      	str	r3, [r5, #12]
 800110c:	6820      	ldr	r0, [r4, #0]
 800110e:	6128      	str	r0, [r5, #16]
 8001110:	7923      	ldrb	r3, [r4, #4]
 8001112:	752b      	strb	r3, [r5, #20]
							strcat((char*)buf, &ipStr);
 8001114:	495a      	ldr	r1, [pc, #360]	; (8001280 <tcp_http_mt+0xcbc>)
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f007 fd79 	bl	8008c0e <strcat>
							strcat((char*)buf, "/interfaces2/ip1:' + document.getElementById('ip1').value + ',ip2:' + document.getElementById('ip2').value + ',ip3:' +");
 800111c:	6838      	ldr	r0, [r7, #0]
 800111e:	f7ff f817 	bl	8000150 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	4413      	add	r3, r2
 800112a:	4a56      	ldr	r2, [pc, #344]	; (8001284 <tcp_http_mt+0xcc0>)
 800112c:	4618      	mov	r0, r3
 800112e:	4611      	mov	r1, r2
 8001130:	2377      	movs	r3, #119	; 0x77
 8001132:	461a      	mov	r2, r3
 8001134:	f007 fd3f 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "document.getElementById('ip3').value + ',ip4:' + document.getElementById('ip4').value + ',ip5:' + document.getElementById('ip5').value +");
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f7ff f809 	bl	8000150 <strlen>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	4413      	add	r3, r2
 8001146:	4a50      	ldr	r2, [pc, #320]	; (8001288 <tcp_http_mt+0xcc4>)
 8001148:	4618      	mov	r0, r3
 800114a:	4611      	mov	r1, r2
 800114c:	2389      	movs	r3, #137	; 0x89
 800114e:	461a      	mov	r2, r3
 8001150:	f007 fd31 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "',ip6:' + document.getElementById('ip6').value + ',ip7:' + document.getElementById('ip7').value + ',ip8:' + document.getElementById('ip8').value");
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f7fe fffb 	bl	8000150 <strlen>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	4413      	add	r3, r2
 8001162:	4a4a      	ldr	r2, [pc, #296]	; (800128c <tcp_http_mt+0xcc8>)
 8001164:	4618      	mov	r0, r3
 8001166:	4611      	mov	r1, r2
 8001168:	2391      	movs	r3, #145	; 0x91
 800116a:	461a      	mov	r2, r3
 800116c:	f007 fd23 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "+ ',r1:' + document.getElementById('r1').value + ',r2:' + document.getElementById('r2').value ");
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	f7fe ffed 	bl	8000150 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	4a44      	ldr	r2, [pc, #272]	; (8001290 <tcp_http_mt+0xccc>)
 8001180:	4618      	mov	r0, r3
 8001182:	4611      	mov	r1, r2
 8001184:	235f      	movs	r3, #95	; 0x5f
 8001186:	461a      	mov	r2, r3
 8001188:	f007 fd15 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "+ ',r3:' + document.getElementById('r3').value + ',r4:' + document.getElementById('r4').value ");
 800118c:	6838      	ldr	r0, [r7, #0]
 800118e:	f7fe ffdf 	bl	8000150 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	4413      	add	r3, r2
 800119a:	4a3e      	ldr	r2, [pc, #248]	; (8001294 <tcp_http_mt+0xcd0>)
 800119c:	4618      	mov	r0, r3
 800119e:	4611      	mov	r1, r2
 80011a0:	235f      	movs	r3, #95	; 0x5f
 80011a2:	461a      	mov	r2, r3
 80011a4:	f007 fd07 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "+ ',r5:' + document.getElementById('r5').value + ',r6:' + document.getElementById('r6').value ");
 80011a8:	6838      	ldr	r0, [r7, #0]
 80011aa:	f7fe ffd1 	bl	8000150 <strlen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a38      	ldr	r2, [pc, #224]	; (8001298 <tcp_http_mt+0xcd4>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	4611      	mov	r1, r2
 80011bc:	235f      	movs	r3, #95	; 0x5f
 80011be:	461a      	mov	r2, r3
 80011c0:	f007 fcf9 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "+ ',r7:' + document.getElementById('r7').value + ',r8:' + document.getElementById('r8').value, '_self');}</script>");
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f7fe ffc3 	bl	8000150 <strlen>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a32      	ldr	r2, [pc, #200]	; (800129c <tcp_http_mt+0xcd8>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	4611      	mov	r1, r2
 80011d8:	2373      	movs	r3, #115	; 0x73
 80011da:	461a      	mov	r2, r3
 80011dc:	f007 fceb 	bl	8008bb6 <memcpy>

							strcat((char*)buf, "<button onClick='configInt()'>Proximo</button><br><br><a href='http://");
 80011e0:	6838      	ldr	r0, [r7, #0]
 80011e2:	f7fe ffb5 	bl	8000150 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a2c      	ldr	r2, [pc, #176]	; (80012a0 <tcp_http_mt+0xcdc>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	4611      	mov	r1, r2
 80011f4:	2347      	movs	r3, #71	; 0x47
 80011f6:	461a      	mov	r2, r3
 80011f8:	f007 fcdd 	bl	8008bb6 <memcpy>
							strcat((char*)buf, &ipStr);
 80011fc:	4920      	ldr	r1, [pc, #128]	; (8001280 <tcp_http_mt+0xcbc>)
 80011fe:	6838      	ldr	r0, [r7, #0]
 8001200:	f007 fd05 	bl	8008c0e <strcat>
							strcat((char*)buf, "'>Voltar</a><br></center>");
 8001204:	6838      	ldr	r0, [r7, #0]
 8001206:	f7fe ffa3 	bl	8000150 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	4413      	add	r3, r2
 8001212:	4a24      	ldr	r2, [pc, #144]	; (80012a4 <tcp_http_mt+0xce0>)
 8001214:	461d      	mov	r5, r3
 8001216:	4614      	mov	r4, r2
 8001218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121a:	6028      	str	r0, [r5, #0]
 800121c:	6069      	str	r1, [r5, #4]
 800121e:	60aa      	str	r2, [r5, #8]
 8001220:	60eb      	str	r3, [r5, #12]
 8001222:	cc03      	ldmia	r4!, {r0, r1}
 8001224:	6128      	str	r0, [r5, #16]
 8001226:	6169      	str	r1, [r5, #20]
 8001228:	8823      	ldrh	r3, [r4, #0]
 800122a:	832b      	strh	r3, [r5, #24]

							strcat((char*)buf, "</body>");
 800122c:	6838      	ldr	r0, [r7, #0]
 800122e:	f7fe ff8f 	bl	8000150 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	4413      	add	r3, r2
 800123a:	491b      	ldr	r1, [pc, #108]	; (80012a8 <tcp_http_mt+0xce4>)
 800123c:	461a      	mov	r2, r3
 800123e:	460b      	mov	r3, r1
 8001240:	cb03      	ldmia	r3!, {r0, r1}
 8001242:	6010      	str	r0, [r2, #0]
 8001244:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8001246:	6838      	ldr	r0, [r7, #0]
 8001248:	f7fe ff82 	bl	8000150 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4915      	ldr	r1, [pc, #84]	; (80012ac <tcp_http_mt+0xce8>)
 8001256:	461a      	mov	r2, r3
 8001258:	460b      	mov	r3, r1
 800125a:	e029      	b.n	80012b0 <tcp_http_mt+0xcec>
 800125c:	080096c0 	.word	0x080096c0
 8001260:	080096ec 	.word	0x080096ec
 8001264:	0800971c 	.word	0x0800971c
 8001268:	08009748 	.word	0x08009748
 800126c:	08009778 	.word	0x08009778
 8001270:	080097a4 	.word	0x080097a4
 8001274:	080097d4 	.word	0x080097d4
 8001278:	0800980c 	.word	0x0800980c
 800127c:	08009284 	.word	0x08009284
 8001280:	20002e20 	.word	0x20002e20
 8001284:	0800982c 	.word	0x0800982c
 8001288:	080098a4 	.word	0x080098a4
 800128c:	08009930 	.word	0x08009930
 8001290:	080099c4 	.word	0x080099c4
 8001294:	08009a24 	.word	0x08009a24
 8001298:	08009a84 	.word	0x08009a84
 800129c:	08009ae4 	.word	0x08009ae4
 80012a0:	08009b58 	.word	0x08009b58
 80012a4:	0800943c 	.word	0x0800943c
 80012a8:	08009458 	.word	0x08009458
 80012ac:	08009460 	.word	0x08009460
 80012b0:	cb03      	ldmia	r3!, {r0, r1}
 80012b2:	6010      	str	r0, [r2, #0]
 80012b4:	6051      	str	r1, [r2, #4]
 80012b6:	f000 bca5 	b.w	8001c04 <tcp_http_mt+0x1640>
						}
						else if(strncmp("/interfaces2", url, 12) == 0)
 80012ba:	220c      	movs	r2, #12
 80012bc:	6939      	ldr	r1, [r7, #16]
 80012be:	48d4      	ldr	r0, [pc, #848]	; (8001610 <tcp_http_mt+0x104c>)
 80012c0:	f007 fcc9 	bl	8008c56 <strncmp>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 837c 	bne.w	80019c4 <tcp_http_mt+0x1400>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	4ad1      	ldr	r2, [pc, #836]	; (8001614 <tcp_http_mt+0x1050>)
 80012d0:	4614      	mov	r4, r2
 80012d2:	469c      	mov	ip, r3
 80012d4:	f104 0e20 	add.w	lr, r4, #32
 80012d8:	4665      	mov	r5, ip
 80012da:	4626      	mov	r6, r4
 80012dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012de:	6028      	str	r0, [r5, #0]
 80012e0:	6069      	str	r1, [r5, #4]
 80012e2:	60aa      	str	r2, [r5, #8]
 80012e4:	60eb      	str	r3, [r5, #12]
 80012e6:	3410      	adds	r4, #16
 80012e8:	f10c 0c10 	add.w	ip, ip, #16
 80012ec:	4574      	cmp	r4, lr
 80012ee:	d1f3      	bne.n	80012d8 <tcp_http_mt+0xd14>
 80012f0:	4665      	mov	r5, ip
 80012f2:	4623      	mov	r3, r4
 80012f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80012f6:	6028      	str	r0, [r5, #0]
 80012f8:	6069      	str	r1, [r5, #4]
 80012fa:	60aa      	str	r2, [r5, #8]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head><title>Escrava Config</title>");
 8001300:	6838      	ldr	r0, [r7, #0]
 8001302:	f7fe ff25 	bl	8000150 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	4413      	add	r3, r2
 800130e:	4ac2      	ldr	r2, [pc, #776]	; (8001618 <tcp_http_mt+0x1054>)
 8001310:	4614      	mov	r4, r2
 8001312:	469c      	mov	ip, r3
 8001314:	f104 0e20 	add.w	lr, r4, #32
 8001318:	4665      	mov	r5, ip
 800131a:	4626      	mov	r6, r4
 800131c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800131e:	6028      	str	r0, [r5, #0]
 8001320:	6069      	str	r1, [r5, #4]
 8001322:	60aa      	str	r2, [r5, #8]
 8001324:	60eb      	str	r3, [r5, #12]
 8001326:	3410      	adds	r4, #16
 8001328:	f10c 0c10 	add.w	ip, ip, #16
 800132c:	4574      	cmp	r4, lr
 800132e:	d1f3      	bne.n	8001318 <tcp_http_mt+0xd54>
 8001330:	4662      	mov	r2, ip
 8001332:	4623      	mov	r3, r4
 8001334:	cb03      	ldmia	r3!, {r0, r1}
 8001336:	6010      	str	r0, [r2, #0]
 8001338:	6051      	str	r1, [r2, #4]
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "<center><table border='1'><tr>");
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f7fe ff06 	bl	8000150 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4ab3      	ldr	r2, [pc, #716]	; (800161c <tcp_http_mt+0x1058>)
 800134e:	461d      	mov	r5, r3
 8001350:	4614      	mov	r4, r2
 8001352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001354:	6028      	str	r0, [r5, #0]
 8001356:	6069      	str	r1, [r5, #4]
 8001358:	60aa      	str	r2, [r5, #8]
 800135a:	60eb      	str	r3, [r5, #12]
 800135c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800135e:	6128      	str	r0, [r5, #16]
 8001360:	6169      	str	r1, [r5, #20]
 8001362:	61aa      	str	r2, [r5, #24]
 8001364:	8823      	ldrh	r3, [r4, #0]
 8001366:	78a2      	ldrb	r2, [r4, #2]
 8001368:	83ab      	strh	r3, [r5, #28]
 800136a:	4613      	mov	r3, r2
 800136c:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "<td><b>Entrada / IP da placa destino</b></td>");
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f7fe feee 	bl	8000150 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4aa8      	ldr	r2, [pc, #672]	; (8001620 <tcp_http_mt+0x105c>)
 800137e:	4614      	mov	r4, r2
 8001380:	469c      	mov	ip, r3
 8001382:	f104 0e20 	add.w	lr, r4, #32
 8001386:	4665      	mov	r5, ip
 8001388:	4626      	mov	r6, r4
 800138a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800138c:	6028      	str	r0, [r5, #0]
 800138e:	6069      	str	r1, [r5, #4]
 8001390:	60aa      	str	r2, [r5, #8]
 8001392:	60eb      	str	r3, [r5, #12]
 8001394:	3410      	adds	r4, #16
 8001396:	f10c 0c10 	add.w	ip, ip, #16
 800139a:	4574      	cmp	r4, lr
 800139c:	d1f3      	bne.n	8001386 <tcp_http_mt+0xdc2>
 800139e:	4665      	mov	r5, ip
 80013a0:	4623      	mov	r3, r4
 80013a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013a4:	6028      	str	r0, [r5, #0]
 80013a6:	6069      	str	r1, [r5, #4]
 80013a8:	60aa      	str	r2, [r5, #8]
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><b>Rele da placa destino</b></td></tr>");
 80013ae:	6838      	ldr	r0, [r7, #0]
 80013b0:	f7fe fece 	bl	8000150 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a99      	ldr	r2, [pc, #612]	; (8001624 <tcp_http_mt+0x1060>)
 80013be:	4614      	mov	r4, r2
 80013c0:	469c      	mov	ip, r3
 80013c2:	f104 0e20 	add.w	lr, r4, #32
 80013c6:	4665      	mov	r5, ip
 80013c8:	4626      	mov	r6, r4
 80013ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013cc:	6028      	str	r0, [r5, #0]
 80013ce:	6069      	str	r1, [r5, #4]
 80013d0:	60aa      	str	r2, [r5, #8]
 80013d2:	60eb      	str	r3, [r5, #12]
 80013d4:	3410      	adds	r4, #16
 80013d6:	f10c 0c10 	add.w	ip, ip, #16
 80013da:	4574      	cmp	r4, lr
 80013dc:	d1f3      	bne.n	80013c6 <tcp_http_mt+0xe02>
 80013de:	4662      	mov	r2, ip
 80013e0:	4623      	mov	r3, r4
 80013e2:	cb03      	ldmia	r3!, {r0, r1}
 80013e4:	6010      	str	r0, [r2, #0]
 80013e6:	6051      	str	r1, [r2, #4]
 80013e8:	8819      	ldrh	r1, [r3, #0]
 80013ea:	789b      	ldrb	r3, [r3, #2]
 80013ec:	8111      	strh	r1, [r2, #8]
 80013ee:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>9:  <input type='text' id='ip9'></td>");
 80013f0:	6838      	ldr	r0, [r7, #0]
 80013f2:	f7fe fead 	bl	8000150 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	4a8a      	ldr	r2, [pc, #552]	; (8001628 <tcp_http_mt+0x1064>)
 8001400:	4614      	mov	r4, r2
 8001402:	469c      	mov	ip, r3
 8001404:	f104 0e20 	add.w	lr, r4, #32
 8001408:	4665      	mov	r5, ip
 800140a:	4626      	mov	r6, r4
 800140c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800140e:	6028      	str	r0, [r5, #0]
 8001410:	6069      	str	r1, [r5, #4]
 8001412:	60aa      	str	r2, [r5, #8]
 8001414:	60eb      	str	r3, [r5, #12]
 8001416:	3410      	adds	r4, #16
 8001418:	f10c 0c10 	add.w	ip, ip, #16
 800141c:	4574      	cmp	r4, lr
 800141e:	d1f3      	bne.n	8001408 <tcp_http_mt+0xe44>
 8001420:	4665      	mov	r5, ip
 8001422:	4623      	mov	r3, r4
 8001424:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001426:	6028      	str	r0, [r5, #0]
 8001428:	6069      	str	r1, [r5, #4]
 800142a:	60aa      	str	r2, [r5, #8]
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><input type='text' id='r9'></td></tr>");
 8001430:	6838      	ldr	r0, [r7, #0]
 8001432:	f7fe fe8d 	bl	8000150 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	4413      	add	r3, r2
 800143e:	4a7b      	ldr	r2, [pc, #492]	; (800162c <tcp_http_mt+0x1068>)
 8001440:	4614      	mov	r4, r2
 8001442:	469c      	mov	ip, r3
 8001444:	f104 0e20 	add.w	lr, r4, #32
 8001448:	4665      	mov	r5, ip
 800144a:	4626      	mov	r6, r4
 800144c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800144e:	6028      	str	r0, [r5, #0]
 8001450:	6069      	str	r1, [r5, #4]
 8001452:	60aa      	str	r2, [r5, #8]
 8001454:	60eb      	str	r3, [r5, #12]
 8001456:	3410      	adds	r4, #16
 8001458:	f10c 0c10 	add.w	ip, ip, #16
 800145c:	4574      	cmp	r4, lr
 800145e:	d1f3      	bne.n	8001448 <tcp_http_mt+0xe84>
 8001460:	4662      	mov	r2, ip
 8001462:	4623      	mov	r3, r4
 8001464:	cb03      	ldmia	r3!, {r0, r1}
 8001466:	6010      	str	r0, [r2, #0]
 8001468:	6051      	str	r1, [r2, #4]
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	8113      	strh	r3, [r2, #8]

							strcat((char*)buf, "<tr><td>10:  <input type='text' id='ip10'></td>");
 800146e:	6838      	ldr	r0, [r7, #0]
 8001470:	f7fe fe6e 	bl	8000150 <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a6c      	ldr	r2, [pc, #432]	; (8001630 <tcp_http_mt+0x106c>)
 800147e:	4614      	mov	r4, r2
 8001480:	469c      	mov	ip, r3
 8001482:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001486:	4665      	mov	r5, ip
 8001488:	4626      	mov	r6, r4
 800148a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800148c:	6028      	str	r0, [r5, #0]
 800148e:	6069      	str	r1, [r5, #4]
 8001490:	60aa      	str	r2, [r5, #8]
 8001492:	60eb      	str	r3, [r5, #12]
 8001494:	3410      	adds	r4, #16
 8001496:	f10c 0c10 	add.w	ip, ip, #16
 800149a:	4574      	cmp	r4, lr
 800149c:	d1f3      	bne.n	8001486 <tcp_http_mt+0xec2>
							strcat((char*)buf, "<td><input type='text' id='r10'></td></tr>");
 800149e:	6838      	ldr	r0, [r7, #0]
 80014a0:	f7fe fe56 	bl	8000150 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a61      	ldr	r2, [pc, #388]	; (8001634 <tcp_http_mt+0x1070>)
 80014ae:	4614      	mov	r4, r2
 80014b0:	469c      	mov	ip, r3
 80014b2:	f104 0e20 	add.w	lr, r4, #32
 80014b6:	4665      	mov	r5, ip
 80014b8:	4626      	mov	r6, r4
 80014ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014bc:	6028      	str	r0, [r5, #0]
 80014be:	6069      	str	r1, [r5, #4]
 80014c0:	60aa      	str	r2, [r5, #8]
 80014c2:	60eb      	str	r3, [r5, #12]
 80014c4:	3410      	adds	r4, #16
 80014c6:	f10c 0c10 	add.w	ip, ip, #16
 80014ca:	4574      	cmp	r4, lr
 80014cc:	d1f3      	bne.n	80014b6 <tcp_http_mt+0xef2>
 80014ce:	4662      	mov	r2, ip
 80014d0:	4623      	mov	r3, r4
 80014d2:	cb03      	ldmia	r3!, {r0, r1}
 80014d4:	6010      	str	r0, [r2, #0]
 80014d6:	6051      	str	r1, [r2, #4]
 80014d8:	8819      	ldrh	r1, [r3, #0]
 80014da:	789b      	ldrb	r3, [r3, #2]
 80014dc:	8111      	strh	r1, [r2, #8]
 80014de:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>11:  <input type='text' id='ip11'></td>");
 80014e0:	6838      	ldr	r0, [r7, #0]
 80014e2:	f7fe fe35 	bl	8000150 <strlen>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a52      	ldr	r2, [pc, #328]	; (8001638 <tcp_http_mt+0x1074>)
 80014f0:	4614      	mov	r4, r2
 80014f2:	469c      	mov	ip, r3
 80014f4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80014f8:	4665      	mov	r5, ip
 80014fa:	4626      	mov	r6, r4
 80014fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014fe:	6028      	str	r0, [r5, #0]
 8001500:	6069      	str	r1, [r5, #4]
 8001502:	60aa      	str	r2, [r5, #8]
 8001504:	60eb      	str	r3, [r5, #12]
 8001506:	3410      	adds	r4, #16
 8001508:	f10c 0c10 	add.w	ip, ip, #16
 800150c:	4574      	cmp	r4, lr
 800150e:	d1f3      	bne.n	80014f8 <tcp_http_mt+0xf34>
							strcat((char*)buf, "<td><input type='text' id='r11'></td></tr>");
 8001510:	6838      	ldr	r0, [r7, #0]
 8001512:	f7fe fe1d 	bl	8000150 <strlen>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	4a47      	ldr	r2, [pc, #284]	; (800163c <tcp_http_mt+0x1078>)
 8001520:	4614      	mov	r4, r2
 8001522:	469c      	mov	ip, r3
 8001524:	f104 0e20 	add.w	lr, r4, #32
 8001528:	4665      	mov	r5, ip
 800152a:	4626      	mov	r6, r4
 800152c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800152e:	6028      	str	r0, [r5, #0]
 8001530:	6069      	str	r1, [r5, #4]
 8001532:	60aa      	str	r2, [r5, #8]
 8001534:	60eb      	str	r3, [r5, #12]
 8001536:	3410      	adds	r4, #16
 8001538:	f10c 0c10 	add.w	ip, ip, #16
 800153c:	4574      	cmp	r4, lr
 800153e:	d1f3      	bne.n	8001528 <tcp_http_mt+0xf64>
 8001540:	4662      	mov	r2, ip
 8001542:	4623      	mov	r3, r4
 8001544:	cb03      	ldmia	r3!, {r0, r1}
 8001546:	6010      	str	r0, [r2, #0]
 8001548:	6051      	str	r1, [r2, #4]
 800154a:	8819      	ldrh	r1, [r3, #0]
 800154c:	789b      	ldrb	r3, [r3, #2]
 800154e:	8111      	strh	r1, [r2, #8]
 8001550:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>12:  <input type='text' id='ip12'></td>");
 8001552:	6838      	ldr	r0, [r7, #0]
 8001554:	f7fe fdfc 	bl	8000150 <strlen>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a37      	ldr	r2, [pc, #220]	; (8001640 <tcp_http_mt+0x107c>)
 8001562:	4614      	mov	r4, r2
 8001564:	469c      	mov	ip, r3
 8001566:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800156a:	4665      	mov	r5, ip
 800156c:	4626      	mov	r6, r4
 800156e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001570:	6028      	str	r0, [r5, #0]
 8001572:	6069      	str	r1, [r5, #4]
 8001574:	60aa      	str	r2, [r5, #8]
 8001576:	60eb      	str	r3, [r5, #12]
 8001578:	3410      	adds	r4, #16
 800157a:	f10c 0c10 	add.w	ip, ip, #16
 800157e:	4574      	cmp	r4, lr
 8001580:	d1f3      	bne.n	800156a <tcp_http_mt+0xfa6>
							strcat((char*)buf, "<td><input type='text' id='r12'></td></tr>");
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	f7fe fde4 	bl	8000150 <strlen>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a2c      	ldr	r2, [pc, #176]	; (8001644 <tcp_http_mt+0x1080>)
 8001592:	4614      	mov	r4, r2
 8001594:	469c      	mov	ip, r3
 8001596:	f104 0e20 	add.w	lr, r4, #32
 800159a:	4665      	mov	r5, ip
 800159c:	4626      	mov	r6, r4
 800159e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80015a0:	6028      	str	r0, [r5, #0]
 80015a2:	6069      	str	r1, [r5, #4]
 80015a4:	60aa      	str	r2, [r5, #8]
 80015a6:	60eb      	str	r3, [r5, #12]
 80015a8:	3410      	adds	r4, #16
 80015aa:	f10c 0c10 	add.w	ip, ip, #16
 80015ae:	4574      	cmp	r4, lr
 80015b0:	d1f3      	bne.n	800159a <tcp_http_mt+0xfd6>
 80015b2:	4662      	mov	r2, ip
 80015b4:	4623      	mov	r3, r4
 80015b6:	cb03      	ldmia	r3!, {r0, r1}
 80015b8:	6010      	str	r0, [r2, #0]
 80015ba:	6051      	str	r1, [r2, #4]
 80015bc:	8819      	ldrh	r1, [r3, #0]
 80015be:	789b      	ldrb	r3, [r3, #2]
 80015c0:	8111      	strh	r1, [r2, #8]
 80015c2:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>13:  <input type='text' id='ip13'></td>");
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f7fe fdc3 	bl	8000150 <strlen>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <tcp_http_mt+0x1084>)
 80015d4:	4614      	mov	r4, r2
 80015d6:	469c      	mov	ip, r3
 80015d8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80015dc:	4665      	mov	r5, ip
 80015de:	4626      	mov	r6, r4
 80015e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80015e2:	6028      	str	r0, [r5, #0]
 80015e4:	6069      	str	r1, [r5, #4]
 80015e6:	60aa      	str	r2, [r5, #8]
 80015e8:	60eb      	str	r3, [r5, #12]
 80015ea:	3410      	adds	r4, #16
 80015ec:	f10c 0c10 	add.w	ip, ip, #16
 80015f0:	4574      	cmp	r4, lr
 80015f2:	d1f3      	bne.n	80015dc <tcp_http_mt+0x1018>
							strcat((char*)buf, "<td><input type='text' id='r13'></td></tr>");
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7fe fdab 	bl	8000150 <strlen>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	4413      	add	r3, r2
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <tcp_http_mt+0x1088>)
 8001604:	4614      	mov	r4, r2
 8001606:	469c      	mov	ip, r3
 8001608:	f104 0e20 	add.w	lr, r4, #32
 800160c:	e020      	b.n	8001650 <tcp_http_mt+0x108c>
 800160e:	bf00      	nop
 8001610:	08009ba0 	.word	0x08009ba0
 8001614:	08009054 	.word	0x08009054
 8001618:	08009478 	.word	0x08009478
 800161c:	080094a4 	.word	0x080094a4
 8001620:	080094c4 	.word	0x080094c4
 8001624:	080094f4 	.word	0x080094f4
 8001628:	08009bb0 	.word	0x08009bb0
 800162c:	08009be0 	.word	0x08009be0
 8001630:	08009c0c 	.word	0x08009c0c
 8001634:	08009c3c 	.word	0x08009c3c
 8001638:	08009c68 	.word	0x08009c68
 800163c:	08009c98 	.word	0x08009c98
 8001640:	08009cc4 	.word	0x08009cc4
 8001644:	08009cf4 	.word	0x08009cf4
 8001648:	08009d20 	.word	0x08009d20
 800164c:	08009d50 	.word	0x08009d50
 8001650:	4665      	mov	r5, ip
 8001652:	4626      	mov	r6, r4
 8001654:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001656:	6028      	str	r0, [r5, #0]
 8001658:	6069      	str	r1, [r5, #4]
 800165a:	60aa      	str	r2, [r5, #8]
 800165c:	60eb      	str	r3, [r5, #12]
 800165e:	3410      	adds	r4, #16
 8001660:	f10c 0c10 	add.w	ip, ip, #16
 8001664:	4574      	cmp	r4, lr
 8001666:	d1f3      	bne.n	8001650 <tcp_http_mt+0x108c>
 8001668:	4662      	mov	r2, ip
 800166a:	4623      	mov	r3, r4
 800166c:	cb03      	ldmia	r3!, {r0, r1}
 800166e:	6010      	str	r0, [r2, #0]
 8001670:	6051      	str	r1, [r2, #4]
 8001672:	8819      	ldrh	r1, [r3, #0]
 8001674:	789b      	ldrb	r3, [r3, #2]
 8001676:	8111      	strh	r1, [r2, #8]
 8001678:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>14:  <input type='text' id='ip14'></td>");
 800167a:	6838      	ldr	r0, [r7, #0]
 800167c:	f7fe fd68 	bl	8000150 <strlen>
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4aba      	ldr	r2, [pc, #744]	; (8001974 <tcp_http_mt+0x13b0>)
 800168a:	4614      	mov	r4, r2
 800168c:	469c      	mov	ip, r3
 800168e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001692:	4665      	mov	r5, ip
 8001694:	4626      	mov	r6, r4
 8001696:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001698:	6028      	str	r0, [r5, #0]
 800169a:	6069      	str	r1, [r5, #4]
 800169c:	60aa      	str	r2, [r5, #8]
 800169e:	60eb      	str	r3, [r5, #12]
 80016a0:	3410      	adds	r4, #16
 80016a2:	f10c 0c10 	add.w	ip, ip, #16
 80016a6:	4574      	cmp	r4, lr
 80016a8:	d1f3      	bne.n	8001692 <tcp_http_mt+0x10ce>
							strcat((char*)buf, "<td><input type='text' id='r14'></td></tr>");
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	f7fe fd50 	bl	8000150 <strlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4aaf      	ldr	r2, [pc, #700]	; (8001978 <tcp_http_mt+0x13b4>)
 80016ba:	4614      	mov	r4, r2
 80016bc:	469c      	mov	ip, r3
 80016be:	f104 0e20 	add.w	lr, r4, #32
 80016c2:	4665      	mov	r5, ip
 80016c4:	4626      	mov	r6, r4
 80016c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016c8:	6028      	str	r0, [r5, #0]
 80016ca:	6069      	str	r1, [r5, #4]
 80016cc:	60aa      	str	r2, [r5, #8]
 80016ce:	60eb      	str	r3, [r5, #12]
 80016d0:	3410      	adds	r4, #16
 80016d2:	f10c 0c10 	add.w	ip, ip, #16
 80016d6:	4574      	cmp	r4, lr
 80016d8:	d1f3      	bne.n	80016c2 <tcp_http_mt+0x10fe>
 80016da:	4662      	mov	r2, ip
 80016dc:	4623      	mov	r3, r4
 80016de:	cb03      	ldmia	r3!, {r0, r1}
 80016e0:	6010      	str	r0, [r2, #0]
 80016e2:	6051      	str	r1, [r2, #4]
 80016e4:	8819      	ldrh	r1, [r3, #0]
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	8111      	strh	r1, [r2, #8]
 80016ea:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>15:  <input type='text' id='ip15'></td>");
 80016ec:	6838      	ldr	r0, [r7, #0]
 80016ee:	f7fe fd2f 	bl	8000150 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	4413      	add	r3, r2
 80016fa:	4aa0      	ldr	r2, [pc, #640]	; (800197c <tcp_http_mt+0x13b8>)
 80016fc:	4614      	mov	r4, r2
 80016fe:	469c      	mov	ip, r3
 8001700:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001704:	4665      	mov	r5, ip
 8001706:	4626      	mov	r6, r4
 8001708:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800170a:	6028      	str	r0, [r5, #0]
 800170c:	6069      	str	r1, [r5, #4]
 800170e:	60aa      	str	r2, [r5, #8]
 8001710:	60eb      	str	r3, [r5, #12]
 8001712:	3410      	adds	r4, #16
 8001714:	f10c 0c10 	add.w	ip, ip, #16
 8001718:	4574      	cmp	r4, lr
 800171a:	d1f3      	bne.n	8001704 <tcp_http_mt+0x1140>
							strcat((char*)buf, "<td><input type='text' id='r15'></td></tr>");
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	f7fe fd17 	bl	8000150 <strlen>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	4413      	add	r3, r2
 800172a:	4a95      	ldr	r2, [pc, #596]	; (8001980 <tcp_http_mt+0x13bc>)
 800172c:	4614      	mov	r4, r2
 800172e:	469c      	mov	ip, r3
 8001730:	f104 0e20 	add.w	lr, r4, #32
 8001734:	4665      	mov	r5, ip
 8001736:	4626      	mov	r6, r4
 8001738:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800173a:	6028      	str	r0, [r5, #0]
 800173c:	6069      	str	r1, [r5, #4]
 800173e:	60aa      	str	r2, [r5, #8]
 8001740:	60eb      	str	r3, [r5, #12]
 8001742:	3410      	adds	r4, #16
 8001744:	f10c 0c10 	add.w	ip, ip, #16
 8001748:	4574      	cmp	r4, lr
 800174a:	d1f3      	bne.n	8001734 <tcp_http_mt+0x1170>
 800174c:	4662      	mov	r2, ip
 800174e:	4623      	mov	r3, r4
 8001750:	cb03      	ldmia	r3!, {r0, r1}
 8001752:	6010      	str	r0, [r2, #0]
 8001754:	6051      	str	r1, [r2, #4]
 8001756:	8819      	ldrh	r1, [r3, #0]
 8001758:	789b      	ldrb	r3, [r3, #2]
 800175a:	8111      	strh	r1, [r2, #8]
 800175c:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>16:  <input type='text' id='ip16'></td>");
 800175e:	6838      	ldr	r0, [r7, #0]
 8001760:	f7fe fcf6 	bl	8000150 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a85      	ldr	r2, [pc, #532]	; (8001984 <tcp_http_mt+0x13c0>)
 800176e:	4614      	mov	r4, r2
 8001770:	469c      	mov	ip, r3
 8001772:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001776:	4665      	mov	r5, ip
 8001778:	4626      	mov	r6, r4
 800177a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800177c:	6028      	str	r0, [r5, #0]
 800177e:	6069      	str	r1, [r5, #4]
 8001780:	60aa      	str	r2, [r5, #8]
 8001782:	60eb      	str	r3, [r5, #12]
 8001784:	3410      	adds	r4, #16
 8001786:	f10c 0c10 	add.w	ip, ip, #16
 800178a:	4574      	cmp	r4, lr
 800178c:	d1f3      	bne.n	8001776 <tcp_http_mt+0x11b2>
							strcat((char*)buf, "<td><input type='text' id='r16'></td></tr></table><br>");
 800178e:	6838      	ldr	r0, [r7, #0]
 8001790:	f7fe fcde 	bl	8000150 <strlen>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a7a      	ldr	r2, [pc, #488]	; (8001988 <tcp_http_mt+0x13c4>)
 800179e:	4614      	mov	r4, r2
 80017a0:	469c      	mov	ip, r3
 80017a2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80017a6:	4665      	mov	r5, ip
 80017a8:	4626      	mov	r6, r4
 80017aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80017ac:	6028      	str	r0, [r5, #0]
 80017ae:	6069      	str	r1, [r5, #4]
 80017b0:	60aa      	str	r2, [r5, #8]
 80017b2:	60eb      	str	r3, [r5, #12]
 80017b4:	3410      	adds	r4, #16
 80017b6:	f10c 0c10 	add.w	ip, ip, #16
 80017ba:	4574      	cmp	r4, lr
 80017bc:	d1f3      	bne.n	80017a6 <tcp_http_mt+0x11e2>
 80017be:	4663      	mov	r3, ip
 80017c0:	4622      	mov	r2, r4
 80017c2:	6810      	ldr	r0, [r2, #0]
 80017c4:	6018      	str	r0, [r3, #0]
 80017c6:	8891      	ldrh	r1, [r2, #4]
 80017c8:	7992      	ldrb	r2, [r2, #6]
 80017ca:	8099      	strh	r1, [r3, #4]
 80017cc:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<script>function configInt() {");
 80017ce:	6838      	ldr	r0, [r7, #0]
 80017d0:	f7fe fcbe 	bl	8000150 <strlen>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a6b      	ldr	r2, [pc, #428]	; (800198c <tcp_http_mt+0x13c8>)
 80017de:	461d      	mov	r5, r3
 80017e0:	4614      	mov	r4, r2
 80017e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e4:	6028      	str	r0, [r5, #0]
 80017e6:	6069      	str	r1, [r5, #4]
 80017e8:	60aa      	str	r2, [r5, #8]
 80017ea:	60eb      	str	r3, [r5, #12]
 80017ec:	cc07      	ldmia	r4!, {r0, r1, r2}
 80017ee:	6128      	str	r0, [r5, #16]
 80017f0:	6169      	str	r1, [r5, #20]
 80017f2:	61aa      	str	r2, [r5, #24]
 80017f4:	8823      	ldrh	r3, [r4, #0]
 80017f6:	78a2      	ldrb	r2, [r4, #2]
 80017f8:	83ab      	strh	r3, [r5, #28]
 80017fa:	4613      	mov	r3, r2
 80017fc:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "window.open('http://");
 80017fe:	6838      	ldr	r0, [r7, #0]
 8001800:	f7fe fca6 	bl	8000150 <strlen>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a60      	ldr	r2, [pc, #384]	; (8001990 <tcp_http_mt+0x13cc>)
 800180e:	461d      	mov	r5, r3
 8001810:	4614      	mov	r4, r2
 8001812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001814:	6028      	str	r0, [r5, #0]
 8001816:	6069      	str	r1, [r5, #4]
 8001818:	60aa      	str	r2, [r5, #8]
 800181a:	60eb      	str	r3, [r5, #12]
 800181c:	6820      	ldr	r0, [r4, #0]
 800181e:	6128      	str	r0, [r5, #16]
 8001820:	7923      	ldrb	r3, [r4, #4]
 8001822:	752b      	strb	r3, [r5, #20]
							strcat((char*)buf, &ipStr);
 8001824:	495b      	ldr	r1, [pc, #364]	; (8001994 <tcp_http_mt+0x13d0>)
 8001826:	6838      	ldr	r0, [r7, #0]
 8001828:	f007 f9f1 	bl	8008c0e <strcat>
							strcat((char*)buf, "/con/ip9:' + document.getElementById('ip9').value + ',ip10:' + document.getElementById('ip10').value + ',ip11:' +");
 800182c:	6838      	ldr	r0, [r7, #0]
 800182e:	f7fe fc8f 	bl	8000150 <strlen>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	4a57      	ldr	r2, [pc, #348]	; (8001998 <tcp_http_mt+0x13d4>)
 800183c:	4618      	mov	r0, r3
 800183e:	4611      	mov	r1, r2
 8001840:	2372      	movs	r3, #114	; 0x72
 8001842:	461a      	mov	r2, r3
 8001844:	f007 f9b7 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "document.getElementById('ip11').value + ',ip12:' + document.getElementById('ip12').value + ',ip13:' + document.getElementById('ip13').value +");
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	f7fe fc81 	bl	8000150 <strlen>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	4413      	add	r3, r2
 8001856:	4a51      	ldr	r2, [pc, #324]	; (800199c <tcp_http_mt+0x13d8>)
 8001858:	4618      	mov	r0, r3
 800185a:	4611      	mov	r1, r2
 800185c:	238e      	movs	r3, #142	; 0x8e
 800185e:	461a      	mov	r2, r3
 8001860:	f007 f9a9 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "',ip14:' + document.getElementById('ip14').value + ',ip15:' + document.getElementById('ip15').value + ',ip16' + document.getElementById('ip16').value");
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f7fe fc73 	bl	8000150 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <tcp_http_mt+0x13dc>)
 8001874:	4618      	mov	r0, r3
 8001876:	4611      	mov	r1, r2
 8001878:	2396      	movs	r3, #150	; 0x96
 800187a:	461a      	mov	r2, r3
 800187c:	f007 f99b 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "+ ',r9:' + document.getElementById('r9').value + ',r10:' + document.getElementById('r10').value ");
 8001880:	6838      	ldr	r0, [r7, #0]
 8001882:	f7fe fc65 	bl	8000150 <strlen>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	4413      	add	r3, r2
 800188e:	4a45      	ldr	r2, [pc, #276]	; (80019a4 <tcp_http_mt+0x13e0>)
 8001890:	4618      	mov	r0, r3
 8001892:	4611      	mov	r1, r2
 8001894:	2361      	movs	r3, #97	; 0x61
 8001896:	461a      	mov	r2, r3
 8001898:	f007 f98d 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "+ ',r11:' + document.getElementById('r11').value + ',r12:' + document.getElementById('r12').value ");
 800189c:	6838      	ldr	r0, [r7, #0]
 800189e:	f7fe fc57 	bl	8000150 <strlen>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a3f      	ldr	r2, [pc, #252]	; (80019a8 <tcp_http_mt+0x13e4>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	4611      	mov	r1, r2
 80018b0:	2363      	movs	r3, #99	; 0x63
 80018b2:	461a      	mov	r2, r3
 80018b4:	f007 f97f 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "+ ',r13:' + document.getElementById('r13').value + ',r14:' + document.getElementById('r14').value ");
 80018b8:	6838      	ldr	r0, [r7, #0]
 80018ba:	f7fe fc49 	bl	8000150 <strlen>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a39      	ldr	r2, [pc, #228]	; (80019ac <tcp_http_mt+0x13e8>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	4611      	mov	r1, r2
 80018cc:	2363      	movs	r3, #99	; 0x63
 80018ce:	461a      	mov	r2, r3
 80018d0:	f007 f971 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "+ ',r15:' + document.getElementById('r15').value + ',r16:' + document.getElementById('r16').value, '_self');}</script>");
 80018d4:	6838      	ldr	r0, [r7, #0]
 80018d6:	f7fe fc3b 	bl	8000150 <strlen>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a33      	ldr	r2, [pc, #204]	; (80019b0 <tcp_http_mt+0x13ec>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	4611      	mov	r1, r2
 80018e8:	2377      	movs	r3, #119	; 0x77
 80018ea:	461a      	mov	r2, r3
 80018ec:	f007 f963 	bl	8008bb6 <memcpy>
							strcat((char*)buf, "<button onClick='configInt()'>Salvar</button><br><br><a href='http://");
 80018f0:	6838      	ldr	r0, [r7, #0]
 80018f2:	f7fe fc2d 	bl	8000150 <strlen>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a2d      	ldr	r2, [pc, #180]	; (80019b4 <tcp_http_mt+0x13f0>)
 8001900:	4618      	mov	r0, r3
 8001902:	4611      	mov	r1, r2
 8001904:	2346      	movs	r3, #70	; 0x46
 8001906:	461a      	mov	r2, r3
 8001908:	f007 f955 	bl	8008bb6 <memcpy>
							strcat((char*)buf, &ipStr);
 800190c:	4921      	ldr	r1, [pc, #132]	; (8001994 <tcp_http_mt+0x13d0>)
 800190e:	6838      	ldr	r0, [r7, #0]
 8001910:	f007 f97d 	bl	8008c0e <strcat>
							strcat((char*)buf, "'>Voltar</a><br></center>");
 8001914:	6838      	ldr	r0, [r7, #0]
 8001916:	f7fe fc1b 	bl	8000150 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <tcp_http_mt+0x13f4>)
 8001924:	461d      	mov	r5, r3
 8001926:	4614      	mov	r4, r2
 8001928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192a:	6028      	str	r0, [r5, #0]
 800192c:	6069      	str	r1, [r5, #4]
 800192e:	60aa      	str	r2, [r5, #8]
 8001930:	60eb      	str	r3, [r5, #12]
 8001932:	cc03      	ldmia	r4!, {r0, r1}
 8001934:	6128      	str	r0, [r5, #16]
 8001936:	6169      	str	r1, [r5, #20]
 8001938:	8823      	ldrh	r3, [r4, #0]
 800193a:	832b      	strh	r3, [r5, #24]

							strcat((char*)buf, "</body>");
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f7fe fc07 	bl	8000150 <strlen>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	4413      	add	r3, r2
 800194a:	491c      	ldr	r1, [pc, #112]	; (80019bc <tcp_http_mt+0x13f8>)
 800194c:	461a      	mov	r2, r3
 800194e:	460b      	mov	r3, r1
 8001950:	cb03      	ldmia	r3!, {r0, r1}
 8001952:	6010      	str	r0, [r2, #0]
 8001954:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8001956:	6838      	ldr	r0, [r7, #0]
 8001958:	f7fe fbfa 	bl	8000150 <strlen>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4916      	ldr	r1, [pc, #88]	; (80019c0 <tcp_http_mt+0x13fc>)
 8001966:	461a      	mov	r2, r3
 8001968:	460b      	mov	r3, r1
 800196a:	cb03      	ldmia	r3!, {r0, r1}
 800196c:	6010      	str	r0, [r2, #0]
 800196e:	6051      	str	r1, [r2, #4]
 8001970:	e148      	b.n	8001c04 <tcp_http_mt+0x1640>
 8001972:	bf00      	nop
 8001974:	08009d7c 	.word	0x08009d7c
 8001978:	08009dac 	.word	0x08009dac
 800197c:	08009dd8 	.word	0x08009dd8
 8001980:	08009e08 	.word	0x08009e08
 8001984:	08009e34 	.word	0x08009e34
 8001988:	08009e64 	.word	0x08009e64
 800198c:	0800980c 	.word	0x0800980c
 8001990:	08009284 	.word	0x08009284
 8001994:	20002e20 	.word	0x20002e20
 8001998:	08009e9c 	.word	0x08009e9c
 800199c:	08009f10 	.word	0x08009f10
 80019a0:	08009fa0 	.word	0x08009fa0
 80019a4:	0800a038 	.word	0x0800a038
 80019a8:	0800a09c 	.word	0x0800a09c
 80019ac:	0800a100 	.word	0x0800a100
 80019b0:	0800a164 	.word	0x0800a164
 80019b4:	0800a1dc 	.word	0x0800a1dc
 80019b8:	0800943c 	.word	0x0800943c
 80019bc:	08009458 	.word	0x08009458
 80019c0:	08009460 	.word	0x08009460

						}
						else
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4ac4      	ldr	r2, [pc, #784]	; (8001cd8 <tcp_http_mt+0x1714>)
 80019c8:	4614      	mov	r4, r2
 80019ca:	469c      	mov	ip, r3
 80019cc:	f104 0e20 	add.w	lr, r4, #32
 80019d0:	4665      	mov	r5, ip
 80019d2:	4626      	mov	r6, r4
 80019d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019d6:	6028      	str	r0, [r5, #0]
 80019d8:	6069      	str	r1, [r5, #4]
 80019da:	60aa      	str	r2, [r5, #8]
 80019dc:	60eb      	str	r3, [r5, #12]
 80019de:	3410      	adds	r4, #16
 80019e0:	f10c 0c10 	add.w	ip, ip, #16
 80019e4:	4574      	cmp	r4, lr
 80019e6:	d1f3      	bne.n	80019d0 <tcp_http_mt+0x140c>
 80019e8:	4665      	mov	r5, ip
 80019ea:	4623      	mov	r3, r4
 80019ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80019ee:	6028      	str	r0, [r5, #0]
 80019f0:	6069      	str	r1, [r5, #4]
 80019f2:	60aa      	str	r2, [r5, #8]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 80019f8:	6838      	ldr	r0, [r7, #0]
 80019fa:	f7fe fba9 	bl	8000150 <strlen>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	4ab5      	ldr	r2, [pc, #724]	; (8001cdc <tcp_http_mt+0x1718>)
 8001a08:	461c      	mov	r4, r3
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a0e:	6020      	str	r0, [r4, #0]
 8001a10:	6061      	str	r1, [r4, #4]
 8001a12:	60a2      	str	r2, [r4, #8]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Escrava Config</title>");
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f7fe fb99 	bl	8000150 <strlen>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	4413      	add	r3, r2
 8001a26:	4aae      	ldr	r2, [pc, #696]	; (8001ce0 <tcp_http_mt+0x171c>)
 8001a28:	461d      	mov	r5, r3
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2e:	6028      	str	r0, [r5, #0]
 8001a30:	6069      	str	r1, [r5, #4]
 8001a32:	60aa      	str	r2, [r5, #8]
 8001a34:	60eb      	str	r3, [r5, #12]
 8001a36:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001a38:	6128      	str	r0, [r5, #16]
 8001a3a:	6169      	str	r1, [r5, #20]
 8001a3c:	61aa      	str	r2, [r5, #24]
 8001a3e:	8823      	ldrh	r3, [r4, #0]
 8001a40:	83ab      	strh	r3, [r5, #28]
							strcat((char*)buf, "</head>");
 8001a42:	6838      	ldr	r0, [r7, #0]
 8001a44:	f7fe fb84 	bl	8000150 <strlen>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	49a4      	ldr	r1, [pc, #656]	; (8001ce4 <tcp_http_mt+0x1720>)
 8001a52:	461a      	mov	r2, r3
 8001a54:	460b      	mov	r3, r1
 8001a56:	cb03      	ldmia	r3!, {r0, r1}
 8001a58:	6010      	str	r0, [r2, #0]
 8001a5a:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 8001a5c:	6838      	ldr	r0, [r7, #0]
 8001a5e:	f7fe fb77 	bl	8000150 <strlen>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a9f      	ldr	r2, [pc, #636]	; (8001ce8 <tcp_http_mt+0x1724>)
 8001a6c:	6810      	ldr	r0, [r2, #0]
 8001a6e:	6018      	str	r0, [r3, #0]
 8001a70:	8891      	ldrh	r1, [r2, #4]
 8001a72:	7992      	ldrb	r2, [r2, #6]
 8001a74:	8099      	strh	r1, [r3, #4]
 8001a76:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<div class = 'entradas'>");
 8001a78:	6838      	ldr	r0, [r7, #0]
 8001a7a:	f7fe fb69 	bl	8000150 <strlen>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a99      	ldr	r2, [pc, #612]	; (8001cec <tcp_http_mt+0x1728>)
 8001a88:	461d      	mov	r5, r3
 8001a8a:	4614      	mov	r4, r2
 8001a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8e:	6028      	str	r0, [r5, #0]
 8001a90:	6069      	str	r1, [r5, #4]
 8001a92:	60aa      	str	r2, [r5, #8]
 8001a94:	60eb      	str	r3, [r5, #12]
 8001a96:	cc03      	ldmia	r4!, {r0, r1}
 8001a98:	6128      	str	r0, [r5, #16]
 8001a9a:	6169      	str	r1, [r5, #20]
 8001a9c:	7823      	ldrb	r3, [r4, #0]
 8001a9e:	762b      	strb	r3, [r5, #24]

							strcat((char*)buf, "<b><center>Menus para configuracao</b><br><br>");
 8001aa0:	6838      	ldr	r0, [r7, #0]
 8001aa2:	f7fe fb55 	bl	8000150 <strlen>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a90      	ldr	r2, [pc, #576]	; (8001cf0 <tcp_http_mt+0x172c>)
 8001ab0:	4615      	mov	r5, r2
 8001ab2:	469c      	mov	ip, r3
 8001ab4:	f105 0e20 	add.w	lr, r5, #32
 8001ab8:	4664      	mov	r4, ip
 8001aba:	462e      	mov	r6, r5
 8001abc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001abe:	6020      	str	r0, [r4, #0]
 8001ac0:	6061      	str	r1, [r4, #4]
 8001ac2:	60a2      	str	r2, [r4, #8]
 8001ac4:	60e3      	str	r3, [r4, #12]
 8001ac6:	3510      	adds	r5, #16
 8001ac8:	f10c 0c10 	add.w	ip, ip, #16
 8001acc:	4575      	cmp	r5, lr
 8001ace:	d1f3      	bne.n	8001ab8 <tcp_http_mt+0x14f4>
 8001ad0:	4664      	mov	r4, ip
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ad6:	6020      	str	r0, [r4, #0]
 8001ad8:	6061      	str	r1, [r4, #4]
 8001ada:	60a2      	str	r2, [r4, #8]
 8001adc:	881a      	ldrh	r2, [r3, #0]
 8001ade:	789b      	ldrb	r3, [r3, #2]
 8001ae0:	81a2      	strh	r2, [r4, #12]
 8001ae2:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "<a href='http://");
 8001ae4:	6838      	ldr	r0, [r7, #0]
 8001ae6:	f7fe fb33 	bl	8000150 <strlen>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a80      	ldr	r2, [pc, #512]	; (8001cf4 <tcp_http_mt+0x1730>)
 8001af4:	461d      	mov	r5, r3
 8001af6:	4614      	mov	r4, r2
 8001af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afa:	6028      	str	r0, [r5, #0]
 8001afc:	6069      	str	r1, [r5, #4]
 8001afe:	60aa      	str	r2, [r5, #8]
 8001b00:	60eb      	str	r3, [r5, #12]
 8001b02:	7823      	ldrb	r3, [r4, #0]
 8001b04:	742b      	strb	r3, [r5, #16]
							strcat((char*)buf, &ipStr);
 8001b06:	497c      	ldr	r1, [pc, #496]	; (8001cf8 <tcp_http_mt+0x1734>)
 8001b08:	6838      	ldr	r0, [r7, #0]
 8001b0a:	f007 f880 	bl	8008c0e <strcat>
							strcat((char*)buf,"/rede'>Configurar rede</a><br><br>");
 8001b0e:	6838      	ldr	r0, [r7, #0]
 8001b10:	f7fe fb1e 	bl	8000150 <strlen>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a77      	ldr	r2, [pc, #476]	; (8001cfc <tcp_http_mt+0x1738>)
 8001b1e:	4614      	mov	r4, r2
 8001b20:	469c      	mov	ip, r3
 8001b22:	f104 0e20 	add.w	lr, r4, #32
 8001b26:	4665      	mov	r5, ip
 8001b28:	4626      	mov	r6, r4
 8001b2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b2c:	6028      	str	r0, [r5, #0]
 8001b2e:	6069      	str	r1, [r5, #4]
 8001b30:	60aa      	str	r2, [r5, #8]
 8001b32:	60eb      	str	r3, [r5, #12]
 8001b34:	3410      	adds	r4, #16
 8001b36:	f10c 0c10 	add.w	ip, ip, #16
 8001b3a:	4574      	cmp	r4, lr
 8001b3c:	d1f3      	bne.n	8001b26 <tcp_http_mt+0x1562>
 8001b3e:	4663      	mov	r3, ip
 8001b40:	4622      	mov	r2, r4
 8001b42:	8811      	ldrh	r1, [r2, #0]
 8001b44:	7892      	ldrb	r2, [r2, #2]
 8001b46:	8019      	strh	r1, [r3, #0]
 8001b48:	709a      	strb	r2, [r3, #2]
							strcat((char*)buf, "<a href='http://");
 8001b4a:	6838      	ldr	r0, [r7, #0]
 8001b4c:	f7fe fb00 	bl	8000150 <strlen>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a66      	ldr	r2, [pc, #408]	; (8001cf4 <tcp_http_mt+0x1730>)
 8001b5a:	461d      	mov	r5, r3
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b60:	6028      	str	r0, [r5, #0]
 8001b62:	6069      	str	r1, [r5, #4]
 8001b64:	60aa      	str	r2, [r5, #8]
 8001b66:	60eb      	str	r3, [r5, #12]
 8001b68:	7823      	ldrb	r3, [r4, #0]
 8001b6a:	742b      	strb	r3, [r5, #16]
							strcat((char*)buf, &ipStr);
 8001b6c:	4962      	ldr	r1, [pc, #392]	; (8001cf8 <tcp_http_mt+0x1734>)
 8001b6e:	6838      	ldr	r0, [r7, #0]
 8001b70:	f007 f84d 	bl	8008c0e <strcat>
							strcat((char*)buf, "/interfaces1'>Configurar interfaces\n</a><br>");
 8001b74:	6838      	ldr	r0, [r7, #0]
 8001b76:	f7fe faeb 	bl	8000150 <strlen>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a5f      	ldr	r2, [pc, #380]	; (8001d00 <tcp_http_mt+0x173c>)
 8001b84:	4614      	mov	r4, r2
 8001b86:	469c      	mov	ip, r3
 8001b88:	f104 0e20 	add.w	lr, r4, #32
 8001b8c:	4665      	mov	r5, ip
 8001b8e:	4626      	mov	r6, r4
 8001b90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b92:	6028      	str	r0, [r5, #0]
 8001b94:	6069      	str	r1, [r5, #4]
 8001b96:	60aa      	str	r2, [r5, #8]
 8001b98:	60eb      	str	r3, [r5, #12]
 8001b9a:	3410      	adds	r4, #16
 8001b9c:	f10c 0c10 	add.w	ip, ip, #16
 8001ba0:	4574      	cmp	r4, lr
 8001ba2:	d1f3      	bne.n	8001b8c <tcp_http_mt+0x15c8>
 8001ba4:	4665      	mov	r5, ip
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001baa:	6028      	str	r0, [r5, #0]
 8001bac:	6069      	str	r1, [r5, #4]
 8001bae:	60aa      	str	r2, [r5, #8]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	732b      	strb	r3, [r5, #12]

							strcat((char*)buf, "</div>");
 8001bb4:	6838      	ldr	r0, [r7, #0]
 8001bb6:	f7fe facb 	bl	8000150 <strlen>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a50      	ldr	r2, [pc, #320]	; (8001d04 <tcp_http_mt+0x1740>)
 8001bc4:	6810      	ldr	r0, [r2, #0]
 8001bc6:	6018      	str	r0, [r3, #0]
 8001bc8:	8891      	ldrh	r1, [r2, #4]
 8001bca:	7992      	ldrb	r2, [r2, #6]
 8001bcc:	8099      	strh	r1, [r3, #4]
 8001bce:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "</body>");
 8001bd0:	6838      	ldr	r0, [r7, #0]
 8001bd2:	f7fe fabd 	bl	8000150 <strlen>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	494a      	ldr	r1, [pc, #296]	; (8001d08 <tcp_http_mt+0x1744>)
 8001be0:	461a      	mov	r2, r3
 8001be2:	460b      	mov	r3, r1
 8001be4:	cb03      	ldmia	r3!, {r0, r1}
 8001be6:	6010      	str	r0, [r2, #0]
 8001be8:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8001bea:	6838      	ldr	r0, [r7, #0]
 8001bec:	f7fe fab0 	bl	8000150 <strlen>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4944      	ldr	r1, [pc, #272]	; (8001d0c <tcp_http_mt+0x1748>)
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	cb03      	ldmia	r3!, {r0, r1}
 8001c00:	6010      	str	r0, [r2, #0]
 8001c02:	6051      	str	r1, [r2, #4]
						}

						blocklen = strlen((char*)buf);
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	f7fe faa3 	bl	8000150 <strlen>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	833b      	strh	r3, [r7, #24]

						ret = send(sn,buf,blocklen);
 8001c0e:	8b3a      	ldrh	r2, [r7, #24]
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	6839      	ldr	r1, [r7, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f001 fa65 	bl	80030e4 <send>
 8001c1a:	6178      	str	r0, [r7, #20]
						if(ret < 0)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	da05      	bge.n	8001c2e <tcp_http_mt+0x166a>
						{
							close(sn);
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 f925 	bl	8002e74 <close>
							return ret;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	e04f      	b.n	8001cce <tcp_http_mt+0x170a>
						}
						else
						{
							HTTP_reset(sn);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fcaf 	bl	8000594 <HTTP_reset>
							disconnect(sn);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 f9dd 	bl	8002ff8 <disconnect>
					if(flagHtmlGen == 1)
 8001c3e:	e008      	b.n	8001c52 <tcp_http_mt+0x168e>
						}
					}
				}
				else
				{
					HTTP_reset(sn);
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fca6 	bl	8000594 <HTTP_reset>
					disconnect(sn);
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 f9d4 	bl	8002ff8 <disconnect>
				}

        	  }
         }
         break;
 8001c50:	e035      	b.n	8001cbe <tcp_http_mt+0x16fa>
 8001c52:	e034      	b.n	8001cbe <tcp_http_mt+0x16fa>
      case SOCK_CLOSE_WAIT :

    	  HTTP_reset(sn);
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc9c 	bl	8000594 <HTTP_reset>

         if((ret=disconnect(sn)) != SOCK_OK)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 f9ca 	bl	8002ff8 <disconnect>
 8001c64:	4603      	mov	r3, r0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d029      	beq.n	8001cc2 <tcp_http_mt+0x16fe>
         return ret;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	e02d      	b.n	8001cce <tcp_http_mt+0x170a>

         break;
      case SOCK_INIT :

    	  HTTP_reset(sn);
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc8d 	bl	8000594 <HTTP_reset>

         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 f955 	bl	8002f2c <listen>
 8001c82:	4603      	mov	r3, r0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d01c      	beq.n	8001cc6 <tcp_http_mt+0x1702>
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	e01e      	b.n	8001cce <tcp_http_mt+0x170a>
         break;
      case SOCK_CLOSED:

    	  HTTP_reset(sn);
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc7e 	bl	8000594 <HTTP_reset>

         if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)
 8001c98:	88ba      	ldrh	r2, [r7, #4]
 8001c9a:	79f8      	ldrb	r0, [r7, #7]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	f000 fff0 	bl	8002c84 <socket>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d00c      	beq.n	8001cca <tcp_http_mt+0x1706>
         return ret;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	e00c      	b.n	8001cce <tcp_http_mt+0x170a>

         break;

      default:
    	  HTTP_reset(sn);
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc6c 	bl	8000594 <HTTP_reset>
         break;
 8001cbc:	e006      	b.n	8001ccc <tcp_http_mt+0x1708>
         break;
 8001cbe:	bf00      	nop
 8001cc0:	e004      	b.n	8001ccc <tcp_http_mt+0x1708>
         break;
 8001cc2:	bf00      	nop
 8001cc4:	e002      	b.n	8001ccc <tcp_http_mt+0x1708>
         break;
 8001cc6:	bf00      	nop
 8001cc8:	e000      	b.n	8001ccc <tcp_http_mt+0x1708>
         break;
 8001cca:	bf00      	nop
   }
   return 1;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	08009054 	.word	0x08009054
 8001cdc:	08009084 	.word	0x08009084
 8001ce0:	0800a224 	.word	0x0800a224
 8001ce4:	080090b4 	.word	0x080090b4
 8001ce8:	080090bc 	.word	0x080090bc
 8001cec:	0800a244 	.word	0x0800a244
 8001cf0:	0800a260 	.word	0x0800a260
 8001cf4:	0800a290 	.word	0x0800a290
 8001cf8:	20002e20 	.word	0x20002e20
 8001cfc:	0800a2a4 	.word	0x0800a2a4
 8001d00:	0800a2c8 	.word	0x0800a2c8
 8001d04:	0800a2f8 	.word	0x0800a2f8
 8001d08:	08009458 	.word	0x08009458
 8001d0c:	08009460 	.word	0x08009460

08001d10 <save_to_flash>:

void save_to_flash(uint8_t *data, uint32_t ADDRESS)
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b08e      	sub	sp, #56	; 0x38
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	466b      	mov	r3, sp
 8001d1c:	461d      	mov	r5, r3
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe fa16 	bl	8000150 <strlen>
 8001d24:	4603      	mov	r3, r0
 8001d26:	089c      	lsrs	r4, r3, #2
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7fe fa11 	bl	8000150 <strlen>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	18e0      	adds	r0, r4, r3
 8001d40:	4603      	mov	r3, r0
 8001d42:	3b01      	subs	r3, #1
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
 8001d46:	4601      	mov	r1, r0
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	f04f 0400 	mov.w	r4, #0
 8001d54:	0154      	lsls	r4, r2, #5
 8001d56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d5a:	014b      	lsls	r3, r1, #5
 8001d5c:	4601      	mov	r1, r0
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	f04f 0400 	mov.w	r4, #0
 8001d6a:	0154      	lsls	r4, r2, #5
 8001d6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d70:	014b      	lsls	r3, r1, #5
 8001d72:	0083      	lsls	r3, r0, #2
 8001d74:	3303      	adds	r3, #3
 8001d76:	3307      	adds	r3, #7
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	ebad 0d03 	sub.w	sp, sp, r3
 8001d80:	466b      	mov	r3, sp
 8001d82:	3303      	adds	r3, #3
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 8001d8a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe f9de 	bl	8000150 <strlen>
 8001d94:	4603      	mov	r3, r0
 8001d96:	461a      	mov	r2, r3
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f006 ff2f 	bl	8008bfe <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 8001da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f006 ff4e 	bl	8008c46 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe f9cf 	bl	8000150 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 8001db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe f9c9 	bl	8000150 <strlen>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe f9bc 	bl	8000150 <strlen>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	0adb      	lsrs	r3, r3, #11
									+ (int)((strlen((char*)data)%page_size) != 0);
 8001ddc:	b29c      	uxth	r4, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe f9b6 	bl	8000150 <strlen>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	bf14      	ite	ne
 8001dee:	2301      	movne	r3, #1
 8001df0:	2300      	moveq	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4423      	add	r3, r4
 8001df8:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 8001dfa:	857b      	strh	r3, [r7, #42]	; 0x2a
	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001dfc:	f002 fc28 	bl	8004650 <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 8001e00:	f002 fc5c 	bl	80046bc <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.PageAddress = ADDRESS;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.NbPages = pages;
 8001e0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]

	  volatile HAL_StatusTypeDef status;
	  status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8001e1a:	f107 0214 	add.w	r2, r7, #20
 8001e1e:	f107 0318 	add.w	r3, r7, #24
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 fd27 	bl	8004878 <HAL_FLASHEx_Erase>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	72fb      	strb	r3, [r7, #11]
	  while(index < data_length)
 8001e2e:	e01d      	b.n	8001e6c <save_to_flash+0x15c>
	  {
		  if (status == HAL_OK)
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d119      	bne.n	8001e6c <save_to_flash+0x15c>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ADDRESS+write_cnt, data_to_FLASH[index]);
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	18d1      	adds	r1, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e46:	f04f 0400 	mov.w	r4, #0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4623      	mov	r3, r4
 8001e4e:	2002      	movs	r0, #2
 8001e50:	f002 fb8e 	bl	8004570 <HAL_FLASH_Program>
 8001e54:	4603      	mov	r3, r0
 8001e56:	72fb      	strb	r3, [r7, #11]
			  if(status == HAL_OK)
 8001e58:	7afb      	ldrb	r3, [r7, #11]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <save_to_flash+0x15c>
			  {
				  write_cnt += 4;
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	3304      	adds	r3, #4
 8001e64:	613b      	str	r3, [r7, #16]
				  index++;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
	  while(index < data_length)
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d3dd      	bcc.n	8001e30 <save_to_flash+0x120>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 8001e74:	f002 fc3e 	bl	80046f4 <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 8001e78:	f002 fc10 	bl	800469c <HAL_FLASH_Lock>
 8001e7c:	46ad      	mov	sp, r5
}
 8001e7e:	bf00      	nop
 8001e80:	3738      	adds	r7, #56	; 0x38
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bdb0      	pop	{r4, r5, r7, pc}

08001e86 <read_flash>:

void read_flash(uint8_t* data, uint32_t ADDRESS)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b085      	sub	sp, #20
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(ADDRESS + read_cnt);
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	4413      	add	r3, r2
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d020      	beq.n	8001ee8 <read_flash+0x62>
		{
			data[read_cnt] = (uint8_t)read_data;
 8001ea6:	68f9      	ldr	r1, [r7, #12]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	b2ca      	uxtb	r2, r1
 8001eb0:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	0a19      	lsrs	r1, r3, #8
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b2ca      	uxtb	r2, r1
 8001ec0:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	0c19      	lsrs	r1, r3, #16
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3302      	adds	r3, #2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	b2ca      	uxtb	r2, r1
 8001ed0:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	0e19      	lsrs	r1, r3, #24
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3303      	adds	r3, #3
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	b2ca      	uxtb	r2, r1
 8001ee0:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eee:	d1d1      	bne.n	8001e94 <read_flash+0xe>
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <strremove>:

uint8_t *strremove(uint8_t *str, const uint8_t *sub) {
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
    uint8_t *p, *q, *r;
    if ((q = r = strstr(str, sub)) != NULL) {
 8001f04:	6839      	ldr	r1, [r7, #0]
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f006 feb7 	bl	8008c7a <strstr>
 8001f0c:	6138      	str	r0, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d029      	beq.n	8001f6c <strremove+0x72>
        size_t len = strlen(sub);
 8001f18:	6838      	ldr	r0, [r7, #0]
 8001f1a:	f7fe f919 	bl	8000150 <strlen>
 8001f1e:	60f8      	str	r0, [r7, #12]
        while ((r = strstr(p = r + len, sub)) != NULL) {
 8001f20:	e00e      	b.n	8001f40 <strremove+0x46>
            memmove(q, p, r - p);
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	6978      	ldr	r0, [r7, #20]
 8001f2e:	f006 fe4d 	bl	8008bcc <memmove>
            q += r - p;
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
        while ((r = strstr(p = r + len, sub)) != NULL) {
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4413      	add	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	6839      	ldr	r1, [r7, #0]
 8001f4a:	68b8      	ldr	r0, [r7, #8]
 8001f4c:	f006 fe95 	bl	8008c7a <strstr>
 8001f50:	6138      	str	r0, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1e4      	bne.n	8001f22 <strremove+0x28>
        }
        memmove(q, p, strlen(p) + 1);
 8001f58:	68b8      	ldr	r0, [r7, #8]
 8001f5a:	f7fe f8f9 	bl	8000150 <strlen>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	3301      	adds	r3, #1
 8001f62:	461a      	mov	r2, r3
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f006 fe30 	bl	8008bcc <memmove>
    }
    return str;
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <configNetwork>:

void configNetwork()
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b09c      	sub	sp, #112	; 0x70
 8001f7c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8001f7e:	4b72      	ldr	r3, [pc, #456]	; (8002148 <configNetwork+0x1d0>)
 8001f80:	f107 041c 	add.w	r4, r7, #28
 8001f84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	read_flash(config_data, NETWORK_STORAGE);
 8001f8a:	4970      	ldr	r1, [pc, #448]	; (800214c <configNetwork+0x1d4>)
 8001f8c:	4870      	ldr	r0, [pc, #448]	; (8002150 <configNetwork+0x1d8>)
 8001f8e:	f7ff ff7a 	bl	8001e86 <read_flash>
	if(config_data[0] == '/' && config_data[1] == 'i' && config_data[2] == 'p')
 8001f92:	4b6f      	ldr	r3, [pc, #444]	; (8002150 <configNetwork+0x1d8>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b2f      	cmp	r3, #47	; 0x2f
 8001f98:	f040 816f 	bne.w	800227a <configNetwork+0x302>
 8001f9c:	4b6c      	ldr	r3, [pc, #432]	; (8002150 <configNetwork+0x1d8>)
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	2b69      	cmp	r3, #105	; 0x69
 8001fa2:	f040 816a 	bne.w	800227a <configNetwork+0x302>
 8001fa6:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <configNetwork+0x1d8>)
 8001fa8:	789b      	ldrb	r3, [r3, #2]
 8001faa:	2b70      	cmp	r3, #112	; 0x70
 8001fac:	f040 8165 	bne.w	800227a <configNetwork+0x302>
	{
		strremove(config_data, "/ip:");
 8001fb0:	4968      	ldr	r1, [pc, #416]	; (8002154 <configNetwork+0x1dc>)
 8001fb2:	4867      	ldr	r0, [pc, #412]	; (8002150 <configNetwork+0x1d8>)
 8001fb4:	f7ff ffa1 	bl	8001efa <strremove>
		strremove(config_data, "mask:");
 8001fb8:	4967      	ldr	r1, [pc, #412]	; (8002158 <configNetwork+0x1e0>)
 8001fba:	4865      	ldr	r0, [pc, #404]	; (8002150 <configNetwork+0x1d8>)
 8001fbc:	f7ff ff9d 	bl	8001efa <strremove>
		strremove(config_data, "port:");
 8001fc0:	4966      	ldr	r1, [pc, #408]	; (800215c <configNetwork+0x1e4>)
 8001fc2:	4863      	ldr	r0, [pc, #396]	; (8002150 <configNetwork+0x1d8>)
 8001fc4:	f7ff ff99 	bl	8001efa <strremove>
		strremove(config_data, "gateway:");
 8001fc8:	4965      	ldr	r1, [pc, #404]	; (8002160 <configNetwork+0x1e8>)
 8001fca:	4861      	ldr	r0, [pc, #388]	; (8002150 <configNetwork+0x1d8>)
 8001fcc:	f7ff ff95 	bl	8001efa <strremove>
		strremove(config_data, "dns1:");
 8001fd0:	4964      	ldr	r1, [pc, #400]	; (8002164 <configNetwork+0x1ec>)
 8001fd2:	485f      	ldr	r0, [pc, #380]	; (8002150 <configNetwork+0x1d8>)
 8001fd4:	f7ff ff91 	bl	8001efa <strremove>
		strremove(config_data, "dns2:");
 8001fd8:	4963      	ldr	r1, [pc, #396]	; (8002168 <configNetwork+0x1f0>)
 8001fda:	485d      	ldr	r0, [pc, #372]	; (8002150 <configNetwork+0x1d8>)
 8001fdc:	f7ff ff8d 	bl	8001efa <strremove>
		uint8_t *p, *ipPointer, *maskPointer, *portPointer, *gatewayPointer, *dns1Pointer, *dns2Pointer;
		p = strtok(config_data, ",");
 8001fe0:	4962      	ldr	r1, [pc, #392]	; (800216c <configNetwork+0x1f4>)
 8001fe2:	485b      	ldr	r0, [pc, #364]	; (8002150 <configNetwork+0x1d8>)
 8001fe4:	f006 fe64 	bl	8008cb0 <strtok>
 8001fe8:	66b8      	str	r0, [r7, #104]	; 0x68

		for(int i = 0; p != NULL; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fee:	e02c      	b.n	800204a <configNetwork+0xd2>
		{
			switch(i)
 8001ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d820      	bhi.n	8002038 <configNetwork+0xc0>
 8001ff6:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <configNetwork+0x84>)
 8001ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffc:	08002015 	.word	0x08002015
 8002000:	0800201b 	.word	0x0800201b
 8002004:	08002021 	.word	0x08002021
 8002008:	08002027 	.word	0x08002027
 800200c:	0800202d 	.word	0x0800202d
 8002010:	08002033 	.word	0x08002033
			{
				case 0:
					ipPointer = p;
 8002014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002016:	667b      	str	r3, [r7, #100]	; 0x64
					break;
 8002018:	e00f      	b.n	800203a <configNetwork+0xc2>
				case 1:
					maskPointer = p;
 800201a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800201c:	663b      	str	r3, [r7, #96]	; 0x60
					break;
 800201e:	e00c      	b.n	800203a <configNetwork+0xc2>
				case 2:
					portPointer = p;
 8002020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002022:	65fb      	str	r3, [r7, #92]	; 0x5c
					break;
 8002024:	e009      	b.n	800203a <configNetwork+0xc2>
				case 3:
					gatewayPointer = p;
 8002026:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002028:	65bb      	str	r3, [r7, #88]	; 0x58
					break;
 800202a:	e006      	b.n	800203a <configNetwork+0xc2>
				case 4:
					dns1Pointer = p;
 800202c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800202e:	657b      	str	r3, [r7, #84]	; 0x54
					break;
 8002030:	e003      	b.n	800203a <configNetwork+0xc2>
				case 5:
					dns2Pointer = p;
 8002032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002034:	653b      	str	r3, [r7, #80]	; 0x50
					break;
 8002036:	e000      	b.n	800203a <configNetwork+0xc2>
				default:
					break;
 8002038:	bf00      	nop
			}
			p = strtok(NULL, ",");
 800203a:	494c      	ldr	r1, [pc, #304]	; (800216c <configNetwork+0x1f4>)
 800203c:	2000      	movs	r0, #0
 800203e:	f006 fe37 	bl	8008cb0 <strtok>
 8002042:	66b8      	str	r0, [r7, #104]	; 0x68
		for(int i = 0; p != NULL; i++)
 8002044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002046:	3301      	adds	r3, #1
 8002048:	64fb      	str	r3, [r7, #76]	; 0x4c
 800204a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1cf      	bne.n	8001ff0 <configNetwork+0x78>
		}

		p = strtok(ipPointer, ".");
 8002050:	4947      	ldr	r1, [pc, #284]	; (8002170 <configNetwork+0x1f8>)
 8002052:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002054:	f006 fe2c 	bl	8008cb0 <strtok>
 8002058:	66b8      	str	r0, [r7, #104]	; 0x68

		for(int i = 0; p != NULL; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	64bb      	str	r3, [r7, #72]	; 0x48
 800205e:	e011      	b.n	8002084 <configNetwork+0x10c>
		{
			ip[i] = atoi(p);
 8002060:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002062:	f006 fd6b 	bl	8008b3c <atoi>
 8002066:	4603      	mov	r3, r0
 8002068:	b2d9      	uxtb	r1, r3
 800206a:	4a42      	ldr	r2, [pc, #264]	; (8002174 <configNetwork+0x1fc>)
 800206c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800206e:	4413      	add	r3, r2
 8002070:	460a      	mov	r2, r1
 8002072:	701a      	strb	r2, [r3, #0]
			p = strtok(NULL, ".");
 8002074:	493e      	ldr	r1, [pc, #248]	; (8002170 <configNetwork+0x1f8>)
 8002076:	2000      	movs	r0, #0
 8002078:	f006 fe1a 	bl	8008cb0 <strtok>
 800207c:	66b8      	str	r0, [r7, #104]	; 0x68
		for(int i = 0; p != NULL; i++)
 800207e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002080:	3301      	adds	r3, #1
 8002082:	64bb      	str	r3, [r7, #72]	; 0x48
 8002084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ea      	bne.n	8002060 <configNetwork+0xe8>
		}

		p = strtok(maskPointer, ".");
 800208a:	4939      	ldr	r1, [pc, #228]	; (8002170 <configNetwork+0x1f8>)
 800208c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800208e:	f006 fe0f 	bl	8008cb0 <strtok>
 8002092:	66b8      	str	r0, [r7, #104]	; 0x68

		for(int i = 0; p != NULL; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
 8002098:	e011      	b.n	80020be <configNetwork+0x146>
		{
			mask[i] = atoi(p);
 800209a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800209c:	f006 fd4e 	bl	8008b3c <atoi>
 80020a0:	4603      	mov	r3, r0
 80020a2:	b2d9      	uxtb	r1, r3
 80020a4:	4a34      	ldr	r2, [pc, #208]	; (8002178 <configNetwork+0x200>)
 80020a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a8:	4413      	add	r3, r2
 80020aa:	460a      	mov	r2, r1
 80020ac:	701a      	strb	r2, [r3, #0]
			p = strtok(NULL, ".");
 80020ae:	4930      	ldr	r1, [pc, #192]	; (8002170 <configNetwork+0x1f8>)
 80020b0:	2000      	movs	r0, #0
 80020b2:	f006 fdfd 	bl	8008cb0 <strtok>
 80020b6:	66b8      	str	r0, [r7, #104]	; 0x68
		for(int i = 0; p != NULL; i++)
 80020b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ba:	3301      	adds	r3, #1
 80020bc:	647b      	str	r3, [r7, #68]	; 0x44
 80020be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1ea      	bne.n	800209a <configNetwork+0x122>
		}

		p = strtok(gatewayPointer, ".");
 80020c4:	492a      	ldr	r1, [pc, #168]	; (8002170 <configNetwork+0x1f8>)
 80020c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80020c8:	f006 fdf2 	bl	8008cb0 <strtok>
 80020cc:	66b8      	str	r0, [r7, #104]	; 0x68

		for(int i = 0; p != NULL; i++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	643b      	str	r3, [r7, #64]	; 0x40
 80020d2:	e011      	b.n	80020f8 <configNetwork+0x180>
		{
			gateway[i] = atoi(p);
 80020d4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80020d6:	f006 fd31 	bl	8008b3c <atoi>
 80020da:	4603      	mov	r3, r0
 80020dc:	b2d9      	uxtb	r1, r3
 80020de:	4a27      	ldr	r2, [pc, #156]	; (800217c <configNetwork+0x204>)
 80020e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e2:	4413      	add	r3, r2
 80020e4:	460a      	mov	r2, r1
 80020e6:	701a      	strb	r2, [r3, #0]
			p = strtok(NULL, ".");
 80020e8:	4921      	ldr	r1, [pc, #132]	; (8002170 <configNetwork+0x1f8>)
 80020ea:	2000      	movs	r0, #0
 80020ec:	f006 fde0 	bl	8008cb0 <strtok>
 80020f0:	66b8      	str	r0, [r7, #104]	; 0x68
		for(int i = 0; p != NULL; i++)
 80020f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f4:	3301      	adds	r3, #1
 80020f6:	643b      	str	r3, [r7, #64]	; 0x40
 80020f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1ea      	bne.n	80020d4 <configNetwork+0x15c>
		}

		p = strtok(dns1Pointer, ".");
 80020fe:	491c      	ldr	r1, [pc, #112]	; (8002170 <configNetwork+0x1f8>)
 8002100:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002102:	f006 fdd5 	bl	8008cb0 <strtok>
 8002106:	66b8      	str	r0, [r7, #104]	; 0x68

		for(int i = 0; p != NULL; i++)
 8002108:	2300      	movs	r3, #0
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800210c:	e011      	b.n	8002132 <configNetwork+0x1ba>
		{
			dns1[i] = atoi(p);
 800210e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002110:	f006 fd14 	bl	8008b3c <atoi>
 8002114:	4603      	mov	r3, r0
 8002116:	b2d9      	uxtb	r1, r3
 8002118:	4a19      	ldr	r2, [pc, #100]	; (8002180 <configNetwork+0x208>)
 800211a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211c:	4413      	add	r3, r2
 800211e:	460a      	mov	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
			p = strtok(NULL, ".");
 8002122:	4913      	ldr	r1, [pc, #76]	; (8002170 <configNetwork+0x1f8>)
 8002124:	2000      	movs	r0, #0
 8002126:	f006 fdc3 	bl	8008cb0 <strtok>
 800212a:	66b8      	str	r0, [r7, #104]	; 0x68
		for(int i = 0; p != NULL; i++)
 800212c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800212e:	3301      	adds	r3, #1
 8002130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002132:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1ea      	bne.n	800210e <configNetwork+0x196>
		}

		p = strtok(dns2Pointer, ".");
 8002138:	490d      	ldr	r1, [pc, #52]	; (8002170 <configNetwork+0x1f8>)
 800213a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800213c:	f006 fdb8 	bl	8008cb0 <strtok>
 8002140:	66b8      	str	r0, [r7, #104]	; 0x68

		for(int i = 0; p != NULL; i++)
 8002142:	2300      	movs	r3, #0
 8002144:	63bb      	str	r3, [r7, #56]	; 0x38
 8002146:	e02f      	b.n	80021a8 <configNetwork+0x230>
 8002148:	0800a334 	.word	0x0800a334
 800214c:	0800c000 	.word	0x0800c000
 8002150:	20002e5c 	.word	0x20002e5c
 8002154:	0800902c 	.word	0x0800902c
 8002158:	0800a300 	.word	0x0800a300
 800215c:	0800a308 	.word	0x0800a308
 8002160:	0800a310 	.word	0x0800a310
 8002164:	0800a31c 	.word	0x0800a31c
 8002168:	0800a324 	.word	0x0800a324
 800216c:	0800a32c 	.word	0x0800a32c
 8002170:	0800a330 	.word	0x0800a330
 8002174:	20001d30 	.word	0x20001d30
 8002178:	20001de4 	.word	0x20001de4
 800217c:	20002e1c 	.word	0x20002e1c
 8002180:	20001de0 	.word	0x20001de0
		{
			dns2[i] = atoi(p);
 8002184:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002186:	f006 fcd9 	bl	8008b3c <atoi>
 800218a:	4603      	mov	r3, r0
 800218c:	b2d9      	uxtb	r1, r3
 800218e:	4a7a      	ldr	r2, [pc, #488]	; (8002378 <configNetwork+0x400>)
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	4413      	add	r3, r2
 8002194:	460a      	mov	r2, r1
 8002196:	701a      	strb	r2, [r3, #0]
			p = strtok(NULL, ".");
 8002198:	4978      	ldr	r1, [pc, #480]	; (800237c <configNetwork+0x404>)
 800219a:	2000      	movs	r0, #0
 800219c:	f006 fd88 	bl	8008cb0 <strtok>
 80021a0:	66b8      	str	r0, [r7, #104]	; 0x68
		for(int i = 0; p != NULL; i++)
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	3301      	adds	r3, #1
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ea      	bne.n	8002184 <configNetwork+0x20c>
		}

		port = atoi(portPointer);
 80021ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80021b0:	f006 fcc4 	bl	8008b3c <atoi>
 80021b4:	4603      	mov	r3, r0
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b71      	ldr	r3, [pc, #452]	; (8002380 <configNetwork+0x408>)
 80021ba:	701a      	strb	r2, [r3, #0]

		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 80021bc:	23de      	movs	r3, #222	; 0xde
 80021be:	713b      	strb	r3, [r7, #4]
 80021c0:	23ad      	movs	r3, #173	; 0xad
 80021c2:	717b      	strb	r3, [r7, #5]
 80021c4:	23be      	movs	r3, #190	; 0xbe
 80021c6:	71bb      	strb	r3, [r7, #6]
 80021c8:	23ef      	movs	r3, #239	; 0xef
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	23fe      	movs	r3, #254	; 0xfe
 80021ce:	723b      	strb	r3, [r7, #8]
 80021d0:	23ed      	movs	r3, #237	; 0xed
 80021d2:	727b      	strb	r3, [r7, #9]
				.ip = {ip[0], ip[1], ip[2], ip[3]},
 80021d4:	4b6b      	ldr	r3, [pc, #428]	; (8002384 <configNetwork+0x40c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 80021d8:	72bb      	strb	r3, [r7, #10]
				.ip = {ip[0], ip[1], ip[2], ip[3]},
 80021da:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <configNetwork+0x40c>)
 80021dc:	785b      	ldrb	r3, [r3, #1]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 80021de:	72fb      	strb	r3, [r7, #11]
				.ip = {ip[0], ip[1], ip[2], ip[3]},
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <configNetwork+0x40c>)
 80021e2:	789b      	ldrb	r3, [r3, #2]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 80021e4:	733b      	strb	r3, [r7, #12]
				.ip = {ip[0], ip[1], ip[2], ip[3]},
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <configNetwork+0x40c>)
 80021e8:	78db      	ldrb	r3, [r3, #3]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 80021ea:	737b      	strb	r3, [r7, #13]
				.sn = {mask[0], mask[1], mask[2], mask[3]},
 80021ec:	4b66      	ldr	r3, [pc, #408]	; (8002388 <configNetwork+0x410>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 80021f0:	73bb      	strb	r3, [r7, #14]
				.sn = {mask[0], mask[1], mask[2], mask[3]},
 80021f2:	4b65      	ldr	r3, [pc, #404]	; (8002388 <configNetwork+0x410>)
 80021f4:	785b      	ldrb	r3, [r3, #1]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 80021f6:	73fb      	strb	r3, [r7, #15]
				.sn = {mask[0], mask[1], mask[2], mask[3]},
 80021f8:	4b63      	ldr	r3, [pc, #396]	; (8002388 <configNetwork+0x410>)
 80021fa:	789b      	ldrb	r3, [r3, #2]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 80021fc:	743b      	strb	r3, [r7, #16]
				.sn = {mask[0], mask[1], mask[2], mask[3]},
 80021fe:	4b62      	ldr	r3, [pc, #392]	; (8002388 <configNetwork+0x410>)
 8002200:	78db      	ldrb	r3, [r3, #3]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 8002202:	747b      	strb	r3, [r7, #17]
				.gw = {gateway[0], gateway[1], gateway[2], gateway[3]},
 8002204:	4b61      	ldr	r3, [pc, #388]	; (800238c <configNetwork+0x414>)
 8002206:	781b      	ldrb	r3, [r3, #0]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 8002208:	74bb      	strb	r3, [r7, #18]
				.gw = {gateway[0], gateway[1], gateway[2], gateway[3]},
 800220a:	4b60      	ldr	r3, [pc, #384]	; (800238c <configNetwork+0x414>)
 800220c:	785b      	ldrb	r3, [r3, #1]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 800220e:	74fb      	strb	r3, [r7, #19]
				.gw = {gateway[0], gateway[1], gateway[2], gateway[3]},
 8002210:	4b5e      	ldr	r3, [pc, #376]	; (800238c <configNetwork+0x414>)
 8002212:	789b      	ldrb	r3, [r3, #2]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 8002214:	753b      	strb	r3, [r7, #20]
				.gw = {gateway[0], gateway[1], gateway[2], gateway[3]},
 8002216:	4b5d      	ldr	r3, [pc, #372]	; (800238c <configNetwork+0x414>)
 8002218:	78db      	ldrb	r3, [r3, #3]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 800221a:	757b      	strb	r3, [r7, #21]
				.dns = {dns1[0], dns1[1], dns1[2], dns1[3]},
 800221c:	4b5c      	ldr	r3, [pc, #368]	; (8002390 <configNetwork+0x418>)
 800221e:	781b      	ldrb	r3, [r3, #0]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 8002220:	75bb      	strb	r3, [r7, #22]
				.dns = {dns1[0], dns1[1], dns1[2], dns1[3]},
 8002222:	4b5b      	ldr	r3, [pc, #364]	; (8002390 <configNetwork+0x418>)
 8002224:	785b      	ldrb	r3, [r3, #1]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 8002226:	75fb      	strb	r3, [r7, #23]
				.dns = {dns1[0], dns1[1], dns1[2], dns1[3]},
 8002228:	4b59      	ldr	r3, [pc, #356]	; (8002390 <configNetwork+0x418>)
 800222a:	789b      	ldrb	r3, [r3, #2]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 800222c:	763b      	strb	r3, [r7, #24]
				.dns = {dns1[0], dns1[1], dns1[2], dns1[3]},
 800222e:	4b58      	ldr	r3, [pc, #352]	; (8002390 <configNetwork+0x418>)
 8002230:	78db      	ldrb	r3, [r3, #3]
		wiz_NetInfo wizNet = { .mac = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED},
 8002232:	767b      	strb	r3, [r7, #25]
 8002234:	2301      	movs	r3, #1
 8002236:	76bb      	strb	r3, [r7, #26]
				.dhcp = NETINFO_STATIC };

		gWIZNETINFO = wizNet;
 8002238:	4b56      	ldr	r3, [pc, #344]	; (8002394 <configNetwork+0x41c>)
 800223a:	461c      	mov	r4, r3
 800223c:	1d3d      	adds	r5, r7, #4
 800223e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002242:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002246:	6020      	str	r0, [r4, #0]
 8002248:	3404      	adds	r4, #4
 800224a:	8021      	strh	r1, [r4, #0]
 800224c:	3402      	adds	r4, #2
 800224e:	0c0b      	lsrs	r3, r1, #16
 8002250:	7023      	strb	r3, [r4, #0]

	  	HAL_GPIO_WritePin(Rst_GPIO_Port, Rst_Pin, GPIO_PIN_RESET);
 8002252:	2200      	movs	r2, #0
 8002254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002258:	484f      	ldr	r0, [pc, #316]	; (8002398 <configNetwork+0x420>)
 800225a:	f002 fd26 	bl	8004caa <HAL_GPIO_WritePin>
	  	HAL_Delay(500);
 800225e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002262:	f002 f883 	bl	800436c <HAL_Delay>
	  	HAL_GPIO_WritePin(Rst_GPIO_Port, Rst_Pin, GPIO_PIN_SET);
 8002266:	2201      	movs	r2, #1
 8002268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800226c:	484a      	ldr	r0, [pc, #296]	; (8002398 <configNetwork+0x420>)
 800226e:	f002 fd1c 	bl	8004caa <HAL_GPIO_WritePin>
	  	HAL_Delay(50);
 8002272:	2032      	movs	r0, #50	; 0x32
 8002274:	f002 f87a 	bl	800436c <HAL_Delay>
	{
 8002278:	e00f      	b.n	800229a <configNetwork+0x322>
	}
	else
	{
		ip[0] = gWIZNETINFO.ip[0];
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <configNetwork+0x41c>)
 800227c:	799a      	ldrb	r2, [r3, #6]
 800227e:	4b41      	ldr	r3, [pc, #260]	; (8002384 <configNetwork+0x40c>)
 8002280:	701a      	strb	r2, [r3, #0]
		ip[1] = gWIZNETINFO.ip[1];
 8002282:	4b44      	ldr	r3, [pc, #272]	; (8002394 <configNetwork+0x41c>)
 8002284:	79da      	ldrb	r2, [r3, #7]
 8002286:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <configNetwork+0x40c>)
 8002288:	705a      	strb	r2, [r3, #1]
		ip[2] = gWIZNETINFO.ip[2];
 800228a:	4b42      	ldr	r3, [pc, #264]	; (8002394 <configNetwork+0x41c>)
 800228c:	7a1a      	ldrb	r2, [r3, #8]
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <configNetwork+0x40c>)
 8002290:	709a      	strb	r2, [r3, #2]
		ip[3] = gWIZNETINFO.ip[3];
 8002292:	4b40      	ldr	r3, [pc, #256]	; (8002394 <configNetwork+0x41c>)
 8002294:	7a5a      	ldrb	r2, [r3, #9]
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <configNetwork+0x40c>)
 8002298:	70da      	strb	r2, [r3, #3]
	}

	uint8_t aux;
	int c = 14;
 800229a:	230e      	movs	r3, #14
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
	ipStr[3] = '.';
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <configNetwork+0x424>)
 80022a0:	222e      	movs	r2, #46	; 0x2e
 80022a2:	70da      	strb	r2, [r3, #3]
	ipStr[7] = '.';
 80022a4:	4b3d      	ldr	r3, [pc, #244]	; (800239c <configNetwork+0x424>)
 80022a6:	222e      	movs	r2, #46	; 0x2e
 80022a8:	71da      	strb	r2, [r3, #7]
	ipStr[11] = '.';
 80022aa:	4b3c      	ldr	r3, [pc, #240]	; (800239c <configNetwork+0x424>)
 80022ac:	222e      	movs	r2, #46	; 0x2e
 80022ae:	72da      	strb	r2, [r3, #11]
	for(int j = 3; j >= 0; j --)
 80022b0:	2303      	movs	r3, #3
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
 80022b4:	e031      	b.n	800231a <configNetwork+0x3a2>
	{
		for(int i = 0; i < 3; i++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ba:	e025      	b.n	8002308 <configNetwork+0x390>
		{
			ipStr[c - i] = ip[j] % 10 + '0';
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <configNetwork+0x40c>)
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	4413      	add	r3, r2
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <configNetwork+0x428>)
 80022c6:	fba3 1302 	umull	r1, r3, r3, r2
 80022ca:	08d9      	lsrs	r1, r3, #3
 80022cc:	460b      	mov	r3, r1
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	1acb      	subs	r3, r1, r3
 80022de:	3230      	adds	r2, #48	; 0x30
 80022e0:	b2d1      	uxtb	r1, r2
 80022e2:	4a2e      	ldr	r2, [pc, #184]	; (800239c <configNetwork+0x424>)
 80022e4:	54d1      	strb	r1, [r2, r3]
			ip[j] /= 10;
 80022e6:	4a27      	ldr	r2, [pc, #156]	; (8002384 <configNetwork+0x40c>)
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4a2c      	ldr	r2, [pc, #176]	; (80023a0 <configNetwork+0x428>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	08db      	lsrs	r3, r3, #3
 80022f6:	b2d9      	uxtb	r1, r3
 80022f8:	4a22      	ldr	r2, [pc, #136]	; (8002384 <configNetwork+0x40c>)
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fc:	4413      	add	r3, r2
 80022fe:	460a      	mov	r2, r1
 8002300:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 3; i++)
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	3301      	adds	r3, #1
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230a:	2b02      	cmp	r3, #2
 800230c:	ddd6      	ble.n	80022bc <configNetwork+0x344>
		}
		c -= 4;
 800230e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002310:	3b04      	subs	r3, #4
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
	for(int j = 3; j >= 0; j --)
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	3b01      	subs	r3, #1
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	2b00      	cmp	r3, #0
 800231e:	daca      	bge.n	80022b6 <configNetwork+0x33e>
	}
	/* Chip selection call back */
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8002320:	4920      	ldr	r1, [pc, #128]	; (80023a4 <configNetwork+0x42c>)
 8002322:	4821      	ldr	r0, [pc, #132]	; (80023a8 <configNetwork+0x430>)
 8002324:	f001 fb12 	bl	800394c <reg_wizchip_cs_cbfunc>

	/* SPI Read & Write callback function */
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8002328:	4920      	ldr	r1, [pc, #128]	; (80023ac <configNetwork+0x434>)
 800232a:	4821      	ldr	r0, [pc, #132]	; (80023b0 <configNetwork+0x438>)
 800232c:	f001 fb32 	bl	8003994 <reg_wizchip_spi_cbfunc>

	///////////////////////////////////////////////////////////////////////
	/* WIZCHIP SOCKET Buffer initialize */
	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	4619      	mov	r1, r3
 8002336:	2001      	movs	r0, #1
 8002338:	f001 fb56 	bl	80039e8 <ctlwizchip>
 800233c:	4603      	mov	r3, r0
 800233e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002342:	d100      	bne.n	8002346 <configNetwork+0x3ce>
	{
		//init fail
		while(1);
 8002344:	e7fe      	b.n	8002344 <configNetwork+0x3cc>
	}

	/* Network initialization */
 	network_init();
 8002346:	f7fe f913 	bl	8000570 <network_init>

	//all connections inactive
	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 800234a:	2300      	movs	r3, #0
 800234c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002350:	e009      	b.n	8002366 <configNetwork+0x3ee>
		HTTP_reset(i);
 8002352:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f91c 	bl	8000594 <HTTP_reset>
	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 800235c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002360:	3301      	adds	r3, #1
 8002362:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002366:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800236a:	2b07      	cmp	r3, #7
 800236c:	d9f1      	bls.n	8002352 <configNetwork+0x3da>
}
 800236e:	bf00      	nop
 8002370:	3770      	adds	r7, #112	; 0x70
 8002372:	46bd      	mov	sp, r7
 8002374:	bdb0      	pop	{r4, r5, r7, pc}
 8002376:	bf00      	nop
 8002378:	20002e58 	.word	0x20002e58
 800237c:	0800a330 	.word	0x0800a330
 8002380:	20000000 	.word	0x20000000
 8002384:	20001d30 	.word	0x20001d30
 8002388:	20001de4 	.word	0x20001de4
 800238c:	20002e1c 	.word	0x20002e1c
 8002390:	20001de0 	.word	0x20001de0
 8002394:	20000004 	.word	0x20000004
 8002398:	40010800 	.word	0x40010800
 800239c:	20002e20 	.word	0x20002e20
 80023a0:	cccccccd 	.word	0xcccccccd
 80023a4:	0800052d 	.word	0x0800052d
 80023a8:	08000515 	.word	0x08000515
 80023ac:	08000545 	.word	0x08000545
 80023b0:	0800055f 	.word	0x0800055f

080023b4 <configInterfaces>:

void configInterfaces()
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b0a2      	sub	sp, #136	; 0x88
 80023b8:	af00      	add	r7, sp, #0
	read_flash(config_data, INTERFACE_STORAGE);
 80023ba:	49b4      	ldr	r1, [pc, #720]	; (800268c <configInterfaces+0x2d8>)
 80023bc:	48b4      	ldr	r0, [pc, #720]	; (8002690 <configInterfaces+0x2dc>)
 80023be:	f7ff fd62 	bl	8001e86 <read_flash>
	if(config_data[0] == '/' && config_data[1] == 'i' && config_data[2] == 'n')
 80023c2:	4bb3      	ldr	r3, [pc, #716]	; (8002690 <configInterfaces+0x2dc>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b2f      	cmp	r3, #47	; 0x2f
 80023c8:	f040 81bf 	bne.w	800274a <configInterfaces+0x396>
 80023cc:	4bb0      	ldr	r3, [pc, #704]	; (8002690 <configInterfaces+0x2dc>)
 80023ce:	785b      	ldrb	r3, [r3, #1]
 80023d0:	2b69      	cmp	r3, #105	; 0x69
 80023d2:	f040 81ba 	bne.w	800274a <configInterfaces+0x396>
 80023d6:	4bae      	ldr	r3, [pc, #696]	; (8002690 <configInterfaces+0x2dc>)
 80023d8:	789b      	ldrb	r3, [r3, #2]
 80023da:	2b6e      	cmp	r3, #110	; 0x6e
 80023dc:	f040 81b5 	bne.w	800274a <configInterfaces+0x396>
	{
		strremove(config_data, "/interfaces2/");
 80023e0:	49ac      	ldr	r1, [pc, #688]	; (8002694 <configInterfaces+0x2e0>)
 80023e2:	48ab      	ldr	r0, [pc, #684]	; (8002690 <configInterfaces+0x2dc>)
 80023e4:	f7ff fd89 	bl	8001efa <strremove>
		strremove(config_data, "/con/");
 80023e8:	49ab      	ldr	r1, [pc, #684]	; (8002698 <configInterfaces+0x2e4>)
 80023ea:	48a9      	ldr	r0, [pc, #676]	; (8002690 <configInterfaces+0x2dc>)
 80023ec:	f7ff fd85 	bl	8001efa <strremove>
		strremove(config_data, "ip1:");
 80023f0:	49aa      	ldr	r1, [pc, #680]	; (800269c <configInterfaces+0x2e8>)
 80023f2:	48a7      	ldr	r0, [pc, #668]	; (8002690 <configInterfaces+0x2dc>)
 80023f4:	f7ff fd81 	bl	8001efa <strremove>
		strremove(config_data, "ip2:");
 80023f8:	49a9      	ldr	r1, [pc, #676]	; (80026a0 <configInterfaces+0x2ec>)
 80023fa:	48a5      	ldr	r0, [pc, #660]	; (8002690 <configInterfaces+0x2dc>)
 80023fc:	f7ff fd7d 	bl	8001efa <strremove>
		strremove(config_data, "ip3:");
 8002400:	49a8      	ldr	r1, [pc, #672]	; (80026a4 <configInterfaces+0x2f0>)
 8002402:	48a3      	ldr	r0, [pc, #652]	; (8002690 <configInterfaces+0x2dc>)
 8002404:	f7ff fd79 	bl	8001efa <strremove>
		strremove(config_data, "ip4:");
 8002408:	49a7      	ldr	r1, [pc, #668]	; (80026a8 <configInterfaces+0x2f4>)
 800240a:	48a1      	ldr	r0, [pc, #644]	; (8002690 <configInterfaces+0x2dc>)
 800240c:	f7ff fd75 	bl	8001efa <strremove>
		strremove(config_data, "ip5:");
 8002410:	49a6      	ldr	r1, [pc, #664]	; (80026ac <configInterfaces+0x2f8>)
 8002412:	489f      	ldr	r0, [pc, #636]	; (8002690 <configInterfaces+0x2dc>)
 8002414:	f7ff fd71 	bl	8001efa <strremove>
		strremove(config_data, "ip6:");
 8002418:	49a5      	ldr	r1, [pc, #660]	; (80026b0 <configInterfaces+0x2fc>)
 800241a:	489d      	ldr	r0, [pc, #628]	; (8002690 <configInterfaces+0x2dc>)
 800241c:	f7ff fd6d 	bl	8001efa <strremove>
		strremove(config_data, "ip7:");
 8002420:	49a4      	ldr	r1, [pc, #656]	; (80026b4 <configInterfaces+0x300>)
 8002422:	489b      	ldr	r0, [pc, #620]	; (8002690 <configInterfaces+0x2dc>)
 8002424:	f7ff fd69 	bl	8001efa <strremove>
		strremove(config_data, "ip8:");
 8002428:	49a3      	ldr	r1, [pc, #652]	; (80026b8 <configInterfaces+0x304>)
 800242a:	4899      	ldr	r0, [pc, #612]	; (8002690 <configInterfaces+0x2dc>)
 800242c:	f7ff fd65 	bl	8001efa <strremove>
		strremove(config_data, "ip9:");
 8002430:	49a2      	ldr	r1, [pc, #648]	; (80026bc <configInterfaces+0x308>)
 8002432:	4897      	ldr	r0, [pc, #604]	; (8002690 <configInterfaces+0x2dc>)
 8002434:	f7ff fd61 	bl	8001efa <strremove>
		strremove(config_data, "ip10:");
 8002438:	49a1      	ldr	r1, [pc, #644]	; (80026c0 <configInterfaces+0x30c>)
 800243a:	4895      	ldr	r0, [pc, #596]	; (8002690 <configInterfaces+0x2dc>)
 800243c:	f7ff fd5d 	bl	8001efa <strremove>
		strremove(config_data, "ip11:");
 8002440:	49a0      	ldr	r1, [pc, #640]	; (80026c4 <configInterfaces+0x310>)
 8002442:	4893      	ldr	r0, [pc, #588]	; (8002690 <configInterfaces+0x2dc>)
 8002444:	f7ff fd59 	bl	8001efa <strremove>
		strremove(config_data, "ip12:");
 8002448:	499f      	ldr	r1, [pc, #636]	; (80026c8 <configInterfaces+0x314>)
 800244a:	4891      	ldr	r0, [pc, #580]	; (8002690 <configInterfaces+0x2dc>)
 800244c:	f7ff fd55 	bl	8001efa <strremove>
		strremove(config_data, "ip13:");
 8002450:	499e      	ldr	r1, [pc, #632]	; (80026cc <configInterfaces+0x318>)
 8002452:	488f      	ldr	r0, [pc, #572]	; (8002690 <configInterfaces+0x2dc>)
 8002454:	f7ff fd51 	bl	8001efa <strremove>
		strremove(config_data, "ip14:");
 8002458:	499d      	ldr	r1, [pc, #628]	; (80026d0 <configInterfaces+0x31c>)
 800245a:	488d      	ldr	r0, [pc, #564]	; (8002690 <configInterfaces+0x2dc>)
 800245c:	f7ff fd4d 	bl	8001efa <strremove>
		strremove(config_data, "ip15:");
 8002460:	499c      	ldr	r1, [pc, #624]	; (80026d4 <configInterfaces+0x320>)
 8002462:	488b      	ldr	r0, [pc, #556]	; (8002690 <configInterfaces+0x2dc>)
 8002464:	f7ff fd49 	bl	8001efa <strremove>
		strremove(config_data, "ip16:");
 8002468:	499b      	ldr	r1, [pc, #620]	; (80026d8 <configInterfaces+0x324>)
 800246a:	4889      	ldr	r0, [pc, #548]	; (8002690 <configInterfaces+0x2dc>)
 800246c:	f7ff fd45 	bl	8001efa <strremove>
		strremove(config_data, "r1:");
 8002470:	499a      	ldr	r1, [pc, #616]	; (80026dc <configInterfaces+0x328>)
 8002472:	4887      	ldr	r0, [pc, #540]	; (8002690 <configInterfaces+0x2dc>)
 8002474:	f7ff fd41 	bl	8001efa <strremove>
		strremove(config_data, "r2:");
 8002478:	4999      	ldr	r1, [pc, #612]	; (80026e0 <configInterfaces+0x32c>)
 800247a:	4885      	ldr	r0, [pc, #532]	; (8002690 <configInterfaces+0x2dc>)
 800247c:	f7ff fd3d 	bl	8001efa <strremove>
		strremove(config_data, "r3:");
 8002480:	4998      	ldr	r1, [pc, #608]	; (80026e4 <configInterfaces+0x330>)
 8002482:	4883      	ldr	r0, [pc, #524]	; (8002690 <configInterfaces+0x2dc>)
 8002484:	f7ff fd39 	bl	8001efa <strremove>
		strremove(config_data, "r4:");
 8002488:	4997      	ldr	r1, [pc, #604]	; (80026e8 <configInterfaces+0x334>)
 800248a:	4881      	ldr	r0, [pc, #516]	; (8002690 <configInterfaces+0x2dc>)
 800248c:	f7ff fd35 	bl	8001efa <strremove>
		strremove(config_data, "r5:");
 8002490:	4996      	ldr	r1, [pc, #600]	; (80026ec <configInterfaces+0x338>)
 8002492:	487f      	ldr	r0, [pc, #508]	; (8002690 <configInterfaces+0x2dc>)
 8002494:	f7ff fd31 	bl	8001efa <strremove>
		strremove(config_data, "r6:");
 8002498:	4995      	ldr	r1, [pc, #596]	; (80026f0 <configInterfaces+0x33c>)
 800249a:	487d      	ldr	r0, [pc, #500]	; (8002690 <configInterfaces+0x2dc>)
 800249c:	f7ff fd2d 	bl	8001efa <strremove>
		strremove(config_data, "r7:");
 80024a0:	4994      	ldr	r1, [pc, #592]	; (80026f4 <configInterfaces+0x340>)
 80024a2:	487b      	ldr	r0, [pc, #492]	; (8002690 <configInterfaces+0x2dc>)
 80024a4:	f7ff fd29 	bl	8001efa <strremove>
		strremove(config_data, "r8:");
 80024a8:	4993      	ldr	r1, [pc, #588]	; (80026f8 <configInterfaces+0x344>)
 80024aa:	4879      	ldr	r0, [pc, #484]	; (8002690 <configInterfaces+0x2dc>)
 80024ac:	f7ff fd25 	bl	8001efa <strremove>
		strremove(config_data, "r9:");
 80024b0:	4992      	ldr	r1, [pc, #584]	; (80026fc <configInterfaces+0x348>)
 80024b2:	4877      	ldr	r0, [pc, #476]	; (8002690 <configInterfaces+0x2dc>)
 80024b4:	f7ff fd21 	bl	8001efa <strremove>
		strremove(config_data, "r10:");
 80024b8:	4991      	ldr	r1, [pc, #580]	; (8002700 <configInterfaces+0x34c>)
 80024ba:	4875      	ldr	r0, [pc, #468]	; (8002690 <configInterfaces+0x2dc>)
 80024bc:	f7ff fd1d 	bl	8001efa <strremove>
		strremove(config_data, "r11:");
 80024c0:	4990      	ldr	r1, [pc, #576]	; (8002704 <configInterfaces+0x350>)
 80024c2:	4873      	ldr	r0, [pc, #460]	; (8002690 <configInterfaces+0x2dc>)
 80024c4:	f7ff fd19 	bl	8001efa <strremove>
		strremove(config_data, "r12:");
 80024c8:	498f      	ldr	r1, [pc, #572]	; (8002708 <configInterfaces+0x354>)
 80024ca:	4871      	ldr	r0, [pc, #452]	; (8002690 <configInterfaces+0x2dc>)
 80024cc:	f7ff fd15 	bl	8001efa <strremove>
		strremove(config_data, "r13:");
 80024d0:	498e      	ldr	r1, [pc, #568]	; (800270c <configInterfaces+0x358>)
 80024d2:	486f      	ldr	r0, [pc, #444]	; (8002690 <configInterfaces+0x2dc>)
 80024d4:	f7ff fd11 	bl	8001efa <strremove>
		strremove(config_data, "r14:");
 80024d8:	498d      	ldr	r1, [pc, #564]	; (8002710 <configInterfaces+0x35c>)
 80024da:	486d      	ldr	r0, [pc, #436]	; (8002690 <configInterfaces+0x2dc>)
 80024dc:	f7ff fd0d 	bl	8001efa <strremove>
		strremove(config_data, "r15:");
 80024e0:	498c      	ldr	r1, [pc, #560]	; (8002714 <configInterfaces+0x360>)
 80024e2:	486b      	ldr	r0, [pc, #428]	; (8002690 <configInterfaces+0x2dc>)
 80024e4:	f7ff fd09 	bl	8001efa <strremove>
		strremove(config_data, "r16:");
 80024e8:	498b      	ldr	r1, [pc, #556]	; (8002718 <configInterfaces+0x364>)
 80024ea:	4869      	ldr	r0, [pc, #420]	; (8002690 <configInterfaces+0x2dc>)
 80024ec:	f7ff fd05 	bl	8001efa <strremove>

		uint8_t *ip1, *ip2, *ip3, *ip4, *ip5, *ip6, *ip7, *ip8, *ip9, *ip10, *ip11, *ip12, *ip13, *ip14, *ip15, *ip16;
		uint8_t *r1, *r2, *r3, *r4, *r5, *r6, *r7, *r8, *r9, *r10, *r11, *r12, *r13, *r14, *r15, *r16, *p;

		p = strtok(config_data, ",");
 80024f0:	498a      	ldr	r1, [pc, #552]	; (800271c <configInterfaces+0x368>)
 80024f2:	4867      	ldr	r0, [pc, #412]	; (8002690 <configInterfaces+0x2dc>)
 80024f4:	f006 fbdc 	bl	8008cb0 <strtok>
 80024f8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

		for(int i = 0; p != NULL; i++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002502:	e11d      	b.n	8002740 <configInterfaces+0x38c>
		{
			switch(i)
 8002504:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002508:	2b1f      	cmp	r3, #31
 800250a:	f200 810d 	bhi.w	8002728 <configInterfaces+0x374>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <configInterfaces+0x160>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002595 	.word	0x08002595
 8002518:	0800259d 	.word	0x0800259d
 800251c:	080025a5 	.word	0x080025a5
 8002520:	080025ad 	.word	0x080025ad
 8002524:	080025b5 	.word	0x080025b5
 8002528:	080025bd 	.word	0x080025bd
 800252c:	080025c5 	.word	0x080025c5
 8002530:	080025cd 	.word	0x080025cd
 8002534:	080025d5 	.word	0x080025d5
 8002538:	080025dd 	.word	0x080025dd
 800253c:	080025e5 	.word	0x080025e5
 8002540:	080025ed 	.word	0x080025ed
 8002544:	080025f5 	.word	0x080025f5
 8002548:	080025fd 	.word	0x080025fd
 800254c:	08002605 	.word	0x08002605
 8002550:	0800260d 	.word	0x0800260d
 8002554:	08002615 	.word	0x08002615
 8002558:	0800261d 	.word	0x0800261d
 800255c:	08002625 	.word	0x08002625
 8002560:	0800262d 	.word	0x0800262d
 8002564:	08002635 	.word	0x08002635
 8002568:	0800263d 	.word	0x0800263d
 800256c:	08002645 	.word	0x08002645
 8002570:	0800264d 	.word	0x0800264d
 8002574:	08002655 	.word	0x08002655
 8002578:	0800265d 	.word	0x0800265d
 800257c:	08002665 	.word	0x08002665
 8002580:	0800266d 	.word	0x0800266d
 8002584:	08002675 	.word	0x08002675
 8002588:	0800267d 	.word	0x0800267d
 800258c:	08002685 	.word	0x08002685
 8002590:	08002721 	.word	0x08002721
			{
				case 0:
					ip1 = p;
 8002594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002598:	603b      	str	r3, [r7, #0]
					break;
 800259a:	e0c6      	b.n	800272a <configInterfaces+0x376>
				case 1:
					ip2 = p;
 800259c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025a0:	607b      	str	r3, [r7, #4]
					break;
 80025a2:	e0c2      	b.n	800272a <configInterfaces+0x376>
				case 2:
					ip3= p;
 80025a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025a8:	60bb      	str	r3, [r7, #8]
					break;
 80025aa:	e0be      	b.n	800272a <configInterfaces+0x376>
				case 3:
					ip4 = p;
 80025ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025b0:	60fb      	str	r3, [r7, #12]
					break;
 80025b2:	e0ba      	b.n	800272a <configInterfaces+0x376>
				case 4:
					ip5 = p;
 80025b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025b8:	613b      	str	r3, [r7, #16]
					break;
 80025ba:	e0b6      	b.n	800272a <configInterfaces+0x376>
				case 5:
					ip6 = p;
 80025bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025c0:	617b      	str	r3, [r7, #20]
					break;
 80025c2:	e0b2      	b.n	800272a <configInterfaces+0x376>
				case 6:
					ip7 = p;
 80025c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025c8:	61bb      	str	r3, [r7, #24]
					break;
 80025ca:	e0ae      	b.n	800272a <configInterfaces+0x376>
				case 7:
					ip8 = p;
 80025cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d0:	61fb      	str	r3, [r7, #28]
					break;
 80025d2:	e0aa      	b.n	800272a <configInterfaces+0x376>
				case 8:
					r1 = p;
 80025d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d8:	623b      	str	r3, [r7, #32]
					break;
 80025da:	e0a6      	b.n	800272a <configInterfaces+0x376>
				case 9:
					r2 = p;
 80025dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80025e2:	e0a2      	b.n	800272a <configInterfaces+0x376>
				case 10:
					r3 = p;
 80025e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
					break;
 80025ea:	e09e      	b.n	800272a <configInterfaces+0x376>
				case 11:
					r4 = p;
 80025ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					break;
 80025f2:	e09a      	b.n	800272a <configInterfaces+0x376>
				case 12:
					r5 = p;
 80025f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
					break;
 80025fa:	e096      	b.n	800272a <configInterfaces+0x376>
				case 13:
					r6 = p;
 80025fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8002602:	e092      	b.n	800272a <configInterfaces+0x376>
				case 14:
					r7 = p;
 8002604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002608:	63bb      	str	r3, [r7, #56]	; 0x38
					break;
 800260a:	e08e      	b.n	800272a <configInterfaces+0x376>
				case 15:
					r8 = p;
 800260c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002610:	63fb      	str	r3, [r7, #60]	; 0x3c
					break;
 8002612:	e08a      	b.n	800272a <configInterfaces+0x376>
				case 16:
					ip9 = p;
 8002614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002618:	643b      	str	r3, [r7, #64]	; 0x40
					break;
 800261a:	e086      	b.n	800272a <configInterfaces+0x376>
				case 17:
					ip10 = p;
 800261c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002620:	647b      	str	r3, [r7, #68]	; 0x44
					break;
 8002622:	e082      	b.n	800272a <configInterfaces+0x376>
				case 18:
					ip11 = p;
 8002624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002628:	64bb      	str	r3, [r7, #72]	; 0x48
					break;
 800262a:	e07e      	b.n	800272a <configInterfaces+0x376>
				case 19:
					ip12 = p;
 800262c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002630:	64fb      	str	r3, [r7, #76]	; 0x4c
					break;
 8002632:	e07a      	b.n	800272a <configInterfaces+0x376>
				case 20:
					ip13 = p;
 8002634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002638:	653b      	str	r3, [r7, #80]	; 0x50
					break;
 800263a:	e076      	b.n	800272a <configInterfaces+0x376>
				case 21:
					ip14 = p;
 800263c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002640:	657b      	str	r3, [r7, #84]	; 0x54
					break;
 8002642:	e072      	b.n	800272a <configInterfaces+0x376>
				case 22:
					ip15 = p;
 8002644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002648:	65bb      	str	r3, [r7, #88]	; 0x58
					break;
 800264a:	e06e      	b.n	800272a <configInterfaces+0x376>
				case 23:
					ip16 = p;
 800264c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002650:	65fb      	str	r3, [r7, #92]	; 0x5c
					break;
 8002652:	e06a      	b.n	800272a <configInterfaces+0x376>
				case 24:
					r9 = p;
 8002654:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002658:	663b      	str	r3, [r7, #96]	; 0x60
					break;
 800265a:	e066      	b.n	800272a <configInterfaces+0x376>
				case 25:
					r10 = p;
 800265c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002660:	667b      	str	r3, [r7, #100]	; 0x64
					break;
 8002662:	e062      	b.n	800272a <configInterfaces+0x376>
				case 26:
					r11 = p;
 8002664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002668:	66bb      	str	r3, [r7, #104]	; 0x68
					break;
 800266a:	e05e      	b.n	800272a <configInterfaces+0x376>
				case 27:
					r12 = p;
 800266c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002670:	66fb      	str	r3, [r7, #108]	; 0x6c
					break;
 8002672:	e05a      	b.n	800272a <configInterfaces+0x376>
				case 28:
					r13 = p;
 8002674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002678:	673b      	str	r3, [r7, #112]	; 0x70
					break;
 800267a:	e056      	b.n	800272a <configInterfaces+0x376>
				case 29:
					r14 = p;
 800267c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002680:	677b      	str	r3, [r7, #116]	; 0x74
					break;
 8002682:	e052      	b.n	800272a <configInterfaces+0x376>
				case 30:
					r15 = p;
 8002684:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002688:	67bb      	str	r3, [r7, #120]	; 0x78
					break;
 800268a:	e04e      	b.n	800272a <configInterfaces+0x376>
 800268c:	0800d000 	.word	0x0800d000
 8002690:	20002e5c 	.word	0x20002e5c
 8002694:	0800a344 	.word	0x0800a344
 8002698:	0800a354 	.word	0x0800a354
 800269c:	0800a35c 	.word	0x0800a35c
 80026a0:	0800a364 	.word	0x0800a364
 80026a4:	0800a36c 	.word	0x0800a36c
 80026a8:	0800a374 	.word	0x0800a374
 80026ac:	0800a37c 	.word	0x0800a37c
 80026b0:	0800a384 	.word	0x0800a384
 80026b4:	0800a38c 	.word	0x0800a38c
 80026b8:	0800a394 	.word	0x0800a394
 80026bc:	0800a39c 	.word	0x0800a39c
 80026c0:	0800a3a4 	.word	0x0800a3a4
 80026c4:	0800a3ac 	.word	0x0800a3ac
 80026c8:	0800a3b4 	.word	0x0800a3b4
 80026cc:	0800a3bc 	.word	0x0800a3bc
 80026d0:	0800a3c4 	.word	0x0800a3c4
 80026d4:	0800a3cc 	.word	0x0800a3cc
 80026d8:	0800a3d4 	.word	0x0800a3d4
 80026dc:	0800a3dc 	.word	0x0800a3dc
 80026e0:	0800a3e0 	.word	0x0800a3e0
 80026e4:	0800a3e4 	.word	0x0800a3e4
 80026e8:	0800a3e8 	.word	0x0800a3e8
 80026ec:	0800a3ec 	.word	0x0800a3ec
 80026f0:	0800a3f0 	.word	0x0800a3f0
 80026f4:	0800a3f4 	.word	0x0800a3f4
 80026f8:	0800a3f8 	.word	0x0800a3f8
 80026fc:	0800a3fc 	.word	0x0800a3fc
 8002700:	0800a400 	.word	0x0800a400
 8002704:	0800a408 	.word	0x0800a408
 8002708:	0800a410 	.word	0x0800a410
 800270c:	0800a418 	.word	0x0800a418
 8002710:	0800a420 	.word	0x0800a420
 8002714:	0800a428 	.word	0x0800a428
 8002718:	0800a430 	.word	0x0800a430
 800271c:	0800a32c 	.word	0x0800a32c
				case 31:
					r16 = p;
 8002720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002724:	67fb      	str	r3, [r7, #124]	; 0x7c
					break;
 8002726:	e000      	b.n	800272a <configInterfaces+0x376>
				default:
					break;
 8002728:	bf00      	nop
			}
			p = strtok(NULL, ",");
 800272a:	490a      	ldr	r1, [pc, #40]	; (8002754 <configInterfaces+0x3a0>)
 800272c:	2000      	movs	r0, #0
 800272e:	f006 fabf 	bl	8008cb0 <strtok>
 8002732:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		for(int i = 0; p != NULL; i++)
 8002736:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800273a:	3301      	adds	r3, #1
 800273c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002744:	2b00      	cmp	r3, #0
 8002746:	f47f aedd 	bne.w	8002504 <configInterfaces+0x150>
		}
	}
}
 800274a:	bf00      	nop
 800274c:	3788      	adds	r7, #136	; 0x88
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	0800a32c 	.word	0x0800a32c

08002758 <StartEthernet>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEthernet */
void StartEthernet(void *argument)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t i;
  /* Infinite loop */
  for(;;)
  {
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 8002760:	2304      	movs	r3, #4
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e00a      	b.n	800277c <StartEthernet+0x24>
	  {
	  	tcp_http_mt(i, gDATABUF, port);
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <StartEthernet+0x4c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	b29a      	uxth	r2, r3
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	490e      	ldr	r1, [pc, #56]	; (80027a8 <StartEthernet+0x50>)
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd ff27 	bl	80005c4 <tcp_http_mt>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3301      	adds	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b07      	cmp	r3, #7
 8002780:	d9f1      	bls.n	8002766 <StartEthernet+0xe>
	  }
	  //4 sockets para modbus TCP
	  for(i=0;i<4;i++)
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
 8002786:	e009      	b.n	800279c <StartEthernet+0x44>
	  {
	  	tcp_http_mt(i, gDATABUF, 502);
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800278e:	4906      	ldr	r1, [pc, #24]	; (80027a8 <StartEthernet+0x50>)
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd ff17 	bl	80005c4 <tcp_http_mt>
	  for(i=0;i<4;i++)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	3301      	adds	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d9f2      	bls.n	8002788 <StartEthernet+0x30>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 80027a2:	e7dd      	b.n	8002760 <StartEthernet+0x8>
 80027a4:	20000000 	.word	0x20000000
 80027a8:	20001e18 	.word	0x20001e18

080027ac <StartReadInput1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput1 */
void StartReadInput1(void *argument)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput1 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[0] = HAL_GPIO_ReadPin(OUT1_OP1_GPIO_Port, OUT1_OP1_Pin);
 80027b4:	2108      	movs	r1, #8
 80027b6:	4811      	ldr	r0, [pc, #68]	; (80027fc <StartReadInput1+0x50>)
 80027b8:	f002 fa60 	bl	8004c7c <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	461a      	mov	r2, r3
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <StartReadInput1+0x54>)
 80027c2:	701a      	strb	r2, [r3, #0]
	  inputs[1] = HAL_GPIO_ReadPin(OUT1_OP2_GPIO_Port, OUT1_OP2_Pin);
 80027c4:	2104      	movs	r1, #4
 80027c6:	480d      	ldr	r0, [pc, #52]	; (80027fc <StartReadInput1+0x50>)
 80027c8:	f002 fa58 	bl	8004c7c <HAL_GPIO_ReadPin>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <StartReadInput1+0x54>)
 80027d2:	705a      	strb	r2, [r3, #1]
	  inputs[2] = HAL_GPIO_ReadPin(OUT1_OP3_GPIO_Port, OUT1_OP3_Pin);
 80027d4:	2102      	movs	r1, #2
 80027d6:	4809      	ldr	r0, [pc, #36]	; (80027fc <StartReadInput1+0x50>)
 80027d8:	f002 fa50 	bl	8004c7c <HAL_GPIO_ReadPin>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <StartReadInput1+0x54>)
 80027e2:	709a      	strb	r2, [r3, #2]
	  inputs[3] = HAL_GPIO_ReadPin(OUT1_OP4_GPIO_Port, OUT1_OP4_Pin);
 80027e4:	2101      	movs	r1, #1
 80027e6:	4805      	ldr	r0, [pc, #20]	; (80027fc <StartReadInput1+0x50>)
 80027e8:	f002 fa48 	bl	8004c7c <HAL_GPIO_ReadPin>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <StartReadInput1+0x54>)
 80027f2:	70da      	strb	r2, [r3, #3]
    osDelay(1);
 80027f4:	2001      	movs	r0, #1
 80027f6:	f003 fe1b 	bl	8006430 <osDelay>
	  inputs[0] = HAL_GPIO_ReadPin(OUT1_OP1_GPIO_Port, OUT1_OP1_Pin);
 80027fa:	e7db      	b.n	80027b4 <StartReadInput1+0x8>
 80027fc:	40010800 	.word	0x40010800
 8002800:	2000023c 	.word	0x2000023c

08002804 <StartReadInput2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput2 */
void StartReadInput2(void *argument)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput2 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[4] = HAL_GPIO_ReadPin(OUT1_OP5_GPIO_Port, OUT1_OP5_Pin);
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	4811      	ldr	r0, [pc, #68]	; (8002854 <StartReadInput2+0x50>)
 8002810:	f002 fa34 	bl	8004c7c <HAL_GPIO_ReadPin>
 8002814:	4603      	mov	r3, r0
 8002816:	461a      	mov	r2, r3
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <StartReadInput2+0x54>)
 800281a:	711a      	strb	r2, [r3, #4]
	  inputs[5] = HAL_GPIO_ReadPin(OUT1_OP6_GPIO_Port, OUT1_OP6_Pin);
 800281c:	2140      	movs	r1, #64	; 0x40
 800281e:	480d      	ldr	r0, [pc, #52]	; (8002854 <StartReadInput2+0x50>)
 8002820:	f002 fa2c 	bl	8004c7c <HAL_GPIO_ReadPin>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <StartReadInput2+0x54>)
 800282a:	715a      	strb	r2, [r3, #5]
	  inputs[6] = HAL_GPIO_ReadPin(OUT1_OP7_GPIO_Port, OUT1_OP7_Pin);
 800282c:	2120      	movs	r1, #32
 800282e:	4809      	ldr	r0, [pc, #36]	; (8002854 <StartReadInput2+0x50>)
 8002830:	f002 fa24 	bl	8004c7c <HAL_GPIO_ReadPin>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <StartReadInput2+0x54>)
 800283a:	719a      	strb	r2, [r3, #6]
	  inputs[7] = HAL_GPIO_ReadPin(OUT1_OP8_GPIO_Port, OUT1_OP8_Pin);
 800283c:	2110      	movs	r1, #16
 800283e:	4805      	ldr	r0, [pc, #20]	; (8002854 <StartReadInput2+0x50>)
 8002840:	f002 fa1c 	bl	8004c7c <HAL_GPIO_ReadPin>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <StartReadInput2+0x54>)
 800284a:	71da      	strb	r2, [r3, #7]
    osDelay(1);
 800284c:	2001      	movs	r0, #1
 800284e:	f003 fdef 	bl	8006430 <osDelay>
	  inputs[4] = HAL_GPIO_ReadPin(OUT1_OP5_GPIO_Port, OUT1_OP5_Pin);
 8002852:	e7db      	b.n	800280c <StartReadInput2+0x8>
 8002854:	40010800 	.word	0x40010800
 8002858:	2000023c 	.word	0x2000023c

0800285c <StartReadInput3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput3 */
void StartReadInput3(void *argument)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput3 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[8] = HAL_GPIO_ReadPin(OUT1_OP8_GPIO_Port, OUT1_OP9_Pin);
 8002864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002868:	4811      	ldr	r0, [pc, #68]	; (80028b0 <StartReadInput3+0x54>)
 800286a:	f002 fa07 	bl	8004c7c <HAL_GPIO_ReadPin>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <StartReadInput3+0x58>)
 8002874:	721a      	strb	r2, [r3, #8]
	  inputs[9] = HAL_GPIO_ReadPin(OUT1_OP9_GPIO_Port, OUT1_OP10_Pin);
 8002876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800287a:	480f      	ldr	r0, [pc, #60]	; (80028b8 <StartReadInput3+0x5c>)
 800287c:	f002 f9fe 	bl	8004c7c <HAL_GPIO_ReadPin>
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <StartReadInput3+0x58>)
 8002886:	725a      	strb	r2, [r3, #9]
	  inputs[10] = HAL_GPIO_ReadPin(OUT1_OP10_GPIO_Port, OUT1_OP11_Pin);
 8002888:	2104      	movs	r1, #4
 800288a:	480b      	ldr	r0, [pc, #44]	; (80028b8 <StartReadInput3+0x5c>)
 800288c:	f002 f9f6 	bl	8004c7c <HAL_GPIO_ReadPin>
 8002890:	4603      	mov	r3, r0
 8002892:	461a      	mov	r2, r3
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <StartReadInput3+0x58>)
 8002896:	729a      	strb	r2, [r3, #10]
	  inputs[11] = HAL_GPIO_ReadPin(OUT1_OP11_GPIO_Port, OUT1_OP12_Pin);
 8002898:	2102      	movs	r1, #2
 800289a:	4808      	ldr	r0, [pc, #32]	; (80028bc <StartReadInput3+0x60>)
 800289c:	f002 f9ee 	bl	8004c7c <HAL_GPIO_ReadPin>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <StartReadInput3+0x58>)
 80028a6:	72da      	strb	r2, [r3, #11]
    osDelay(1);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f003 fdc1 	bl	8006430 <osDelay>
	  inputs[8] = HAL_GPIO_ReadPin(OUT1_OP8_GPIO_Port, OUT1_OP9_Pin);
 80028ae:	e7d9      	b.n	8002864 <StartReadInput3+0x8>
 80028b0:	40010800 	.word	0x40010800
 80028b4:	2000023c 	.word	0x2000023c
 80028b8:	40011000 	.word	0x40011000
 80028bc:	40010c00 	.word	0x40010c00

080028c0 <StartReadInput4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput4 */
void StartReadInput4(void *argument)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput4 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[12] = HAL_GPIO_ReadPin(OUT1_OP13_GPIO_Port, OUT1_OP13_Pin);
 80028c8:	2140      	movs	r1, #64	; 0x40
 80028ca:	4811      	ldr	r0, [pc, #68]	; (8002910 <StartReadInput4+0x50>)
 80028cc:	f002 f9d6 	bl	8004c7c <HAL_GPIO_ReadPin>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <StartReadInput4+0x54>)
 80028d6:	731a      	strb	r2, [r3, #12]
	  inputs[13] = HAL_GPIO_ReadPin(OUT1_OP14_GPIO_Port, OUT1_OP14_Pin);
 80028d8:	2120      	movs	r1, #32
 80028da:	480d      	ldr	r0, [pc, #52]	; (8002910 <StartReadInput4+0x50>)
 80028dc:	f002 f9ce 	bl	8004c7c <HAL_GPIO_ReadPin>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <StartReadInput4+0x54>)
 80028e6:	735a      	strb	r2, [r3, #13]
	  inputs[14] = HAL_GPIO_ReadPin(OUT1_OP15_GPIO_Port, OUT1_OP15_Pin);
 80028e8:	2108      	movs	r1, #8
 80028ea:	4809      	ldr	r0, [pc, #36]	; (8002910 <StartReadInput4+0x50>)
 80028ec:	f002 f9c6 	bl	8004c7c <HAL_GPIO_ReadPin>
 80028f0:	4603      	mov	r3, r0
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <StartReadInput4+0x54>)
 80028f6:	739a      	strb	r2, [r3, #14]
	  inputs[15] = HAL_GPIO_ReadPin(OUT1_OP16_GPIO_Port, OUT1_OP16_Pin);
 80028f8:	2110      	movs	r1, #16
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <StartReadInput4+0x50>)
 80028fc:	f002 f9be 	bl	8004c7c <HAL_GPIO_ReadPin>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <StartReadInput4+0x54>)
 8002906:	73da      	strb	r2, [r3, #15]
    osDelay(1);
 8002908:	2001      	movs	r0, #1
 800290a:	f003 fd91 	bl	8006430 <osDelay>
	  inputs[12] = HAL_GPIO_ReadPin(OUT1_OP13_GPIO_Port, OUT1_OP13_Pin);
 800290e:	e7db      	b.n	80028c8 <StartReadInput4+0x8>
 8002910:	40010c00 	.word	0x40010c00
 8002914:	2000023c 	.word	0x2000023c

08002918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800292a:	f001 fd03 	bl	8004334 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40012c00 	.word	0x40012c00

0800293c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <HAL_MspInit+0x68>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <HAL_MspInit+0x68>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6193      	str	r3, [r2, #24]
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_MspInit+0x68>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_MspInit+0x68>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4a11      	ldr	r2, [pc, #68]	; (80029b0 <HAL_MspInit+0x68>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002970:	61d3      	str	r3, [r2, #28]
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_MspInit+0x68>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	210f      	movs	r1, #15
 8002982:	f06f 0001 	mvn.w	r0, #1
 8002986:	f001 fdc8 	bl	800451a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_MspInit+0x6c>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <HAL_MspInit+0x6c>)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010000 	.word	0x40010000

080029b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <HAL_I2C_MspInit+0x74>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d124      	bne.n	8002a22 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_I2C_MspInit+0x78>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <HAL_I2C_MspInit+0x78>)
 80029de:	f043 0308 	orr.w	r3, r3, #8
 80029e2:	6193      	str	r3, [r2, #24]
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_I2C_MspInit+0x78>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029f6:	2312      	movs	r3, #18
 80029f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fe:	f107 0310 	add.w	r3, r7, #16
 8002a02:	4619      	mov	r1, r3
 8002a04:	480b      	ldr	r0, [pc, #44]	; (8002a34 <HAL_I2C_MspInit+0x7c>)
 8002a06:	f001 ffdf 	bl	80049c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_I2C_MspInit+0x78>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <HAL_I2C_MspInit+0x78>)
 8002a10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a14:	61d3      	str	r3, [r2, #28]
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_I2C_MspInit+0x78>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a22:	bf00      	nop
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40005800 	.word	0x40005800
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40010c00 	.word	0x40010c00

08002a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_SPI_MspInit+0x8c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d131      	bne.n	8002abc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_SPI_MspInit+0x90>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <HAL_SPI_MspInit+0x90>)
 8002a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a62:	61d3      	str	r3, [r2, #28]
 8002a64:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_SPI_MspInit+0x90>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a70:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_SPI_MspInit+0x90>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <HAL_SPI_MspInit+0x90>)
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_SPI_MspInit+0x90>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8002a88:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a92:	2303      	movs	r3, #3
 8002a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a96:	f107 0310 	add.w	r3, r7, #16
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	480b      	ldr	r0, [pc, #44]	; (8002acc <HAL_SPI_MspInit+0x94>)
 8002a9e:	f001 ff93 	bl	80049c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8002aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8002ab0:	f107 0310 	add.w	r3, r7, #16
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4805      	ldr	r0, [pc, #20]	; (8002acc <HAL_SPI_MspInit+0x94>)
 8002ab8:	f001 ff86 	bl	80049c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002abc:	bf00      	nop
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40003800 	.word	0x40003800
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40010c00 	.word	0x40010c00

08002ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08c      	sub	sp, #48	; 0x30
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	2019      	movs	r0, #25
 8002ae6:	f001 fd18 	bl	800451a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002aea:	2019      	movs	r0, #25
 8002aec:	f001 fd31 	bl	8004552 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <HAL_InitTick+0x9c>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <HAL_InitTick+0x9c>)
 8002af6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002afa:	6193      	str	r3, [r2, #24]
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_InitTick+0x9c>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b08:	f107 0210 	add.w	r2, r7, #16
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 fe18 	bl	8005748 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b18:	f002 fe02 	bl	8005720 <HAL_RCC_GetPCLK2Freq>
 8002b1c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <HAL_InitTick+0xa0>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0c9b      	lsrs	r3, r3, #18
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_InitTick+0xa4>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_InitTick+0xa8>)
 8002b30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_InitTick+0xa4>)
 8002b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <HAL_InitTick+0xa4>)
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_InitTick+0xa4>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_InitTick+0xa4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002b4c:	4809      	ldr	r0, [pc, #36]	; (8002b74 <HAL_InitTick+0xa4>)
 8002b4e:	f003 f915 	bl	8005d7c <HAL_TIM_Base_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002b58:	4806      	ldr	r0, [pc, #24]	; (8002b74 <HAL_InitTick+0xa4>)
 8002b5a:	f003 f967 	bl	8005e2c <HAL_TIM_Base_Start_IT>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	e000      	b.n	8002b64 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3730      	adds	r7, #48	; 0x30
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	431bde83 	.word	0x431bde83
 8002b74:	20002f88 	.word	0x20002f88
 8002b78:	40012c00 	.word	0x40012c00

08002b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <HardFault_Handler+0x4>

08002b8e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <MemManage_Handler+0x4>

08002b94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <BusFault_Handler+0x4>

08002b9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <UsageFault_Handler+0x4>

08002ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <TIM1_UP_IRQHandler+0x10>)
 8002bb2:	f003 f98d 	bl	8005ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20002f88 	.word	0x20002f88

08002bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <_sbrk+0x5c>)
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <_sbrk+0x60>)
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <_sbrk+0x64>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <_sbrk+0x64>)
 8002bde:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <_sbrk+0x68>)
 8002be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <_sbrk+0x64>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d207      	bcs.n	8002c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf0:	f005 ffa8 	bl	8008b44 <__errno>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	230c      	movs	r3, #12
 8002bf8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	e009      	b.n	8002c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <_sbrk+0x64>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <_sbrk+0x64>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <_sbrk+0x64>)
 8002c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c12:	68fb      	ldr	r3, [r7, #12]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20005000 	.word	0x20005000
 8002c20:	00000400 	.word	0x00000400
 8002c24:	2000024c 	.word	0x2000024c
 8002c28:	20003040 	.word	0x20003040

08002c2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c3a:	e003      	b.n	8002c44 <LoopCopyDataInit>

08002c3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c42:	3104      	adds	r1, #4

08002c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c44:	480a      	ldr	r0, [pc, #40]	; (8002c70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c4c:	d3f6      	bcc.n	8002c3c <CopyDataInit>
  ldr r2, =_sbss
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c50:	e002      	b.n	8002c58 <LoopFillZerobss>

08002c52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c54:	f842 3b04 	str.w	r3, [r2], #4

08002c58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c5c:	d3f9      	bcc.n	8002c52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c5e:	f7ff ffe5 	bl	8002c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c62:	f005 ff75 	bl	8008b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c66:	f7fd fa7b 	bl	8000160 <main>
  bx lr
 8002c6a:	4770      	bx	lr
  ldr r3, =_sidata
 8002c6c:	0800a644 	.word	0x0800a644
  ldr r0, =_sdata
 8002c70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c74:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 8002c78:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 8002c7c:	2000303c 	.word	0x2000303c

08002c80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c80:	e7fe      	b.n	8002c80 <ADC1_2_IRQHandler>
	...

08002c84 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	4623      	mov	r3, r4
 8002c94:	71fb      	strb	r3, [r7, #7]
 8002c96:	4603      	mov	r3, r0
 8002c98:	71bb      	strb	r3, [r7, #6]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	80bb      	strh	r3, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d902      	bls.n	8002cae <socket+0x2a>
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	e0d3      	b.n	8002e56 <socket+0x1d2>
	switch(protocol)
 8002cae:	79bb      	ldrb	r3, [r7, #6]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	db03      	blt.n	8002cbc <socket+0x38>
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	dd04      	ble.n	8002cc2 <socket+0x3e>
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d002      	beq.n	8002cc2 <socket+0x3e>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002cbc:	f06f 0304 	mvn.w	r3, #4
 8002cc0:	e0c9      	b.n	8002e56 <socket+0x1d2>
         break;
 8002cc2:	bf00      	nop
	}
	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 0306 	and.w	r3, r3, #6
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <socket+0x50>
 8002cce:	f06f 0305 	mvn.w	r3, #5
 8002cd2:	e0c0      	b.n	8002e56 <socket+0x1d2>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif

	if(flag != 0)
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d025      	beq.n	8002d26 <socket+0xa2>
	{
   	switch(protocol)
 8002cda:	79bb      	ldrb	r3, [r7, #6]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d002      	beq.n	8002ce6 <socket+0x62>
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d008      	beq.n	8002cf6 <socket+0x72>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002ce4:	e024      	b.n	8002d30 <socket+0xac>
   	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d11c      	bne.n	8002d2a <socket+0xa6>
 8002cf0:	f06f 0305 	mvn.w	r3, #5
 8002cf4:	e0af      	b.n	8002e56 <socket+0x1d2>
   	      if(flag & SF_IGMP_VER2)
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <socket+0x8a>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	db02      	blt.n	8002d0e <socket+0x8a>
 8002d08:	f06f 0305 	mvn.w	r3, #5
 8002d0c:	e0a3      	b.n	8002e56 <socket+0x1d2>
      	      if(flag & SF_UNI_BLOCK)
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <socket+0xaa>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db06      	blt.n	8002d2e <socket+0xaa>
 8002d20:	f06f 0305 	mvn.w	r3, #5
 8002d24:	e097      	b.n	8002e56 <socket+0x1d2>
   	}
   }
 8002d26:	bf00      	nop
 8002d28:	e002      	b.n	8002d30 <socket+0xac>
   	      break;
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <socket+0xac>
   	      break;
 8002d2e:	bf00      	nop
	close(sn);
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f89e 	bl	8002e74 <close>
	setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4618      	mov	r0, r3
 8002d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d46:	f023 030f 	bic.w	r3, r3, #15
 8002d4a:	b25a      	sxtb	r2, r3
 8002d4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4619      	mov	r1, r3
 8002d58:	f000 fba4 	bl	80034a4 <WIZCHIP_WRITE>
	if(!port)
 8002d5c:	88bb      	ldrh	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d110      	bne.n	8002d84 <socket+0x100>
	{
	   port = sock_any_port++;
 8002d62:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <socket+0x1dc>)
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	b291      	uxth	r1, r2
 8002d6a:	4a3d      	ldr	r2, [pc, #244]	; (8002e60 <socket+0x1dc>)
 8002d6c:	8011      	strh	r1, [r2, #0]
 8002d6e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002d70:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <socket+0x1dc>)
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d103      	bne.n	8002d84 <socket+0x100>
 8002d7c:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <socket+0x1dc>)
 8002d7e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002d82:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	3301      	adds	r3, #1
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d90:	461a      	mov	r2, r3
 8002d92:	88bb      	ldrh	r3, [r7, #4]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f000 fb81 	bl	80034a4 <WIZCHIP_WRITE>
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	3301      	adds	r3, #1
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	461a      	mov	r2, r3
 8002db0:	88bb      	ldrh	r3, [r7, #4]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f000 fb74 	bl	80034a4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fb6a 	bl	80034a4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002dd0:	bf00      	nop
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fb30 	bl	8003444 <WIZCHIP_READ>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f3      	bne.n	8002dd2 <socket+0x14e>
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 0201 	and.w	r2, r3, #1
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	b21a      	sxth	r2, r3
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <socket+0x1e0>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b21b      	sxth	r3, r3
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <socket+0x1e0>)
 8002e06:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	b21a      	sxth	r2, r3
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <socket+0x1e4>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b21b      	sxth	r3, r3
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	b21b      	sxth	r3, r3
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <socket+0x1e4>)
 8002e24:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <socket+0x1e8>)
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = 0;
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	4a0f      	ldr	r2, [pc, #60]	; (8002e70 <socket+0x1ec>)
 8002e34:	2100      	movs	r1, #0
 8002e36:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002e38:	bf00      	nop
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	3301      	adds	r3, #1
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fafc 	bl	8003444 <WIZCHIP_READ>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f3      	beq.n	8002e3a <socket+0x1b6>
   return (int8_t)sn;
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd90      	pop	{r4, r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000020 	.word	0x20000020
 8002e64:	20000250 	.word	0x20000250
 8002e68:	20000252 	.word	0x20000252
 8002e6c:	20000254 	.word	0x20000254
 8002e70:	20000264 	.word	0x20000264

08002e74 <close>:

int8_t close(uint8_t sn)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d902      	bls.n	8002e8a <close+0x16>
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295
 8002e88:	e046      	b.n	8002f18 <close+0xa4>

	setSn_CR(sn,Sn_CR_CLOSE);
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	3301      	adds	r3, #1
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e96:	2110      	movs	r1, #16
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fb03 	bl	80034a4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002e9e:	bf00      	nop
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fac9 	bl	8003444 <WIZCHIP_READ>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f3      	bne.n	8002ea0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ec4:	211f      	movs	r1, #31
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 faec 	bl	80034a4 <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	b21a      	sxth	r2, r3
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <close+0xac>)
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b21b      	sxth	r3, r3
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <close+0xac>)
 8002ee8:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <close+0xb0>)
 8002eee:	2100      	movs	r1, #0
 8002ef0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <close+0xb4>)
 8002ef8:	2100      	movs	r1, #0
 8002efa:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002efc:	bf00      	nop
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	3301      	adds	r3, #1
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fa9a 	bl	8003444 <WIZCHIP_READ>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f3      	bne.n	8002efe <close+0x8a>
	return SOCK_OK;
 8002f16:	2301      	movs	r3, #1
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000252 	.word	0x20000252
 8002f24:	20000254 	.word	0x20000254
 8002f28:	20000264 	.word	0x20000264

08002f2c <listen>:

int8_t listen(uint8_t sn)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d902      	bls.n	8002f42 <listen+0x16>
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f40:	e055      	b.n	8002fee <listen+0xc2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	3301      	adds	r3, #1
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fa7a 	bl	8003444 <WIZCHIP_READ>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d002      	beq.n	8002f60 <listen+0x34>
 8002f5a:	f06f 0304 	mvn.w	r3, #4
 8002f5e:	e046      	b.n	8002fee <listen+0xc2>
	CHECK_SOCKINIT();
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	3301      	adds	r3, #1
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fa69 	bl	8003444 <WIZCHIP_READ>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b13      	cmp	r3, #19
 8002f76:	d002      	beq.n	8002f7e <listen+0x52>
 8002f78:	f06f 0302 	mvn.w	r3, #2
 8002f7c:	e037      	b.n	8002fee <listen+0xc2>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	3301      	adds	r3, #1
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fa89 	bl	80034a4 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8002f92:	bf00      	nop
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	3301      	adds	r3, #1
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fa4f 	bl	8003444 <WIZCHIP_READ>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f3      	bne.n	8002f94 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002fac:	e012      	b.n	8002fd4 <listen+0xa8>
   {
      if(getSn_CR(sn) == SOCK_CLOSED)
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fa42 	bl	8003444 <WIZCHIP_READ>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <listen+0xa8>
      {
         close(sn);
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff53 	bl	8002e74 <close>
         return SOCKERR_SOCKCLOSED;
 8002fce:	f06f 0303 	mvn.w	r3, #3
 8002fd2:	e00c      	b.n	8002fee <listen+0xc2>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	3301      	adds	r3, #1
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fa2f 	bl	8003444 <WIZCHIP_READ>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b14      	cmp	r3, #20
 8002fea:	d1e0      	bne.n	8002fae <listen+0x82>
      }
   }
   return SOCK_OK;
 8002fec:	2301      	movs	r3, #1
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <disconnect>:

   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d902      	bls.n	800300e <disconnect+0x16>
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
 800300c:	e062      	b.n	80030d4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	3301      	adds	r3, #1
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fa14 	bl	8003444 <WIZCHIP_READ>
 800301c:	4603      	mov	r3, r0
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	2b01      	cmp	r3, #1
 8003024:	d002      	beq.n	800302c <disconnect+0x34>
 8003026:	f06f 0304 	mvn.w	r3, #4
 800302a:	e053      	b.n	80030d4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	3301      	adds	r3, #1
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003038:	2108      	movs	r1, #8
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fa32 	bl	80034a4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003040:	bf00      	nop
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	3301      	adds	r3, #1
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f9f8 	bl	8003444 <WIZCHIP_READ>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f3      	bne.n	8003042 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2201      	movs	r2, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	b21b      	sxth	r3, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	b21a      	sxth	r2, r3
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <disconnect+0xe4>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b21b      	sxth	r3, r3
 800306e:	4013      	ands	r3, r2
 8003070:	b21b      	sxth	r3, r3
 8003072:	b29a      	uxth	r2, r3
 8003074:	4b19      	ldr	r3, [pc, #100]	; (80030dc <disconnect+0xe4>)
 8003076:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <disconnect+0xe8>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	fa42 f303 	asr.w	r3, r2, r3
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d016      	beq.n	80030ba <disconnect+0xc2>
 800308c:	2300      	movs	r3, #0
 800308e:	e021      	b.n	80030d4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3301      	adds	r3, #1
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f9d1 	bl	8003444 <WIZCHIP_READ>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <disconnect+0xc2>
	   {
	      close(sn);
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fee0 	bl	8002e74 <close>
	      return SOCKERR_TIMEOUT;
 80030b4:	f06f 030c 	mvn.w	r3, #12
 80030b8:	e00c      	b.n	80030d4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	3301      	adds	r3, #1
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f9bc 	bl	8003444 <WIZCHIP_READ>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1de      	bne.n	8003090 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80030d2:	2301      	movs	r3, #1
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000252 	.word	0x20000252
 80030e0:	20000250 	.word	0x20000250

080030e4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	71fb      	strb	r3, [r7, #7]
 80030f0:	4613      	mov	r3, r2
 80030f2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	81bb      	strh	r3, [r7, #12]

   CHECK_SOCKNUM();
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d902      	bls.n	8003108 <send+0x24>
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	e0de      	b.n	80032c6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	3301      	adds	r3, #1
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f997 	bl	8003444 <WIZCHIP_READ>
 8003116:	4603      	mov	r3, r0
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	2b01      	cmp	r3, #1
 800311e:	d002      	beq.n	8003126 <send+0x42>
 8003120:	f06f 0304 	mvn.w	r3, #4
 8003124:	e0cf      	b.n	80032c6 <send+0x1e2>
   CHECK_SOCKDATA();
 8003126:	88bb      	ldrh	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <send+0x4e>
 800312c:	f06f 030d 	mvn.w	r3, #13
 8003130:	e0c9      	b.n	80032c6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	3301      	adds	r3, #1
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f980 	bl	8003444 <WIZCHIP_READ>
 8003144:	4603      	mov	r3, r0
 8003146:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b17      	cmp	r3, #23
 800314c:	d005      	beq.n	800315a <send+0x76>
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b1c      	cmp	r3, #28
 8003152:	d002      	beq.n	800315a <send+0x76>
 8003154:	f06f 0306 	mvn.w	r3, #6
 8003158:	e0b5      	b.n	80032c6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800315a:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <send+0x1ec>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	fa42 f303 	asr.w	r3, r2, r3
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d039      	beq.n	80031e2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	3301      	adds	r3, #1
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f962 	bl	8003444 <WIZCHIP_READ>
 8003180:	4603      	mov	r3, r0
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d019      	beq.n	80031c6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	3301      	adds	r3, #1
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800319e:	2110      	movs	r1, #16
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 f97f 	bl	80034a4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	2201      	movs	r2, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	b21b      	sxth	r3, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	b21a      	sxth	r2, r3
 80031b4:	4b46      	ldr	r3, [pc, #280]	; (80032d0 <send+0x1ec>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b21b      	sxth	r3, r3
 80031ba:	4013      	ands	r3, r2
 80031bc:	b21b      	sxth	r3, r3
 80031be:	b29a      	uxth	r2, r3
 80031c0:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <send+0x1ec>)
 80031c2:	801a      	strh	r2, [r3, #0]
 80031c4:	e00d      	b.n	80031e2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d006      	beq.n	80031de <send+0xfa>
      {
         close(sn);
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fe4e 	bl	8002e74 <close>
         return SOCKERR_TIMEOUT;
 80031d8:	f06f 030c 	mvn.w	r3, #12
 80031dc:	e073      	b.n	80032c6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80031de:	2300      	movs	r3, #0
 80031e0:	e071      	b.n	80032c6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	3301      	adds	r3, #1
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f928 	bl	8003444 <WIZCHIP_READ>
 80031f4:	4603      	mov	r3, r0
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	029b      	lsls	r3, r3, #10
 80031fa:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80031fc:	88ba      	ldrh	r2, [r7, #4]
 80031fe:	89bb      	ldrh	r3, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d901      	bls.n	8003208 <send+0x124>
 8003204:	89bb      	ldrh	r3, [r7, #12]
 8003206:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fa0c 	bl	8003628 <getSn_TX_FSR>
 8003210:	4603      	mov	r3, r0
 8003212:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	3301      	adds	r3, #1
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f90f 	bl	8003444 <WIZCHIP_READ>
 8003226:	4603      	mov	r3, r0
 8003228:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b17      	cmp	r3, #23
 800322e:	d009      	beq.n	8003244 <send+0x160>
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b1c      	cmp	r3, #28
 8003234:	d006      	beq.n	8003244 <send+0x160>
      {
         close(sn);
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fe1b 	bl	8002e74 <close>
         return SOCKERR_SOCKSTATUS;
 800323e:	f06f 0306 	mvn.w	r3, #6
 8003242:	e040      	b.n	80032c6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <send+0x1f0>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	fa42 f303 	asr.w	r3, r2, r3
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <send+0x180>
 8003258:	88ba      	ldrh	r2, [r7, #4]
 800325a:	89bb      	ldrh	r3, [r7, #12]
 800325c:	429a      	cmp	r2, r3
 800325e:	d901      	bls.n	8003264 <send+0x180>
 8003260:	2300      	movs	r3, #0
 8003262:	e030      	b.n	80032c6 <send+0x1e2>
      if(len <= freesize) break;
 8003264:	88ba      	ldrh	r2, [r7, #4]
 8003266:	89bb      	ldrh	r3, [r7, #12]
 8003268:	429a      	cmp	r2, r3
 800326a:	d900      	bls.n	800326e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800326c:	e7cc      	b.n	8003208 <send+0x124>
      if(len <= freesize) break;
 800326e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003270:	88ba      	ldrh	r2, [r7, #4]
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	6839      	ldr	r1, [r7, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fa6c 	bl	8003754 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	3301      	adds	r3, #1
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003288:	2120      	movs	r1, #32
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f90a 	bl	80034a4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8003290:	bf00      	nop
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	3301      	adds	r3, #1
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f8d0 	bl	8003444 <WIZCHIP_READ>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f3      	bne.n	8003292 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	2201      	movs	r2, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	b21a      	sxth	r2, r3
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <send+0x1ec>)
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	b21b      	sxth	r3, r3
 80032ba:	4313      	orrs	r3, r2
 80032bc:	b21b      	sxth	r3, r3
 80032be:	b29a      	uxth	r2, r3
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <send+0x1ec>)
 80032c2:	801a      	strh	r2, [r3, #0]
   return len;
 80032c4:	88bb      	ldrh	r3, [r7, #4]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000252 	.word	0x20000252
 80032d4:	20000250 	.word	0x20000250

080032d8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	6039      	str	r1, [r7, #0]
 80032e2:	71fb      	strb	r3, [r7, #7]
 80032e4:	4613      	mov	r3, r2
 80032e6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	81bb      	strh	r3, [r7, #12]
   CHECK_SOCKNUM();
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d902      	bls.n	80032fc <recv+0x24>
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	e09c      	b.n	8003436 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	3301      	adds	r3, #1
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4618      	mov	r0, r3
 8003306:	f000 f89d 	bl	8003444 <WIZCHIP_READ>
 800330a:	4603      	mov	r3, r0
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	2b01      	cmp	r3, #1
 8003312:	d002      	beq.n	800331a <recv+0x42>
 8003314:	f06f 0304 	mvn.w	r3, #4
 8003318:	e08d      	b.n	8003436 <recv+0x15e>
   CHECK_SOCKDATA();
 800331a:	88bb      	ldrh	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <recv+0x4e>
 8003320:	f06f 030d 	mvn.w	r3, #13
 8003324:	e087      	b.n	8003436 <recv+0x15e>

   recvsize = getSn_RxMAX(sn);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	3301      	adds	r3, #1
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f886 	bl	8003444 <WIZCHIP_READ>
 8003338:	4603      	mov	r3, r0
 800333a:	b29b      	uxth	r3, r3
 800333c:	029b      	lsls	r3, r3, #10
 800333e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003340:	89ba      	ldrh	r2, [r7, #12]
 8003342:	88bb      	ldrh	r3, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	d201      	bcs.n	800334c <recv+0x74>
 8003348:	89bb      	ldrh	r3, [r7, #12]
 800334a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f9b5 	bl	80036be <getSn_RX_RSR>
 8003354:	4603      	mov	r3, r0
 8003356:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	3301      	adds	r3, #1
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f86d 	bl	8003444 <WIZCHIP_READ>
 800336a:	4603      	mov	r3, r0
 800336c:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b17      	cmp	r3, #23
 8003372:	d026      	beq.n	80033c2 <recv+0xea>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b1c      	cmp	r3, #28
 8003378:	d11c      	bne.n	80033b4 <recv+0xdc>
         {
            if(recvsize != 0) break;
 800337a:	89bb      	ldrh	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d133      	bne.n	80033e8 <recv+0x110>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f950 	bl	8003628 <getSn_TX_FSR>
 8003388:	4603      	mov	r3, r0
 800338a:	461c      	mov	r4, r3
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	3301      	adds	r3, #1
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f853 	bl	8003444 <WIZCHIP_READ>
 800339e:	4603      	mov	r3, r0
 80033a0:	029b      	lsls	r3, r3, #10
 80033a2:	429c      	cmp	r4, r3
 80033a4:	d10d      	bne.n	80033c2 <recv+0xea>
            {
               close(sn);
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fd63 	bl	8002e74 <close>
               return SOCKERR_SOCKSTATUS;
 80033ae:	f06f 0306 	mvn.w	r3, #6
 80033b2:	e040      	b.n	8003436 <recv+0x15e>
            }
         }
         else
         {
            close(sn);
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fd5c 	bl	8002e74 <close>
            return SOCKERR_SOCKSTATUS;
 80033bc:	f06f 0306 	mvn.w	r3, #6
 80033c0:	e039      	b.n	8003436 <recv+0x15e>
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80033c2:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <recv+0x168>)
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	fa42 f303 	asr.w	r3, r2, r3
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d004      	beq.n	80033e0 <recv+0x108>
 80033d6:	89bb      	ldrh	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <recv+0x108>
 80033dc:	2300      	movs	r3, #0
 80033de:	e02a      	b.n	8003436 <recv+0x15e>
      if(recvsize != 0) break;
 80033e0:	89bb      	ldrh	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <recv+0x114>
      recvsize = getSn_RX_RSR(sn);
 80033e6:	e7b1      	b.n	800334c <recv+0x74>
            if(recvsize != 0) break;
 80033e8:	bf00      	nop
 80033ea:	e000      	b.n	80033ee <recv+0x116>
      if(recvsize != 0) break;
 80033ec:	bf00      	nop
   };
   if(recvsize < len) len = recvsize;
 80033ee:	89ba      	ldrh	r2, [r7, #12]
 80033f0:	88bb      	ldrh	r3, [r7, #4]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d201      	bcs.n	80033fa <recv+0x122>
 80033f6:	89bb      	ldrh	r3, [r7, #12]
 80033f8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80033fa:	88ba      	ldrh	r2, [r7, #4]
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fa03 	bl	800380c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	3301      	adds	r3, #1
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003412:	2140      	movs	r1, #64	; 0x40
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f845 	bl	80034a4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800341a:	bf00      	nop
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	3301      	adds	r3, #1
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003428:	4618      	mov	r0, r3
 800342a:	f000 f80b 	bl	8003444 <WIZCHIP_READ>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f3      	bne.n	800341c <recv+0x144>
   return len;
 8003434:	88bb      	ldrh	r3, [r7, #4]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	bf00      	nop
 8003440:	20000250 	.word	0x20000250

08003444 <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 800344c:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <WIZCHIP_READ+0x5c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003452:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <WIZCHIP_READ+0x5c>)
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	4798      	blx	r3
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <WIZCHIP_READ+0x5c>)
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	0c12      	lsrs	r2, r2, #16
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	4610      	mov	r0, r2
 8003464:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <WIZCHIP_READ+0x5c>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	0a12      	lsrs	r2, r2, #8
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	4610      	mov	r0, r2
 8003472:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <WIZCHIP_READ+0x5c>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	4610      	mov	r0, r2
 800347e:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <WIZCHIP_READ+0x5c>)
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	4798      	blx	r3
 8003486:	4603      	mov	r3, r0
 8003488:	73fb      	strb	r3, [r7, #15]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"
#endif

   WIZCHIP.CS._deselect();
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <WIZCHIP_READ+0x5c>)
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <WIZCHIP_READ+0x5c>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4798      	blx	r3
   return ret;
 8003496:	7bfb      	ldrb	r3, [r7, #15]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000024 	.word	0x20000024

080034a4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	70fb      	strb	r3, [r7, #3]
    WIZCHIP_CRITICAL_ENTER();
 80034b0:	4b16      	ldr	r3, [pc, #88]	; (800350c <WIZCHIP_WRITE+0x68>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4798      	blx	r3
    WIZCHIP.CS._select();
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <WIZCHIP_WRITE+0x68>)
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	607b      	str	r3, [r7, #4]
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <WIZCHIP_WRITE+0x68>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	0c12      	lsrs	r2, r2, #16
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	4610      	mov	r0, r2
 80034d0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <WIZCHIP_WRITE+0x68>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	0a12      	lsrs	r2, r2, #8
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	4610      	mov	r0, r2
 80034de:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <WIZCHIP_WRITE+0x68>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	4610      	mov	r0, r2
 80034ea:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <WIZCHIP_WRITE+0x68>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	4610      	mov	r0, r2
 80034f4:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <WIZCHIP_WRITE+0x68>)
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <WIZCHIP_WRITE+0x68>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4798      	blx	r3
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000024 	.word	0x20000024

08003510 <WIZCHIP_READ_BUF>:

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 8003526:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <WIZCHIP_READ_BUF+0x84>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <WIZCHIP_READ_BUF+0x84>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <WIZCHIP_READ_BUF+0x84>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	0c12      	lsrs	r2, r2, #16
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	4610      	mov	r0, r2
 800353e:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003540:	4b14      	ldr	r3, [pc, #80]	; (8003594 <WIZCHIP_READ_BUF+0x84>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	0a12      	lsrs	r2, r2, #8
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	4610      	mov	r0, r2
 800354c:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <WIZCHIP_READ_BUF+0x84>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	4610      	mov	r0, r2
 8003558:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 800355a:	2300      	movs	r3, #0
 800355c:	82fb      	strh	r3, [r7, #22]
 800355e:	e00a      	b.n	8003576 <WIZCHIP_READ_BUF+0x66>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <WIZCHIP_READ_BUF+0x84>)
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	8afa      	ldrh	r2, [r7, #22]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	188c      	adds	r4, r1, r2
 800356a:	4798      	blx	r3
 800356c:	4603      	mov	r3, r0
 800356e:	7023      	strb	r3, [r4, #0]
      for(i = 0; i < len; i++,j)
 8003570:	8afb      	ldrh	r3, [r7, #22]
 8003572:	3301      	adds	r3, #1
 8003574:	82fb      	strh	r3, [r7, #22]
 8003576:	8afa      	ldrh	r2, [r7, #22]
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	429a      	cmp	r2, r3
 800357c:	d3f0      	bcc.n	8003560 <WIZCHIP_READ_BUF+0x50>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <WIZCHIP_READ_BUF+0x84>)
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <WIZCHIP_READ_BUF+0x84>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4798      	blx	r3
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	20000024 	.word	0x20000024

08003598 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <WIZCHIP_WRITE_BUF+0x8c>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <WIZCHIP_WRITE_BUF+0x8c>)
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	60fb      	str	r3, [r7, #12]
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80035c2:	4b18      	ldr	r3, [pc, #96]	; (8003624 <WIZCHIP_WRITE_BUF+0x8c>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	0c12      	lsrs	r2, r2, #16
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	4610      	mov	r0, r2
 80035ce:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80035d0:	4b14      	ldr	r3, [pc, #80]	; (8003624 <WIZCHIP_WRITE_BUF+0x8c>)
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	0a12      	lsrs	r2, r2, #8
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	4610      	mov	r0, r2
 80035dc:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <WIZCHIP_WRITE_BUF+0x8c>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	4610      	mov	r0, r2
 80035e8:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 80035ea:	2300      	movs	r3, #0
 80035ec:	82fb      	strh	r3, [r7, #22]
 80035ee:	e00a      	b.n	8003606 <WIZCHIP_WRITE_BUF+0x6e>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <WIZCHIP_WRITE_BUF+0x8c>)
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	8afa      	ldrh	r2, [r7, #22]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	440a      	add	r2, r1
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	4610      	mov	r0, r2
 80035fe:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8003600:	8afb      	ldrh	r3, [r7, #22]
 8003602:	3301      	adds	r3, #1
 8003604:	82fb      	strh	r3, [r7, #22]
 8003606:	8afa      	ldrh	r2, [r7, #22]
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	429a      	cmp	r2, r3
 800360c:	d3f0      	bcc.n	80035f0 <WIZCHIP_WRITE_BUF+0x58>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <WIZCHIP_WRITE_BUF+0x8c>)
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <WIZCHIP_WRITE_BUF+0x8c>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4798      	blx	r3
}
 800361a:	bf00      	nop
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000024 	.word	0x20000024

08003628 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003632:	2300      	movs	r3, #0
 8003634:	81fb      	strh	r3, [r7, #14]
 8003636:	2300      	movs	r3, #0
 8003638:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	3301      	adds	r3, #1
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fefc 	bl	8003444 <WIZCHIP_READ>
 800364c:	4603      	mov	r3, r0
 800364e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003650:	89bb      	ldrh	r3, [r7, #12]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	b29c      	uxth	r4, r3
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	3301      	adds	r3, #1
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff feee 	bl	8003444 <WIZCHIP_READ>
 8003668:	4603      	mov	r3, r0
 800366a:	b29b      	uxth	r3, r3
 800366c:	4423      	add	r3, r4
 800366e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003670:	89bb      	ldrh	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01a      	beq.n	80036ac <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	3301      	adds	r3, #1
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fede 	bl	8003444 <WIZCHIP_READ>
 8003688:	4603      	mov	r3, r0
 800368a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800368c:	89fb      	ldrh	r3, [r7, #14]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	b29c      	uxth	r4, r3
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	3301      	adds	r3, #1
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fed0 	bl	8003444 <WIZCHIP_READ>
 80036a4:	4603      	mov	r3, r0
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	4423      	add	r3, r4
 80036aa:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80036ac:	89fa      	ldrh	r2, [r7, #14]
 80036ae:	89bb      	ldrh	r3, [r7, #12]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1c2      	bne.n	800363a <getSn_TX_FSR+0x12>
   return val;
 80036b4:	89fb      	ldrh	r3, [r7, #14]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd90      	pop	{r4, r7, pc}

080036be <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80036be:	b590      	push	{r4, r7, lr}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	81fb      	strh	r3, [r7, #14]
 80036cc:	2300      	movs	r3, #0
 80036ce:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	3301      	adds	r3, #1
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff feb1 	bl	8003444 <WIZCHIP_READ>
 80036e2:	4603      	mov	r3, r0
 80036e4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80036e6:	89bb      	ldrh	r3, [r7, #12]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	b29c      	uxth	r4, r3
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	3301      	adds	r3, #1
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fea3 	bl	8003444 <WIZCHIP_READ>
 80036fe:	4603      	mov	r3, r0
 8003700:	b29b      	uxth	r3, r3
 8003702:	4423      	add	r3, r4
 8003704:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003706:	89bb      	ldrh	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01a      	beq.n	8003742 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	3301      	adds	r3, #1
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fe93 	bl	8003444 <WIZCHIP_READ>
 800371e:	4603      	mov	r3, r0
 8003720:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003722:	89fb      	ldrh	r3, [r7, #14]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	b29c      	uxth	r4, r3
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3301      	adds	r3, #1
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fe85 	bl	8003444 <WIZCHIP_READ>
 800373a:	4603      	mov	r3, r0
 800373c:	b29b      	uxth	r3, r3
 800373e:	4423      	add	r3, r4
 8003740:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003742:	89fa      	ldrh	r2, [r7, #14]
 8003744:	89bb      	ldrh	r3, [r7, #12]
 8003746:	429a      	cmp	r2, r3
 8003748:	d1c2      	bne.n	80036d0 <getSn_RX_RSR+0x12>
   return val;
 800374a:	89fb      	ldrh	r3, [r7, #14]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	bd90      	pop	{r4, r7, pc}

08003754 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
 8003760:	4613      	mov	r3, r2
 8003762:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	60bb      	str	r3, [r7, #8]
   if(len == 0)  return;
 800376c:	88bb      	ldrh	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d048      	beq.n	8003804 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	3301      	adds	r3, #1
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fe60 	bl	8003444 <WIZCHIP_READ>
 8003784:	4603      	mov	r3, r0
 8003786:	b29b      	uxth	r3, r3
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	b29c      	uxth	r4, r3
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	3301      	adds	r3, #1
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fe53 	bl	8003444 <WIZCHIP_READ>
 800379e:	4603      	mov	r3, r0
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	4423      	add	r3, r4
 80037a4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80037a6:	89fb      	ldrh	r3, [r7, #14]
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	79fa      	ldrb	r2, [r7, #7]
 80037ac:	0092      	lsls	r2, r2, #2
 80037ae:	3202      	adds	r2, #2
 80037b0:	00d2      	lsls	r2, r2, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80037b6:	88bb      	ldrh	r3, [r7, #4]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6839      	ldr	r1, [r7, #0]
 80037bc:	68b8      	ldr	r0, [r7, #8]
 80037be:	f7ff feeb 	bl	8003598 <WIZCHIP_WRITE_BUF>

   ptr += len;
 80037c2:	89fa      	ldrh	r2, [r7, #14]
 80037c4:	88bb      	ldrh	r3, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	3301      	adds	r3, #1
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80037d6:	461a      	mov	r2, r3
 80037d8:	89fb      	ldrh	r3, [r7, #14]
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	b29b      	uxth	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	4619      	mov	r1, r3
 80037e2:	4610      	mov	r0, r2
 80037e4:	f7ff fe5e 	bl	80034a4 <WIZCHIP_WRITE>
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	3301      	adds	r3, #1
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80037f4:	461a      	mov	r2, r3
 80037f6:	89fb      	ldrh	r3, [r7, #14]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f7ff fe51 	bl	80034a4 <WIZCHIP_WRITE>
 8003802:	e000      	b.n	8003806 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003804:	bf00      	nop
}
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	bd90      	pop	{r4, r7, pc}

0800380c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
 8003818:	4613      	mov	r3, r2
 800381a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]

   if(len == 0) return;
 8003824:	88bb      	ldrh	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d048      	beq.n	80038bc <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	3301      	adds	r3, #1
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fe04 	bl	8003444 <WIZCHIP_READ>
 800383c:	4603      	mov	r3, r0
 800383e:	b29b      	uxth	r3, r3
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	b29c      	uxth	r4, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	3301      	adds	r3, #1
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fdf7 	bl	8003444 <WIZCHIP_READ>
 8003856:	4603      	mov	r3, r0
 8003858:	b29b      	uxth	r3, r3
 800385a:	4423      	add	r3, r4
 800385c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800385e:	89fb      	ldrh	r3, [r7, #14]
 8003860:	021b      	lsls	r3, r3, #8
 8003862:	79fa      	ldrb	r2, [r7, #7]
 8003864:	0092      	lsls	r2, r2, #2
 8003866:	3203      	adds	r2, #3
 8003868:	00d2      	lsls	r2, r2, #3
 800386a:	4413      	add	r3, r2
 800386c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800386e:	88bb      	ldrh	r3, [r7, #4]
 8003870:	461a      	mov	r2, r3
 8003872:	6839      	ldr	r1, [r7, #0]
 8003874:	68b8      	ldr	r0, [r7, #8]
 8003876:	f7ff fe4b 	bl	8003510 <WIZCHIP_READ_BUF>
   ptr += len;
 800387a:	89fa      	ldrh	r2, [r7, #14]
 800387c:	88bb      	ldrh	r3, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	81fb      	strh	r3, [r7, #14]

   setSn_RX_RD(sn,ptr);
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	3301      	adds	r3, #1
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800388e:	461a      	mov	r2, r3
 8003890:	89fb      	ldrh	r3, [r7, #14]
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	b29b      	uxth	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f7ff fe02 	bl	80034a4 <WIZCHIP_WRITE>
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	3301      	adds	r3, #1
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80038ac:	461a      	mov	r2, r3
 80038ae:	89fb      	ldrh	r3, [r7, #14]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f7ff fdf5 	bl	80034a4 <WIZCHIP_WRITE>
 80038ba:	e000      	b.n	80038be <wiz_recv_data+0xb2>
   if(len == 0) return;
 80038bc:	bf00      	nop
}
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd90      	pop	{r4, r7, pc}

080038c4 <wizchip_cris_enter>:
/**
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_enter(void)           {};
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <wizchip_cris_exit>:
/**
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_exit(void)          {};
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <wizchip_cs_select>:
/**
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_select(void)            {};
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <wizchip_cs_deselect>:
/**
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_deselect(void)          {};
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <wizchip_bus_readbyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20140501 : Explict pointer type casting
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); };
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <wizchip_bus_writebyte>:
 * null function is called.
 */

//M20140501 : Explict pointer type casting
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*) AddrSel) = wb; };
void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; };
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	70fb      	strb	r3, [r7, #3]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <wizchip_spi_readbyte>:
/**
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_spi_readbyte(void)        {return 0;};
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
 800392c:	2300      	movs	r3, #0
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <wizchip_spi_writebyte>:
/**
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_spi_writebyte(uint8_t wb) {};
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
	...

0800394c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <reg_wizchip_cs_cbfunc+0x16>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <reg_wizchip_cs_cbfunc+0x3c>)
 8003964:	4a09      	ldr	r2, [pc, #36]	; (800398c <reg_wizchip_cs_cbfunc+0x40>)
 8003966:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003968:	4b07      	ldr	r3, [pc, #28]	; (8003988 <reg_wizchip_cs_cbfunc+0x3c>)
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <reg_wizchip_cs_cbfunc+0x44>)
 800396c:	615a      	str	r2, [r3, #20]
 800396e:	e005      	b.n	800397c <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003970:	4a05      	ldr	r2, [pc, #20]	; (8003988 <reg_wizchip_cs_cbfunc+0x3c>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8003976:	4a04      	ldr	r2, [pc, #16]	; (8003988 <reg_wizchip_cs_cbfunc+0x3c>)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6153      	str	r3, [r2, #20]
   }
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000024 	.word	0x20000024
 800398c:	080038dd 	.word	0x080038dd
 8003990:	080038e9 	.word	0x080038e9

08003994 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800399e:	bf00      	nop
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <reg_wizchip_spi_cbfunc+0x48>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f9      	beq.n	80039a0 <reg_wizchip_spi_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <reg_wizchip_spi_cbfunc+0x24>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <reg_wizchip_spi_cbfunc+0x48>)
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <reg_wizchip_spi_cbfunc+0x4c>)
 80039bc:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <reg_wizchip_spi_cbfunc+0x48>)
 80039c0:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <reg_wizchip_spi_cbfunc+0x50>)
 80039c2:	61da      	str	r2, [r3, #28]
 80039c4:	e005      	b.n	80039d2 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80039c6:	4a05      	ldr	r2, [pc, #20]	; (80039dc <reg_wizchip_spi_cbfunc+0x48>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80039cc:	4a03      	ldr	r2, [pc, #12]	; (80039dc <reg_wizchip_spi_cbfunc+0x48>)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	61d3      	str	r3, [r2, #28]
   }
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	20000024 	.word	0x20000024
 80039e0:	08003929 	.word	0x08003929
 80039e4:	08003937 	.word	0x08003937

080039e8 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	6039      	str	r1, [r7, #0]
 80039f2:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	75fb      	strb	r3, [r7, #23]
   uint8_t* ptmp[2] = {0,0};
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	2b0f      	cmp	r3, #15
 8003a04:	f200 80c2 	bhi.w	8003b8c <ctlwizchip+0x1a4>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <ctlwizchip+0x28>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a51 	.word	0x08003a51
 8003a14:	08003a57 	.word	0x08003a57
 8003a18:	08003a83 	.word	0x08003a83
 8003a1c:	08003a77 	.word	0x08003a77
 8003a20:	08003a91 	.word	0x08003a91
 8003a24:	08003a9d 	.word	0x08003a9d
 8003a28:	08003aab 	.word	0x08003aab
 8003a2c:	08003ad1 	.word	0x08003ad1
 8003a30:	08003af7 	.word	0x08003af7
 8003a34:	08003b31 	.word	0x08003b31
 8003a38:	08003b37 	.word	0x08003b37
 8003a3c:	08003b3f 	.word	0x08003b3f
 8003a40:	08003b93 	.word	0x08003b93
 8003a44:	08003b47 	.word	0x08003b47
 8003a48:	08003b55 	.word	0x08003b55
 8003a4c:	08003b71 	.word	0x08003b71
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003a50:	f000 f8e6 	bl	8003c20 <wizchip_sw_reset>
         break;
 8003a54:	e09e      	b.n	8003b94 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3308      	adds	r3, #8
 8003a64:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f923 	bl	8003cb8 <wizchip_init>
 8003a72:	4603      	mov	r3, r0
 8003a74:	e08f      	b.n	8003b96 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f9a8 	bl	8003dd0 <wizchip_clrinterrupt>
         break;
 8003a80:	e088      	b.n	8003b94 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003a82:	f000 f9c3 	bl	8003e0c <wizchip_getinterrupt>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461a      	mov	r2, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	801a      	strh	r2, [r3, #0]
         break;
 8003a8e:	e081      	b.n	8003b94 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f9de 	bl	8003e56 <wizchip_setinterruptmask>
         break;
 8003a9a:	e07b      	b.n	8003b94 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003a9c:	f000 f9f6 	bl	8003e8c <wizchip_getinterruptmask>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	801a      	strh	r2, [r3, #0]
         break;
 8003aa8:	e074      	b.n	8003b94 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003aba:	f7ff fcf3 	bl	80034a4 <WIZCHIP_WRITE>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003aca:	f7ff fceb 	bl	80034a4 <WIZCHIP_WRITE>
         break;
 8003ace:	e061      	b.n	8003b94 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003ad0:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003ad4:	f7ff fcb6 	bl	8003444 <WIZCHIP_READ>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	b29c      	uxth	r4, r3
 8003ae0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003ae4:	f7ff fcae 	bl	8003444 <WIZCHIP_READ>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	4423      	add	r3, r4
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	801a      	strh	r2, [r3, #0]
         break;
 8003af4:	e04e      	b.n	8003b94 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003af6:	4b2a      	ldr	r3, [pc, #168]	; (8003ba0 <ctlwizchip+0x1b8>)
 8003af8:	789a      	ldrb	r2, [r3, #2]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	3301      	adds	r3, #1
 8003b02:	4a27      	ldr	r2, [pc, #156]	; (8003ba0 <ctlwizchip+0x1b8>)
 8003b04:	78d2      	ldrb	r2, [r2, #3]
 8003b06:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	4a24      	ldr	r2, [pc, #144]	; (8003ba0 <ctlwizchip+0x1b8>)
 8003b0e:	7912      	ldrb	r2, [r2, #4]
 8003b10:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	3303      	adds	r3, #3
 8003b16:	4a22      	ldr	r2, [pc, #136]	; (8003ba0 <ctlwizchip+0x1b8>)
 8003b18:	7952      	ldrb	r2, [r2, #5]
 8003b1a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <ctlwizchip+0x1b8>)
 8003b22:	7992      	ldrb	r2, [r2, #6]
 8003b24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	3305      	adds	r3, #5
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
         break;
 8003b2e:	e031      	b.n	8003b94 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003b30:	f000 f9ff 	bl	8003f32 <wizphy_reset>
         break;
 8003b34:	e02e      	b.n	8003b94 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f000 fa22 	bl	8003f80 <wizphy_setphyconf>
         break;
 8003b3c:	e02a      	b.n	8003b94 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003b3e:	6838      	ldr	r0, [r7, #0]
 8003b40:	f000 fa60 	bl	8004004 <wizphy_getphyconf>
         break;
 8003b44:	e026      	b.n	8003b94 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 faa3 	bl	8004096 <wizphy_setphypmode>
 8003b50:	4603      	mov	r3, r0
 8003b52:	e020      	b.n	8003b96 <ctlwizchip+0x1ae>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003b54:	f000 f9d4 	bl	8003f00 <wizphy_getphypmode>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2bff      	cmp	r3, #255	; 0xff
 8003b60:	d102      	bne.n	8003b68 <ctlwizchip+0x180>
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
 8003b66:	e016      	b.n	8003b96 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	7dfa      	ldrb	r2, [r7, #23]
 8003b6c:	701a      	strb	r2, [r3, #0]
         break;
 8003b6e:	e011      	b.n	8003b94 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003b70:	f000 f9af 	bl	8003ed2 <wizphy_getphylink>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	2bff      	cmp	r3, #255	; 0xff
 8003b7c:	d102      	bne.n	8003b84 <ctlwizchip+0x19c>
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b82:	e008      	b.n	8003b96 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	7dfa      	ldrb	r2, [r7, #23]
 8003b88:	701a      	strb	r2, [r3, #0]
         break;
 8003b8a:	e003      	b.n	8003b94 <ctlwizchip+0x1ac>
      default:
         return -1;
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	e001      	b.n	8003b96 <ctlwizchip+0x1ae>
         break;
 8003b92:	bf00      	nop
   }
   return 0;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd90      	pop	{r4, r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000024 	.word	0x20000024

08003ba4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	71fb      	strb	r3, [r7, #7]

   switch(cntype)
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d82c      	bhi.n	8003c10 <ctlnetwork+0x6c>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <ctlnetwork+0x18>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bd5 	.word	0x08003bd5
 8003bc0:	08003bdd 	.word	0x08003bdd
 8003bc4:	08003be5 	.word	0x08003be5
 8003bc8:	08003bf3 	.word	0x08003bf3
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003c09 	.word	0x08003c09
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003bd4:	6838      	ldr	r0, [r7, #0]
 8003bd6:	f000 faa9 	bl	800412c <wizchip_setnetinfo>
         break;
 8003bda:	e01c      	b.n	8003c16 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003bdc:	6838      	ldr	r0, [r7, #0]
 8003bde:	f000 fae5 	bl	80041ac <wizchip_getnetinfo>
         break;
 8003be2:	e018      	b.n	8003c16 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fb1f 	bl	800422c <wizchip_setnetmode>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	e012      	b.n	8003c18 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003bf2:	f000 fb3d 	bl	8004270 <wizchip_getnetmode>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	701a      	strb	r2, [r3, #0]
         break;
 8003bfe:	e00a      	b.n	8003c16 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003c00:	6838      	ldr	r0, [r7, #0]
 8003c02:	f000 fb3d 	bl	8004280 <wizchip_settimeout>
         break;
 8003c06:	e006      	b.n	8003c16 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003c08:	6838      	ldr	r0, [r7, #0]
 8003c0a:	f000 fb5a 	bl	80042c2 <wizchip_gettimeout>
         break;
 8003c0e:	e002      	b.n	8003c16 <ctlnetwork+0x72>
      default:
         return -1;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	e000      	b.n	8003c18 <ctlnetwork+0x74>
   }
   return 0;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4];
   uint8_t mac[6];
   getSHAR(mac);
 8003c26:	1d3b      	adds	r3, r7, #4
 8003c28:	2206      	movs	r2, #6
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003c30:	f7ff fc6e 	bl	8003510 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003c34:	f107 0314 	add.w	r3, r7, #20
 8003c38:	2204      	movs	r2, #4
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c40:	f7ff fc66 	bl	8003510 <WIZCHIP_READ_BUF>
 8003c44:	f107 0310 	add.w	r3, r7, #16
 8003c48:	2204      	movs	r2, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003c50:	f7ff fc5e 	bl	8003510 <WIZCHIP_READ_BUF>
 8003c54:	f107 030c 	add.w	r3, r7, #12
 8003c58:	2204      	movs	r2, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003c60:	f7ff fc56 	bl	8003510 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003c64:	2180      	movs	r1, #128	; 0x80
 8003c66:	2000      	movs	r0, #0
 8003c68:	f7ff fc1c 	bl	80034a4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f7ff fbe9 	bl	8003444 <WIZCHIP_READ>
   setSHAR(mac);
 8003c72:	1d3b      	adds	r3, r7, #4
 8003c74:	2206      	movs	r2, #6
 8003c76:	4619      	mov	r1, r3
 8003c78:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003c7c:	f7ff fc8c 	bl	8003598 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	2204      	movs	r2, #4
 8003c86:	4619      	mov	r1, r3
 8003c88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c8c:	f7ff fc84 	bl	8003598 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003c90:	f107 0310 	add.w	r3, r7, #16
 8003c94:	2204      	movs	r2, #4
 8003c96:	4619      	mov	r1, r3
 8003c98:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003c9c:	f7ff fc7c 	bl	8003598 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003ca0:	f107 030c 	add.w	r3, r7, #12
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003cac:	f7ff fc74 	bl	8003598 <WIZCHIP_WRITE_BUF>
}
 8003cb0:	bf00      	nop
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003cc6:	f7ff ffab 	bl	8003c20 <wizchip_sw_reset>
   if(txsize)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d03b      	beq.n	8003d48 <wizchip_init+0x90>
   {
      tmp = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	73fb      	strb	r3, [r7, #15]
 8003cd8:	e00e      	b.n	8003cf8 <wizchip_init+0x40>
         tmp += txsize[i];
 8003cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	7bbb      	ldrb	r3, [r7, #14]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	73fb      	strb	r3, [r7, #15]
 8003cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfc:	2b07      	cmp	r3, #7
 8003cfe:	ddec      	ble.n	8003cda <wizchip_init+0x22>
      if(tmp > 16) return -1;
 8003d00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	dd02      	ble.n	8003d0e <wizchip_init+0x56>
 8003d08:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0c:	e05c      	b.n	8003dc8 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
 8003d12:	e015      	b.n	8003d40 <wizchip_init+0x88>
         setSn_TXBUF_SIZE(i, txsize[i]);
 8003d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003d22:	4618      	mov	r0, r3
 8003d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f7ff fbb8 	bl	80034a4 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	73fb      	strb	r3, [r7, #15]
 8003d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d44:	2b07      	cmp	r3, #7
 8003d46:	dde5      	ble.n	8003d14 <wizchip_init+0x5c>
   }
   if(rxsize)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d03b      	beq.n	8003dc6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
 8003d56:	e00e      	b.n	8003d76 <wizchip_init+0xbe>
         tmp += rxsize[i];
 8003d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	4413      	add	r3, r2
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	7bbb      	ldrb	r3, [r7, #14]
 8003d64:	4413      	add	r3, r2
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	3301      	adds	r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	73fb      	strb	r3, [r7, #15]
 8003d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7a:	2b07      	cmp	r3, #7
 8003d7c:	ddec      	ble.n	8003d58 <wizchip_init+0xa0>
      if(tmp > 16) return -1;
 8003d7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d82:	2b10      	cmp	r3, #16
 8003d84:	dd02      	ble.n	8003d8c <wizchip_init+0xd4>
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8a:	e01d      	b.n	8003dc8 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]
 8003d90:	e015      	b.n	8003dbe <wizchip_init+0x106>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 8003d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	3301      	adds	r3, #1
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003da0:	4618      	mov	r0, r3
 8003da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	4413      	add	r3, r2
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	4619      	mov	r1, r3
 8003dae:	f7ff fb79 	bl	80034a4 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	73fb      	strb	r3, [r7, #15]
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc2:	2b07      	cmp	r3, #7
 8003dc4:	dde5      	ble.n	8003d92 <wizchip_init+0xda>
   }
   return 0;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   ir |= sir;
   setIR(ir);
#else
   setIR(ir);
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	f023 030f 	bic.w	r3, r3, #15
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	4619      	mov	r1, r3
 8003df0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003df4:	f7ff fb56 	bl	80034a4 <WIZCHIP_WRITE>
   setSIR(sir);
 8003df8:	7bbb      	ldrb	r3, [r7, #14]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003e00:	f7ff fb50 	bl	80034a4 <WIZCHIP_WRITE>
#endif
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   ir = getIR();
   sir = ir 0x0F;
#else
   ir  = getIR();
 8003e1e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003e22:	f7ff fb0f 	bl	8003444 <WIZCHIP_READ>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f023 030f 	bic.w	r3, r3, #15
 8003e2c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003e2e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003e32:	f7ff fb07 	bl	8003444 <WIZCHIP_READ>
 8003e36:	4603      	mov	r3, r0
 8003e38:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003e3a:	79bb      	ldrb	r3, [r7, #6]
 8003e3c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003e3e:	88bb      	ldrh	r3, [r7, #4]
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003e4c:	88bb      	ldrh	r3, [r7, #4]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   imr |= simr;
   setIMR(imr);
#else
   setIMR(imr);
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003e74:	f7ff fb16 	bl	80034a4 <WIZCHIP_WRITE>
   setSIMR(simr);
 8003e78:	7bbb      	ldrb	r3, [r7, #14]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003e80:	f7ff fb10 	bl	80034a4 <WIZCHIP_WRITE>
#endif
}
 8003e84:	bf00      	nop
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   imr  = getIMR();
   simr = imr 0x0F;
#else
   imr  = getIMR();
 8003e9e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003ea2:	f7ff facf 	bl	8003444 <WIZCHIP_READ>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003eaa:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003eae:	f7ff fac9 	bl	8003444 <WIZCHIP_READ>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003eb6:	79bb      	ldrb	r3, [r7, #6]
 8003eb8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003eba:	88bb      	ldrh	r3, [r7, #4]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003ec8:	88bb      	ldrh	r3, [r7, #4]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
   else
      tmp = PHY_LINK_OFF;
#elif _WIZCHIP_ == 5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003ed8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003edc:	f7ff fab2 	bl	8003444 <WIZCHIP_READ>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <wizphy_getphylink+0x1e>
      tmp = PHY_LINK_ON;
 8003eea:	2301      	movs	r3, #1
 8003eec:	71fb      	strb	r3, [r7, #7]
 8003eee:	e001      	b.n	8003ef4 <wizphy_getphylink+0x22>
   else
      tmp = PHY_LINK_OFF;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	71fb      	strb	r3, [r7, #7]
#else
   tmp = -1;
#endif
   return tmp;
 8003ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <wizphy_getphypmode>:

#if _WIZCHIP_ > 5100

int8_t wizphy_getphypmode(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if(getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
 8003f0a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003f0e:	f7ff fa99 	bl	8003444 <WIZCHIP_READ>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	71fb      	strb	r3, [r7, #7]
 8003f20:	e001      	b.n	8003f26 <wizphy_getphypmode+0x26>
      else
         tmp = PHY_POWER_NORM;
 8003f22:	2300      	movs	r3, #0
 8003f24:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <wizphy_reset>:
#endif

#if _WIZCHIP_ == 5500
void wizphy_reset(void)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003f38:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003f3c:	f7ff fa82 	bl	8003444 <WIZCHIP_READ>
 8003f40:	4603      	mov	r3, r0
 8003f42:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f4a:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003f54:	f7ff faa6 	bl	80034a4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003f58:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003f5c:	f7ff fa72 	bl	8003444 <WIZCHIP_READ>
 8003f60:	4603      	mov	r3, r0
 8003f62:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f6a:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003f74:	f7ff fa96 	bl	80034a4 <WIZCHIP_WRITE>
}
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d104      	bne.n	8003f9e <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	e003      	b.n	8003fa6 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	785b      	ldrb	r3, [r3, #1]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d104      	bne.n	8003fb8 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003fb4:	73fb      	strb	r3, [r7, #15]
 8003fb6:	e019      	b.n	8003fec <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	78db      	ldrb	r3, [r3, #3]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10d      	bne.n	8003fdc <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	789b      	ldrb	r3, [r3, #2]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d104      	bne.n	8003fd2 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	f043 0318 	orr.w	r3, r3, #24
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e00c      	b.n	8003fec <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	f043 0308 	orr.w	r3, r3, #8
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	e007      	b.n	8003fec <wizphy_setphyconf+0x6c>
      }
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	789b      	ldrb	r3, [r3, #2]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d103      	bne.n	8003fec <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	f043 0310 	orr.w	r3, r3, #16
 8003fea:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003ff4:	f7ff fa56 	bl	80034a4 <WIZCHIP_WRITE>
   wizphy_reset();
 8003ff8:	f7ff ff9b 	bl	8003f32 <wizphy_reset>
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004010:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004014:	f7ff fa16 	bl	8003444 <WIZCHIP_READ>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	119b      	asrs	r3, r3, #6
 8004020:	b2db      	uxtb	r3, r3
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	b2da      	uxtb	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004032:	2b20      	cmp	r3, #32
 8004034:	d001      	beq.n	800403a <wizphy_getphyconf+0x36>
 8004036:	2b38      	cmp	r3, #56	; 0x38
 8004038:	d103      	bne.n	8004042 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA:
         phyconf->mode = PHY_MODE_AUTONEGO;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	705a      	strb	r2, [r3, #1]
         break;
 8004040:	e003      	b.n	800404a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	705a      	strb	r2, [r3, #1]
         break;
 8004048:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004050:	2b18      	cmp	r3, #24
 8004052:	d003      	beq.n	800405c <wizphy_getphyconf+0x58>
 8004054:	2b20      	cmp	r3, #32
 8004056:	d001      	beq.n	800405c <wizphy_getphyconf+0x58>
 8004058:	2b10      	cmp	r3, #16
 800405a:	d103      	bne.n	8004064 <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	709a      	strb	r2, [r3, #2]
         break;
 8004062:	e003      	b.n	800406c <wizphy_getphyconf+0x68>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	709a      	strb	r2, [r3, #2]
         break;
 800406a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004072:	2b18      	cmp	r3, #24
 8004074:	d003      	beq.n	800407e <wizphy_getphyconf+0x7a>
 8004076:	2b20      	cmp	r3, #32
 8004078:	d001      	beq.n	800407e <wizphy_getphyconf+0x7a>
 800407a:	2b08      	cmp	r3, #8
 800407c:	d103      	bne.n	8004086 <wizphy_getphyconf+0x82>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	70da      	strb	r2, [r3, #3]
         break;
 8004084:	e003      	b.n	800408e <wizphy_getphyconf+0x8a>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	70da      	strb	r2, [r3, #3]
         break;
 800408c:	bf00      	nop
   }
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	4603      	mov	r3, r0
 800409e:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80040a4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80040a8:	f7ff f9cc 	bl	8003444 <WIZCHIP_READ>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <wizphy_setphypmode+0x2a>
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295
 80040be:	e030      	b.n	8004122 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80040c6:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d104      	bne.n	80040d8 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	e003      	b.n	80040e0 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80040de:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	4619      	mov	r1, r3
 80040e4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80040e8:	f7ff f9dc 	bl	80034a4 <WIZCHIP_WRITE>
   wizphy_reset();
 80040ec:	f7ff ff21 	bl	8003f32 <wizphy_reset>
   tmp = getPHYCFGR();
 80040f0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80040f4:	f7ff f9a6 	bl	8003444 <WIZCHIP_READ>
 80040f8:	4603      	mov	r3, r0
 80040fa:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d106      	bne.n	8004110 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <wizphy_setphypmode+0x88>
 800410c:	2300      	movs	r3, #0
 800410e:	e008      	b.n	8004122 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <wizphy_setphypmode+0x88>
 800411a:	2300      	movs	r3, #0
 800411c:	e001      	b.n	8004122 <wizphy_setphypmode+0x8c>
   }
   return -1;
 800411e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2206      	movs	r2, #6
 8004138:	4619      	mov	r1, r3
 800413a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800413e:	f7ff fa2b 	bl	8003598 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	330e      	adds	r3, #14
 8004146:	2204      	movs	r2, #4
 8004148:	4619      	mov	r1, r3
 800414a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800414e:	f7ff fa23 	bl	8003598 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	330a      	adds	r3, #10
 8004156:	2204      	movs	r2, #4
 8004158:	4619      	mov	r1, r3
 800415a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800415e:	f7ff fa1b 	bl	8003598 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3306      	adds	r3, #6
 8004166:	2204      	movs	r2, #4
 8004168:	4619      	mov	r1, r3
 800416a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800416e:	f7ff fa13 	bl	8003598 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	7c9a      	ldrb	r2, [r3, #18]
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <wizchip_setnetinfo+0x78>)
 8004178:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	7cda      	ldrb	r2, [r3, #19]
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <wizchip_setnetinfo+0x78>)
 8004180:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	7d1a      	ldrb	r2, [r3, #20]
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <wizchip_setnetinfo+0x78>)
 8004188:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	7d5a      	ldrb	r2, [r3, #21]
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <wizchip_setnetinfo+0x78>)
 8004190:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7d9a      	ldrb	r2, [r3, #22]
 8004196:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <wizchip_setnetinfo+0x7c>)
 8004198:	701a      	strb	r2, [r3, #0]
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	2000026c 	.word	0x2000026c
 80041a8:	20000270 	.word	0x20000270

080041ac <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2206      	movs	r2, #6
 80041b8:	4619      	mov	r1, r3
 80041ba:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80041be:	f7ff f9a7 	bl	8003510 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	330e      	adds	r3, #14
 80041c6:	2204      	movs	r2, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80041ce:	f7ff f99f 	bl	8003510 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	330a      	adds	r3, #10
 80041d6:	2204      	movs	r2, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80041de:	f7ff f997 	bl	8003510 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3306      	adds	r3, #6
 80041e6:	2204      	movs	r2, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80041ee:	f7ff f98f 	bl	8003510 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80041f2:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <wizchip_getnetinfo+0x78>)
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <wizchip_getnetinfo+0x78>)
 80041fc:	785a      	ldrb	r2, [r3, #1]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004202:	4b08      	ldr	r3, [pc, #32]	; (8004224 <wizchip_getnetinfo+0x78>)
 8004204:	789a      	ldrb	r2, [r3, #2]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <wizchip_getnetinfo+0x78>)
 800420c:	78da      	ldrb	r2, [r3, #3]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <wizchip_getnetinfo+0x7c>)
 8004214:	781a      	ldrb	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	759a      	strb	r2, [r3, #22]
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	2000026c 	.word	0x2000026c
 8004228:	20000270 	.word	0x20000270

0800422c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != 5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <wizchip_setnetmode+0x1e>
 8004244:	f04f 33ff 	mov.w	r3, #4294967295
 8004248:	e00e      	b.n	8004268 <wizchip_setnetmode+0x3c>
#endif
   tmp = getMR();
 800424a:	2000      	movs	r0, #0
 800424c:	f7ff f8fa 	bl	8003444 <WIZCHIP_READ>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004254:	7bfa      	ldrb	r2, [r7, #15]
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	4313      	orrs	r3, r2
 800425a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	4619      	mov	r1, r3
 8004260:	2000      	movs	r0, #0
 8004262:	f7ff f91f 	bl	80034a4 <WIZCHIP_WRITE>
   return 0;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004274:	2000      	movs	r0, #0
 8004276:	f7ff f8e5 	bl	8003444 <WIZCHIP_READ>
 800427a:	4603      	mov	r3, r0
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}

08004280 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	4619      	mov	r1, r3
 800428e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004292:	f7ff f907 	bl	80034a4 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	885b      	ldrh	r3, [r3, #2]
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	b29b      	uxth	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	4619      	mov	r1, r3
 80042a2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80042a6:	f7ff f8fd 	bl	80034a4 <WIZCHIP_WRITE>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	885b      	ldrh	r3, [r3, #2]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	4619      	mov	r1, r3
 80042b2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80042b6:	f7ff f8f5 	bl	80034a4 <WIZCHIP_WRITE>
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80042c2:	b590      	push	{r4, r7, lr}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80042ca:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80042ce:	f7ff f8b9 	bl	8003444 <WIZCHIP_READ>
 80042d2:	4603      	mov	r3, r0
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80042da:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80042de:	f7ff f8b1 	bl	8003444 <WIZCHIP_READ>
 80042e2:	4603      	mov	r3, r0
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	b29c      	uxth	r4, r3
 80042ea:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80042ee:	f7ff f8a9 	bl	8003444 <WIZCHIP_READ>
 80042f2:	4603      	mov	r3, r0
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	4423      	add	r3, r4
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	805a      	strh	r2, [r3, #2]
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bd90      	pop	{r4, r7, pc}
	...

08004308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <HAL_Init+0x28>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a07      	ldr	r2, [pc, #28]	; (8004330 <HAL_Init+0x28>)
 8004312:	f043 0310 	orr.w	r3, r3, #16
 8004316:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004318:	2003      	movs	r0, #3
 800431a:	f000 f8f3 	bl	8004504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800431e:	2000      	movs	r0, #0
 8004320:	f7fe fbd6 	bl	8002ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004324:	f7fe fb10 	bl	8002948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40022000 	.word	0x40022000

08004334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_IncTick+0x1c>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_IncTick+0x20>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4413      	add	r3, r2
 8004344:	4a03      	ldr	r2, [pc, #12]	; (8004354 <HAL_IncTick+0x20>)
 8004346:	6013      	str	r3, [r2, #0]
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr
 8004350:	20000048 	.word	0x20000048
 8004354:	20002fd0 	.word	0x20002fd0

08004358 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return uwTick;
 800435c:	4b02      	ldr	r3, [pc, #8]	; (8004368 <HAL_GetTick+0x10>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	20002fd0 	.word	0x20002fd0

0800436c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004374:	f7ff fff0 	bl	8004358 <HAL_GetTick>
 8004378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d005      	beq.n	8004392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_Delay+0x40>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004392:	bf00      	nop
 8004394:	f7ff ffe0 	bl	8004358 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d8f7      	bhi.n	8004394 <HAL_Delay+0x28>
  {
  }
}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000048 	.word	0x20000048

080043b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <__NVIC_SetPriorityGrouping+0x44>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043cc:	4013      	ands	r3, r2
 80043ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043e2:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <__NVIC_SetPriorityGrouping+0x44>)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	60d3      	str	r3, [r2, #12]
}
 80043e8:	bf00      	nop
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <__NVIC_GetPriorityGrouping+0x18>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	0a1b      	lsrs	r3, r3, #8
 8004402:	f003 0307 	and.w	r3, r3, #7
}
 8004406:	4618      	mov	r0, r3
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000ed00 	.word	0xe000ed00

08004414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800441e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004422:	2b00      	cmp	r3, #0
 8004424:	db0b      	blt.n	800443e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	f003 021f 	and.w	r2, r3, #31
 800442c:	4906      	ldr	r1, [pc, #24]	; (8004448 <__NVIC_EnableIRQ+0x34>)
 800442e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	2001      	movs	r0, #1
 8004436:	fa00 f202 	lsl.w	r2, r0, r2
 800443a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	e000e100 	.word	0xe000e100

0800444c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	6039      	str	r1, [r7, #0]
 8004456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	2b00      	cmp	r3, #0
 800445e:	db0a      	blt.n	8004476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	490c      	ldr	r1, [pc, #48]	; (8004498 <__NVIC_SetPriority+0x4c>)
 8004466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446a:	0112      	lsls	r2, r2, #4
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	440b      	add	r3, r1
 8004470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004474:	e00a      	b.n	800448c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4908      	ldr	r1, [pc, #32]	; (800449c <__NVIC_SetPriority+0x50>)
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	3b04      	subs	r3, #4
 8004484:	0112      	lsls	r2, r2, #4
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	440b      	add	r3, r1
 800448a:	761a      	strb	r2, [r3, #24]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	e000e100 	.word	0xe000e100
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b089      	sub	sp, #36	; 0x24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f1c3 0307 	rsb	r3, r3, #7
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	bf28      	it	cs
 80044be:	2304      	movcs	r3, #4
 80044c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d902      	bls.n	80044d0 <NVIC_EncodePriority+0x30>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3b03      	subs	r3, #3
 80044ce:	e000      	b.n	80044d2 <NVIC_EncodePriority+0x32>
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d4:	f04f 32ff 	mov.w	r2, #4294967295
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43da      	mvns	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	401a      	ands	r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e8:	f04f 31ff 	mov.w	r1, #4294967295
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	43d9      	mvns	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f8:	4313      	orrs	r3, r2
         );
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3724      	adds	r7, #36	; 0x24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ff4f 	bl	80043b0 <__NVIC_SetPriorityGrouping>
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800451a:	b580      	push	{r7, lr}
 800451c:	b086      	sub	sp, #24
 800451e:	af00      	add	r7, sp, #0
 8004520:	4603      	mov	r3, r0
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800452c:	f7ff ff64 	bl	80043f8 <__NVIC_GetPriorityGrouping>
 8004530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	6978      	ldr	r0, [r7, #20]
 8004538:	f7ff ffb2 	bl	80044a0 <NVIC_EncodePriority>
 800453c:	4602      	mov	r2, r0
 800453e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004542:	4611      	mov	r1, r2
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff ff81 	bl	800444c <__NVIC_SetPriority>
}
 800454a:	bf00      	nop
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	4603      	mov	r3, r0
 800455a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800455c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ff57 	bl	8004414 <__NVIC_EnableIRQ>
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800458a:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <HAL_FLASH_Program+0xd8>)
 800458c:	7e1b      	ldrb	r3, [r3, #24]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_FLASH_Program+0x26>
 8004592:	2302      	movs	r3, #2
 8004594:	e054      	b.n	8004640 <HAL_FLASH_Program+0xd0>
 8004596:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <HAL_FLASH_Program+0xd8>)
 8004598:	2201      	movs	r2, #1
 800459a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800459c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045a0:	f000 f8d4 	bl	800474c <FLASH_WaitForLastOperation>
 80045a4:	4603      	mov	r3, r0
 80045a6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d144      	bne.n	8004638 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d102      	bne.n	80045ba <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80045b4:	2301      	movs	r3, #1
 80045b6:	757b      	strb	r3, [r7, #21]
 80045b8:	e007      	b.n	80045ca <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d102      	bne.n	80045c6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80045c0:	2302      	movs	r3, #2
 80045c2:	757b      	strb	r3, [r7, #21]
 80045c4:	e001      	b.n	80045ca <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80045c6:	2304      	movs	r3, #4
 80045c8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80045ca:	2300      	movs	r3, #0
 80045cc:	75bb      	strb	r3, [r7, #22]
 80045ce:	e02d      	b.n	800462c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80045d0:	7dbb      	ldrb	r3, [r7, #22]
 80045d2:	005a      	lsls	r2, r3, #1
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	eb02 0c03 	add.w	ip, r2, r3
 80045da:	7dbb      	ldrb	r3, [r7, #22]
 80045dc:	0119      	lsls	r1, r3, #4
 80045de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045e2:	f1c1 0620 	rsb	r6, r1, #32
 80045e6:	f1a1 0020 	sub.w	r0, r1, #32
 80045ea:	fa22 f401 	lsr.w	r4, r2, r1
 80045ee:	fa03 f606 	lsl.w	r6, r3, r6
 80045f2:	4334      	orrs	r4, r6
 80045f4:	fa23 f000 	lsr.w	r0, r3, r0
 80045f8:	4304      	orrs	r4, r0
 80045fa:	fa23 f501 	lsr.w	r5, r3, r1
 80045fe:	b2a3      	uxth	r3, r4
 8004600:	4619      	mov	r1, r3
 8004602:	4660      	mov	r0, ip
 8004604:	f000 f886 	bl	8004714 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004608:	f24c 3050 	movw	r0, #50000	; 0xc350
 800460c:	f000 f89e 	bl	800474c <FLASH_WaitForLastOperation>
 8004610:	4603      	mov	r3, r0
 8004612:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004614:	4b0d      	ldr	r3, [pc, #52]	; (800464c <HAL_FLASH_Program+0xdc>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	4a0c      	ldr	r2, [pc, #48]	; (800464c <HAL_FLASH_Program+0xdc>)
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d107      	bne.n	8004636 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004626:	7dbb      	ldrb	r3, [r7, #22]
 8004628:	3301      	adds	r3, #1
 800462a:	75bb      	strb	r3, [r7, #22]
 800462c:	7dba      	ldrb	r2, [r7, #22]
 800462e:	7d7b      	ldrb	r3, [r7, #21]
 8004630:	429a      	cmp	r2, r3
 8004632:	d3cd      	bcc.n	80045d0 <HAL_FLASH_Program+0x60>
 8004634:	e000      	b.n	8004638 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004636:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <HAL_FLASH_Program+0xd8>)
 800463a:	2200      	movs	r2, #0
 800463c:	761a      	strb	r2, [r3, #24]

  return status;
 800463e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004640:	4618      	mov	r0, r3
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004648:	20002fd8 	.word	0x20002fd8
 800464c:	40022000 	.word	0x40022000

08004650 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800465a:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <HAL_FLASH_Unlock+0x40>)
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00d      	beq.n	8004682 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <HAL_FLASH_Unlock+0x40>)
 8004668:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <HAL_FLASH_Unlock+0x44>)
 800466a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800466c:	4b08      	ldr	r3, [pc, #32]	; (8004690 <HAL_FLASH_Unlock+0x40>)
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <HAL_FLASH_Unlock+0x48>)
 8004670:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004672:	4b07      	ldr	r3, [pc, #28]	; (8004690 <HAL_FLASH_Unlock+0x40>)
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004682:	79fb      	ldrb	r3, [r7, #7]
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40022000 	.word	0x40022000
 8004694:	45670123 	.word	0x45670123
 8004698:	cdef89ab 	.word	0xcdef89ab

0800469c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_FLASH_Lock+0x1c>)
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	4a04      	ldr	r2, [pc, #16]	; (80046b8 <HAL_FLASH_Lock+0x1c>)
 80046a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046aa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40022000 	.word	0x40022000

080046bc <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_FLASH_OB_Unlock+0x2c>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d107      	bne.n	80046dc <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_FLASH_OB_Unlock+0x2c>)
 80046ce:	4a07      	ldr	r2, [pc, #28]	; (80046ec <HAL_FLASH_OB_Unlock+0x30>)
 80046d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_FLASH_OB_Unlock+0x2c>)
 80046d4:	4a06      	ldr	r2, [pc, #24]	; (80046f0 <HAL_FLASH_OB_Unlock+0x34>)
 80046d6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
}
 80046de:	4618      	mov	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40022000 	.word	0x40022000
 80046ec:	45670123 	.word	0x45670123
 80046f0:	cdef89ab 	.word	0xcdef89ab

080046f4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_FLASH_OB_Lock+0x1c>)
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	4a04      	ldr	r2, [pc, #16]	; (8004710 <HAL_FLASH_OB_Lock+0x1c>)
 80046fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004702:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40022000 	.word	0x40022000

08004714 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004720:	4b08      	ldr	r3, [pc, #32]	; (8004744 <FLASH_Program_HalfWord+0x30>)
 8004722:	2200      	movs	r2, #0
 8004724:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <FLASH_Program_HalfWord+0x34>)
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	4a07      	ldr	r2, [pc, #28]	; (8004748 <FLASH_Program_HalfWord+0x34>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	887a      	ldrh	r2, [r7, #2]
 8004736:	801a      	strh	r2, [r3, #0]
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20002fd8 	.word	0x20002fd8
 8004748:	40022000 	.word	0x40022000

0800474c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004754:	f7ff fe00 	bl	8004358 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800475a:	e010      	b.n	800477e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004762:	d00c      	beq.n	800477e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <FLASH_WaitForLastOperation+0x2e>
 800476a:	f7ff fdf5 	bl	8004358 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	429a      	cmp	r2, r3
 8004778:	d201      	bcs.n	800477e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e025      	b.n	80047ca <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800477e:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <FLASH_WaitForLastOperation+0x88>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e8      	bne.n	800475c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <FLASH_WaitForLastOperation+0x88>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004796:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <FLASH_WaitForLastOperation+0x88>)
 8004798:	2220      	movs	r2, #32
 800479a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800479c:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <FLASH_WaitForLastOperation+0x88>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10b      	bne.n	80047c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <FLASH_WaitForLastOperation+0x88>)
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d105      	bne.n	80047c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80047b4:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <FLASH_WaitForLastOperation+0x88>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80047c0:	f000 f80a 	bl	80047d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40022000 	.word	0x40022000

080047d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80047e2:	4b23      	ldr	r3, [pc, #140]	; (8004870 <FLASH_SetErrorCode+0x98>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80047ee:	4b21      	ldr	r3, [pc, #132]	; (8004874 <FLASH_SetErrorCode+0x9c>)
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f043 0302 	orr.w	r3, r3, #2
 80047f6:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <FLASH_SetErrorCode+0x9c>)
 80047f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f043 0310 	orr.w	r3, r3, #16
 8004800:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004802:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <FLASH_SetErrorCode+0x98>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800480e:	4b19      	ldr	r3, [pc, #100]	; (8004874 <FLASH_SetErrorCode+0x9c>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	4a17      	ldr	r2, [pc, #92]	; (8004874 <FLASH_SetErrorCode+0x9c>)
 8004818:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f043 0304 	orr.w	r3, r3, #4
 8004820:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004822:	4b13      	ldr	r3, [pc, #76]	; (8004870 <FLASH_SetErrorCode+0x98>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <FLASH_SetErrorCode+0x9c>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	4a0f      	ldr	r2, [pc, #60]	; (8004874 <FLASH_SetErrorCode+0x9c>)
 8004838:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800483a:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <FLASH_SetErrorCode+0x98>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4a0c      	ldr	r2, [pc, #48]	; (8004870 <FLASH_SetErrorCode+0x98>)
 8004840:	f023 0301 	bic.w	r3, r3, #1
 8004844:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f240 1201 	movw	r2, #257	; 0x101
 800484c:	4293      	cmp	r3, r2
 800484e:	d106      	bne.n	800485e <FLASH_SetErrorCode+0x86>
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <FLASH_SetErrorCode+0x98>)
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	4a06      	ldr	r2, [pc, #24]	; (8004870 <FLASH_SetErrorCode+0x98>)
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	61d3      	str	r3, [r2, #28]
}  
 800485c:	e002      	b.n	8004864 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800485e:	4a04      	ldr	r2, [pc, #16]	; (8004870 <FLASH_SetErrorCode+0x98>)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	60d3      	str	r3, [r2, #12]
}  
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40022000 	.word	0x40022000
 8004874:	20002fd8 	.word	0x20002fd8

08004878 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800488a:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <HAL_FLASHEx_Erase+0xd0>)
 800488c:	7e1b      	ldrb	r3, [r3, #24]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_FLASHEx_Erase+0x1e>
 8004892:	2302      	movs	r3, #2
 8004894:	e053      	b.n	800493e <HAL_FLASHEx_Erase+0xc6>
 8004896:	4b2c      	ldr	r3, [pc, #176]	; (8004948 <HAL_FLASHEx_Erase+0xd0>)
 8004898:	2201      	movs	r2, #1
 800489a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d116      	bne.n	80048d2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80048a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048a8:	f7ff ff50 	bl	800474c <FLASH_WaitForLastOperation>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d141      	bne.n	8004936 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80048b2:	2001      	movs	r0, #1
 80048b4:	f000 f84c 	bl	8004950 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048bc:	f7ff ff46 	bl	800474c <FLASH_WaitForLastOperation>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80048c4:	4b21      	ldr	r3, [pc, #132]	; (800494c <HAL_FLASHEx_Erase+0xd4>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	4a20      	ldr	r2, [pc, #128]	; (800494c <HAL_FLASHEx_Erase+0xd4>)
 80048ca:	f023 0304 	bic.w	r3, r3, #4
 80048ce:	6113      	str	r3, [r2, #16]
 80048d0:	e031      	b.n	8004936 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80048d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048d6:	f7ff ff39 	bl	800474c <FLASH_WaitForLastOperation>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d12a      	bne.n	8004936 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f04f 32ff 	mov.w	r2, #4294967295
 80048e6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	e019      	b.n	8004924 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80048f0:	68b8      	ldr	r0, [r7, #8]
 80048f2:	f000 f849 	bl	8004988 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048fa:	f7ff ff27 	bl	800474c <FLASH_WaitForLastOperation>
 80048fe:	4603      	mov	r3, r0
 8004900:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <HAL_FLASHEx_Erase+0xd4>)
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	4a11      	ldr	r2, [pc, #68]	; (800494c <HAL_FLASHEx_Erase+0xd4>)
 8004908:	f023 0302 	bic.w	r3, r3, #2
 800490c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	601a      	str	r2, [r3, #0]
            break;
 800491a:	e00c      	b.n	8004936 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004922:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	029a      	lsls	r2, r3, #10
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	d3dc      	bcc.n	80048f0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004936:	4b04      	ldr	r3, [pc, #16]	; (8004948 <HAL_FLASHEx_Erase+0xd0>)
 8004938:	2200      	movs	r2, #0
 800493a:	761a      	strb	r2, [r3, #24]

  return status;
 800493c:	7bfb      	ldrb	r3, [r7, #15]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20002fd8 	.word	0x20002fd8
 800494c:	40022000 	.word	0x40022000

08004950 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004958:	4b09      	ldr	r3, [pc, #36]	; (8004980 <FLASH_MassErase+0x30>)
 800495a:	2200      	movs	r2, #0
 800495c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <FLASH_MassErase+0x34>)
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	4a08      	ldr	r2, [pc, #32]	; (8004984 <FLASH_MassErase+0x34>)
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <FLASH_MassErase+0x34>)
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	4a05      	ldr	r2, [pc, #20]	; (8004984 <FLASH_MassErase+0x34>)
 8004970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004974:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr
 8004980:	20002fd8 	.word	0x20002fd8
 8004984:	40022000 	.word	0x40022000

08004988 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <FLASH_PageErase+0x38>)
 8004992:	2200      	movs	r2, #0
 8004994:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <FLASH_PageErase+0x3c>)
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <FLASH_PageErase+0x3c>)
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80049a2:	4a08      	ldr	r2, [pc, #32]	; (80049c4 <FLASH_PageErase+0x3c>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <FLASH_PageErase+0x3c>)
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <FLASH_PageErase+0x3c>)
 80049ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20002fd8 	.word	0x20002fd8
 80049c4:	40022000 	.word	0x40022000

080049c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b08b      	sub	sp, #44	; 0x2c
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049d2:	2300      	movs	r3, #0
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049d6:	2300      	movs	r3, #0
 80049d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049da:	e127      	b.n	8004c2c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049dc:	2201      	movs	r2, #1
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	f040 8116 	bne.w	8004c26 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b12      	cmp	r3, #18
 8004a00:	d034      	beq.n	8004a6c <HAL_GPIO_Init+0xa4>
 8004a02:	2b12      	cmp	r3, #18
 8004a04:	d80d      	bhi.n	8004a22 <HAL_GPIO_Init+0x5a>
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d02b      	beq.n	8004a62 <HAL_GPIO_Init+0x9a>
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d804      	bhi.n	8004a18 <HAL_GPIO_Init+0x50>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d031      	beq.n	8004a76 <HAL_GPIO_Init+0xae>
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d01c      	beq.n	8004a50 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a16:	e048      	b.n	8004aaa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d043      	beq.n	8004aa4 <HAL_GPIO_Init+0xdc>
 8004a1c:	2b11      	cmp	r3, #17
 8004a1e:	d01b      	beq.n	8004a58 <HAL_GPIO_Init+0x90>
          break;
 8004a20:	e043      	b.n	8004aaa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a22:	4a89      	ldr	r2, [pc, #548]	; (8004c48 <HAL_GPIO_Init+0x280>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d026      	beq.n	8004a76 <HAL_GPIO_Init+0xae>
 8004a28:	4a87      	ldr	r2, [pc, #540]	; (8004c48 <HAL_GPIO_Init+0x280>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d806      	bhi.n	8004a3c <HAL_GPIO_Init+0x74>
 8004a2e:	4a87      	ldr	r2, [pc, #540]	; (8004c4c <HAL_GPIO_Init+0x284>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d020      	beq.n	8004a76 <HAL_GPIO_Init+0xae>
 8004a34:	4a86      	ldr	r2, [pc, #536]	; (8004c50 <HAL_GPIO_Init+0x288>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d01d      	beq.n	8004a76 <HAL_GPIO_Init+0xae>
          break;
 8004a3a:	e036      	b.n	8004aaa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a3c:	4a85      	ldr	r2, [pc, #532]	; (8004c54 <HAL_GPIO_Init+0x28c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d019      	beq.n	8004a76 <HAL_GPIO_Init+0xae>
 8004a42:	4a85      	ldr	r2, [pc, #532]	; (8004c58 <HAL_GPIO_Init+0x290>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d016      	beq.n	8004a76 <HAL_GPIO_Init+0xae>
 8004a48:	4a84      	ldr	r2, [pc, #528]	; (8004c5c <HAL_GPIO_Init+0x294>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_GPIO_Init+0xae>
          break;
 8004a4e:	e02c      	b.n	8004aaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	623b      	str	r3, [r7, #32]
          break;
 8004a56:	e028      	b.n	8004aaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	623b      	str	r3, [r7, #32]
          break;
 8004a60:	e023      	b.n	8004aaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	3308      	adds	r3, #8
 8004a68:	623b      	str	r3, [r7, #32]
          break;
 8004a6a:	e01e      	b.n	8004aaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	330c      	adds	r3, #12
 8004a72:	623b      	str	r3, [r7, #32]
          break;
 8004a74:	e019      	b.n	8004aaa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a7e:	2304      	movs	r3, #4
 8004a80:	623b      	str	r3, [r7, #32]
          break;
 8004a82:	e012      	b.n	8004aaa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d105      	bne.n	8004a98 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	611a      	str	r2, [r3, #16]
          break;
 8004a96:	e008      	b.n	8004aaa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a98:	2308      	movs	r3, #8
 8004a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	615a      	str	r2, [r3, #20]
          break;
 8004aa2:	e002      	b.n	8004aaa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	623b      	str	r3, [r7, #32]
          break;
 8004aa8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2bff      	cmp	r3, #255	; 0xff
 8004aae:	d801      	bhi.n	8004ab4 <HAL_GPIO_Init+0xec>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	e001      	b.n	8004ab8 <HAL_GPIO_Init+0xf0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2bff      	cmp	r3, #255	; 0xff
 8004abe:	d802      	bhi.n	8004ac6 <HAL_GPIO_Init+0xfe>
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	e002      	b.n	8004acc <HAL_GPIO_Init+0x104>
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	3b08      	subs	r3, #8
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	210f      	movs	r1, #15
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ada:	43db      	mvns	r3, r3
 8004adc:	401a      	ands	r2, r3
 8004ade:	6a39      	ldr	r1, [r7, #32]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8096 	beq.w	8004c26 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004afa:	4b59      	ldr	r3, [pc, #356]	; (8004c60 <HAL_GPIO_Init+0x298>)
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	4a58      	ldr	r2, [pc, #352]	; (8004c60 <HAL_GPIO_Init+0x298>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	6193      	str	r3, [r2, #24]
 8004b06:	4b56      	ldr	r3, [pc, #344]	; (8004c60 <HAL_GPIO_Init+0x298>)
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b12:	4a54      	ldr	r2, [pc, #336]	; (8004c64 <HAL_GPIO_Init+0x29c>)
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	089b      	lsrs	r3, r3, #2
 8004b18:	3302      	adds	r3, #2
 8004b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	220f      	movs	r2, #15
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4013      	ands	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a4b      	ldr	r2, [pc, #300]	; (8004c68 <HAL_GPIO_Init+0x2a0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d013      	beq.n	8004b66 <HAL_GPIO_Init+0x19e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a4a      	ldr	r2, [pc, #296]	; (8004c6c <HAL_GPIO_Init+0x2a4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00d      	beq.n	8004b62 <HAL_GPIO_Init+0x19a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a49      	ldr	r2, [pc, #292]	; (8004c70 <HAL_GPIO_Init+0x2a8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d007      	beq.n	8004b5e <HAL_GPIO_Init+0x196>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a48      	ldr	r2, [pc, #288]	; (8004c74 <HAL_GPIO_Init+0x2ac>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d101      	bne.n	8004b5a <HAL_GPIO_Init+0x192>
 8004b56:	2303      	movs	r3, #3
 8004b58:	e006      	b.n	8004b68 <HAL_GPIO_Init+0x1a0>
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	e004      	b.n	8004b68 <HAL_GPIO_Init+0x1a0>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e002      	b.n	8004b68 <HAL_GPIO_Init+0x1a0>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <HAL_GPIO_Init+0x1a0>
 8004b66:	2300      	movs	r3, #0
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	f002 0203 	and.w	r2, r2, #3
 8004b6e:	0092      	lsls	r2, r2, #2
 8004b70:	4093      	lsls	r3, r2
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b78:	493a      	ldr	r1, [pc, #232]	; (8004c64 <HAL_GPIO_Init+0x29c>)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	3302      	adds	r3, #2
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d006      	beq.n	8004ba0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b92:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4938      	ldr	r1, [pc, #224]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]
 8004b9e:	e006      	b.n	8004bae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ba0:	4b35      	ldr	r3, [pc, #212]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	4933      	ldr	r1, [pc, #204]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d006      	beq.n	8004bc8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004bba:	4b2f      	ldr	r3, [pc, #188]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	492e      	ldr	r1, [pc, #184]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	604b      	str	r3, [r1, #4]
 8004bc6:	e006      	b.n	8004bd6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	4929      	ldr	r1, [pc, #164]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d006      	beq.n	8004bf0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004be2:	4b25      	ldr	r3, [pc, #148]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	4924      	ldr	r1, [pc, #144]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
 8004bee:	e006      	b.n	8004bfe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004bf0:	4b21      	ldr	r3, [pc, #132]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	491f      	ldr	r1, [pc, #124]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d006      	beq.n	8004c18 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c0a:	4b1b      	ldr	r3, [pc, #108]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	491a      	ldr	r1, [pc, #104]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60cb      	str	r3, [r1, #12]
 8004c16:	e006      	b.n	8004c26 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c18:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	4915      	ldr	r1, [pc, #84]	; (8004c78 <HAL_GPIO_Init+0x2b0>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	3301      	adds	r3, #1
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	fa22 f303 	lsr.w	r3, r2, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f47f aed0 	bne.w	80049dc <HAL_GPIO_Init+0x14>
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	372c      	adds	r7, #44	; 0x2c
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	10210000 	.word	0x10210000
 8004c4c:	10110000 	.word	0x10110000
 8004c50:	10120000 	.word	0x10120000
 8004c54:	10310000 	.word	0x10310000
 8004c58:	10320000 	.word	0x10320000
 8004c5c:	10220000 	.word	0x10220000
 8004c60:	40021000 	.word	0x40021000
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40010800 	.word	0x40010800
 8004c6c:	40010c00 	.word	0x40010c00
 8004c70:	40011000 	.word	0x40011000
 8004c74:	40011400 	.word	0x40011400
 8004c78:	40010400 	.word	0x40010400

08004c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	887b      	ldrh	r3, [r7, #2]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	e001      	b.n	8004c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	807b      	strh	r3, [r7, #2]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cba:	787b      	ldrb	r3, [r7, #1]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cc0:	887a      	ldrh	r2, [r7, #2]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cc6:	e003      	b.n	8004cd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	041a      	lsls	r2, r3, #16
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	611a      	str	r2, [r3, #16]
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e11f      	b.n	8004f2e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fd fe58 	bl	80029b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	; 0x24
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d40:	f000 fcda 	bl	80056f8 <HAL_RCC_GetPCLK1Freq>
 8004d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4a7b      	ldr	r2, [pc, #492]	; (8004f38 <HAL_I2C_Init+0x25c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d807      	bhi.n	8004d60 <HAL_I2C_Init+0x84>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4a7a      	ldr	r2, [pc, #488]	; (8004f3c <HAL_I2C_Init+0x260>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	bf94      	ite	ls
 8004d58:	2301      	movls	r3, #1
 8004d5a:	2300      	movhi	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e006      	b.n	8004d6e <HAL_I2C_Init+0x92>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a77      	ldr	r2, [pc, #476]	; (8004f40 <HAL_I2C_Init+0x264>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	bf94      	ite	ls
 8004d68:	2301      	movls	r3, #1
 8004d6a:	2300      	movhi	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0db      	b.n	8004f2e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4a72      	ldr	r2, [pc, #456]	; (8004f44 <HAL_I2C_Init+0x268>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	0c9b      	lsrs	r3, r3, #18
 8004d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4a64      	ldr	r2, [pc, #400]	; (8004f38 <HAL_I2C_Init+0x25c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d802      	bhi.n	8004db0 <HAL_I2C_Init+0xd4>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	3301      	adds	r3, #1
 8004dae:	e009      	b.n	8004dc4 <HAL_I2C_Init+0xe8>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	4a63      	ldr	r2, [pc, #396]	; (8004f48 <HAL_I2C_Init+0x26c>)
 8004dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc0:	099b      	lsrs	r3, r3, #6
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004dd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4956      	ldr	r1, [pc, #344]	; (8004f38 <HAL_I2C_Init+0x25c>)
 8004de0:	428b      	cmp	r3, r1
 8004de2:	d80d      	bhi.n	8004e00 <HAL_I2C_Init+0x124>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1e59      	subs	r1, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004df2:	3301      	adds	r3, #1
 8004df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	bf38      	it	cc
 8004dfc:	2304      	movcc	r3, #4
 8004dfe:	e04f      	b.n	8004ea0 <HAL_I2C_Init+0x1c4>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d111      	bne.n	8004e2c <HAL_I2C_Init+0x150>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	1e58      	subs	r0, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6859      	ldr	r1, [r3, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	440b      	add	r3, r1
 8004e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	e012      	b.n	8004e52 <HAL_I2C_Init+0x176>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1e58      	subs	r0, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6859      	ldr	r1, [r3, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	0099      	lsls	r1, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e42:	3301      	adds	r3, #1
 8004e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bf0c      	ite	eq
 8004e4c:	2301      	moveq	r3, #1
 8004e4e:	2300      	movne	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_I2C_Init+0x17e>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e022      	b.n	8004ea0 <HAL_I2C_Init+0x1c4>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10e      	bne.n	8004e80 <HAL_I2C_Init+0x1a4>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1e58      	subs	r0, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6859      	ldr	r1, [r3, #4]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	440b      	add	r3, r1
 8004e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e74:	3301      	adds	r3, #1
 8004e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7e:	e00f      	b.n	8004ea0 <HAL_I2C_Init+0x1c4>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1e58      	subs	r0, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	0099      	lsls	r1, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e96:	3301      	adds	r3, #1
 8004e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	6809      	ldr	r1, [r1, #0]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69da      	ldr	r2, [r3, #28]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6911      	ldr	r1, [r2, #16]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68d2      	ldr	r2, [r2, #12]
 8004eda:	4311      	orrs	r1, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	000186a0 	.word	0x000186a0
 8004f3c:	001e847f 	.word	0x001e847f
 8004f40:	003d08ff 	.word	0x003d08ff
 8004f44:	431bde83 	.word	0x431bde83
 8004f48:	10624dd3 	.word	0x10624dd3

08004f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e26c      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8087 	beq.w	800507a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f6c:	4b92      	ldr	r3, [pc, #584]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d00c      	beq.n	8004f92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f78:	4b8f      	ldr	r3, [pc, #572]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 030c 	and.w	r3, r3, #12
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d112      	bne.n	8004faa <HAL_RCC_OscConfig+0x5e>
 8004f84:	4b8c      	ldr	r3, [pc, #560]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f90:	d10b      	bne.n	8004faa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f92:	4b89      	ldr	r3, [pc, #548]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d06c      	beq.n	8005078 <HAL_RCC_OscConfig+0x12c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d168      	bne.n	8005078 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e246      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb2:	d106      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x76>
 8004fb4:	4b80      	ldr	r3, [pc, #512]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a7f      	ldr	r2, [pc, #508]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	e02e      	b.n	8005020 <HAL_RCC_OscConfig+0xd4>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x98>
 8004fca:	4b7b      	ldr	r3, [pc, #492]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a7a      	ldr	r2, [pc, #488]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	4b78      	ldr	r3, [pc, #480]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a77      	ldr	r2, [pc, #476]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004fdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	e01d      	b.n	8005020 <HAL_RCC_OscConfig+0xd4>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fec:	d10c      	bne.n	8005008 <HAL_RCC_OscConfig+0xbc>
 8004fee:	4b72      	ldr	r3, [pc, #456]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a71      	ldr	r2, [pc, #452]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	4b6f      	ldr	r3, [pc, #444]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a6e      	ldr	r2, [pc, #440]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8005000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	e00b      	b.n	8005020 <HAL_RCC_OscConfig+0xd4>
 8005008:	4b6b      	ldr	r3, [pc, #428]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a6a      	ldr	r2, [pc, #424]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 800500e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	4b68      	ldr	r3, [pc, #416]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a67      	ldr	r2, [pc, #412]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 800501a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800501e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d013      	beq.n	8005050 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7ff f996 	bl	8004358 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005030:	f7ff f992 	bl	8004358 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	; 0x64
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e1fa      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	4b5d      	ldr	r3, [pc, #372]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0xe4>
 800504e:	e014      	b.n	800507a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005050:	f7ff f982 	bl	8004358 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005058:	f7ff f97e 	bl	8004358 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b64      	cmp	r3, #100	; 0x64
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e1e6      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506a:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x10c>
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d063      	beq.n	800514e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005086:	4b4c      	ldr	r3, [pc, #304]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00b      	beq.n	80050aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005092:	4b49      	ldr	r3, [pc, #292]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b08      	cmp	r3, #8
 800509c:	d11c      	bne.n	80050d8 <HAL_RCC_OscConfig+0x18c>
 800509e:	4b46      	ldr	r3, [pc, #280]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d116      	bne.n	80050d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050aa:	4b43      	ldr	r3, [pc, #268]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_RCC_OscConfig+0x176>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d001      	beq.n	80050c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e1ba      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c2:	4b3d      	ldr	r3, [pc, #244]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	4939      	ldr	r1, [pc, #228]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050d6:	e03a      	b.n	800514e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d020      	beq.n	8005122 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e0:	4b36      	ldr	r3, [pc, #216]	; (80051bc <HAL_RCC_OscConfig+0x270>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e6:	f7ff f937 	bl	8004358 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ee:	f7ff f933 	bl	8004358 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e19b      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005100:	4b2d      	ldr	r3, [pc, #180]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510c:	4b2a      	ldr	r3, [pc, #168]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	4927      	ldr	r1, [pc, #156]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 800511c:	4313      	orrs	r3, r2
 800511e:	600b      	str	r3, [r1, #0]
 8005120:	e015      	b.n	800514e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005122:	4b26      	ldr	r3, [pc, #152]	; (80051bc <HAL_RCC_OscConfig+0x270>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005128:	f7ff f916 	bl	8004358 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005130:	f7ff f912 	bl	8004358 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e17a      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005142:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d03a      	beq.n	80051d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d019      	beq.n	8005196 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005162:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005168:	f7ff f8f6 	bl	8004358 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005170:	f7ff f8f2 	bl	8004358 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e15a      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <HAL_RCC_OscConfig+0x26c>)
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800518e:	2001      	movs	r0, #1
 8005190:	f000 fb0a 	bl	80057a8 <RCC_Delay>
 8005194:	e01c      	b.n	80051d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <HAL_RCC_OscConfig+0x274>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800519c:	f7ff f8dc 	bl	8004358 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a2:	e00f      	b.n	80051c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a4:	f7ff f8d8 	bl	8004358 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d908      	bls.n	80051c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e140      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000
 80051bc:	42420000 	.word	0x42420000
 80051c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c4:	4b9e      	ldr	r3, [pc, #632]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e9      	bne.n	80051a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80a6 	beq.w	800532a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051de:	2300      	movs	r3, #0
 80051e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051e2:	4b97      	ldr	r3, [pc, #604]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10d      	bne.n	800520a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ee:	4b94      	ldr	r3, [pc, #592]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	4a93      	ldr	r2, [pc, #588]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80051f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f8:	61d3      	str	r3, [r2, #28]
 80051fa:	4b91      	ldr	r3, [pc, #580]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005202:	60bb      	str	r3, [r7, #8]
 8005204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520a:	4b8e      	ldr	r3, [pc, #568]	; (8005444 <HAL_RCC_OscConfig+0x4f8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	2b00      	cmp	r3, #0
 8005214:	d118      	bne.n	8005248 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005216:	4b8b      	ldr	r3, [pc, #556]	; (8005444 <HAL_RCC_OscConfig+0x4f8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a8a      	ldr	r2, [pc, #552]	; (8005444 <HAL_RCC_OscConfig+0x4f8>)
 800521c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005222:	f7ff f899 	bl	8004358 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522a:	f7ff f895 	bl	8004358 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b64      	cmp	r3, #100	; 0x64
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e0fd      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523c:	4b81      	ldr	r3, [pc, #516]	; (8005444 <HAL_RCC_OscConfig+0x4f8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0f0      	beq.n	800522a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d106      	bne.n	800525e <HAL_RCC_OscConfig+0x312>
 8005250:	4b7b      	ldr	r3, [pc, #492]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	4a7a      	ldr	r2, [pc, #488]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6213      	str	r3, [r2, #32]
 800525c:	e02d      	b.n	80052ba <HAL_RCC_OscConfig+0x36e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10c      	bne.n	8005280 <HAL_RCC_OscConfig+0x334>
 8005266:	4b76      	ldr	r3, [pc, #472]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	4a75      	ldr	r2, [pc, #468]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 800526c:	f023 0301 	bic.w	r3, r3, #1
 8005270:	6213      	str	r3, [r2, #32]
 8005272:	4b73      	ldr	r3, [pc, #460]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	4a72      	ldr	r2, [pc, #456]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005278:	f023 0304 	bic.w	r3, r3, #4
 800527c:	6213      	str	r3, [r2, #32]
 800527e:	e01c      	b.n	80052ba <HAL_RCC_OscConfig+0x36e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2b05      	cmp	r3, #5
 8005286:	d10c      	bne.n	80052a2 <HAL_RCC_OscConfig+0x356>
 8005288:	4b6d      	ldr	r3, [pc, #436]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	4a6c      	ldr	r2, [pc, #432]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 800528e:	f043 0304 	orr.w	r3, r3, #4
 8005292:	6213      	str	r3, [r2, #32]
 8005294:	4b6a      	ldr	r3, [pc, #424]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	4a69      	ldr	r2, [pc, #420]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	6213      	str	r3, [r2, #32]
 80052a0:	e00b      	b.n	80052ba <HAL_RCC_OscConfig+0x36e>
 80052a2:	4b67      	ldr	r3, [pc, #412]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	4a66      	ldr	r2, [pc, #408]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	6213      	str	r3, [r2, #32]
 80052ae:	4b64      	ldr	r3, [pc, #400]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	4a63      	ldr	r2, [pc, #396]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80052b4:	f023 0304 	bic.w	r3, r3, #4
 80052b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d015      	beq.n	80052ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c2:	f7ff f849 	bl	8004358 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c8:	e00a      	b.n	80052e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ca:	f7ff f845 	bl	8004358 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d8:	4293      	cmp	r3, r2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e0ab      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e0:	4b57      	ldr	r3, [pc, #348]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0ee      	beq.n	80052ca <HAL_RCC_OscConfig+0x37e>
 80052ec:	e014      	b.n	8005318 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ee:	f7ff f833 	bl	8004358 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f4:	e00a      	b.n	800530c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f6:	f7ff f82f 	bl	8004358 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f241 3288 	movw	r2, #5000	; 0x1388
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e095      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530c:	4b4c      	ldr	r3, [pc, #304]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1ee      	bne.n	80052f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d105      	bne.n	800532a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531e:	4b48      	ldr	r3, [pc, #288]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	4a47      	ldr	r2, [pc, #284]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005328:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 8081 	beq.w	8005436 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005334:	4b42      	ldr	r3, [pc, #264]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 030c 	and.w	r3, r3, #12
 800533c:	2b08      	cmp	r3, #8
 800533e:	d061      	beq.n	8005404 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d146      	bne.n	80053d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005348:	4b3f      	ldr	r3, [pc, #252]	; (8005448 <HAL_RCC_OscConfig+0x4fc>)
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534e:	f7ff f803 	bl	8004358 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005356:	f7fe ffff 	bl	8004358 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e067      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005368:	4b35      	ldr	r3, [pc, #212]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f0      	bne.n	8005356 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537c:	d108      	bne.n	8005390 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800537e:	4b30      	ldr	r3, [pc, #192]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	492d      	ldr	r1, [pc, #180]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 800538c:	4313      	orrs	r3, r2
 800538e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005390:	4b2b      	ldr	r3, [pc, #172]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a19      	ldr	r1, [r3, #32]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	430b      	orrs	r3, r1
 80053a2:	4927      	ldr	r1, [pc, #156]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053a8:	4b27      	ldr	r3, [pc, #156]	; (8005448 <HAL_RCC_OscConfig+0x4fc>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ae:	f7fe ffd3 	bl	8004358 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b6:	f7fe ffcf 	bl	8004358 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e037      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053c8:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0f0      	beq.n	80053b6 <HAL_RCC_OscConfig+0x46a>
 80053d4:	e02f      	b.n	8005436 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d6:	4b1c      	ldr	r3, [pc, #112]	; (8005448 <HAL_RCC_OscConfig+0x4fc>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053dc:	f7fe ffbc 	bl	8004358 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e4:	f7fe ffb8 	bl	8004358 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e020      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f6:	4b12      	ldr	r3, [pc, #72]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0x498>
 8005402:	e018      	b.n	8005436 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e013      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <HAL_RCC_OscConfig+0x4f4>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	429a      	cmp	r2, r3
 8005422:	d106      	bne.n	8005432 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d001      	beq.n	8005436 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40021000 	.word	0x40021000
 8005444:	40007000 	.word	0x40007000
 8005448:	42420060 	.word	0x42420060

0800544c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0d0      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005460:	4b6a      	ldr	r3, [pc, #424]	; (800560c <HAL_RCC_ClockConfig+0x1c0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d910      	bls.n	8005490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546e:	4b67      	ldr	r3, [pc, #412]	; (800560c <HAL_RCC_ClockConfig+0x1c0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 0207 	bic.w	r2, r3, #7
 8005476:	4965      	ldr	r1, [pc, #404]	; (800560c <HAL_RCC_ClockConfig+0x1c0>)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547e:	4b63      	ldr	r3, [pc, #396]	; (800560c <HAL_RCC_ClockConfig+0x1c0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0b8      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d020      	beq.n	80054de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a8:	4b59      	ldr	r3, [pc, #356]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4a58      	ldr	r2, [pc, #352]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054c0:	4b53      	ldr	r3, [pc, #332]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a52      	ldr	r2, [pc, #328]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80054ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054cc:	4b50      	ldr	r3, [pc, #320]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	494d      	ldr	r1, [pc, #308]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d040      	beq.n	800556c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d107      	bne.n	8005502 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f2:	4b47      	ldr	r3, [pc, #284]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d115      	bne.n	800552a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e07f      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d107      	bne.n	800551a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550a:	4b41      	ldr	r3, [pc, #260]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e073      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551a:	4b3d      	ldr	r3, [pc, #244]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e06b      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800552a:	4b39      	ldr	r3, [pc, #228]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f023 0203 	bic.w	r2, r3, #3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4936      	ldr	r1, [pc, #216]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	4313      	orrs	r3, r2
 800553a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800553c:	f7fe ff0c 	bl	8004358 <HAL_GetTick>
 8005540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005542:	e00a      	b.n	800555a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005544:	f7fe ff08 	bl	8004358 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e053      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555a:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 020c 	and.w	r2, r3, #12
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	429a      	cmp	r2, r3
 800556a:	d1eb      	bne.n	8005544 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800556c:	4b27      	ldr	r3, [pc, #156]	; (800560c <HAL_RCC_ClockConfig+0x1c0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d210      	bcs.n	800559c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b24      	ldr	r3, [pc, #144]	; (800560c <HAL_RCC_ClockConfig+0x1c0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 0207 	bic.w	r2, r3, #7
 8005582:	4922      	ldr	r1, [pc, #136]	; (800560c <HAL_RCC_ClockConfig+0x1c0>)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	4b20      	ldr	r3, [pc, #128]	; (800560c <HAL_RCC_ClockConfig+0x1c0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d001      	beq.n	800559c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e032      	b.n	8005602 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a8:	4b19      	ldr	r3, [pc, #100]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4916      	ldr	r1, [pc, #88]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055c6:	4b12      	ldr	r3, [pc, #72]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	490e      	ldr	r1, [pc, #56]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055da:	f000 f821 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 80055de:	4601      	mov	r1, r0
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <HAL_RCC_ClockConfig+0x1c4>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	091b      	lsrs	r3, r3, #4
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	4a0a      	ldr	r2, [pc, #40]	; (8005614 <HAL_RCC_ClockConfig+0x1c8>)
 80055ec:	5cd3      	ldrb	r3, [r2, r3]
 80055ee:	fa21 f303 	lsr.w	r3, r1, r3
 80055f2:	4a09      	ldr	r2, [pc, #36]	; (8005618 <HAL_RCC_ClockConfig+0x1cc>)
 80055f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCC_ClockConfig+0x1d0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fd fa68 	bl	8002ad0 <HAL_InitTick>

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40022000 	.word	0x40022000
 8005610:	40021000 	.word	0x40021000
 8005614:	0800a518 	.word	0x0800a518
 8005618:	2000001c 	.word	0x2000001c
 800561c:	20000044 	.word	0x20000044

08005620 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005620:	b490      	push	{r4, r7}
 8005622:	b08a      	sub	sp, #40	; 0x28
 8005624:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005626:	4b2a      	ldr	r3, [pc, #168]	; (80056d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005628:	1d3c      	adds	r4, r7, #4
 800562a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800562c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005630:	4b28      	ldr	r3, [pc, #160]	; (80056d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
 800563a:	2300      	movs	r3, #0
 800563c:	61bb      	str	r3, [r7, #24]
 800563e:	2300      	movs	r3, #0
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800564a:	4b23      	ldr	r3, [pc, #140]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	2b04      	cmp	r3, #4
 8005658:	d002      	beq.n	8005660 <HAL_RCC_GetSysClockFreq+0x40>
 800565a:	2b08      	cmp	r3, #8
 800565c:	d003      	beq.n	8005666 <HAL_RCC_GetSysClockFreq+0x46>
 800565e:	e02d      	b.n	80056bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005660:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005662:	623b      	str	r3, [r7, #32]
      break;
 8005664:	e02d      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	0c9b      	lsrs	r3, r3, #18
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005672:	4413      	add	r3, r2
 8005674:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005678:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d013      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005684:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	0c5b      	lsrs	r3, r3, #17
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005692:	4413      	add	r3, r2
 8005694:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005698:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	4a0f      	ldr	r2, [pc, #60]	; (80056dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800569e:	fb02 f203 	mul.w	r2, r2, r3
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
 80056aa:	e004      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056b0:	fb02 f303 	mul.w	r3, r2, r3
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	623b      	str	r3, [r7, #32]
      break;
 80056ba:	e002      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056bc:	4b07      	ldr	r3, [pc, #28]	; (80056dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80056be:	623b      	str	r3, [r7, #32]
      break;
 80056c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056c2:	6a3b      	ldr	r3, [r7, #32]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3728      	adds	r7, #40	; 0x28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc90      	pop	{r4, r7}
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	0800a438 	.word	0x0800a438
 80056d4:	0800a448 	.word	0x0800a448
 80056d8:	40021000 	.word	0x40021000
 80056dc:	007a1200 	.word	0x007a1200
 80056e0:	003d0900 	.word	0x003d0900

080056e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056e8:	4b02      	ldr	r3, [pc, #8]	; (80056f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80056ea:	681b      	ldr	r3, [r3, #0]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr
 80056f4:	2000001c 	.word	0x2000001c

080056f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056fc:	f7ff fff2 	bl	80056e4 <HAL_RCC_GetHCLKFreq>
 8005700:	4601      	mov	r1, r0
 8005702:	4b05      	ldr	r3, [pc, #20]	; (8005718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	0a1b      	lsrs	r3, r3, #8
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	4a03      	ldr	r2, [pc, #12]	; (800571c <HAL_RCC_GetPCLK1Freq+0x24>)
 800570e:	5cd3      	ldrb	r3, [r2, r3]
 8005710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005714:	4618      	mov	r0, r3
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40021000 	.word	0x40021000
 800571c:	0800a528 	.word	0x0800a528

08005720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005724:	f7ff ffde 	bl	80056e4 <HAL_RCC_GetHCLKFreq>
 8005728:	4601      	mov	r1, r0
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	0adb      	lsrs	r3, r3, #11
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	4a03      	ldr	r2, [pc, #12]	; (8005744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005736:	5cd3      	ldrb	r3, [r2, r3]
 8005738:	fa21 f303 	lsr.w	r3, r1, r3
}
 800573c:	4618      	mov	r0, r3
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40021000 	.word	0x40021000
 8005744:	0800a528 	.word	0x0800a528

08005748 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	220f      	movs	r2, #15
 8005756:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005758:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <HAL_RCC_GetClockConfig+0x58>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0203 	and.w	r2, r3, #3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005764:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <HAL_RCC_GetClockConfig+0x58>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <HAL_RCC_GetClockConfig+0x58>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800577c:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <HAL_RCC_GetClockConfig+0x58>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	08db      	lsrs	r3, r3, #3
 8005782:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800578a:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <HAL_RCC_GetClockConfig+0x5c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0207 	and.w	r2, r3, #7
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40022000 	.word	0x40022000

080057a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057b0:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <RCC_Delay+0x34>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <RCC_Delay+0x38>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	0a5b      	lsrs	r3, r3, #9
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	fb02 f303 	mul.w	r3, r2, r3
 80057c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057c4:	bf00      	nop
  }
  while (Delay --);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1e5a      	subs	r2, r3, #1
 80057ca:	60fa      	str	r2, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f9      	bne.n	80057c4 <RCC_Delay+0x1c>
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	2000001c 	.word	0x2000001c
 80057e0:	10624dd3 	.word	0x10624dd3

080057e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e076      	b.n	80058e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d108      	bne.n	8005810 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005806:	d009      	beq.n	800581c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	61da      	str	r2, [r3, #28]
 800580e:	e005      	b.n	800581c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fd f8fe 	bl	8002a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005852:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a0:	ea42 0103 	orr.w	r1, r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	0c1a      	lsrs	r2, r3, #16
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f002 0204 	and.w	r2, r2, #4
 80058c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69da      	ldr	r2, [r3, #28]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08c      	sub	sp, #48	; 0x30
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058fa:	2301      	movs	r3, #1
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_SPI_TransmitReceive+0x26>
 800590e:	2302      	movs	r3, #2
 8005910:	e18a      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x33c>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800591a:	f7fe fd1d 	bl	8004358 <HAL_GetTick>
 800591e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005930:	887b      	ldrh	r3, [r7, #2]
 8005932:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005938:	2b01      	cmp	r3, #1
 800593a:	d00f      	beq.n	800595c <HAL_SPI_TransmitReceive+0x70>
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005942:	d107      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d103      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x68>
 800594c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005950:	2b04      	cmp	r3, #4
 8005952:	d003      	beq.n	800595c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005954:	2302      	movs	r3, #2
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800595a:	e15b      	b.n	8005c14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_SPI_TransmitReceive+0x82>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_SPI_TransmitReceive+0x82>
 8005968:	887b      	ldrh	r3, [r7, #2]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d103      	bne.n	8005976 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005974:	e14e      	b.n	8005c14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b04      	cmp	r3, #4
 8005980:	d003      	beq.n	800598a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2205      	movs	r2, #5
 8005986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	887a      	ldrh	r2, [r7, #2]
 800599a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	887a      	ldrh	r2, [r7, #2]
 80059a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	887a      	ldrh	r2, [r7, #2]
 80059ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	887a      	ldrh	r2, [r7, #2]
 80059b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	d007      	beq.n	80059de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e6:	d178      	bne.n	8005ada <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_SPI_TransmitReceive+0x10a>
 80059f0:	8b7b      	ldrh	r3, [r7, #26]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d166      	bne.n	8005ac4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	881a      	ldrh	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	1c9a      	adds	r2, r3, #2
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a1a:	e053      	b.n	8005ac4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d11b      	bne.n	8005a62 <HAL_SPI_TransmitReceive+0x176>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d016      	beq.n	8005a62 <HAL_SPI_TransmitReceive+0x176>
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d113      	bne.n	8005a62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	881a      	ldrh	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	1c9a      	adds	r2, r3, #2
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d119      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x1b8>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d014      	beq.n	8005aa4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	b292      	uxth	r2, r2
 8005a86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	1c9a      	adds	r2, r3, #2
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005aa4:	f7fe fc58 	bl	8004358 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d807      	bhi.n	8005ac4 <HAL_SPI_TransmitReceive+0x1d8>
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d003      	beq.n	8005ac4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ac2:	e0a7      	b.n	8005c14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1a6      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x130>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1a1      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x130>
 8005ad8:	e07c      	b.n	8005bd4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x1fc>
 8005ae2:	8b7b      	ldrh	r3, [r7, #26]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d16b      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	7812      	ldrb	r2, [r2, #0]
 8005af4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b0e:	e057      	b.n	8005bc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d11c      	bne.n	8005b58 <HAL_SPI_TransmitReceive+0x26c>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d017      	beq.n	8005b58 <HAL_SPI_TransmitReceive+0x26c>
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d114      	bne.n	8005b58 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	7812      	ldrb	r2, [r2, #0]
 8005b3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d119      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x2ae>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d014      	beq.n	8005b9a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b96:	2301      	movs	r3, #1
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b9a:	f7fe fbdd 	bl	8004358 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d803      	bhi.n	8005bb2 <HAL_SPI_TransmitReceive+0x2c6>
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d102      	bne.n	8005bb8 <HAL_SPI_TransmitReceive+0x2cc>
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d103      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bbe:	e029      	b.n	8005c14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1a2      	bne.n	8005b10 <HAL_SPI_TransmitReceive+0x224>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d19d      	bne.n	8005b10 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f8b1 	bl	8005d40 <SPI_EndRxTxTransaction>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d006      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2220      	movs	r2, #32
 8005bee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005bf0:	e010      	b.n	8005c14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10b      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	e000      	b.n	8005c14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3730      	adds	r7, #48	; 0x30
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c40:	f7fe fb8a 	bl	8004358 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	1a9b      	subs	r3, r3, r2
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c50:	f7fe fb82 	bl	8004358 <HAL_GetTick>
 8005c54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c56:	4b39      	ldr	r3, [pc, #228]	; (8005d3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	015b      	lsls	r3, r3, #5
 8005c5c:	0d1b      	lsrs	r3, r3, #20
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	fb02 f303 	mul.w	r3, r2, r3
 8005c64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c66:	e054      	b.n	8005d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d050      	beq.n	8005d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c70:	f7fe fb72 	bl	8004358 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d902      	bls.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d13d      	bne.n	8005d02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c9e:	d111      	bne.n	8005cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca8:	d004      	beq.n	8005cb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb2:	d107      	bne.n	8005cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ccc:	d10f      	bne.n	8005cee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e017      	b.n	8005d32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d19b      	bne.n	8005c68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	2000001c 	.word	0x2000001c

08005d40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2200      	movs	r2, #0
 8005d54:	2180      	movs	r1, #128	; 0x80
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff ff6a 	bl	8005c30 <SPI_WaitFlagStateUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d66:	f043 0220 	orr.w	r2, r3, #32
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e000      	b.n	8005d74 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e041      	b.n	8005e12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f839 	bl	8005e1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f000 f9b4 	bl	8006128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d001      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e03a      	b.n	8005eba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a18      	ldr	r2, [pc, #96]	; (8005ec4 <HAL_TIM_Base_Start_IT+0x98>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00e      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x58>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6e:	d009      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x58>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a14      	ldr	r2, [pc, #80]	; (8005ec8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x58>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <HAL_TIM_Base_Start_IT+0xa0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d111      	bne.n	8005ea8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b06      	cmp	r3, #6
 8005e94:	d010      	beq.n	8005eb8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0201 	orr.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea6:	e007      	b.n	8005eb8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800

08005ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d122      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d11b      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0202 	mvn.w	r2, #2
 8005efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f8ed 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f8e0 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f8ef 	bl	8006104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d122      	bne.n	8005f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d11b      	bne.n	8005f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0204 	mvn.w	r2, #4
 8005f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f8c3 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8b6 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f8c5 	bl	8006104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d122      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d11b      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0208 	mvn.w	r2, #8
 8005fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2204      	movs	r2, #4
 8005faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f899 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005fc0:	e005      	b.n	8005fce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f88c 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f89b 	bl	8006104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d122      	bne.n	8006028 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b10      	cmp	r3, #16
 8005fee:	d11b      	bne.n	8006028 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0210 	mvn.w	r2, #16
 8005ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f86f 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8006014:	e005      	b.n	8006022 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f862 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f871 	bl	8006104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b01      	cmp	r3, #1
 8006034:	d10e      	bne.n	8006054 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b01      	cmp	r3, #1
 8006042:	d107      	bne.n	8006054 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0201 	mvn.w	r2, #1
 800604c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fc fc62 	bl	8002918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605e:	2b80      	cmp	r3, #128	; 0x80
 8006060:	d10e      	bne.n	8006080 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606c:	2b80      	cmp	r3, #128	; 0x80
 800606e:	d107      	bne.n	8006080 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f8bf 	bl	80061fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d10e      	bne.n	80060ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006098:	2b40      	cmp	r3, #64	; 0x40
 800609a:	d107      	bne.n	80060ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f835 	bl	8006116 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d10e      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d107      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0220 	mvn.w	r2, #32
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f88a 	bl	80061ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060d8:	bf00      	nop
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr

080060f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	bc80      	pop	{r7}
 8006114:	4770      	bx	lr

08006116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a29      	ldr	r2, [pc, #164]	; (80061e0 <TIM_Base_SetConfig+0xb8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00b      	beq.n	8006158 <TIM_Base_SetConfig+0x30>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006146:	d007      	beq.n	8006158 <TIM_Base_SetConfig+0x30>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a26      	ldr	r2, [pc, #152]	; (80061e4 <TIM_Base_SetConfig+0xbc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d003      	beq.n	8006158 <TIM_Base_SetConfig+0x30>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a25      	ldr	r2, [pc, #148]	; (80061e8 <TIM_Base_SetConfig+0xc0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d108      	bne.n	800616a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a1c      	ldr	r2, [pc, #112]	; (80061e0 <TIM_Base_SetConfig+0xb8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00b      	beq.n	800618a <TIM_Base_SetConfig+0x62>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006178:	d007      	beq.n	800618a <TIM_Base_SetConfig+0x62>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <TIM_Base_SetConfig+0xbc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d003      	beq.n	800618a <TIM_Base_SetConfig+0x62>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <TIM_Base_SetConfig+0xc0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d108      	bne.n	800619c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a07      	ldr	r2, [pc, #28]	; (80061e0 <TIM_Base_SetConfig+0xb8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d103      	bne.n	80061d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	615a      	str	r2, [r3, #20]
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40000400 	.word	0x40000400
 80061e8:	40000800 	.word	0x40000800

080061ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bc80      	pop	{r7}
 80061fc:	4770      	bx	lr

080061fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006216:	f3ef 8305 	mrs	r3, IPSR
 800621a:	60bb      	str	r3, [r7, #8]
  return(result);
 800621c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10f      	bne.n	8006242 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006222:	f3ef 8310 	mrs	r3, PRIMASK
 8006226:	607b      	str	r3, [r7, #4]
  return(result);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d109      	bne.n	8006242 <osKernelInitialize+0x32>
 800622e:	4b10      	ldr	r3, [pc, #64]	; (8006270 <osKernelInitialize+0x60>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d109      	bne.n	800624a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006236:	f3ef 8311 	mrs	r3, BASEPRI
 800623a:	603b      	str	r3, [r7, #0]
  return(result);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006242:	f06f 0305 	mvn.w	r3, #5
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	e00c      	b.n	8006264 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800624a:	4b09      	ldr	r3, [pc, #36]	; (8006270 <osKernelInitialize+0x60>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d105      	bne.n	800625e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006252:	4b07      	ldr	r3, [pc, #28]	; (8006270 <osKernelInitialize+0x60>)
 8006254:	2201      	movs	r2, #1
 8006256:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	e002      	b.n	8006264 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
 8006262:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006264:	68fb      	ldr	r3, [r7, #12]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	bc80      	pop	{r7}
 800626e:	4770      	bx	lr
 8006270:	20000274 	.word	0x20000274

08006274 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800627a:	f3ef 8305 	mrs	r3, IPSR
 800627e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006280:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10f      	bne.n	80062a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006286:	f3ef 8310 	mrs	r3, PRIMASK
 800628a:	607b      	str	r3, [r7, #4]
  return(result);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <osKernelStart+0x32>
 8006292:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <osKernelStart+0x64>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d109      	bne.n	80062ae <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800629a:	f3ef 8311 	mrs	r3, BASEPRI
 800629e:	603b      	str	r3, [r7, #0]
  return(result);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80062a6:	f06f 0305 	mvn.w	r3, #5
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	e00e      	b.n	80062cc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80062ae:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <osKernelStart+0x64>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d107      	bne.n	80062c6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80062b6:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <osKernelStart+0x64>)
 80062b8:	2202      	movs	r2, #2
 80062ba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80062bc:	f001 f864 	bl	8007388 <vTaskStartScheduler>
      stat = osOK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e002      	b.n	80062cc <osKernelStart+0x58>
    } else {
      stat = osError;
 80062c6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062cc:	68fb      	ldr	r3, [r7, #12]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000274 	.word	0x20000274

080062dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b092      	sub	sp, #72	; 0x48
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062ec:	f3ef 8305 	mrs	r3, IPSR
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f040 8094 	bne.w	8006422 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062fa:	f3ef 8310 	mrs	r3, PRIMASK
 80062fe:	623b      	str	r3, [r7, #32]
  return(result);
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f040 808d 	bne.w	8006422 <osThreadNew+0x146>
 8006308:	4b48      	ldr	r3, [pc, #288]	; (800642c <osThreadNew+0x150>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d106      	bne.n	800631e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006310:	f3ef 8311 	mrs	r3, BASEPRI
 8006314:	61fb      	str	r3, [r7, #28]
  return(result);
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f040 8082 	bne.w	8006422 <osThreadNew+0x146>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d07e      	beq.n	8006422 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006328:	2318      	movs	r3, #24
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800632c:	2300      	movs	r3, #0
 800632e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006330:	f107 031b 	add.w	r3, r7, #27
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006336:	f04f 33ff 	mov.w	r3, #4294967295
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d045      	beq.n	80063ce <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <osThreadNew+0x74>
        name = attr->name;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <osThreadNew+0x9a>
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	2b38      	cmp	r3, #56	; 0x38
 8006368:	d805      	bhi.n	8006376 <osThreadNew+0x9a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <osThreadNew+0x9e>
        return (NULL);
 8006376:	2300      	movs	r3, #0
 8006378:	e054      	b.n	8006424 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	089b      	lsrs	r3, r3, #2
 8006388:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00e      	beq.n	80063b0 <osThreadNew+0xd4>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	2b5b      	cmp	r3, #91	; 0x5b
 8006398:	d90a      	bls.n	80063b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d006      	beq.n	80063b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <osThreadNew+0xd4>
        mem = 1;
 80063aa:	2301      	movs	r3, #1
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ae:	e010      	b.n	80063d2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10c      	bne.n	80063d2 <osThreadNew+0xf6>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d108      	bne.n	80063d2 <osThreadNew+0xf6>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <osThreadNew+0xf6>
          mem = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80063cc:	e001      	b.n	80063d2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d110      	bne.n	80063fa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063e0:	9202      	str	r2, [sp, #8]
 80063e2:	9301      	str	r3, [sp, #4]
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 fe02 	bl	8006ff8 <xTaskCreateStatic>
 80063f4:	4603      	mov	r3, r0
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	e013      	b.n	8006422 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d110      	bne.n	8006422 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	b29a      	uxth	r2, r3
 8006404:	f107 0314 	add.w	r3, r7, #20
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 fe49 	bl	80070aa <xTaskCreate>
 8006418:	4603      	mov	r3, r0
 800641a:	2b01      	cmp	r3, #1
 800641c:	d001      	beq.n	8006422 <osThreadNew+0x146>
          hTask = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006422:	697b      	ldr	r3, [r7, #20]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3738      	adds	r7, #56	; 0x38
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20000274 	.word	0x20000274

08006430 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006438:	f3ef 8305 	mrs	r3, IPSR
 800643c:	613b      	str	r3, [r7, #16]
  return(result);
 800643e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10f      	bne.n	8006464 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006444:	f3ef 8310 	mrs	r3, PRIMASK
 8006448:	60fb      	str	r3, [r7, #12]
  return(result);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d109      	bne.n	8006464 <osDelay+0x34>
 8006450:	4b0d      	ldr	r3, [pc, #52]	; (8006488 <osDelay+0x58>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d109      	bne.n	800646c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006458:	f3ef 8311 	mrs	r3, BASEPRI
 800645c:	60bb      	str	r3, [r7, #8]
  return(result);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <osDelay+0x3c>
    stat = osErrorISR;
 8006464:	f06f 0305 	mvn.w	r3, #5
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e007      	b.n	800647c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 ff52 	bl	8007320 <vTaskDelay>
    }
  }

  return (stat);
 800647c:	697b      	ldr	r3, [r7, #20]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000274 	.word	0x20000274

0800648c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4a06      	ldr	r2, [pc, #24]	; (80064b4 <vApplicationGetIdleTaskMemory+0x28>)
 800649c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4a05      	ldr	r2, [pc, #20]	; (80064b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80064a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2280      	movs	r2, #128	; 0x80
 80064a8:	601a      	str	r2, [r3, #0]
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr
 80064b4:	20000278 	.word	0x20000278
 80064b8:	200002d4 	.word	0x200002d4

080064bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4a07      	ldr	r2, [pc, #28]	; (80064e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80064cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4a06      	ldr	r2, [pc, #24]	; (80064ec <vApplicationGetTimerTaskMemory+0x30>)
 80064d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064da:	601a      	str	r2, [r3, #0]
}
 80064dc:	bf00      	nop
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	200004d4 	.word	0x200004d4
 80064ec:	20000530 	.word	0x20000530

080064f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f103 0208 	add.w	r2, r3, #8
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f04f 32ff 	mov.w	r2, #4294967295
 8006508:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f103 0208 	add.w	r2, r3, #8
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f103 0208 	add.w	r2, r3, #8
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr

0800652e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr

08006546 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr

0800658c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a2:	d103      	bne.n	80065ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	e00c      	b.n	80065c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3308      	adds	r3, #8
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	e002      	b.n	80065ba <vListInsert+0x2e>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d2f6      	bcs.n	80065b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	601a      	str	r2, [r3, #0]
}
 80065f2:	bf00      	nop
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr

080065fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6892      	ldr	r2, [r2, #8]
 8006612:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6852      	ldr	r2, [r2, #4]
 800661c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	429a      	cmp	r2, r3
 8006626:	d103      	bne.n	8006630 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	1e5a      	subs	r2, r3, #1
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr
	...

08006650 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	60bb      	str	r3, [r7, #8]
 8006676:	e7fe      	b.n	8006676 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006678:	f001 ff96 	bl	80085a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006684:	68f9      	ldr	r1, [r7, #12]
 8006686:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006688:	fb01 f303 	mul.w	r3, r1, r3
 800668c:	441a      	add	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a8:	3b01      	subs	r3, #1
 80066aa:	68f9      	ldr	r1, [r7, #12]
 80066ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066ae:	fb01 f303 	mul.w	r3, r1, r3
 80066b2:	441a      	add	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	22ff      	movs	r2, #255	; 0xff
 80066bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	22ff      	movs	r2, #255	; 0xff
 80066c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d114      	bne.n	80066f8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01a      	beq.n	800670c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3310      	adds	r3, #16
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 f8d8 	bl	8007890 <xTaskRemoveFromEventList>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d012      	beq.n	800670c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066e6:	4b0d      	ldr	r3, [pc, #52]	; (800671c <xQueueGenericReset+0xcc>)
 80066e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	e009      	b.n	800670c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3310      	adds	r3, #16
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fef7 	bl	80064f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3324      	adds	r3, #36	; 0x24
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fef2 	bl	80064f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800670c:	f001 ff7a 	bl	8008604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006710:	2301      	movs	r3, #1
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	; 0x38
 8006724:	af02      	add	r7, sp, #8
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d109      	bne.n	8006748 <xQueueGenericCreateStatic+0x28>
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	62bb      	str	r3, [r7, #40]	; 0x28
 8006746:	e7fe      	b.n	8006746 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <xQueueGenericCreateStatic+0x42>
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
 8006760:	e7fe      	b.n	8006760 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <xQueueGenericCreateStatic+0x4e>
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <xQueueGenericCreateStatic+0x52>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <xQueueGenericCreateStatic+0x54>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <xQueueGenericCreateStatic+0x6c>
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	623b      	str	r3, [r7, #32]
 800678a:	e7fe      	b.n	800678a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d102      	bne.n	8006798 <xQueueGenericCreateStatic+0x78>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <xQueueGenericCreateStatic+0x7c>
 8006798:	2301      	movs	r3, #1
 800679a:	e000      	b.n	800679e <xQueueGenericCreateStatic+0x7e>
 800679c:	2300      	movs	r3, #0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d109      	bne.n	80067b6 <xQueueGenericCreateStatic+0x96>
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	e7fe      	b.n	80067b4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067b6:	2350      	movs	r3, #80	; 0x50
 80067b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b50      	cmp	r3, #80	; 0x50
 80067be:	d009      	beq.n	80067d4 <xQueueGenericCreateStatic+0xb4>
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	61bb      	str	r3, [r7, #24]
 80067d2:	e7fe      	b.n	80067d2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00d      	beq.n	80067fa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	4613      	mov	r3, r2
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f805 	bl	8006804 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3730      	adds	r7, #48	; 0x30
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d103      	bne.n	8006820 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e002      	b.n	8006826 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006832:	2101      	movs	r1, #1
 8006834:	69b8      	ldr	r0, [r7, #24]
 8006836:	f7ff ff0b 	bl	8006650 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	78fa      	ldrb	r2, [r7, #3]
 800683e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006842:	bf00      	nop
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08e      	sub	sp, #56	; 0x38
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800685a:	2300      	movs	r3, #0
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <xQueueGenericSend+0x30>
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	62bb      	str	r3, [r7, #40]	; 0x28
 800687a:	e7fe      	b.n	800687a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <xQueueGenericSend+0x3e>
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <xQueueGenericSend+0x42>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <xQueueGenericSend+0x44>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <xQueueGenericSend+0x5c>
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
 80068a6:	e7fe      	b.n	80068a6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d103      	bne.n	80068b6 <xQueueGenericSend+0x6a>
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <xQueueGenericSend+0x6e>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <xQueueGenericSend+0x70>
 80068ba:	2300      	movs	r3, #0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <xQueueGenericSend+0x88>
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	623b      	str	r3, [r7, #32]
 80068d2:	e7fe      	b.n	80068d2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068d4:	f001 f996 	bl	8007c04 <xTaskGetSchedulerState>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <xQueueGenericSend+0x98>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <xQueueGenericSend+0x9c>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <xQueueGenericSend+0x9e>
 80068e8:	2300      	movs	r3, #0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <xQueueGenericSend+0xb6>
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	61fb      	str	r3, [r7, #28]
 8006900:	e7fe      	b.n	8006900 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006902:	f001 fe51 	bl	80085a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690e:	429a      	cmp	r2, r3
 8006910:	d302      	bcc.n	8006918 <xQueueGenericSend+0xcc>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b02      	cmp	r3, #2
 8006916:	d129      	bne.n	800696c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800691e:	f000 f9ff 	bl	8006d20 <prvCopyDataToQueue>
 8006922:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	3324      	adds	r3, #36	; 0x24
 8006930:	4618      	mov	r0, r3
 8006932:	f000 ffad 	bl	8007890 <xTaskRemoveFromEventList>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d013      	beq.n	8006964 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800693c:	4b3f      	ldr	r3, [pc, #252]	; (8006a3c <xQueueGenericSend+0x1f0>)
 800693e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	e00a      	b.n	8006964 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d007      	beq.n	8006964 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006954:	4b39      	ldr	r3, [pc, #228]	; (8006a3c <xQueueGenericSend+0x1f0>)
 8006956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006964:	f001 fe4e 	bl	8008604 <vPortExitCritical>
				return pdPASS;
 8006968:	2301      	movs	r3, #1
 800696a:	e063      	b.n	8006a34 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006972:	f001 fe47 	bl	8008604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006976:	2300      	movs	r3, #0
 8006978:	e05c      	b.n	8006a34 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	2b00      	cmp	r3, #0
 800697e:	d106      	bne.n	800698e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006980:	f107 0314 	add.w	r3, r7, #20
 8006984:	4618      	mov	r0, r3
 8006986:	f000 ffe5 	bl	8007954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800698a:	2301      	movs	r3, #1
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800698e:	f001 fe39 	bl	8008604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006992:	f000 fd5d 	bl	8007450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006996:	f001 fe07 	bl	80085a8 <vPortEnterCritical>
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069a0:	b25b      	sxtb	r3, r3
 80069a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a6:	d103      	bne.n	80069b0 <xQueueGenericSend+0x164>
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b6:	b25b      	sxtb	r3, r3
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d103      	bne.n	80069c6 <xQueueGenericSend+0x17a>
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069c6:	f001 fe1d 	bl	8008604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069ca:	1d3a      	adds	r2, r7, #4
 80069cc:	f107 0314 	add.w	r3, r7, #20
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 ffd4 	bl	8007980 <xTaskCheckForTimeOut>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d124      	bne.n	8006a28 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069e0:	f000 fa96 	bl	8006f10 <prvIsQueueFull>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d018      	beq.n	8006a1c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	3310      	adds	r3, #16
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	4611      	mov	r1, r2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fefe 	bl	80077f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069fa:	f000 fa21 	bl	8006e40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069fe:	f000 fd35 	bl	800746c <xTaskResumeAll>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f47f af7c 	bne.w	8006902 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006a0a:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <xQueueGenericSend+0x1f0>)
 8006a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	e772      	b.n	8006902 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a1e:	f000 fa0f 	bl	8006e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a22:	f000 fd23 	bl	800746c <xTaskResumeAll>
 8006a26:	e76c      	b.n	8006902 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a2a:	f000 fa09 	bl	8006e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a2e:	f000 fd1d 	bl	800746c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a32:	2300      	movs	r3, #0
		}
	}
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3738      	adds	r7, #56	; 0x38
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	e000ed04 	.word	0xe000ed04

08006a40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08e      	sub	sp, #56	; 0x38
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d109      	bne.n	8006a6c <xQueueGenericSendFromISR+0x2c>
 8006a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6a:	e7fe      	b.n	8006a6a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d103      	bne.n	8006a7a <xQueueGenericSendFromISR+0x3a>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <xQueueGenericSendFromISR+0x3e>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <xQueueGenericSendFromISR+0x40>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <xQueueGenericSendFromISR+0x58>
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	623b      	str	r3, [r7, #32]
 8006a96:	e7fe      	b.n	8006a96 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d103      	bne.n	8006aa6 <xQueueGenericSendFromISR+0x66>
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <xQueueGenericSendFromISR+0x6a>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <xQueueGenericSendFromISR+0x6c>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d109      	bne.n	8006ac4 <xQueueGenericSendFromISR+0x84>
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	61fb      	str	r3, [r7, #28]
 8006ac2:	e7fe      	b.n	8006ac2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ac4:	f001 fe2a 	bl	800871c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ac8:	f3ef 8211 	mrs	r2, BASEPRI
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	61ba      	str	r2, [r7, #24]
 8006ade:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ae0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d302      	bcc.n	8006af6 <xQueueGenericSendFromISR+0xb6>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d12c      	bne.n	8006b50 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b06:	f000 f90b 	bl	8006d20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b0a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b12:	d112      	bne.n	8006b3a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d016      	beq.n	8006b4a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1e:	3324      	adds	r3, #36	; 0x24
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 feb5 	bl	8007890 <xTaskRemoveFromEventList>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00e      	beq.n	8006b4a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	e007      	b.n	8006b4a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b3e:	3301      	adds	r3, #1
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	b25a      	sxtb	r2, r3
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006b4e:	e001      	b.n	8006b54 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	637b      	str	r3, [r7, #52]	; 0x34
 8006b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b56:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3738      	adds	r7, #56	; 0x38
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08c      	sub	sp, #48	; 0x30
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d109      	bne.n	8006b96 <xQueueReceive+0x2e>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	623b      	str	r3, [r7, #32]
 8006b94:	e7fe      	b.n	8006b94 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d103      	bne.n	8006ba4 <xQueueReceive+0x3c>
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <xQueueReceive+0x40>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <xQueueReceive+0x42>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <xQueueReceive+0x5a>
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	61fb      	str	r3, [r7, #28]
 8006bc0:	e7fe      	b.n	8006bc0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bc2:	f001 f81f 	bl	8007c04 <xTaskGetSchedulerState>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d102      	bne.n	8006bd2 <xQueueReceive+0x6a>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <xQueueReceive+0x6e>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <xQueueReceive+0x70>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d109      	bne.n	8006bf0 <xQueueReceive+0x88>
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e7fe      	b.n	8006bee <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bf0:	f001 fcda 	bl	80085a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01f      	beq.n	8006c40 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c04:	f000 f8f6 	bl	8006df4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	1e5a      	subs	r2, r3, #1
 8006c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00f      	beq.n	8006c38 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	3310      	adds	r3, #16
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fe37 	bl	8007890 <xTaskRemoveFromEventList>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d007      	beq.n	8006c38 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c28:	4b3c      	ldr	r3, [pc, #240]	; (8006d1c <xQueueReceive+0x1b4>)
 8006c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c38:	f001 fce4 	bl	8008604 <vPortExitCritical>
				return pdPASS;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e069      	b.n	8006d14 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d103      	bne.n	8006c4e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c46:	f001 fcdd 	bl	8008604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e062      	b.n	8006d14 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d106      	bne.n	8006c62 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c54:	f107 0310 	add.w	r3, r7, #16
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fe7b 	bl	8007954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c62:	f001 fccf 	bl	8008604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c66:	f000 fbf3 	bl	8007450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c6a:	f001 fc9d 	bl	80085a8 <vPortEnterCritical>
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d103      	bne.n	8006c84 <xQueueReceive+0x11c>
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c8a:	b25b      	sxtb	r3, r3
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c90:	d103      	bne.n	8006c9a <xQueueReceive+0x132>
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c9a:	f001 fcb3 	bl	8008604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c9e:	1d3a      	adds	r2, r7, #4
 8006ca0:	f107 0310 	add.w	r3, r7, #16
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fe6a 	bl	8007980 <xTaskCheckForTimeOut>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d123      	bne.n	8006cfa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb4:	f000 f916 	bl	8006ee4 <prvIsQueueEmpty>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d017      	beq.n	8006cee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	3324      	adds	r3, #36	; 0x24
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fd94 	bl	80077f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cce:	f000 f8b7 	bl	8006e40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cd2:	f000 fbcb 	bl	800746c <xTaskResumeAll>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d189      	bne.n	8006bf0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006cdc:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <xQueueReceive+0x1b4>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	e780      	b.n	8006bf0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf0:	f000 f8a6 	bl	8006e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cf4:	f000 fbba 	bl	800746c <xTaskResumeAll>
 8006cf8:	e77a      	b.n	8006bf0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfc:	f000 f8a0 	bl	8006e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d00:	f000 fbb4 	bl	800746c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d06:	f000 f8ed 	bl	8006ee4 <prvIsQueueEmpty>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f43f af6f 	beq.w	8006bf0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3730      	adds	r7, #48	; 0x30
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	e000ed04 	.word	0xe000ed04

08006d20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10d      	bne.n	8006d5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d14d      	bne.n	8006de2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 ff78 	bl	8007c40 <xTaskPriorityDisinherit>
 8006d50:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	605a      	str	r2, [r3, #4]
 8006d58:	e043      	b.n	8006de2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d119      	bne.n	8006d94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6898      	ldr	r0, [r3, #8]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	f001 ff23 	bl	8008bb6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	441a      	add	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d32b      	bcc.n	8006de2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	609a      	str	r2, [r3, #8]
 8006d92:	e026      	b.n	8006de2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	68d8      	ldr	r0, [r3, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	f001 ff09 	bl	8008bb6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	425b      	negs	r3, r3
 8006dae:	441a      	add	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d207      	bcs.n	8006dd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	425b      	negs	r3, r3
 8006dca:	441a      	add	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d105      	bne.n	8006de2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006dea:	697b      	ldr	r3, [r7, #20]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d018      	beq.n	8006e38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	441a      	add	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d303      	bcc.n	8006e28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68d9      	ldr	r1, [r3, #12]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	461a      	mov	r2, r3
 8006e32:	6838      	ldr	r0, [r7, #0]
 8006e34:	f001 febf 	bl	8008bb6 <memcpy>
	}
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e48:	f001 fbae 	bl	80085a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e54:	e011      	b.n	8006e7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d012      	beq.n	8006e84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3324      	adds	r3, #36	; 0x24
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fd14 	bl	8007890 <xTaskRemoveFromEventList>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e6e:	f000 fde7 	bl	8007a40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dce9      	bgt.n	8006e56 <prvUnlockQueue+0x16>
 8006e82:	e000      	b.n	8006e86 <prvUnlockQueue+0x46>
					break;
 8006e84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	22ff      	movs	r2, #255	; 0xff
 8006e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e8e:	f001 fbb9 	bl	8008604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e92:	f001 fb89 	bl	80085a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e9e:	e011      	b.n	8006ec4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d012      	beq.n	8006ece <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3310      	adds	r3, #16
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fcef 	bl	8007890 <xTaskRemoveFromEventList>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006eb8:	f000 fdc2 	bl	8007a40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dce9      	bgt.n	8006ea0 <prvUnlockQueue+0x60>
 8006ecc:	e000      	b.n	8006ed0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ece:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	22ff      	movs	r2, #255	; 0xff
 8006ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ed8:	f001 fb94 	bl	8008604 <vPortExitCritical>
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eec:	f001 fb5c 	bl	80085a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d102      	bne.n	8006efe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	e001      	b.n	8006f02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f02:	f001 fb7f 	bl	8008604 <vPortExitCritical>

	return xReturn;
 8006f06:	68fb      	ldr	r3, [r7, #12]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f18:	f001 fb46 	bl	80085a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d102      	bne.n	8006f2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	e001      	b.n	8006f32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f32:	f001 fb67 	bl	8008604 <vPortExitCritical>

	return xReturn;
 8006f36:	68fb      	ldr	r3, [r7, #12]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	e014      	b.n	8006f7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f50:	4a0e      	ldr	r2, [pc, #56]	; (8006f8c <vQueueAddToRegistry+0x4c>)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10b      	bne.n	8006f74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f5c:	490b      	ldr	r1, [pc, #44]	; (8006f8c <vQueueAddToRegistry+0x4c>)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f66:	4a09      	ldr	r2, [pc, #36]	; (8006f8c <vQueueAddToRegistry+0x4c>)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f72:	e005      	b.n	8006f80 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b07      	cmp	r3, #7
 8006f7e:	d9e7      	bls.n	8006f50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f80:	bf00      	nop
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bc80      	pop	{r7}
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	20002ff8 	.word	0x20002ff8

08006f90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fa0:	f001 fb02 	bl	80085a8 <vPortEnterCritical>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006faa:	b25b      	sxtb	r3, r3
 8006fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb0:	d103      	bne.n	8006fba <vQueueWaitForMessageRestricted+0x2a>
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fc0:	b25b      	sxtb	r3, r3
 8006fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc6:	d103      	bne.n	8006fd0 <vQueueWaitForMessageRestricted+0x40>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fd0:	f001 fb18 	bl	8008604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d106      	bne.n	8006fea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	3324      	adds	r3, #36	; 0x24
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 fc29 	bl	800783c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fea:	6978      	ldr	r0, [r7, #20]
 8006fec:	f7ff ff28 	bl	8006e40 <prvUnlockQueue>
	}
 8006ff0:	bf00      	nop
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08e      	sub	sp, #56	; 0x38
 8006ffc:	af04      	add	r7, sp, #16
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007008:	2b00      	cmp	r3, #0
 800700a:	d109      	bne.n	8007020 <xTaskCreateStatic+0x28>
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	623b      	str	r3, [r7, #32]
 800701e:	e7fe      	b.n	800701e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007022:	2b00      	cmp	r3, #0
 8007024:	d109      	bne.n	800703a <xTaskCreateStatic+0x42>
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	e7fe      	b.n	8007038 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800703a:	235c      	movs	r3, #92	; 0x5c
 800703c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2b5c      	cmp	r3, #92	; 0x5c
 8007042:	d009      	beq.n	8007058 <xTaskCreateStatic+0x60>
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	e7fe      	b.n	8007056 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	2b00      	cmp	r3, #0
 800705c:	d01e      	beq.n	800709c <xTaskCreateStatic+0xa4>
 800705e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01b      	beq.n	800709c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800706c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	2202      	movs	r2, #2
 8007072:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007076:	2300      	movs	r3, #0
 8007078:	9303      	str	r3, [sp, #12]
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	9302      	str	r3, [sp, #8]
 800707e:	f107 0314 	add.w	r3, r7, #20
 8007082:	9301      	str	r3, [sp, #4]
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	68b9      	ldr	r1, [r7, #8]
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f000 f850 	bl	8007134 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007096:	f000 f8d3 	bl	8007240 <prvAddNewTaskToReadyList>
 800709a:	e001      	b.n	80070a0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800709c:	2300      	movs	r3, #0
 800709e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070a0:	697b      	ldr	r3, [r7, #20]
	}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3728      	adds	r7, #40	; 0x28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b08c      	sub	sp, #48	; 0x30
 80070ae:	af04      	add	r7, sp, #16
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	603b      	str	r3, [r7, #0]
 80070b6:	4613      	mov	r3, r2
 80070b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 fb68 	bl	8008794 <pvPortMalloc>
 80070c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00e      	beq.n	80070ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80070cc:	205c      	movs	r0, #92	; 0x5c
 80070ce:	f001 fb61 	bl	8008794 <pvPortMalloc>
 80070d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
 80070e0:	e005      	b.n	80070ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070e2:	6978      	ldr	r0, [r7, #20]
 80070e4:	f001 fc18 	bl	8008918 <vPortFree>
 80070e8:	e001      	b.n	80070ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d017      	beq.n	8007124 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070fc:	88fa      	ldrh	r2, [r7, #6]
 80070fe:	2300      	movs	r3, #0
 8007100:	9303      	str	r3, [sp, #12]
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	9302      	str	r3, [sp, #8]
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f80e 	bl	8007134 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007118:	69f8      	ldr	r0, [r7, #28]
 800711a:	f000 f891 	bl	8007240 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800711e:	2301      	movs	r3, #1
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	e002      	b.n	800712a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007124:	f04f 33ff 	mov.w	r3, #4294967295
 8007128:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800712a:	69bb      	ldr	r3, [r7, #24]
	}
 800712c:	4618      	mov	r0, r3
 800712e:	3720      	adds	r7, #32
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	461a      	mov	r2, r3
 800714c:	21a5      	movs	r1, #165	; 0xa5
 800714e:	f001 fd56 	bl	8008bfe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800715c:	3b01      	subs	r3, #1
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	f023 0307 	bic.w	r3, r3, #7
 800716a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <prvInitialiseNewTask+0x56>
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	e7fe      	b.n	8007188 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800718a:	2300      	movs	r3, #0
 800718c:	61fb      	str	r3, [r7, #28]
 800718e:	e012      	b.n	80071b6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	4413      	add	r3, r2
 8007196:	7819      	ldrb	r1, [r3, #0]
 8007198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	4413      	add	r3, r2
 800719e:	3334      	adds	r3, #52	; 0x34
 80071a0:	460a      	mov	r2, r1
 80071a2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	4413      	add	r3, r2
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d006      	beq.n	80071be <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	3301      	adds	r3, #1
 80071b4:	61fb      	str	r3, [r7, #28]
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	2b0f      	cmp	r3, #15
 80071ba:	d9e9      	bls.n	8007190 <prvInitialiseNewTask+0x5c>
 80071bc:	e000      	b.n	80071c0 <prvInitialiseNewTask+0x8c>
		{
			break;
 80071be:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	2b37      	cmp	r3, #55	; 0x37
 80071cc:	d901      	bls.n	80071d2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071ce:	2337      	movs	r3, #55	; 0x37
 80071d0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	2200      	movs	r2, #0
 80071e2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	3304      	adds	r3, #4
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff f9a0 	bl	800652e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	3318      	adds	r3, #24
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7ff f99b 	bl	800652e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800720c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	2200      	movs	r2, #0
 8007212:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	69b8      	ldr	r0, [r7, #24]
 8007222:	f001 f8d7 	bl	80083d4 <pxPortInitialiseStack>
 8007226:	4602      	mov	r2, r0
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007236:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007238:	bf00      	nop
 800723a:	3720      	adds	r7, #32
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007248:	f001 f9ae 	bl	80085a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800724c:	4b2d      	ldr	r3, [pc, #180]	; (8007304 <prvAddNewTaskToReadyList+0xc4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3301      	adds	r3, #1
 8007252:	4a2c      	ldr	r2, [pc, #176]	; (8007304 <prvAddNewTaskToReadyList+0xc4>)
 8007254:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007256:	4b2c      	ldr	r3, [pc, #176]	; (8007308 <prvAddNewTaskToReadyList+0xc8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d109      	bne.n	8007272 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800725e:	4a2a      	ldr	r2, [pc, #168]	; (8007308 <prvAddNewTaskToReadyList+0xc8>)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007264:	4b27      	ldr	r3, [pc, #156]	; (8007304 <prvAddNewTaskToReadyList+0xc4>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d110      	bne.n	800728e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800726c:	f000 fc0c 	bl	8007a88 <prvInitialiseTaskLists>
 8007270:	e00d      	b.n	800728e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007272:	4b26      	ldr	r3, [pc, #152]	; (800730c <prvAddNewTaskToReadyList+0xcc>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800727a:	4b23      	ldr	r3, [pc, #140]	; (8007308 <prvAddNewTaskToReadyList+0xc8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	429a      	cmp	r2, r3
 8007286:	d802      	bhi.n	800728e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007288:	4a1f      	ldr	r2, [pc, #124]	; (8007308 <prvAddNewTaskToReadyList+0xc8>)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800728e:	4b20      	ldr	r3, [pc, #128]	; (8007310 <prvAddNewTaskToReadyList+0xd0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3301      	adds	r3, #1
 8007294:	4a1e      	ldr	r2, [pc, #120]	; (8007310 <prvAddNewTaskToReadyList+0xd0>)
 8007296:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007298:	4b1d      	ldr	r3, [pc, #116]	; (8007310 <prvAddNewTaskToReadyList+0xd0>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <prvAddNewTaskToReadyList+0xd4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d903      	bls.n	80072b4 <prvAddNewTaskToReadyList+0x74>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	4a18      	ldr	r2, [pc, #96]	; (8007314 <prvAddNewTaskToReadyList+0xd4>)
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4a15      	ldr	r2, [pc, #84]	; (8007318 <prvAddNewTaskToReadyList+0xd8>)
 80072c2:	441a      	add	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3304      	adds	r3, #4
 80072c8:	4619      	mov	r1, r3
 80072ca:	4610      	mov	r0, r2
 80072cc:	f7ff f93b 	bl	8006546 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072d0:	f001 f998 	bl	8008604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072d4:	4b0d      	ldr	r3, [pc, #52]	; (800730c <prvAddNewTaskToReadyList+0xcc>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00e      	beq.n	80072fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072dc:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <prvAddNewTaskToReadyList+0xc8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d207      	bcs.n	80072fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072ea:	4b0c      	ldr	r3, [pc, #48]	; (800731c <prvAddNewTaskToReadyList+0xdc>)
 80072ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20000e04 	.word	0x20000e04
 8007308:	20000930 	.word	0x20000930
 800730c:	20000e10 	.word	0x20000e10
 8007310:	20000e20 	.word	0x20000e20
 8007314:	20000e0c 	.word	0x20000e0c
 8007318:	20000934 	.word	0x20000934
 800731c:	e000ed04 	.word	0xe000ed04

08007320 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d016      	beq.n	8007360 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007332:	4b13      	ldr	r3, [pc, #76]	; (8007380 <vTaskDelay+0x60>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d009      	beq.n	800734e <vTaskDelay+0x2e>
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	60bb      	str	r3, [r7, #8]
 800734c:	e7fe      	b.n	800734c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800734e:	f000 f87f 	bl	8007450 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007352:	2100      	movs	r1, #0
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fcdf 	bl	8007d18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800735a:	f000 f887 	bl	800746c <xTaskResumeAll>
 800735e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d107      	bne.n	8007376 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007366:	4b07      	ldr	r3, [pc, #28]	; (8007384 <vTaskDelay+0x64>)
 8007368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007376:	bf00      	nop
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000e2c 	.word	0x20000e2c
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800738e:	2300      	movs	r3, #0
 8007390:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007396:	463a      	mov	r2, r7
 8007398:	1d39      	adds	r1, r7, #4
 800739a:	f107 0308 	add.w	r3, r7, #8
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff f874 	bl	800648c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	9202      	str	r2, [sp, #8]
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	2300      	movs	r3, #0
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	2300      	movs	r3, #0
 80073b4:	460a      	mov	r2, r1
 80073b6:	4920      	ldr	r1, [pc, #128]	; (8007438 <vTaskStartScheduler+0xb0>)
 80073b8:	4820      	ldr	r0, [pc, #128]	; (800743c <vTaskStartScheduler+0xb4>)
 80073ba:	f7ff fe1d 	bl	8006ff8 <xTaskCreateStatic>
 80073be:	4602      	mov	r2, r0
 80073c0:	4b1f      	ldr	r3, [pc, #124]	; (8007440 <vTaskStartScheduler+0xb8>)
 80073c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073c4:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <vTaskStartScheduler+0xb8>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073cc:	2301      	movs	r3, #1
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	e001      	b.n	80073d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d102      	bne.n	80073e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073dc:	f000 fcf0 	bl	8007dc0 <xTimerCreateTimerTask>
 80073e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d115      	bne.n	8007414 <vTaskStartScheduler+0x8c>
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073fa:	4b12      	ldr	r3, [pc, #72]	; (8007444 <vTaskStartScheduler+0xbc>)
 80073fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007400:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007402:	4b11      	ldr	r3, [pc, #68]	; (8007448 <vTaskStartScheduler+0xc0>)
 8007404:	2201      	movs	r2, #1
 8007406:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007408:	4b10      	ldr	r3, [pc, #64]	; (800744c <vTaskStartScheduler+0xc4>)
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800740e:	f001 f85b 	bl	80084c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007412:	e00d      	b.n	8007430 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d109      	bne.n	8007430 <vTaskStartScheduler+0xa8>
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	e7fe      	b.n	800742e <vTaskStartScheduler+0xa6>
}
 8007430:	bf00      	nop
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	0800a44c 	.word	0x0800a44c
 800743c:	08007a59 	.word	0x08007a59
 8007440:	20000e28 	.word	0x20000e28
 8007444:	20000e24 	.word	0x20000e24
 8007448:	20000e10 	.word	0x20000e10
 800744c:	20000e08 	.word	0x20000e08

08007450 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007454:	4b04      	ldr	r3, [pc, #16]	; (8007468 <vTaskSuspendAll+0x18>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3301      	adds	r3, #1
 800745a:	4a03      	ldr	r2, [pc, #12]	; (8007468 <vTaskSuspendAll+0x18>)
 800745c:	6013      	str	r3, [r2, #0]
}
 800745e:	bf00      	nop
 8007460:	46bd      	mov	sp, r7
 8007462:	bc80      	pop	{r7}
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	20000e2c 	.word	0x20000e2c

0800746c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007476:	2300      	movs	r3, #0
 8007478:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800747a:	4b41      	ldr	r3, [pc, #260]	; (8007580 <xTaskResumeAll+0x114>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <xTaskResumeAll+0x2a>
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	e7fe      	b.n	8007494 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007496:	f001 f887 	bl	80085a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800749a:	4b39      	ldr	r3, [pc, #228]	; (8007580 <xTaskResumeAll+0x114>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3b01      	subs	r3, #1
 80074a0:	4a37      	ldr	r2, [pc, #220]	; (8007580 <xTaskResumeAll+0x114>)
 80074a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074a4:	4b36      	ldr	r3, [pc, #216]	; (8007580 <xTaskResumeAll+0x114>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d162      	bne.n	8007572 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074ac:	4b35      	ldr	r3, [pc, #212]	; (8007584 <xTaskResumeAll+0x118>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d05e      	beq.n	8007572 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074b4:	e02f      	b.n	8007516 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80074b6:	4b34      	ldr	r3, [pc, #208]	; (8007588 <xTaskResumeAll+0x11c>)
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3318      	adds	r3, #24
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff f89a 	bl	80065fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff f895 	bl	80065fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	4b2d      	ldr	r3, [pc, #180]	; (800758c <xTaskResumeAll+0x120>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d903      	bls.n	80074e6 <xTaskResumeAll+0x7a>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e2:	4a2a      	ldr	r2, [pc, #168]	; (800758c <xTaskResumeAll+0x120>)
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4a27      	ldr	r2, [pc, #156]	; (8007590 <xTaskResumeAll+0x124>)
 80074f4:	441a      	add	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3304      	adds	r3, #4
 80074fa:	4619      	mov	r1, r3
 80074fc:	4610      	mov	r0, r2
 80074fe:	f7ff f822 	bl	8006546 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007506:	4b23      	ldr	r3, [pc, #140]	; (8007594 <xTaskResumeAll+0x128>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	429a      	cmp	r2, r3
 800750e:	d302      	bcc.n	8007516 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007510:	4b21      	ldr	r3, [pc, #132]	; (8007598 <xTaskResumeAll+0x12c>)
 8007512:	2201      	movs	r2, #1
 8007514:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007516:	4b1c      	ldr	r3, [pc, #112]	; (8007588 <xTaskResumeAll+0x11c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1cb      	bne.n	80074b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007524:	f000 fb4a 	bl	8007bbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007528:	4b1c      	ldr	r3, [pc, #112]	; (800759c <xTaskResumeAll+0x130>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d010      	beq.n	8007556 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007534:	f000 f844 	bl	80075c0 <xTaskIncrementTick>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800753e:	4b16      	ldr	r3, [pc, #88]	; (8007598 <xTaskResumeAll+0x12c>)
 8007540:	2201      	movs	r2, #1
 8007542:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3b01      	subs	r3, #1
 8007548:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f1      	bne.n	8007534 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007550:	4b12      	ldr	r3, [pc, #72]	; (800759c <xTaskResumeAll+0x130>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007556:	4b10      	ldr	r3, [pc, #64]	; (8007598 <xTaskResumeAll+0x12c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800755e:	2301      	movs	r3, #1
 8007560:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007562:	4b0f      	ldr	r3, [pc, #60]	; (80075a0 <xTaskResumeAll+0x134>)
 8007564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007572:	f001 f847 	bl	8008604 <vPortExitCritical>

	return xAlreadyYielded;
 8007576:	68bb      	ldr	r3, [r7, #8]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	20000e2c 	.word	0x20000e2c
 8007584:	20000e04 	.word	0x20000e04
 8007588:	20000dc4 	.word	0x20000dc4
 800758c:	20000e0c 	.word	0x20000e0c
 8007590:	20000934 	.word	0x20000934
 8007594:	20000930 	.word	0x20000930
 8007598:	20000e18 	.word	0x20000e18
 800759c:	20000e14 	.word	0x20000e14
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075aa:	4b04      	ldr	r3, [pc, #16]	; (80075bc <xTaskGetTickCount+0x18>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075b0:	687b      	ldr	r3, [r7, #4]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr
 80075bc:	20000e08 	.word	0x20000e08

080075c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ca:	4b51      	ldr	r3, [pc, #324]	; (8007710 <xTaskIncrementTick+0x150>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f040 808d 	bne.w	80076ee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075d4:	4b4f      	ldr	r3, [pc, #316]	; (8007714 <xTaskIncrementTick+0x154>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3301      	adds	r3, #1
 80075da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075dc:	4a4d      	ldr	r2, [pc, #308]	; (8007714 <xTaskIncrementTick+0x154>)
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d11f      	bne.n	8007628 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80075e8:	4b4b      	ldr	r3, [pc, #300]	; (8007718 <xTaskIncrementTick+0x158>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d009      	beq.n	8007606 <xTaskIncrementTick+0x46>
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	603b      	str	r3, [r7, #0]
 8007604:	e7fe      	b.n	8007604 <xTaskIncrementTick+0x44>
 8007606:	4b44      	ldr	r3, [pc, #272]	; (8007718 <xTaskIncrementTick+0x158>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	4b43      	ldr	r3, [pc, #268]	; (800771c <xTaskIncrementTick+0x15c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a41      	ldr	r2, [pc, #260]	; (8007718 <xTaskIncrementTick+0x158>)
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	4a41      	ldr	r2, [pc, #260]	; (800771c <xTaskIncrementTick+0x15c>)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	4b41      	ldr	r3, [pc, #260]	; (8007720 <xTaskIncrementTick+0x160>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	4a3f      	ldr	r2, [pc, #252]	; (8007720 <xTaskIncrementTick+0x160>)
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	f000 faca 	bl	8007bbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007628:	4b3e      	ldr	r3, [pc, #248]	; (8007724 <xTaskIncrementTick+0x164>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	429a      	cmp	r2, r3
 8007630:	d34e      	bcc.n	80076d0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007632:	4b39      	ldr	r3, [pc, #228]	; (8007718 <xTaskIncrementTick+0x158>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <xTaskIncrementTick+0x80>
 800763c:	2301      	movs	r3, #1
 800763e:	e000      	b.n	8007642 <xTaskIncrementTick+0x82>
 8007640:	2300      	movs	r3, #0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d004      	beq.n	8007650 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007646:	4b37      	ldr	r3, [pc, #220]	; (8007724 <xTaskIncrementTick+0x164>)
 8007648:	f04f 32ff 	mov.w	r2, #4294967295
 800764c:	601a      	str	r2, [r3, #0]
					break;
 800764e:	e03f      	b.n	80076d0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007650:	4b31      	ldr	r3, [pc, #196]	; (8007718 <xTaskIncrementTick+0x158>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	429a      	cmp	r2, r3
 8007666:	d203      	bcs.n	8007670 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007668:	4a2e      	ldr	r2, [pc, #184]	; (8007724 <xTaskIncrementTick+0x164>)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6013      	str	r3, [r2, #0]
						break;
 800766e:	e02f      	b.n	80076d0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	3304      	adds	r3, #4
 8007674:	4618      	mov	r0, r3
 8007676:	f7fe ffc1 	bl	80065fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	2b00      	cmp	r3, #0
 8007680:	d004      	beq.n	800768c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	3318      	adds	r3, #24
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe ffb8 	bl	80065fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007690:	4b25      	ldr	r3, [pc, #148]	; (8007728 <xTaskIncrementTick+0x168>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d903      	bls.n	80076a0 <xTaskIncrementTick+0xe0>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	4a22      	ldr	r2, [pc, #136]	; (8007728 <xTaskIncrementTick+0x168>)
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4a1f      	ldr	r2, [pc, #124]	; (800772c <xTaskIncrementTick+0x16c>)
 80076ae:	441a      	add	r2, r3
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f7fe ff45 	bl	8006546 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c0:	4b1b      	ldr	r3, [pc, #108]	; (8007730 <xTaskIncrementTick+0x170>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d3b3      	bcc.n	8007632 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80076ca:	2301      	movs	r3, #1
 80076cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ce:	e7b0      	b.n	8007632 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076d0:	4b17      	ldr	r3, [pc, #92]	; (8007730 <xTaskIncrementTick+0x170>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d6:	4915      	ldr	r1, [pc, #84]	; (800772c <xTaskIncrementTick+0x16c>)
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	440b      	add	r3, r1
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d907      	bls.n	80076f8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e004      	b.n	80076f8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80076ee:	4b11      	ldr	r3, [pc, #68]	; (8007734 <xTaskIncrementTick+0x174>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	4a0f      	ldr	r2, [pc, #60]	; (8007734 <xTaskIncrementTick+0x174>)
 80076f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80076f8:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <xTaskIncrementTick+0x178>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007700:	2301      	movs	r3, #1
 8007702:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007704:	697b      	ldr	r3, [r7, #20]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20000e2c 	.word	0x20000e2c
 8007714:	20000e08 	.word	0x20000e08
 8007718:	20000dbc 	.word	0x20000dbc
 800771c:	20000dc0 	.word	0x20000dc0
 8007720:	20000e1c 	.word	0x20000e1c
 8007724:	20000e24 	.word	0x20000e24
 8007728:	20000e0c 	.word	0x20000e0c
 800772c:	20000934 	.word	0x20000934
 8007730:	20000930 	.word	0x20000930
 8007734:	20000e14 	.word	0x20000e14
 8007738:	20000e18 	.word	0x20000e18

0800773c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007742:	4b27      	ldr	r3, [pc, #156]	; (80077e0 <vTaskSwitchContext+0xa4>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800774a:	4b26      	ldr	r3, [pc, #152]	; (80077e4 <vTaskSwitchContext+0xa8>)
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007750:	e040      	b.n	80077d4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007752:	4b24      	ldr	r3, [pc, #144]	; (80077e4 <vTaskSwitchContext+0xa8>)
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007758:	4b23      	ldr	r3, [pc, #140]	; (80077e8 <vTaskSwitchContext+0xac>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e00f      	b.n	8007780 <vTaskSwitchContext+0x44>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <vTaskSwitchContext+0x3e>
 8007766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	607b      	str	r3, [r7, #4]
 8007778:	e7fe      	b.n	8007778 <vTaskSwitchContext+0x3c>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3b01      	subs	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	491a      	ldr	r1, [pc, #104]	; (80077ec <vTaskSwitchContext+0xb0>)
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0e5      	beq.n	8007760 <vTaskSwitchContext+0x24>
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4a13      	ldr	r2, [pc, #76]	; (80077ec <vTaskSwitchContext+0xb0>)
 80077a0:	4413      	add	r3, r2
 80077a2:	60bb      	str	r3, [r7, #8]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	605a      	str	r2, [r3, #4]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	3308      	adds	r3, #8
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d104      	bne.n	80077c4 <vTaskSwitchContext+0x88>
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	605a      	str	r2, [r3, #4]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <vTaskSwitchContext+0xb4>)
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	4a06      	ldr	r2, [pc, #24]	; (80077e8 <vTaskSwitchContext+0xac>)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6013      	str	r3, [r2, #0]
}
 80077d4:	bf00      	nop
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20000e2c 	.word	0x20000e2c
 80077e4:	20000e18 	.word	0x20000e18
 80077e8:	20000e0c 	.word	0x20000e0c
 80077ec:	20000934 	.word	0x20000934
 80077f0:	20000930 	.word	0x20000930

080077f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d109      	bne.n	8007818 <vTaskPlaceOnEventList+0x24>
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	e7fe      	b.n	8007816 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007818:	4b07      	ldr	r3, [pc, #28]	; (8007838 <vTaskPlaceOnEventList+0x44>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3318      	adds	r3, #24
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7fe feb3 	bl	800658c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007826:	2101      	movs	r1, #1
 8007828:	6838      	ldr	r0, [r7, #0]
 800782a:	f000 fa75 	bl	8007d18 <prvAddCurrentTaskToDelayedList>
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20000930 	.word	0x20000930

0800783c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d109      	bne.n	8007862 <vTaskPlaceOnEventListRestricted+0x26>
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	e7fe      	b.n	8007860 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007862:	4b0a      	ldr	r3, [pc, #40]	; (800788c <vTaskPlaceOnEventListRestricted+0x50>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3318      	adds	r3, #24
 8007868:	4619      	mov	r1, r3
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7fe fe6b 	bl	8006546 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007876:	f04f 33ff 	mov.w	r3, #4294967295
 800787a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800787c:	6879      	ldr	r1, [r7, #4]
 800787e:	68b8      	ldr	r0, [r7, #8]
 8007880:	f000 fa4a 	bl	8007d18 <prvAddCurrentTaskToDelayedList>
	}
 8007884:	bf00      	nop
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000930 	.word	0x20000930

08007890 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <xTaskRemoveFromEventList+0x2a>
 80078a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	e7fe      	b.n	80078b8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	3318      	adds	r3, #24
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe fe9c 	bl	80065fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078c4:	4b1d      	ldr	r3, [pc, #116]	; (800793c <xTaskRemoveFromEventList+0xac>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11d      	bne.n	8007908 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	3304      	adds	r3, #4
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fe93 	bl	80065fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078da:	4b19      	ldr	r3, [pc, #100]	; (8007940 <xTaskRemoveFromEventList+0xb0>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d903      	bls.n	80078ea <xTaskRemoveFromEventList+0x5a>
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	4a16      	ldr	r2, [pc, #88]	; (8007940 <xTaskRemoveFromEventList+0xb0>)
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ee:	4613      	mov	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4a13      	ldr	r2, [pc, #76]	; (8007944 <xTaskRemoveFromEventList+0xb4>)
 80078f8:	441a      	add	r2, r3
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	3304      	adds	r3, #4
 80078fe:	4619      	mov	r1, r3
 8007900:	4610      	mov	r0, r2
 8007902:	f7fe fe20 	bl	8006546 <vListInsertEnd>
 8007906:	e005      	b.n	8007914 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	3318      	adds	r3, #24
 800790c:	4619      	mov	r1, r3
 800790e:	480e      	ldr	r0, [pc, #56]	; (8007948 <xTaskRemoveFromEventList+0xb8>)
 8007910:	f7fe fe19 	bl	8006546 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007918:	4b0c      	ldr	r3, [pc, #48]	; (800794c <xTaskRemoveFromEventList+0xbc>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791e:	429a      	cmp	r2, r3
 8007920:	d905      	bls.n	800792e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007922:	2301      	movs	r3, #1
 8007924:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007926:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <xTaskRemoveFromEventList+0xc0>)
 8007928:	2201      	movs	r2, #1
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	e001      	b.n	8007932 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800792e:	2300      	movs	r3, #0
 8007930:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007932:	697b      	ldr	r3, [r7, #20]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	20000e2c 	.word	0x20000e2c
 8007940:	20000e0c 	.word	0x20000e0c
 8007944:	20000934 	.word	0x20000934
 8007948:	20000dc4 	.word	0x20000dc4
 800794c:	20000930 	.word	0x20000930
 8007950:	20000e18 	.word	0x20000e18

08007954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800795c:	4b06      	ldr	r3, [pc, #24]	; (8007978 <vTaskInternalSetTimeOutState+0x24>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007964:	4b05      	ldr	r3, [pc, #20]	; (800797c <vTaskInternalSetTimeOutState+0x28>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	605a      	str	r2, [r3, #4]
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	bc80      	pop	{r7}
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000e1c 	.word	0x20000e1c
 800797c:	20000e08 	.word	0x20000e08

08007980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d109      	bne.n	80079a4 <xTaskCheckForTimeOut+0x24>
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	613b      	str	r3, [r7, #16]
 80079a2:	e7fe      	b.n	80079a2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d109      	bne.n	80079be <xTaskCheckForTimeOut+0x3e>
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	e7fe      	b.n	80079bc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80079be:	f000 fdf3 	bl	80085a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079c2:	4b1d      	ldr	r3, [pc, #116]	; (8007a38 <xTaskCheckForTimeOut+0xb8>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	d102      	bne.n	80079e2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079dc:	2300      	movs	r3, #0
 80079de:	61fb      	str	r3, [r7, #28]
 80079e0:	e023      	b.n	8007a2a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	4b15      	ldr	r3, [pc, #84]	; (8007a3c <xTaskCheckForTimeOut+0xbc>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d007      	beq.n	80079fe <xTaskCheckForTimeOut+0x7e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d302      	bcc.n	80079fe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	61fb      	str	r3, [r7, #28]
 80079fc:	e015      	b.n	8007a2a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d20b      	bcs.n	8007a20 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	1ad2      	subs	r2, r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff ff9d 	bl	8007954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61fb      	str	r3, [r7, #28]
 8007a1e:	e004      	b.n	8007a2a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a26:	2301      	movs	r3, #1
 8007a28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a2a:	f000 fdeb 	bl	8008604 <vPortExitCritical>

	return xReturn;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3720      	adds	r7, #32
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20000e08 	.word	0x20000e08
 8007a3c:	20000e1c 	.word	0x20000e1c

08007a40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a44:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <vTaskMissedYield+0x14>)
 8007a46:	2201      	movs	r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
}
 8007a4a:	bf00      	nop
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bc80      	pop	{r7}
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	20000e18 	.word	0x20000e18

08007a58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a60:	f000 f852 	bl	8007b08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a64:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <prvIdleTask+0x28>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d9f9      	bls.n	8007a60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a6c:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <prvIdleTask+0x2c>)
 8007a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a7c:	e7f0      	b.n	8007a60 <prvIdleTask+0x8>
 8007a7e:	bf00      	nop
 8007a80:	20000934 	.word	0x20000934
 8007a84:	e000ed04 	.word	0xe000ed04

08007a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a8e:	2300      	movs	r3, #0
 8007a90:	607b      	str	r3, [r7, #4]
 8007a92:	e00c      	b.n	8007aae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4a12      	ldr	r2, [pc, #72]	; (8007ae8 <prvInitialiseTaskLists+0x60>)
 8007aa0:	4413      	add	r3, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fd24 	bl	80064f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	607b      	str	r3, [r7, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b37      	cmp	r3, #55	; 0x37
 8007ab2:	d9ef      	bls.n	8007a94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ab4:	480d      	ldr	r0, [pc, #52]	; (8007aec <prvInitialiseTaskLists+0x64>)
 8007ab6:	f7fe fd1b 	bl	80064f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aba:	480d      	ldr	r0, [pc, #52]	; (8007af0 <prvInitialiseTaskLists+0x68>)
 8007abc:	f7fe fd18 	bl	80064f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ac0:	480c      	ldr	r0, [pc, #48]	; (8007af4 <prvInitialiseTaskLists+0x6c>)
 8007ac2:	f7fe fd15 	bl	80064f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ac6:	480c      	ldr	r0, [pc, #48]	; (8007af8 <prvInitialiseTaskLists+0x70>)
 8007ac8:	f7fe fd12 	bl	80064f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007acc:	480b      	ldr	r0, [pc, #44]	; (8007afc <prvInitialiseTaskLists+0x74>)
 8007ace:	f7fe fd0f 	bl	80064f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ad2:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <prvInitialiseTaskLists+0x78>)
 8007ad4:	4a05      	ldr	r2, [pc, #20]	; (8007aec <prvInitialiseTaskLists+0x64>)
 8007ad6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ad8:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <prvInitialiseTaskLists+0x7c>)
 8007ada:	4a05      	ldr	r2, [pc, #20]	; (8007af0 <prvInitialiseTaskLists+0x68>)
 8007adc:	601a      	str	r2, [r3, #0]
}
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000934 	.word	0x20000934
 8007aec:	20000d94 	.word	0x20000d94
 8007af0:	20000da8 	.word	0x20000da8
 8007af4:	20000dc4 	.word	0x20000dc4
 8007af8:	20000dd8 	.word	0x20000dd8
 8007afc:	20000df0 	.word	0x20000df0
 8007b00:	20000dbc 	.word	0x20000dbc
 8007b04:	20000dc0 	.word	0x20000dc0

08007b08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b0e:	e019      	b.n	8007b44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b10:	f000 fd4a 	bl	80085a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007b14:	4b0f      	ldr	r3, [pc, #60]	; (8007b54 <prvCheckTasksWaitingTermination+0x4c>)
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fe fd6b 	bl	80065fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b26:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <prvCheckTasksWaitingTermination+0x50>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	4a0a      	ldr	r2, [pc, #40]	; (8007b58 <prvCheckTasksWaitingTermination+0x50>)
 8007b2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <prvCheckTasksWaitingTermination+0x54>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	4a09      	ldr	r2, [pc, #36]	; (8007b5c <prvCheckTasksWaitingTermination+0x54>)
 8007b38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b3a:	f000 fd63 	bl	8008604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f80e 	bl	8007b60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b44:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <prvCheckTasksWaitingTermination+0x54>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e1      	bne.n	8007b10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000dd8 	.word	0x20000dd8
 8007b58:	20000e04 	.word	0x20000e04
 8007b5c:	20000dec 	.word	0x20000dec

08007b60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d108      	bne.n	8007b84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fece 	bl	8008918 <vPortFree>
				vPortFree( pxTCB );
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fecb 	bl	8008918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b82:	e017      	b.n	8007bb4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d103      	bne.n	8007b96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fec2 	bl	8008918 <vPortFree>
	}
 8007b94:	e00e      	b.n	8007bb4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d009      	beq.n	8007bb4 <prvDeleteTCB+0x54>
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	e7fe      	b.n	8007bb2 <prvDeleteTCB+0x52>
	}
 8007bb4:	bf00      	nop
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bc2:	4b0e      	ldr	r3, [pc, #56]	; (8007bfc <prvResetNextTaskUnblockTime+0x40>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <prvResetNextTaskUnblockTime+0x14>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <prvResetNextTaskUnblockTime+0x16>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bd6:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <prvResetNextTaskUnblockTime+0x44>)
 8007bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bdc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bde:	e008      	b.n	8007bf2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007be0:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <prvResetNextTaskUnblockTime+0x40>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	4a04      	ldr	r2, [pc, #16]	; (8007c00 <prvResetNextTaskUnblockTime+0x44>)
 8007bf0:	6013      	str	r3, [r2, #0]
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr
 8007bfc:	20000dbc 	.word	0x20000dbc
 8007c00:	20000e24 	.word	0x20000e24

08007c04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c0a:	4b0b      	ldr	r3, [pc, #44]	; (8007c38 <xTaskGetSchedulerState+0x34>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d102      	bne.n	8007c18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c12:	2301      	movs	r3, #1
 8007c14:	607b      	str	r3, [r7, #4]
 8007c16:	e008      	b.n	8007c2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c18:	4b08      	ldr	r3, [pc, #32]	; (8007c3c <xTaskGetSchedulerState+0x38>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d102      	bne.n	8007c26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c20:	2302      	movs	r3, #2
 8007c22:	607b      	str	r3, [r7, #4]
 8007c24:	e001      	b.n	8007c2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c26:	2300      	movs	r3, #0
 8007c28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c2a:	687b      	ldr	r3, [r7, #4]
	}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	20000e10 	.word	0x20000e10
 8007c3c:	20000e2c 	.word	0x20000e2c

08007c40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d054      	beq.n	8007d00 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c56:	4b2d      	ldr	r3, [pc, #180]	; (8007d0c <xTaskPriorityDisinherit+0xcc>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d009      	beq.n	8007c74 <xTaskPriorityDisinherit+0x34>
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	e7fe      	b.n	8007c72 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d109      	bne.n	8007c90 <xTaskPriorityDisinherit+0x50>
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	e7fe      	b.n	8007c8e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c94:	1e5a      	subs	r2, r3, #1
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d02c      	beq.n	8007d00 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d128      	bne.n	8007d00 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fca2 	bl	80065fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd0:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <xTaskPriorityDisinherit+0xd0>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d903      	bls.n	8007ce0 <xTaskPriorityDisinherit+0xa0>
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	4a0c      	ldr	r2, [pc, #48]	; (8007d10 <xTaskPriorityDisinherit+0xd0>)
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4a09      	ldr	r2, [pc, #36]	; (8007d14 <xTaskPriorityDisinherit+0xd4>)
 8007cee:	441a      	add	r2, r3
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7fe fc25 	bl	8006546 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d00:	697b      	ldr	r3, [r7, #20]
	}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000930 	.word	0x20000930
 8007d10:	20000e0c 	.word	0x20000e0c
 8007d14:	20000934 	.word	0x20000934

08007d18 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d22:	4b21      	ldr	r3, [pc, #132]	; (8007da8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d28:	4b20      	ldr	r3, [pc, #128]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fc64 	bl	80065fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3a:	d10a      	bne.n	8007d52 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d42:	4b1a      	ldr	r3, [pc, #104]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4819      	ldr	r0, [pc, #100]	; (8007db0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d4c:	f7fe fbfb 	bl	8006546 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d50:	e026      	b.n	8007da0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4413      	add	r3, r2
 8007d58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d5a:	4b14      	ldr	r3, [pc, #80]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d209      	bcs.n	8007d7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d6a:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f7fe fc08 	bl	800658c <vListInsert>
}
 8007d7c:	e010      	b.n	8007da0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <prvAddCurrentTaskToDelayedList+0x94>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f7fe fbfe 	bl	800658c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d202      	bcs.n	8007da0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d9a:	4a08      	ldr	r2, [pc, #32]	; (8007dbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	6013      	str	r3, [r2, #0]
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000e08 	.word	0x20000e08
 8007dac:	20000930 	.word	0x20000930
 8007db0:	20000df0 	.word	0x20000df0
 8007db4:	20000dc0 	.word	0x20000dc0
 8007db8:	20000dbc 	.word	0x20000dbc
 8007dbc:	20000e24 	.word	0x20000e24

08007dc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08a      	sub	sp, #40	; 0x28
 8007dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dca:	f000 fac3 	bl	8008354 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dce:	4b1c      	ldr	r3, [pc, #112]	; (8007e40 <xTimerCreateTimerTask+0x80>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d021      	beq.n	8007e1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dde:	1d3a      	adds	r2, r7, #4
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	f107 030c 	add.w	r3, r7, #12
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fb67 	bl	80064bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	9202      	str	r2, [sp, #8]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	2302      	movs	r3, #2
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	460a      	mov	r2, r1
 8007e00:	4910      	ldr	r1, [pc, #64]	; (8007e44 <xTimerCreateTimerTask+0x84>)
 8007e02:	4811      	ldr	r0, [pc, #68]	; (8007e48 <xTimerCreateTimerTask+0x88>)
 8007e04:	f7ff f8f8 	bl	8006ff8 <xTaskCreateStatic>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <xTimerCreateTimerTask+0x8c>)
 8007e0c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <xTimerCreateTimerTask+0x8c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e16:	2301      	movs	r3, #1
 8007e18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d109      	bne.n	8007e34 <xTimerCreateTimerTask+0x74>
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	e7fe      	b.n	8007e32 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007e34:	697b      	ldr	r3, [r7, #20]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20000e60 	.word	0x20000e60
 8007e44:	0800a454 	.word	0x0800a454
 8007e48:	08007f69 	.word	0x08007f69
 8007e4c:	20000e64 	.word	0x20000e64

08007e50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	; 0x28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <xTimerGenericCommand+0x2c>
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	623b      	str	r3, [r7, #32]
 8007e7a:	e7fe      	b.n	8007e7a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e7c:	4b19      	ldr	r3, [pc, #100]	; (8007ee4 <xTimerGenericCommand+0x94>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d02a      	beq.n	8007eda <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	dc18      	bgt.n	8007ec8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e96:	f7ff feb5 	bl	8007c04 <xTaskGetSchedulerState>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d109      	bne.n	8007eb4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ea0:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <xTimerGenericCommand+0x94>)
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	f107 0110 	add.w	r1, r7, #16
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eac:	f7fe fcce 	bl	800684c <xQueueGenericSend>
 8007eb0:	6278      	str	r0, [r7, #36]	; 0x24
 8007eb2:	e012      	b.n	8007eda <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007eb4:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <xTimerGenericCommand+0x94>)
 8007eb6:	6818      	ldr	r0, [r3, #0]
 8007eb8:	f107 0110 	add.w	r1, r7, #16
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f7fe fcc4 	bl	800684c <xQueueGenericSend>
 8007ec4:	6278      	str	r0, [r7, #36]	; 0x24
 8007ec6:	e008      	b.n	8007eda <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <xTimerGenericCommand+0x94>)
 8007eca:	6818      	ldr	r0, [r3, #0]
 8007ecc:	f107 0110 	add.w	r1, r7, #16
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	f7fe fdb4 	bl	8006a40 <xQueueGenericSendFromISR>
 8007ed8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3728      	adds	r7, #40	; 0x28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	20000e60 	.word	0x20000e60

08007ee8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af02      	add	r7, sp, #8
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ef2:	4b1c      	ldr	r3, [pc, #112]	; (8007f64 <prvProcessExpiredTimer+0x7c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	3304      	adds	r3, #4
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fe fb7b 	bl	80065fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d121      	bne.n	8007f52 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	699a      	ldr	r2, [r3, #24]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	18d1      	adds	r1, r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	6978      	ldr	r0, [r7, #20]
 8007f1c:	f000 f8c8 	bl	80080b0 <prvInsertTimerInActiveList>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d015      	beq.n	8007f52 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f26:	2300      	movs	r3, #0
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	2100      	movs	r1, #0
 8007f30:	6978      	ldr	r0, [r7, #20]
 8007f32:	f7ff ff8d 	bl	8007e50 <xTimerGenericCommand>
 8007f36:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <prvProcessExpiredTimer+0x6a>
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	e7fe      	b.n	8007f50 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	6978      	ldr	r0, [r7, #20]
 8007f58:	4798      	blx	r3
}
 8007f5a:	bf00      	nop
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000e58 	.word	0x20000e58

08007f68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f70:	f107 0308 	add.w	r3, r7, #8
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 f857 	bl	8008028 <prvGetNextExpireTime>
 8007f7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 f803 	bl	8007f8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f86:	f000 f8d5 	bl	8008134 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f8a:	e7f1      	b.n	8007f70 <prvTimerTask+0x8>

08007f8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f96:	f7ff fa5b 	bl	8007450 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f9a:	f107 0308 	add.w	r3, r7, #8
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f866 	bl	8008070 <prvSampleTimeNow>
 8007fa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d130      	bne.n	800800e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10a      	bne.n	8007fc8 <prvProcessTimerOrBlockTask+0x3c>
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d806      	bhi.n	8007fc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fba:	f7ff fa57 	bl	800746c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fbe:	68f9      	ldr	r1, [r7, #12]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff ff91 	bl	8007ee8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fc6:	e024      	b.n	8008012 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d008      	beq.n	8007fe0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fce:	4b13      	ldr	r3, [pc, #76]	; (800801c <prvProcessTimerOrBlockTask+0x90>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	bf0c      	ite	eq
 8007fd8:	2301      	moveq	r3, #1
 8007fda:	2300      	movne	r3, #0
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fe0:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <prvProcessTimerOrBlockTask+0x94>)
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	4619      	mov	r1, r3
 8007fee:	f7fe ffcf 	bl	8006f90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ff2:	f7ff fa3b 	bl	800746c <xTaskResumeAll>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10a      	bne.n	8008012 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ffc:	4b09      	ldr	r3, [pc, #36]	; (8008024 <prvProcessTimerOrBlockTask+0x98>)
 8007ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	f3bf 8f6f 	isb	sy
}
 800800c:	e001      	b.n	8008012 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800800e:	f7ff fa2d 	bl	800746c <xTaskResumeAll>
}
 8008012:	bf00      	nop
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000e5c 	.word	0x20000e5c
 8008020:	20000e60 	.word	0x20000e60
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008030:	4b0e      	ldr	r3, [pc, #56]	; (800806c <prvGetNextExpireTime+0x44>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	bf0c      	ite	eq
 800803a:	2301      	moveq	r3, #1
 800803c:	2300      	movne	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d105      	bne.n	800805a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800804e:	4b07      	ldr	r3, [pc, #28]	; (800806c <prvGetNextExpireTime+0x44>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	e001      	b.n	800805e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800805e:	68fb      	ldr	r3, [r7, #12]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20000e58 	.word	0x20000e58

08008070 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008078:	f7ff fa94 	bl	80075a4 <xTaskGetTickCount>
 800807c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800807e:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <prvSampleTimeNow+0x3c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	429a      	cmp	r2, r3
 8008086:	d205      	bcs.n	8008094 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008088:	f000 f904 	bl	8008294 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	e002      	b.n	800809a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800809a:	4a04      	ldr	r2, [pc, #16]	; (80080ac <prvSampleTimeNow+0x3c>)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080a0:	68fb      	ldr	r3, [r7, #12]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000e68 	.word	0x20000e68

080080b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080be:	2300      	movs	r3, #0
 80080c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d812      	bhi.n	80080fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	1ad2      	subs	r2, r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d302      	bcc.n	80080ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080e4:	2301      	movs	r3, #1
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	e01b      	b.n	8008122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080ea:	4b10      	ldr	r3, [pc, #64]	; (800812c <prvInsertTimerInActiveList+0x7c>)
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3304      	adds	r3, #4
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7fe fa49 	bl	800658c <vListInsert>
 80080fa:	e012      	b.n	8008122 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d206      	bcs.n	8008112 <prvInsertTimerInActiveList+0x62>
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d302      	bcc.n	8008112 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800810c:	2301      	movs	r3, #1
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	e007      	b.n	8008122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008112:	4b07      	ldr	r3, [pc, #28]	; (8008130 <prvInsertTimerInActiveList+0x80>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3304      	adds	r3, #4
 800811a:	4619      	mov	r1, r3
 800811c:	4610      	mov	r0, r2
 800811e:	f7fe fa35 	bl	800658c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008122:	697b      	ldr	r3, [r7, #20]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20000e5c 	.word	0x20000e5c
 8008130:	20000e58 	.word	0x20000e58

08008134 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08e      	sub	sp, #56	; 0x38
 8008138:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800813a:	e099      	b.n	8008270 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	da17      	bge.n	8008172 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008142:	1d3b      	adds	r3, r7, #4
 8008144:	3304      	adds	r3, #4
 8008146:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d109      	bne.n	8008162 <prvProcessReceivedCommands+0x2e>
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	61fb      	str	r3, [r7, #28]
 8008160:	e7fe      	b.n	8008160 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008168:	6850      	ldr	r0, [r2, #4]
 800816a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800816c:	6892      	ldr	r2, [r2, #8]
 800816e:	4611      	mov	r1, r2
 8008170:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	db7a      	blt.n	800826e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800817c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d004      	beq.n	800818e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	3304      	adds	r3, #4
 8008188:	4618      	mov	r0, r3
 800818a:	f7fe fa37 	bl	80065fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800818e:	463b      	mov	r3, r7
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff ff6d 	bl	8008070 <prvSampleTimeNow>
 8008196:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b09      	cmp	r3, #9
 800819c:	d868      	bhi.n	8008270 <prvProcessReceivedCommands+0x13c>
 800819e:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <prvProcessReceivedCommands+0x70>)
 80081a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a4:	080081cd 	.word	0x080081cd
 80081a8:	080081cd 	.word	0x080081cd
 80081ac:	080081cd 	.word	0x080081cd
 80081b0:	08008271 	.word	0x08008271
 80081b4:	08008227 	.word	0x08008227
 80081b8:	0800825d 	.word	0x0800825d
 80081bc:	080081cd 	.word	0x080081cd
 80081c0:	080081cd 	.word	0x080081cd
 80081c4:	08008271 	.word	0x08008271
 80081c8:	08008227 	.word	0x08008227
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	18d1      	adds	r1, r2, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081da:	f7ff ff69 	bl	80080b0 <prvInsertTimerInActiveList>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d045      	beq.n	8008270 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d13d      	bne.n	8008270 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	441a      	add	r2, r3
 80081fc:	2300      	movs	r3, #0
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	2300      	movs	r3, #0
 8008202:	2100      	movs	r1, #0
 8008204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008206:	f7ff fe23 	bl	8007e50 <xTimerGenericCommand>
 800820a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d12e      	bne.n	8008270 <prvProcessReceivedCommands+0x13c>
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	61bb      	str	r3, [r7, #24]
 8008224:	e7fe      	b.n	8008224 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d109      	bne.n	8008248 <prvProcessReceivedCommands+0x114>
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	e7fe      	b.n	8008246 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	699a      	ldr	r2, [r3, #24]
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	18d1      	adds	r1, r2, r3
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008256:	f7ff ff2b 	bl	80080b0 <prvInsertTimerInActiveList>
					break;
 800825a:	e009      	b.n	8008270 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d104      	bne.n	8008270 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008268:	f000 fb56 	bl	8008918 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800826c:	e000      	b.n	8008270 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800826e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <prvProcessReceivedCommands+0x15c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	1d39      	adds	r1, r7, #4
 8008276:	2200      	movs	r2, #0
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fc75 	bl	8006b68 <xQueueReceive>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	f47f af5b 	bne.w	800813c <prvProcessReceivedCommands+0x8>
	}
}
 8008286:	bf00      	nop
 8008288:	3730      	adds	r7, #48	; 0x30
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000e60 	.word	0x20000e60

08008294 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800829a:	e044      	b.n	8008326 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800829c:	4b2b      	ldr	r3, [pc, #172]	; (800834c <prvSwitchTimerLists+0xb8>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082a6:	4b29      	ldr	r3, [pc, #164]	; (800834c <prvSwitchTimerLists+0xb8>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	3304      	adds	r3, #4
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe f9a1 	bl	80065fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d12d      	bne.n	8008326 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4413      	add	r3, r2
 80082d2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d90e      	bls.n	80082fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082e8:	4b18      	ldr	r3, [pc, #96]	; (800834c <prvSwitchTimerLists+0xb8>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	3304      	adds	r3, #4
 80082f0:	4619      	mov	r1, r3
 80082f2:	4610      	mov	r0, r2
 80082f4:	f7fe f94a 	bl	800658c <vListInsert>
 80082f8:	e015      	b.n	8008326 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082fa:	2300      	movs	r3, #0
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	2300      	movs	r3, #0
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	2100      	movs	r1, #0
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f7ff fda3 	bl	8007e50 <xTimerGenericCommand>
 800830a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <prvSwitchTimerLists+0x92>
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	e7fe      	b.n	8008324 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008326:	4b09      	ldr	r3, [pc, #36]	; (800834c <prvSwitchTimerLists+0xb8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1b5      	bne.n	800829c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008330:	4b06      	ldr	r3, [pc, #24]	; (800834c <prvSwitchTimerLists+0xb8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008336:	4b06      	ldr	r3, [pc, #24]	; (8008350 <prvSwitchTimerLists+0xbc>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a04      	ldr	r2, [pc, #16]	; (800834c <prvSwitchTimerLists+0xb8>)
 800833c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800833e:	4a04      	ldr	r2, [pc, #16]	; (8008350 <prvSwitchTimerLists+0xbc>)
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	6013      	str	r3, [r2, #0]
}
 8008344:	bf00      	nop
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20000e58 	.word	0x20000e58
 8008350:	20000e5c 	.word	0x20000e5c

08008354 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800835a:	f000 f925 	bl	80085a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800835e:	4b15      	ldr	r3, [pc, #84]	; (80083b4 <prvCheckForValidListAndQueue+0x60>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d120      	bne.n	80083a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008366:	4814      	ldr	r0, [pc, #80]	; (80083b8 <prvCheckForValidListAndQueue+0x64>)
 8008368:	f7fe f8c2 	bl	80064f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800836c:	4813      	ldr	r0, [pc, #76]	; (80083bc <prvCheckForValidListAndQueue+0x68>)
 800836e:	f7fe f8bf 	bl	80064f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008372:	4b13      	ldr	r3, [pc, #76]	; (80083c0 <prvCheckForValidListAndQueue+0x6c>)
 8008374:	4a10      	ldr	r2, [pc, #64]	; (80083b8 <prvCheckForValidListAndQueue+0x64>)
 8008376:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008378:	4b12      	ldr	r3, [pc, #72]	; (80083c4 <prvCheckForValidListAndQueue+0x70>)
 800837a:	4a10      	ldr	r2, [pc, #64]	; (80083bc <prvCheckForValidListAndQueue+0x68>)
 800837c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800837e:	2300      	movs	r3, #0
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	4b11      	ldr	r3, [pc, #68]	; (80083c8 <prvCheckForValidListAndQueue+0x74>)
 8008384:	4a11      	ldr	r2, [pc, #68]	; (80083cc <prvCheckForValidListAndQueue+0x78>)
 8008386:	2110      	movs	r1, #16
 8008388:	200a      	movs	r0, #10
 800838a:	f7fe f9c9 	bl	8006720 <xQueueGenericCreateStatic>
 800838e:	4602      	mov	r2, r0
 8008390:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <prvCheckForValidListAndQueue+0x60>)
 8008392:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008394:	4b07      	ldr	r3, [pc, #28]	; (80083b4 <prvCheckForValidListAndQueue+0x60>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <prvCheckForValidListAndQueue+0x60>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	490b      	ldr	r1, [pc, #44]	; (80083d0 <prvCheckForValidListAndQueue+0x7c>)
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe fdcc 	bl	8006f40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083a8:	f000 f92c 	bl	8008604 <vPortExitCritical>
}
 80083ac:	bf00      	nop
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20000e60 	.word	0x20000e60
 80083b8:	20000e30 	.word	0x20000e30
 80083bc:	20000e44 	.word	0x20000e44
 80083c0:	20000e58 	.word	0x20000e58
 80083c4:	20000e5c 	.word	0x20000e5c
 80083c8:	20000f0c 	.word	0x20000f0c
 80083cc:	20000e6c 	.word	0x20000e6c
 80083d0:	0800a45c 	.word	0x0800a45c

080083d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3b04      	subs	r3, #4
 80083e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80083ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3b04      	subs	r3, #4
 80083f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f023 0201 	bic.w	r2, r3, #1
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3b04      	subs	r3, #4
 8008402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008404:	4a08      	ldr	r2, [pc, #32]	; (8008428 <pxPortInitialiseStack+0x54>)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3b14      	subs	r3, #20
 800840e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3b20      	subs	r3, #32
 800841a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800841c:	68fb      	ldr	r3, [r7, #12]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	bc80      	pop	{r7}
 8008426:	4770      	bx	lr
 8008428:	0800842d 	.word	0x0800842d

0800842c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008432:	2300      	movs	r3, #0
 8008434:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008436:	4b10      	ldr	r3, [pc, #64]	; (8008478 <prvTaskExitError+0x4c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843e:	d009      	beq.n	8008454 <prvTaskExitError+0x28>
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	e7fe      	b.n	8008452 <prvTaskExitError+0x26>
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008466:	bf00      	nop
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0fc      	beq.n	8008468 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	bc80      	pop	{r7}
 8008476:	4770      	bx	lr
 8008478:	2000004c 	.word	0x2000004c
 800847c:	00000000 	.word	0x00000000

08008480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008480:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <pxCurrentTCBConst2>)
 8008482:	6819      	ldr	r1, [r3, #0]
 8008484:	6808      	ldr	r0, [r1, #0]
 8008486:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800848a:	f380 8809 	msr	PSP, r0
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f04f 0000 	mov.w	r0, #0
 8008496:	f380 8811 	msr	BASEPRI, r0
 800849a:	f04e 0e0d 	orr.w	lr, lr, #13
 800849e:	4770      	bx	lr

080084a0 <pxCurrentTCBConst2>:
 80084a0:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop

080084a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80084a8:	4806      	ldr	r0, [pc, #24]	; (80084c4 <prvPortStartFirstTask+0x1c>)
 80084aa:	6800      	ldr	r0, [r0, #0]
 80084ac:	6800      	ldr	r0, [r0, #0]
 80084ae:	f380 8808 	msr	MSP, r0
 80084b2:	b662      	cpsie	i
 80084b4:	b661      	cpsie	f
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	df00      	svc	0
 80084c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084c2:	bf00      	nop
 80084c4:	e000ed08 	.word	0xe000ed08

080084c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084ce:	4b31      	ldr	r3, [pc, #196]	; (8008594 <xPortStartScheduler+0xcc>)
 80084d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	22ff      	movs	r2, #255	; 0xff
 80084de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	4b29      	ldr	r3, [pc, #164]	; (8008598 <xPortStartScheduler+0xd0>)
 80084f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084f6:	4b29      	ldr	r3, [pc, #164]	; (800859c <xPortStartScheduler+0xd4>)
 80084f8:	2207      	movs	r2, #7
 80084fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084fc:	e009      	b.n	8008512 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80084fe:	4b27      	ldr	r3, [pc, #156]	; (800859c <xPortStartScheduler+0xd4>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3b01      	subs	r3, #1
 8008504:	4a25      	ldr	r2, [pc, #148]	; (800859c <xPortStartScheduler+0xd4>)
 8008506:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008508:	78fb      	ldrb	r3, [r7, #3]
 800850a:	b2db      	uxtb	r3, r3
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	b2db      	uxtb	r3, r3
 8008510:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	b2db      	uxtb	r3, r3
 8008516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851a:	2b80      	cmp	r3, #128	; 0x80
 800851c:	d0ef      	beq.n	80084fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800851e:	4b1f      	ldr	r3, [pc, #124]	; (800859c <xPortStartScheduler+0xd4>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f1c3 0307 	rsb	r3, r3, #7
 8008526:	2b04      	cmp	r3, #4
 8008528:	d009      	beq.n	800853e <xPortStartScheduler+0x76>
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	60bb      	str	r3, [r7, #8]
 800853c:	e7fe      	b.n	800853c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800853e:	4b17      	ldr	r3, [pc, #92]	; (800859c <xPortStartScheduler+0xd4>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	021b      	lsls	r3, r3, #8
 8008544:	4a15      	ldr	r2, [pc, #84]	; (800859c <xPortStartScheduler+0xd4>)
 8008546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008548:	4b14      	ldr	r3, [pc, #80]	; (800859c <xPortStartScheduler+0xd4>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008550:	4a12      	ldr	r2, [pc, #72]	; (800859c <xPortStartScheduler+0xd4>)
 8008552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	b2da      	uxtb	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800855c:	4b10      	ldr	r3, [pc, #64]	; (80085a0 <xPortStartScheduler+0xd8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a0f      	ldr	r2, [pc, #60]	; (80085a0 <xPortStartScheduler+0xd8>)
 8008562:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008568:	4b0d      	ldr	r3, [pc, #52]	; (80085a0 <xPortStartScheduler+0xd8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a0c      	ldr	r2, [pc, #48]	; (80085a0 <xPortStartScheduler+0xd8>)
 800856e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008574:	f000 f8b0 	bl	80086d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008578:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <xPortStartScheduler+0xdc>)
 800857a:	2200      	movs	r2, #0
 800857c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800857e:	f7ff ff93 	bl	80084a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008582:	f7ff f8db 	bl	800773c <vTaskSwitchContext>
	prvTaskExitError();
 8008586:	f7ff ff51 	bl	800842c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	e000e400 	.word	0xe000e400
 8008598:	20000f5c 	.word	0x20000f5c
 800859c:	20000f60 	.word	0x20000f60
 80085a0:	e000ed20 	.word	0xe000ed20
 80085a4:	2000004c 	.word	0x2000004c

080085a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085c0:	4b0e      	ldr	r3, [pc, #56]	; (80085fc <vPortEnterCritical+0x54>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	4a0d      	ldr	r2, [pc, #52]	; (80085fc <vPortEnterCritical+0x54>)
 80085c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085ca:	4b0c      	ldr	r3, [pc, #48]	; (80085fc <vPortEnterCritical+0x54>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d10e      	bne.n	80085f0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085d2:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <vPortEnterCritical+0x58>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d009      	beq.n	80085f0 <vPortEnterCritical+0x48>
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	603b      	str	r3, [r7, #0]
 80085ee:	e7fe      	b.n	80085ee <vPortEnterCritical+0x46>
	}
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bc80      	pop	{r7}
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	2000004c 	.word	0x2000004c
 8008600:	e000ed04 	.word	0xe000ed04

08008604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800860a:	4b10      	ldr	r3, [pc, #64]	; (800864c <vPortExitCritical+0x48>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d109      	bne.n	8008626 <vPortExitCritical+0x22>
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	607b      	str	r3, [r7, #4]
 8008624:	e7fe      	b.n	8008624 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008626:	4b09      	ldr	r3, [pc, #36]	; (800864c <vPortExitCritical+0x48>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3b01      	subs	r3, #1
 800862c:	4a07      	ldr	r2, [pc, #28]	; (800864c <vPortExitCritical+0x48>)
 800862e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008630:	4b06      	ldr	r3, [pc, #24]	; (800864c <vPortExitCritical+0x48>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <vPortExitCritical+0x3e>
 8008638:	2300      	movs	r3, #0
 800863a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008642:	bf00      	nop
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	bc80      	pop	{r7}
 800864a:	4770      	bx	lr
 800864c:	2000004c 	.word	0x2000004c

08008650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008650:	f3ef 8009 	mrs	r0, PSP
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <pxCurrentTCBConst>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008660:	6010      	str	r0, [r2, #0]
 8008662:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008666:	f04f 0050 	mov.w	r0, #80	; 0x50
 800866a:	f380 8811 	msr	BASEPRI, r0
 800866e:	f7ff f865 	bl	800773c <vTaskSwitchContext>
 8008672:	f04f 0000 	mov.w	r0, #0
 8008676:	f380 8811 	msr	BASEPRI, r0
 800867a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800867e:	6819      	ldr	r1, [r3, #0]
 8008680:	6808      	ldr	r0, [r1, #0]
 8008682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008686:	f380 8809 	msr	PSP, r0
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	4770      	bx	lr

08008690 <pxCurrentTCBConst>:
 8008690:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop

08008698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086b0:	f7fe ff86 	bl	80075c0 <xTaskIncrementTick>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086ba:	4b06      	ldr	r3, [pc, #24]	; (80086d4 <SysTick_Handler+0x3c>)
 80086bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	2300      	movs	r3, #0
 80086c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086d8:	b480      	push	{r7}
 80086da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086dc:	4b0a      	ldr	r3, [pc, #40]	; (8008708 <vPortSetupTimerInterrupt+0x30>)
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086e2:	4b0a      	ldr	r3, [pc, #40]	; (800870c <vPortSetupTimerInterrupt+0x34>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086e8:	4b09      	ldr	r3, [pc, #36]	; (8008710 <vPortSetupTimerInterrupt+0x38>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a09      	ldr	r2, [pc, #36]	; (8008714 <vPortSetupTimerInterrupt+0x3c>)
 80086ee:	fba2 2303 	umull	r2, r3, r2, r3
 80086f2:	099b      	lsrs	r3, r3, #6
 80086f4:	4a08      	ldr	r2, [pc, #32]	; (8008718 <vPortSetupTimerInterrupt+0x40>)
 80086f6:	3b01      	subs	r3, #1
 80086f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086fa:	4b03      	ldr	r3, [pc, #12]	; (8008708 <vPortSetupTimerInterrupt+0x30>)
 80086fc:	2207      	movs	r2, #7
 80086fe:	601a      	str	r2, [r3, #0]
}
 8008700:	bf00      	nop
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr
 8008708:	e000e010 	.word	0xe000e010
 800870c:	e000e018 	.word	0xe000e018
 8008710:	2000001c 	.word	0x2000001c
 8008714:	10624dd3 	.word	0x10624dd3
 8008718:	e000e014 	.word	0xe000e014

0800871c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008722:	f3ef 8305 	mrs	r3, IPSR
 8008726:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b0f      	cmp	r3, #15
 800872c:	d913      	bls.n	8008756 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800872e:	4a15      	ldr	r2, [pc, #84]	; (8008784 <vPortValidateInterruptPriority+0x68>)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4413      	add	r3, r2
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008738:	4b13      	ldr	r3, [pc, #76]	; (8008788 <vPortValidateInterruptPriority+0x6c>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	7afa      	ldrb	r2, [r7, #11]
 800873e:	429a      	cmp	r2, r3
 8008740:	d209      	bcs.n	8008756 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	607b      	str	r3, [r7, #4]
 8008754:	e7fe      	b.n	8008754 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008756:	4b0d      	ldr	r3, [pc, #52]	; (800878c <vPortValidateInterruptPriority+0x70>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800875e:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <vPortValidateInterruptPriority+0x74>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d909      	bls.n	800877a <vPortValidateInterruptPriority+0x5e>
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	603b      	str	r3, [r7, #0]
 8008778:	e7fe      	b.n	8008778 <vPortValidateInterruptPriority+0x5c>
	}
 800877a:	bf00      	nop
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	bc80      	pop	{r7}
 8008782:	4770      	bx	lr
 8008784:	e000e3f0 	.word	0xe000e3f0
 8008788:	20000f5c 	.word	0x20000f5c
 800878c:	e000ed0c 	.word	0xe000ed0c
 8008790:	20000f60 	.word	0x20000f60

08008794 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08a      	sub	sp, #40	; 0x28
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800879c:	2300      	movs	r3, #0
 800879e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087a0:	f7fe fe56 	bl	8007450 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087a4:	4b57      	ldr	r3, [pc, #348]	; (8008904 <pvPortMalloc+0x170>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087ac:	f000 f90c 	bl	80089c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087b0:	4b55      	ldr	r3, [pc, #340]	; (8008908 <pvPortMalloc+0x174>)
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4013      	ands	r3, r2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f040 808c 	bne.w	80088d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01c      	beq.n	80087fe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80087c4:	2208      	movs	r2, #8
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4413      	add	r3, r2
 80087ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d013      	beq.n	80087fe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f023 0307 	bic.w	r3, r3, #7
 80087dc:	3308      	adds	r3, #8
 80087de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d009      	beq.n	80087fe <pvPortMalloc+0x6a>
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	e7fe      	b.n	80087fc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d068      	beq.n	80088d6 <pvPortMalloc+0x142>
 8008804:	4b41      	ldr	r3, [pc, #260]	; (800890c <pvPortMalloc+0x178>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	429a      	cmp	r2, r3
 800880c:	d863      	bhi.n	80088d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800880e:	4b40      	ldr	r3, [pc, #256]	; (8008910 <pvPortMalloc+0x17c>)
 8008810:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008812:	4b3f      	ldr	r3, [pc, #252]	; (8008910 <pvPortMalloc+0x17c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008818:	e004      	b.n	8008824 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	429a      	cmp	r2, r3
 800882c:	d903      	bls.n	8008836 <pvPortMalloc+0xa2>
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1f1      	bne.n	800881a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008836:	4b33      	ldr	r3, [pc, #204]	; (8008904 <pvPortMalloc+0x170>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883c:	429a      	cmp	r2, r3
 800883e:	d04a      	beq.n	80088d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2208      	movs	r2, #8
 8008846:	4413      	add	r3, r2
 8008848:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	1ad2      	subs	r2, r2, r3
 800885a:	2308      	movs	r3, #8
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	429a      	cmp	r2, r3
 8008860:	d91e      	bls.n	80088a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4413      	add	r3, r2
 8008868:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	f003 0307 	and.w	r3, r3, #7
 8008870:	2b00      	cmp	r3, #0
 8008872:	d009      	beq.n	8008888 <pvPortMalloc+0xf4>
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	613b      	str	r3, [r7, #16]
 8008886:	e7fe      	b.n	8008886 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800889a:	69b8      	ldr	r0, [r7, #24]
 800889c:	f000 f8f6 	bl	8008a8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088a0:	4b1a      	ldr	r3, [pc, #104]	; (800890c <pvPortMalloc+0x178>)
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	4a18      	ldr	r2, [pc, #96]	; (800890c <pvPortMalloc+0x178>)
 80088ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088ae:	4b17      	ldr	r3, [pc, #92]	; (800890c <pvPortMalloc+0x178>)
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	4b18      	ldr	r3, [pc, #96]	; (8008914 <pvPortMalloc+0x180>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d203      	bcs.n	80088c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088ba:	4b14      	ldr	r3, [pc, #80]	; (800890c <pvPortMalloc+0x178>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a15      	ldr	r2, [pc, #84]	; (8008914 <pvPortMalloc+0x180>)
 80088c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	4b10      	ldr	r3, [pc, #64]	; (8008908 <pvPortMalloc+0x174>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	431a      	orrs	r2, r3
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088d6:	f7fe fdc9 	bl	800746c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	f003 0307 	and.w	r3, r3, #7
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d009      	beq.n	80088f8 <pvPortMalloc+0x164>
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	e7fe      	b.n	80088f6 <pvPortMalloc+0x162>
	return pvReturn;
 80088f8:	69fb      	ldr	r3, [r7, #28]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3728      	adds	r7, #40	; 0x28
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20001d18 	.word	0x20001d18
 8008908:	20001d24 	.word	0x20001d24
 800890c:	20001d1c 	.word	0x20001d1c
 8008910:	20001d10 	.word	0x20001d10
 8008914:	20001d20 	.word	0x20001d20

08008918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d046      	beq.n	80089b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800892a:	2308      	movs	r3, #8
 800892c:	425b      	negs	r3, r3
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	4413      	add	r3, r2
 8008932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	4b20      	ldr	r3, [pc, #128]	; (80089c0 <vPortFree+0xa8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4013      	ands	r3, r2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d109      	bne.n	800895a <vPortFree+0x42>
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e7fe      	b.n	8008958 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d009      	beq.n	8008976 <vPortFree+0x5e>
 8008962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	60bb      	str	r3, [r7, #8]
 8008974:	e7fe      	b.n	8008974 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	4b11      	ldr	r3, [pc, #68]	; (80089c0 <vPortFree+0xa8>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4013      	ands	r3, r2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d019      	beq.n	80089b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d115      	bne.n	80089b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	4b0b      	ldr	r3, [pc, #44]	; (80089c0 <vPortFree+0xa8>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	43db      	mvns	r3, r3
 8008996:	401a      	ands	r2, r3
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800899c:	f7fe fd58 	bl	8007450 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <vPortFree+0xac>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4413      	add	r3, r2
 80089aa:	4a06      	ldr	r2, [pc, #24]	; (80089c4 <vPortFree+0xac>)
 80089ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089ae:	6938      	ldr	r0, [r7, #16]
 80089b0:	f000 f86c 	bl	8008a8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80089b4:	f7fe fd5a 	bl	800746c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089b8:	bf00      	nop
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20001d24 	.word	0x20001d24
 80089c4:	20001d1c 	.word	0x20001d1c

080089c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089ce:	f640 53ac 	movw	r3, #3500	; 0xdac
 80089d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089d4:	4b27      	ldr	r3, [pc, #156]	; (8008a74 <prvHeapInit+0xac>)
 80089d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f003 0307 	and.w	r3, r3, #7
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00c      	beq.n	80089fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3307      	adds	r3, #7
 80089e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 0307 	bic.w	r3, r3, #7
 80089ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	4a1f      	ldr	r2, [pc, #124]	; (8008a74 <prvHeapInit+0xac>)
 80089f8:	4413      	add	r3, r2
 80089fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a00:	4a1d      	ldr	r2, [pc, #116]	; (8008a78 <prvHeapInit+0xb0>)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a06:	4b1c      	ldr	r3, [pc, #112]	; (8008a78 <prvHeapInit+0xb0>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	4413      	add	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a14:	2208      	movs	r2, #8
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	1a9b      	subs	r3, r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f023 0307 	bic.w	r3, r3, #7
 8008a22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	4a15      	ldr	r2, [pc, #84]	; (8008a7c <prvHeapInit+0xb4>)
 8008a28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a2a:	4b14      	ldr	r3, [pc, #80]	; (8008a7c <prvHeapInit+0xb4>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a32:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <prvHeapInit+0xb4>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	1ad2      	subs	r2, r2, r3
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <prvHeapInit+0xb4>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	4a0a      	ldr	r2, [pc, #40]	; (8008a80 <prvHeapInit+0xb8>)
 8008a56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	4a09      	ldr	r2, [pc, #36]	; (8008a84 <prvHeapInit+0xbc>)
 8008a5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a60:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <prvHeapInit+0xc0>)
 8008a62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a66:	601a      	str	r2, [r3, #0]
}
 8008a68:	bf00      	nop
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bc80      	pop	{r7}
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20000f64 	.word	0x20000f64
 8008a78:	20001d10 	.word	0x20001d10
 8008a7c:	20001d18 	.word	0x20001d18
 8008a80:	20001d20 	.word	0x20001d20
 8008a84:	20001d1c 	.word	0x20001d1c
 8008a88:	20001d24 	.word	0x20001d24

08008a8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a94:	4b27      	ldr	r3, [pc, #156]	; (8008b34 <prvInsertBlockIntoFreeList+0xa8>)
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	e002      	b.n	8008aa0 <prvInsertBlockIntoFreeList+0x14>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d8f7      	bhi.n	8008a9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d108      	bne.n	8008ace <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	441a      	add	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d118      	bne.n	8008b14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	4b14      	ldr	r3, [pc, #80]	; (8008b38 <prvInsertBlockIntoFreeList+0xac>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d00d      	beq.n	8008b0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	441a      	add	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	e008      	b.n	8008b1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <prvInsertBlockIntoFreeList+0xac>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	e003      	b.n	8008b1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d002      	beq.n	8008b2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr
 8008b34:	20001d10 	.word	0x20001d10
 8008b38:	20001d18 	.word	0x20001d18

08008b3c <atoi>:
 8008b3c:	220a      	movs	r2, #10
 8008b3e:	2100      	movs	r1, #0
 8008b40:	f000 b986 	b.w	8008e50 <strtol>

08008b44 <__errno>:
 8008b44:	4b01      	ldr	r3, [pc, #4]	; (8008b4c <__errno+0x8>)
 8008b46:	6818      	ldr	r0, [r3, #0]
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20000050 	.word	0x20000050

08008b50 <__libc_init_array>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	2500      	movs	r5, #0
 8008b54:	4e0c      	ldr	r6, [pc, #48]	; (8008b88 <__libc_init_array+0x38>)
 8008b56:	4c0d      	ldr	r4, [pc, #52]	; (8008b8c <__libc_init_array+0x3c>)
 8008b58:	1ba4      	subs	r4, r4, r6
 8008b5a:	10a4      	asrs	r4, r4, #2
 8008b5c:	42a5      	cmp	r5, r4
 8008b5e:	d109      	bne.n	8008b74 <__libc_init_array+0x24>
 8008b60:	f000 fa24 	bl	8008fac <_init>
 8008b64:	2500      	movs	r5, #0
 8008b66:	4e0a      	ldr	r6, [pc, #40]	; (8008b90 <__libc_init_array+0x40>)
 8008b68:	4c0a      	ldr	r4, [pc, #40]	; (8008b94 <__libc_init_array+0x44>)
 8008b6a:	1ba4      	subs	r4, r4, r6
 8008b6c:	10a4      	asrs	r4, r4, #2
 8008b6e:	42a5      	cmp	r5, r4
 8008b70:	d105      	bne.n	8008b7e <__libc_init_array+0x2e>
 8008b72:	bd70      	pop	{r4, r5, r6, pc}
 8008b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b78:	4798      	blx	r3
 8008b7a:	3501      	adds	r5, #1
 8008b7c:	e7ee      	b.n	8008b5c <__libc_init_array+0xc>
 8008b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b82:	4798      	blx	r3
 8008b84:	3501      	adds	r5, #1
 8008b86:	e7f2      	b.n	8008b6e <__libc_init_array+0x1e>
 8008b88:	0800a63c 	.word	0x0800a63c
 8008b8c:	0800a63c 	.word	0x0800a63c
 8008b90:	0800a63c 	.word	0x0800a63c
 8008b94:	0800a640 	.word	0x0800a640

08008b98 <memcmp>:
 8008b98:	b530      	push	{r4, r5, lr}
 8008b9a:	2400      	movs	r4, #0
 8008b9c:	42a2      	cmp	r2, r4
 8008b9e:	d101      	bne.n	8008ba4 <memcmp+0xc>
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	e007      	b.n	8008bb4 <memcmp+0x1c>
 8008ba4:	5d03      	ldrb	r3, [r0, r4]
 8008ba6:	3401      	adds	r4, #1
 8008ba8:	190d      	adds	r5, r1, r4
 8008baa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8008bae:	42ab      	cmp	r3, r5
 8008bb0:	d0f4      	beq.n	8008b9c <memcmp+0x4>
 8008bb2:	1b58      	subs	r0, r3, r5
 8008bb4:	bd30      	pop	{r4, r5, pc}

08008bb6 <memcpy>:
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	1e43      	subs	r3, r0, #1
 8008bba:	440a      	add	r2, r1
 8008bbc:	4291      	cmp	r1, r2
 8008bbe:	d100      	bne.n	8008bc2 <memcpy+0xc>
 8008bc0:	bd10      	pop	{r4, pc}
 8008bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bca:	e7f7      	b.n	8008bbc <memcpy+0x6>

08008bcc <memmove>:
 8008bcc:	4288      	cmp	r0, r1
 8008bce:	b510      	push	{r4, lr}
 8008bd0:	eb01 0302 	add.w	r3, r1, r2
 8008bd4:	d807      	bhi.n	8008be6 <memmove+0x1a>
 8008bd6:	1e42      	subs	r2, r0, #1
 8008bd8:	4299      	cmp	r1, r3
 8008bda:	d00a      	beq.n	8008bf2 <memmove+0x26>
 8008bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008be0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008be4:	e7f8      	b.n	8008bd8 <memmove+0xc>
 8008be6:	4283      	cmp	r3, r0
 8008be8:	d9f5      	bls.n	8008bd6 <memmove+0xa>
 8008bea:	1881      	adds	r1, r0, r2
 8008bec:	1ad2      	subs	r2, r2, r3
 8008bee:	42d3      	cmn	r3, r2
 8008bf0:	d100      	bne.n	8008bf4 <memmove+0x28>
 8008bf2:	bd10      	pop	{r4, pc}
 8008bf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bf8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008bfc:	e7f7      	b.n	8008bee <memmove+0x22>

08008bfe <memset>:
 8008bfe:	4603      	mov	r3, r0
 8008c00:	4402      	add	r2, r0
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d100      	bne.n	8008c08 <memset+0xa>
 8008c06:	4770      	bx	lr
 8008c08:	f803 1b01 	strb.w	r1, [r3], #1
 8008c0c:	e7f9      	b.n	8008c02 <memset+0x4>

08008c0e <strcat>:
 8008c0e:	4603      	mov	r3, r0
 8008c10:	b510      	push	{r4, lr}
 8008c12:	781a      	ldrb	r2, [r3, #0]
 8008c14:	1c5c      	adds	r4, r3, #1
 8008c16:	b93a      	cbnz	r2, 8008c28 <strcat+0x1a>
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c22:	2a00      	cmp	r2, #0
 8008c24:	d1f9      	bne.n	8008c1a <strcat+0xc>
 8008c26:	bd10      	pop	{r4, pc}
 8008c28:	4623      	mov	r3, r4
 8008c2a:	e7f2      	b.n	8008c12 <strcat+0x4>

08008c2c <strchr>:
 8008c2c:	b2c9      	uxtb	r1, r1
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c34:	b11a      	cbz	r2, 8008c3e <strchr+0x12>
 8008c36:	428a      	cmp	r2, r1
 8008c38:	d1f9      	bne.n	8008c2e <strchr+0x2>
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	4770      	bx	lr
 8008c3e:	2900      	cmp	r1, #0
 8008c40:	bf18      	it	ne
 8008c42:	2300      	movne	r3, #0
 8008c44:	e7f9      	b.n	8008c3a <strchr+0xe>

08008c46 <strcpy>:
 8008c46:	4603      	mov	r3, r0
 8008c48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c4c:	f803 2b01 	strb.w	r2, [r3], #1
 8008c50:	2a00      	cmp	r2, #0
 8008c52:	d1f9      	bne.n	8008c48 <strcpy+0x2>
 8008c54:	4770      	bx	lr

08008c56 <strncmp>:
 8008c56:	b510      	push	{r4, lr}
 8008c58:	b16a      	cbz	r2, 8008c76 <strncmp+0x20>
 8008c5a:	3901      	subs	r1, #1
 8008c5c:	1884      	adds	r4, r0, r2
 8008c5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d103      	bne.n	8008c72 <strncmp+0x1c>
 8008c6a:	42a0      	cmp	r0, r4
 8008c6c:	d001      	beq.n	8008c72 <strncmp+0x1c>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f5      	bne.n	8008c5e <strncmp+0x8>
 8008c72:	1a98      	subs	r0, r3, r2
 8008c74:	bd10      	pop	{r4, pc}
 8008c76:	4610      	mov	r0, r2
 8008c78:	e7fc      	b.n	8008c74 <strncmp+0x1e>

08008c7a <strstr>:
 8008c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7c:	7803      	ldrb	r3, [r0, #0]
 8008c7e:	b17b      	cbz	r3, 8008ca0 <strstr+0x26>
 8008c80:	4604      	mov	r4, r0
 8008c82:	7823      	ldrb	r3, [r4, #0]
 8008c84:	4620      	mov	r0, r4
 8008c86:	1c66      	adds	r6, r4, #1
 8008c88:	b17b      	cbz	r3, 8008caa <strstr+0x30>
 8008c8a:	1e4a      	subs	r2, r1, #1
 8008c8c:	1e63      	subs	r3, r4, #1
 8008c8e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008c92:	b14d      	cbz	r5, 8008ca8 <strstr+0x2e>
 8008c94:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008c98:	4634      	mov	r4, r6
 8008c9a:	42af      	cmp	r7, r5
 8008c9c:	d0f7      	beq.n	8008c8e <strstr+0x14>
 8008c9e:	e7f0      	b.n	8008c82 <strstr+0x8>
 8008ca0:	780b      	ldrb	r3, [r1, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	bf18      	it	ne
 8008ca6:	2000      	movne	r0, #0
 8008ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008caa:	4618      	mov	r0, r3
 8008cac:	e7fc      	b.n	8008ca8 <strstr+0x2e>
	...

08008cb0 <strtok>:
 8008cb0:	4b13      	ldr	r3, [pc, #76]	; (8008d00 <strtok+0x50>)
 8008cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb6:	681d      	ldr	r5, [r3, #0]
 8008cb8:	4606      	mov	r6, r0
 8008cba:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	b9b4      	cbnz	r4, 8008cee <strtok+0x3e>
 8008cc0:	2050      	movs	r0, #80	; 0x50
 8008cc2:	f000 f8df 	bl	8008e84 <malloc>
 8008cc6:	65a8      	str	r0, [r5, #88]	; 0x58
 8008cc8:	e9c0 4400 	strd	r4, r4, [r0]
 8008ccc:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008cd0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008cd4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008cd8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008cdc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008ce0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008ce4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008ce8:	6184      	str	r4, [r0, #24]
 8008cea:	7704      	strb	r4, [r0, #28]
 8008cec:	6244      	str	r4, [r0, #36]	; 0x24
 8008cee:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	f000 b803 	b.w	8008d04 <__strtok_r>
 8008cfe:	bf00      	nop
 8008d00:	20000050 	.word	0x20000050

08008d04 <__strtok_r>:
 8008d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d06:	b918      	cbnz	r0, 8008d10 <__strtok_r+0xc>
 8008d08:	6810      	ldr	r0, [r2, #0]
 8008d0a:	b908      	cbnz	r0, 8008d10 <__strtok_r+0xc>
 8008d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d0e:	4620      	mov	r0, r4
 8008d10:	4604      	mov	r4, r0
 8008d12:	460f      	mov	r7, r1
 8008d14:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008d18:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008d1c:	b91e      	cbnz	r6, 8008d26 <__strtok_r+0x22>
 8008d1e:	b96d      	cbnz	r5, 8008d3c <__strtok_r+0x38>
 8008d20:	6015      	str	r5, [r2, #0]
 8008d22:	4628      	mov	r0, r5
 8008d24:	e7f2      	b.n	8008d0c <__strtok_r+0x8>
 8008d26:	42b5      	cmp	r5, r6
 8008d28:	d1f6      	bne.n	8008d18 <__strtok_r+0x14>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1ef      	bne.n	8008d0e <__strtok_r+0xa>
 8008d2e:	6014      	str	r4, [r2, #0]
 8008d30:	7003      	strb	r3, [r0, #0]
 8008d32:	e7eb      	b.n	8008d0c <__strtok_r+0x8>
 8008d34:	462b      	mov	r3, r5
 8008d36:	e00d      	b.n	8008d54 <__strtok_r+0x50>
 8008d38:	b926      	cbnz	r6, 8008d44 <__strtok_r+0x40>
 8008d3a:	461c      	mov	r4, r3
 8008d3c:	4623      	mov	r3, r4
 8008d3e:	460f      	mov	r7, r1
 8008d40:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008d44:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008d48:	42b5      	cmp	r5, r6
 8008d4a:	d1f5      	bne.n	8008d38 <__strtok_r+0x34>
 8008d4c:	2d00      	cmp	r5, #0
 8008d4e:	d0f1      	beq.n	8008d34 <__strtok_r+0x30>
 8008d50:	2100      	movs	r1, #0
 8008d52:	7021      	strb	r1, [r4, #0]
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	e7d9      	b.n	8008d0c <__strtok_r+0x8>

08008d58 <_strtol_l.isra.0>:
 8008d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	4689      	mov	r9, r1
 8008d60:	4692      	mov	sl, r2
 8008d62:	461e      	mov	r6, r3
 8008d64:	460f      	mov	r7, r1
 8008d66:	463d      	mov	r5, r7
 8008d68:	9808      	ldr	r0, [sp, #32]
 8008d6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d6e:	f000 f885 	bl	8008e7c <__locale_ctype_ptr_l>
 8008d72:	4420      	add	r0, r4
 8008d74:	7843      	ldrb	r3, [r0, #1]
 8008d76:	f013 0308 	ands.w	r3, r3, #8
 8008d7a:	d132      	bne.n	8008de2 <_strtol_l.isra.0+0x8a>
 8008d7c:	2c2d      	cmp	r4, #45	; 0x2d
 8008d7e:	d132      	bne.n	8008de6 <_strtol_l.isra.0+0x8e>
 8008d80:	2201      	movs	r2, #1
 8008d82:	787c      	ldrb	r4, [r7, #1]
 8008d84:	1cbd      	adds	r5, r7, #2
 8008d86:	2e00      	cmp	r6, #0
 8008d88:	d05d      	beq.n	8008e46 <_strtol_l.isra.0+0xee>
 8008d8a:	2e10      	cmp	r6, #16
 8008d8c:	d109      	bne.n	8008da2 <_strtol_l.isra.0+0x4a>
 8008d8e:	2c30      	cmp	r4, #48	; 0x30
 8008d90:	d107      	bne.n	8008da2 <_strtol_l.isra.0+0x4a>
 8008d92:	782b      	ldrb	r3, [r5, #0]
 8008d94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d98:	2b58      	cmp	r3, #88	; 0x58
 8008d9a:	d14f      	bne.n	8008e3c <_strtol_l.isra.0+0xe4>
 8008d9c:	2610      	movs	r6, #16
 8008d9e:	786c      	ldrb	r4, [r5, #1]
 8008da0:	3502      	adds	r5, #2
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	bf14      	ite	ne
 8008da6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008daa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008dae:	2700      	movs	r7, #0
 8008db0:	fbb1 fcf6 	udiv	ip, r1, r6
 8008db4:	4638      	mov	r0, r7
 8008db6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008dba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008dbe:	2b09      	cmp	r3, #9
 8008dc0:	d817      	bhi.n	8008df2 <_strtol_l.isra.0+0x9a>
 8008dc2:	461c      	mov	r4, r3
 8008dc4:	42a6      	cmp	r6, r4
 8008dc6:	dd23      	ble.n	8008e10 <_strtol_l.isra.0+0xb8>
 8008dc8:	1c7b      	adds	r3, r7, #1
 8008dca:	d007      	beq.n	8008ddc <_strtol_l.isra.0+0x84>
 8008dcc:	4584      	cmp	ip, r0
 8008dce:	d31c      	bcc.n	8008e0a <_strtol_l.isra.0+0xb2>
 8008dd0:	d101      	bne.n	8008dd6 <_strtol_l.isra.0+0x7e>
 8008dd2:	45a6      	cmp	lr, r4
 8008dd4:	db19      	blt.n	8008e0a <_strtol_l.isra.0+0xb2>
 8008dd6:	2701      	movs	r7, #1
 8008dd8:	fb00 4006 	mla	r0, r0, r6, r4
 8008ddc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008de0:	e7eb      	b.n	8008dba <_strtol_l.isra.0+0x62>
 8008de2:	462f      	mov	r7, r5
 8008de4:	e7bf      	b.n	8008d66 <_strtol_l.isra.0+0xe>
 8008de6:	2c2b      	cmp	r4, #43	; 0x2b
 8008de8:	bf04      	itt	eq
 8008dea:	1cbd      	addeq	r5, r7, #2
 8008dec:	787c      	ldrbeq	r4, [r7, #1]
 8008dee:	461a      	mov	r2, r3
 8008df0:	e7c9      	b.n	8008d86 <_strtol_l.isra.0+0x2e>
 8008df2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008df6:	2b19      	cmp	r3, #25
 8008df8:	d801      	bhi.n	8008dfe <_strtol_l.isra.0+0xa6>
 8008dfa:	3c37      	subs	r4, #55	; 0x37
 8008dfc:	e7e2      	b.n	8008dc4 <_strtol_l.isra.0+0x6c>
 8008dfe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008e02:	2b19      	cmp	r3, #25
 8008e04:	d804      	bhi.n	8008e10 <_strtol_l.isra.0+0xb8>
 8008e06:	3c57      	subs	r4, #87	; 0x57
 8008e08:	e7dc      	b.n	8008dc4 <_strtol_l.isra.0+0x6c>
 8008e0a:	f04f 37ff 	mov.w	r7, #4294967295
 8008e0e:	e7e5      	b.n	8008ddc <_strtol_l.isra.0+0x84>
 8008e10:	1c7b      	adds	r3, r7, #1
 8008e12:	d108      	bne.n	8008e26 <_strtol_l.isra.0+0xce>
 8008e14:	2322      	movs	r3, #34	; 0x22
 8008e16:	4608      	mov	r0, r1
 8008e18:	f8c8 3000 	str.w	r3, [r8]
 8008e1c:	f1ba 0f00 	cmp.w	sl, #0
 8008e20:	d107      	bne.n	8008e32 <_strtol_l.isra.0+0xda>
 8008e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e26:	b102      	cbz	r2, 8008e2a <_strtol_l.isra.0+0xd2>
 8008e28:	4240      	negs	r0, r0
 8008e2a:	f1ba 0f00 	cmp.w	sl, #0
 8008e2e:	d0f8      	beq.n	8008e22 <_strtol_l.isra.0+0xca>
 8008e30:	b10f      	cbz	r7, 8008e36 <_strtol_l.isra.0+0xde>
 8008e32:	f105 39ff 	add.w	r9, r5, #4294967295
 8008e36:	f8ca 9000 	str.w	r9, [sl]
 8008e3a:	e7f2      	b.n	8008e22 <_strtol_l.isra.0+0xca>
 8008e3c:	2430      	movs	r4, #48	; 0x30
 8008e3e:	2e00      	cmp	r6, #0
 8008e40:	d1af      	bne.n	8008da2 <_strtol_l.isra.0+0x4a>
 8008e42:	2608      	movs	r6, #8
 8008e44:	e7ad      	b.n	8008da2 <_strtol_l.isra.0+0x4a>
 8008e46:	2c30      	cmp	r4, #48	; 0x30
 8008e48:	d0a3      	beq.n	8008d92 <_strtol_l.isra.0+0x3a>
 8008e4a:	260a      	movs	r6, #10
 8008e4c:	e7a9      	b.n	8008da2 <_strtol_l.isra.0+0x4a>
	...

08008e50 <strtol>:
 8008e50:	4b08      	ldr	r3, [pc, #32]	; (8008e74 <strtol+0x24>)
 8008e52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e54:	681c      	ldr	r4, [r3, #0]
 8008e56:	4d08      	ldr	r5, [pc, #32]	; (8008e78 <strtol+0x28>)
 8008e58:	6a23      	ldr	r3, [r4, #32]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	bf08      	it	eq
 8008e5e:	462b      	moveq	r3, r5
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	4613      	mov	r3, r2
 8008e64:	460a      	mov	r2, r1
 8008e66:	4601      	mov	r1, r0
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f7ff ff75 	bl	8008d58 <_strtol_l.isra.0>
 8008e6e:	b003      	add	sp, #12
 8008e70:	bd30      	pop	{r4, r5, pc}
 8008e72:	bf00      	nop
 8008e74:	20000050 	.word	0x20000050
 8008e78:	200000b4 	.word	0x200000b4

08008e7c <__locale_ctype_ptr_l>:
 8008e7c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008e80:	4770      	bx	lr
	...

08008e84 <malloc>:
 8008e84:	4b02      	ldr	r3, [pc, #8]	; (8008e90 <malloc+0xc>)
 8008e86:	4601      	mov	r1, r0
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	f000 b815 	b.w	8008eb8 <_malloc_r>
 8008e8e:	bf00      	nop
 8008e90:	20000050 	.word	0x20000050

08008e94 <__ascii_mbtowc>:
 8008e94:	b082      	sub	sp, #8
 8008e96:	b901      	cbnz	r1, 8008e9a <__ascii_mbtowc+0x6>
 8008e98:	a901      	add	r1, sp, #4
 8008e9a:	b142      	cbz	r2, 8008eae <__ascii_mbtowc+0x1a>
 8008e9c:	b14b      	cbz	r3, 8008eb2 <__ascii_mbtowc+0x1e>
 8008e9e:	7813      	ldrb	r3, [r2, #0]
 8008ea0:	600b      	str	r3, [r1, #0]
 8008ea2:	7812      	ldrb	r2, [r2, #0]
 8008ea4:	1c10      	adds	r0, r2, #0
 8008ea6:	bf18      	it	ne
 8008ea8:	2001      	movne	r0, #1
 8008eaa:	b002      	add	sp, #8
 8008eac:	4770      	bx	lr
 8008eae:	4610      	mov	r0, r2
 8008eb0:	e7fb      	b.n	8008eaa <__ascii_mbtowc+0x16>
 8008eb2:	f06f 0001 	mvn.w	r0, #1
 8008eb6:	e7f8      	b.n	8008eaa <__ascii_mbtowc+0x16>

08008eb8 <_malloc_r>:
 8008eb8:	b570      	push	{r4, r5, r6, lr}
 8008eba:	1ccd      	adds	r5, r1, #3
 8008ebc:	f025 0503 	bic.w	r5, r5, #3
 8008ec0:	3508      	adds	r5, #8
 8008ec2:	2d0c      	cmp	r5, #12
 8008ec4:	bf38      	it	cc
 8008ec6:	250c      	movcc	r5, #12
 8008ec8:	2d00      	cmp	r5, #0
 8008eca:	4606      	mov	r6, r0
 8008ecc:	db01      	blt.n	8008ed2 <_malloc_r+0x1a>
 8008ece:	42a9      	cmp	r1, r5
 8008ed0:	d903      	bls.n	8008eda <_malloc_r+0x22>
 8008ed2:	230c      	movs	r3, #12
 8008ed4:	6033      	str	r3, [r6, #0]
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	bd70      	pop	{r4, r5, r6, pc}
 8008eda:	f000 f864 	bl	8008fa6 <__malloc_lock>
 8008ede:	4a21      	ldr	r2, [pc, #132]	; (8008f64 <_malloc_r+0xac>)
 8008ee0:	6814      	ldr	r4, [r2, #0]
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	b991      	cbnz	r1, 8008f0c <_malloc_r+0x54>
 8008ee6:	4c20      	ldr	r4, [pc, #128]	; (8008f68 <_malloc_r+0xb0>)
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	b91b      	cbnz	r3, 8008ef4 <_malloc_r+0x3c>
 8008eec:	4630      	mov	r0, r6
 8008eee:	f000 f83d 	bl	8008f6c <_sbrk_r>
 8008ef2:	6020      	str	r0, [r4, #0]
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f000 f838 	bl	8008f6c <_sbrk_r>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d124      	bne.n	8008f4a <_malloc_r+0x92>
 8008f00:	230c      	movs	r3, #12
 8008f02:	4630      	mov	r0, r6
 8008f04:	6033      	str	r3, [r6, #0]
 8008f06:	f000 f84f 	bl	8008fa8 <__malloc_unlock>
 8008f0a:	e7e4      	b.n	8008ed6 <_malloc_r+0x1e>
 8008f0c:	680b      	ldr	r3, [r1, #0]
 8008f0e:	1b5b      	subs	r3, r3, r5
 8008f10:	d418      	bmi.n	8008f44 <_malloc_r+0x8c>
 8008f12:	2b0b      	cmp	r3, #11
 8008f14:	d90f      	bls.n	8008f36 <_malloc_r+0x7e>
 8008f16:	600b      	str	r3, [r1, #0]
 8008f18:	18cc      	adds	r4, r1, r3
 8008f1a:	50cd      	str	r5, [r1, r3]
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	f000 f843 	bl	8008fa8 <__malloc_unlock>
 8008f22:	f104 000b 	add.w	r0, r4, #11
 8008f26:	1d23      	adds	r3, r4, #4
 8008f28:	f020 0007 	bic.w	r0, r0, #7
 8008f2c:	1ac3      	subs	r3, r0, r3
 8008f2e:	d0d3      	beq.n	8008ed8 <_malloc_r+0x20>
 8008f30:	425a      	negs	r2, r3
 8008f32:	50e2      	str	r2, [r4, r3]
 8008f34:	e7d0      	b.n	8008ed8 <_malloc_r+0x20>
 8008f36:	684b      	ldr	r3, [r1, #4]
 8008f38:	428c      	cmp	r4, r1
 8008f3a:	bf16      	itet	ne
 8008f3c:	6063      	strne	r3, [r4, #4]
 8008f3e:	6013      	streq	r3, [r2, #0]
 8008f40:	460c      	movne	r4, r1
 8008f42:	e7eb      	b.n	8008f1c <_malloc_r+0x64>
 8008f44:	460c      	mov	r4, r1
 8008f46:	6849      	ldr	r1, [r1, #4]
 8008f48:	e7cc      	b.n	8008ee4 <_malloc_r+0x2c>
 8008f4a:	1cc4      	adds	r4, r0, #3
 8008f4c:	f024 0403 	bic.w	r4, r4, #3
 8008f50:	42a0      	cmp	r0, r4
 8008f52:	d005      	beq.n	8008f60 <_malloc_r+0xa8>
 8008f54:	1a21      	subs	r1, r4, r0
 8008f56:	4630      	mov	r0, r6
 8008f58:	f000 f808 	bl	8008f6c <_sbrk_r>
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d0cf      	beq.n	8008f00 <_malloc_r+0x48>
 8008f60:	6025      	str	r5, [r4, #0]
 8008f62:	e7db      	b.n	8008f1c <_malloc_r+0x64>
 8008f64:	20001d28 	.word	0x20001d28
 8008f68:	20001d2c 	.word	0x20001d2c

08008f6c <_sbrk_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	2300      	movs	r3, #0
 8008f70:	4c05      	ldr	r4, [pc, #20]	; (8008f88 <_sbrk_r+0x1c>)
 8008f72:	4605      	mov	r5, r0
 8008f74:	4608      	mov	r0, r1
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	f7f9 fe22 	bl	8002bc0 <_sbrk>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	d102      	bne.n	8008f86 <_sbrk_r+0x1a>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	b103      	cbz	r3, 8008f86 <_sbrk_r+0x1a>
 8008f84:	602b      	str	r3, [r5, #0]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
 8008f88:	20003038 	.word	0x20003038

08008f8c <__ascii_wctomb>:
 8008f8c:	b149      	cbz	r1, 8008fa2 <__ascii_wctomb+0x16>
 8008f8e:	2aff      	cmp	r2, #255	; 0xff
 8008f90:	bf8b      	itete	hi
 8008f92:	238a      	movhi	r3, #138	; 0x8a
 8008f94:	700a      	strbls	r2, [r1, #0]
 8008f96:	6003      	strhi	r3, [r0, #0]
 8008f98:	2001      	movls	r0, #1
 8008f9a:	bf88      	it	hi
 8008f9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008fa0:	4770      	bx	lr
 8008fa2:	4608      	mov	r0, r1
 8008fa4:	4770      	bx	lr

08008fa6 <__malloc_lock>:
 8008fa6:	4770      	bx	lr

08008fa8 <__malloc_unlock>:
 8008fa8:	4770      	bx	lr
	...

08008fac <_init>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr

08008fb8 <_fini>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	bf00      	nop
 8008fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fbe:	bc08      	pop	{r3}
 8008fc0:	469e      	mov	lr, r3
 8008fc2:	4770      	bx	lr
