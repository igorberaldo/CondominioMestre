
libertyMestre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb8  080073d0  080073d0  000173d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008088  08008088  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08008088  08008088  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008088  08008088  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008088  08008088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800808c  0800808c  0001808c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08008090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b08  2000004c  080080dc  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b54  080080dc  00022b54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b06f  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003502  00000000  00000000  0003b0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001770  00000000  00000000  0003e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001620  00000000  00000000  0003fd58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004114  00000000  00000000  00041378  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001225c  00000000  00000000  0004548c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000999ef  00000000  00000000  000576e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f10d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063d4  00000000  00000000  000f1154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000004c 	.word	0x2000004c
 800012c:	00000000 	.word	0x00000000
 8000130:	080073b8 	.word	0x080073b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000050 	.word	0x20000050
 800014c:	080073b8 	.word	0x080073b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b590      	push	{r4, r7, lr}
 8000162:	b087      	sub	sp, #28
 8000164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i;
	uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8000166:	4b1e      	ldr	r3, [pc, #120]	; (80001e0 <main+0x80>)
 8000168:	1d3c      	adds	r4, r7, #4
 800016a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800016c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000170:	f002 ff66 	bl	8003040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000174:	f000 f844 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000178:	f000 f8e8 	bl	800034c <MX_GPIO_Init>
  MX_SPI2_Init();
 800017c:	f000 f8b0 	bl	80002e0 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000180:	f000 f880 	bl	8000284 <MX_I2C2_Init>
  ////////////////////////////////////////////////////////////////////////////////////////////////////
     // First of all, Should register SPI callback functions implemented by user for accessing WIZCHIP //
     ////////////////////////////////////////////////////////////////////////////////////////////////////

     /* Chip selection call back */
  	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000184:	4917      	ldr	r1, [pc, #92]	; (80001e4 <main+0x84>)
 8000186:	4818      	ldr	r0, [pc, #96]	; (80001e8 <main+0x88>)
 8000188:	f002 fa7c 	bl	8002684 <reg_wizchip_cs_cbfunc>

  	 /* SPI Read & Write callback function */
  	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800018c:	4917      	ldr	r1, [pc, #92]	; (80001ec <main+0x8c>)
 800018e:	4818      	ldr	r0, [pc, #96]	; (80001f0 <main+0x90>)
 8000190:	f002 fa9c 	bl	80026cc <reg_wizchip_spi_cbfunc>

  	////////////////////////////////////////////////////////////////////////
  	/* WIZCHIP SOCKET Buffer initialize */
  	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	4619      	mov	r1, r3
 8000198:	2001      	movs	r0, #1
 800019a:	f002 fac1 	bl	8002720 <ctlwizchip>
 800019e:	4603      	mov	r3, r0
 80001a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001a4:	d100      	bne.n	80001a8 <main+0x48>
  	{
  	   //init fail
  	   while(1);
 80001a6:	e7fe      	b.n	80001a6 <main+0x46>
  	}

  	/* Network initialization */
  	network_init();
 80001a8:	f000 f9d6 	bl	8000558 <network_init>

  	//all connections inactive
  	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 80001ac:	2300      	movs	r3, #0
 80001ae:	75fb      	strb	r3, [r7, #23]
 80001b0:	e006      	b.n	80001c0 <main+0x60>
  	HTTP_reset(i);
 80001b2:	7dfb      	ldrb	r3, [r7, #23]
 80001b4:	4618      	mov	r0, r3
 80001b6:	f000 f9e1 	bl	800057c <HTTP_reset>
  	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 80001ba:	7dfb      	ldrb	r3, [r7, #23]
 80001bc:	3301      	adds	r3, #1
 80001be:	75fb      	strb	r3, [r7, #23]
 80001c0:	7dfb      	ldrb	r3, [r7, #23]
 80001c2:	2b07      	cmp	r3, #7
 80001c4:	d9f5      	bls.n	80001b2 <main+0x52>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001c6:	f004 fc59 	bl	8004a7c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethernetTask */
  ethernetTaskHandle = osThreadNew(StartEthernet, NULL, &ethernetTask_attributes);
 80001ca:	4a0a      	ldr	r2, [pc, #40]	; (80001f4 <main+0x94>)
 80001cc:	2100      	movs	r1, #0
 80001ce:	480a      	ldr	r0, [pc, #40]	; (80001f8 <main+0x98>)
 80001d0:	f004 fcba 	bl	8004b48 <osThreadNew>
 80001d4:	4602      	mov	r2, r0
 80001d6:	4b09      	ldr	r3, [pc, #36]	; (80001fc <main+0x9c>)
 80001d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001da:	f004 fc81 	bl	8004ae0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001de:	e7fe      	b.n	80001de <main+0x7e>
 80001e0:	080073e0 	.word	0x080073e0
 80001e4:	08000515 	.word	0x08000515
 80001e8:	080004fd 	.word	0x080004fd
 80001ec:	0800052d 	.word	0x0800052d
 80001f0:	08000547 	.word	0x08000547
 80001f4:	0800804c 	.word	0x0800804c
 80001f8:	08001671 	.word	0x08001671
 80001fc:	20002aa4 	.word	0x20002aa4

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b090      	sub	sp, #64	; 0x40
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f007 f8aa 	bl	8007368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022a:	2310      	movs	r3, #16
 800022c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000232:	2300      	movs	r3, #0
 8000234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000236:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800023a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	4618      	mov	r0, r3
 8000242:	f003 fab9 	bl	80037b8 <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800024c:	f001 fa48 	bl	80016e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2102      	movs	r1, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f003 fd24 	bl	8003cb8 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000276:	f001 fa33 	bl	80016e0 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	; 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <MX_I2C2_Init+0x50>)
 800028a:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <MX_I2C2_Init+0x54>)
 800028c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <MX_I2C2_Init+0x50>)
 8000290:	4a12      	ldr	r2, [pc, #72]	; (80002dc <MX_I2C2_Init+0x58>)
 8000292:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <MX_I2C2_Init+0x50>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <MX_I2C2_Init+0x50>)
 800029c:	2200      	movs	r2, #0
 800029e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002bc:	2200      	movs	r2, #0
 80002be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <MX_I2C2_Init+0x50>)
 80002c2:	f003 f941 	bl	8003548 <HAL_I2C_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002cc:	f001 fa08 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20001a28 	.word	0x20001a28
 80002d8:	40005800 	.word	0x40005800
 80002dc:	000186a0 	.word	0x000186a0

080002e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80002e4:	4b17      	ldr	r3, [pc, #92]	; (8000344 <MX_SPI2_Init+0x64>)
 80002e6:	4a18      	ldr	r2, [pc, #96]	; (8000348 <MX_SPI2_Init+0x68>)
 80002e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002ea:	4b16      	ldr	r3, [pc, #88]	; (8000344 <MX_SPI2_Init+0x64>)
 80002ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002f2:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_SPI2_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <MX_SPI2_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_SPI2_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_SPI2_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_SPI2_Init+0x64>)
 800030c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000310:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_SPI2_Init+0x64>)
 8000314:	2218      	movs	r2, #24
 8000316:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <MX_SPI2_Init+0x64>)
 800031a:	2200      	movs	r2, #0
 800031c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_SPI2_Init+0x64>)
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <MX_SPI2_Init+0x64>)
 8000326:	2200      	movs	r2, #0
 8000328:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_SPI2_Init+0x64>)
 800032c:	220a      	movs	r2, #10
 800032e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_SPI2_Init+0x64>)
 8000332:	f003 fe8d 	bl	8004050 <HAL_SPI_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800033c:	f001 f9d0 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20001994 	.word	0x20001994
 8000348:	40003800 	.word	0x40003800

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	4b55      	ldr	r3, [pc, #340]	; (80004b8 <MX_GPIO_Init+0x16c>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a54      	ldr	r2, [pc, #336]	; (80004b8 <MX_GPIO_Init+0x16c>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b52      	ldr	r3, [pc, #328]	; (80004b8 <MX_GPIO_Init+0x16c>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0310 	and.w	r3, r3, #16
 8000374:	613b      	str	r3, [r7, #16]
 8000376:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000378:	4b4f      	ldr	r3, [pc, #316]	; (80004b8 <MX_GPIO_Init+0x16c>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a4e      	ldr	r2, [pc, #312]	; (80004b8 <MX_GPIO_Init+0x16c>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <MX_GPIO_Init+0x16c>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <MX_GPIO_Init+0x16c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a48      	ldr	r2, [pc, #288]	; (80004b8 <MX_GPIO_Init+0x16c>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b46      	ldr	r3, [pc, #280]	; (80004b8 <MX_GPIO_Init+0x16c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0304 	and.w	r3, r3, #4
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	4b43      	ldr	r3, [pc, #268]	; (80004b8 <MX_GPIO_Init+0x16c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a42      	ldr	r2, [pc, #264]	; (80004b8 <MX_GPIO_Init+0x16c>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b40      	ldr	r3, [pc, #256]	; (80004b8 <MX_GPIO_Init+0x16c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0308 	and.w	r3, r3, #8
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT1_OP9_Pin|OUT1_OP10_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80003c6:	483d      	ldr	r0, [pc, #244]	; (80004bc <MX_GPIO_Init+0x170>)
 80003c8:	f003 f8a6 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_LED1_GPIO_Port, ON_LED1_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2102      	movs	r1, #2
 80003d0:	483b      	ldr	r0, [pc, #236]	; (80004c0 <MX_GPIO_Init+0x174>)
 80003d2:	f003 f8a1 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ON_BUZZ_Pin|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f241 0101 	movw	r1, #4097	; 0x1001
 80003dc:	4839      	ldr	r0, [pc, #228]	; (80004c4 <MX_GPIO_Init+0x178>)
 80003de:	f003 f89b 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rst_GPIO_Port, Rst_Pin, GPIO_PIN_SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e8:	4837      	ldr	r0, [pc, #220]	; (80004c8 <MX_GPIO_Init+0x17c>)
 80003ea:	f003 f895 	bl	8003518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_OP9_Pin OUT1_OP10_Pin */
  GPIO_InitStruct.Pin = OUT1_OP9_Pin|OUT1_OP10_Pin;
 80003ee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2302      	movs	r3, #2
 80003fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	4619      	mov	r1, r3
 8000406:	482d      	ldr	r0, [pc, #180]	; (80004bc <MX_GPIO_Init+0x170>)
 8000408:	f002 ff2c 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_LED1_Pin */
  GPIO_InitStruct.Pin = ON_LED1_Pin;
 800040c:	2302      	movs	r3, #2
 800040e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2302      	movs	r3, #2
 800041a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ON_LED1_GPIO_Port, &GPIO_InitStruct);
 800041c:	f107 0314 	add.w	r3, r7, #20
 8000420:	4619      	mov	r1, r3
 8000422:	4827      	ldr	r0, [pc, #156]	; (80004c0 <MX_GPIO_Init+0x174>)
 8000424:	f002 ff1e 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP4_Pin OUT1_OP3_Pin OUT1_OP2_Pin OUT1_OP1_Pin
                           OUT1_OP8_Pin OUT1_OP7_Pin OUT1_OP6_Pin OUT1_OP5_Pin */
  GPIO_InitStruct.Pin = OUT1_OP4_Pin|OUT1_OP3_Pin|OUT1_OP2_Pin|OUT1_OP1_Pin
 8000428:	23ff      	movs	r3, #255	; 0xff
 800042a:	617b      	str	r3, [r7, #20]
                          |OUT1_OP8_Pin|OUT1_OP7_Pin|OUT1_OP6_Pin|OUT1_OP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	4619      	mov	r1, r3
 800043a:	4823      	ldr	r0, [pc, #140]	; (80004c8 <MX_GPIO_Init+0x17c>)
 800043c:	f002 ff12 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_BUZZ_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = ON_BUZZ_Pin|GPIO_W5500_CS_Pin;
 8000440:	f241 0301 	movw	r3, #4097	; 0x1001
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2302      	movs	r3, #2
 8000450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4619      	mov	r1, r3
 8000458:	481a      	ldr	r0, [pc, #104]	; (80004c4 <MX_GPIO_Init+0x178>)
 800045a:	f002 ff03 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP12_Pin OUT1_OP11_Pin OUT1_OP15_Pin OUT1_OP16_Pin
                           OUT1_OP14_Pin OUT1_OP13_Pin */
  GPIO_InitStruct.Pin = OUT1_OP12_Pin|OUT1_OP11_Pin|OUT1_OP15_Pin|OUT1_OP16_Pin
 800045e:	237e      	movs	r3, #126	; 0x7e
 8000460:	617b      	str	r3, [r7, #20]
                          |OUT1_OP14_Pin|OUT1_OP13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000462:	2300      	movs	r3, #0
 8000464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	4619      	mov	r1, r3
 8000470:	4814      	ldr	r0, [pc, #80]	; (80004c4 <MX_GPIO_Init+0x178>)
 8000472:	f002 fef7 	bl	8003264 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rst_Pin */
  GPIO_InitStruct.Pin = Rst_Pin;
 8000476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047c:	2301      	movs	r3, #1
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000480:	2301      	movs	r3, #1
 8000482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000484:	2302      	movs	r3, #2
 8000486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Rst_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	4619      	mov	r1, r3
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <MX_GPIO_Init+0x17c>)
 8000490:	f002 fee8 	bl	8003264 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <MX_GPIO_Init+0x180>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
 800049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004a0:	627b      	str	r3, [r7, #36]	; 0x24
 80004a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004a8:	627b      	str	r3, [r7, #36]	; 0x24
 80004aa:	4a08      	ldr	r2, [pc, #32]	; (80004cc <MX_GPIO_Init+0x180>)
 80004ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ae:	6053      	str	r3, [r2, #4]

}
 80004b0:	bf00      	nop
 80004b2:	3728      	adds	r7, #40	; 0x28
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40011000 	.word	0x40011000
 80004c0:	40011400 	.word	0x40011400
 80004c4:	40010c00 	.word	0x40010c00
 80004c8:	40010800 	.word	0x40010800
 80004cc:	40010000 	.word	0x40010000

080004d0 <W5500_rxtx>:

/* USER CODE BEGIN 4 */
uint8_t W5500_rxtx(uint8_t data)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	uint8_t rxdata;

	HAL_SPI_TransmitReceive(&hspi2, &data, &rxdata, 1, 50);
 80004da:	f107 020f 	add.w	r2, r7, #15
 80004de:	1df9      	adds	r1, r7, #7
 80004e0:	2332      	movs	r3, #50	; 0x32
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2301      	movs	r3, #1
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <W5500_rxtx+0x28>)
 80004e8:	f003 fe36 	bl	8004158 <HAL_SPI_TransmitReceive>

	return (rxdata);
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20001994 	.word	0x20001994

080004fc <wizchip_select>:
/////////////////////////////////////////////////////////////////
// SPI Callback function for accessing WIZCHIP                 //
// WIZCHIP user should implement with your host spi peripheral //
/////////////////////////////////////////////////////////////////
void  wizchip_select(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	W5500_select();
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000506:	4802      	ldr	r0, [pc, #8]	; (8000510 <wizchip_select+0x14>)
 8000508:	f003 f806 	bl	8003518 <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40010c00 	.word	0x40010c00

08000514 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	W5500_release();
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051e:	4802      	ldr	r0, [pc, #8]	; (8000528 <wizchip_deselect+0x14>)
 8000520:	f002 fffa 	bl	8003518 <HAL_GPIO_WritePin>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40010c00 	.word	0x40010c00

0800052c <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	W5500_tx(wb);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffc9 	bl	80004d0 <W5500_rxtx>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <wizchip_read>:

uint8_t wizchip_read()
{
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0
   return W5500_rx();
 800054a:	20ff      	movs	r0, #255	; 0xff
 800054c:	f7ff ffc0 	bl	80004d0 <W5500_rxtx>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
   uint8_t tmpstr[6];

	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 800055e:	4906      	ldr	r1, [pc, #24]	; (8000578 <network_init+0x20>)
 8000560:	2000      	movs	r0, #0
 8000562:	f002 f9bb 	bl	80028dc <ctlnetwork>

	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 8000566:	463b      	mov	r3, r7
 8000568:	4619      	mov	r1, r3
 800056a:	2008      	movs	r0, #8
 800056c:	f002 f8d8 	bl	8002720 <ctlwizchip>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000000 	.word	0x20000000

0800057c <HTTP_reset>:
#define len(some) (sizeof(some)/sizeof(some[0]))

//http server

void HTTP_reset(uint8_t sockn)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
    sentsize[sockn]=0;
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HTTP_reset+0x28>)
 800058a:	2100      	movs	r1, #0
 800058c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	http_state[sockn]=HTTP_IDLE;
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <HTTP_reset+0x2c>)
 8000594:	2100      	movs	r1, #0
 8000596:	54d1      	strb	r1, [r2, r3]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20002aa8 	.word	0x20002aa8
 80005a8:	20001a9c 	.word	0x20001a9c

080005ac <tcp_http_mt>:

int32_t tcp_http_mt(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	4613      	mov	r3, r2
 80005ba:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint32_t size = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
   uint8_t flagHtmlGen = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	76fb      	strb	r3, [r7, #27]
   char *url,*p;
   uint16_t blocklen=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	833b      	strh	r3, [r7, #24]

   switch(getSn_SR(sn))
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	3301      	adds	r3, #1
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fdd1 	bl	800217c <WIZCHIP_READ>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b1c      	cmp	r3, #28
 80005de:	f201 801b 	bhi.w	8001618 <tcp_http_mt+0x106c>
 80005e2:	a201      	add	r2, pc, #4	; (adr r2, 80005e8 <tcp_http_mt+0x3c>)
 80005e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e8:	080015f5 	.word	0x080015f5
 80005ec:	08001619 	.word	0x08001619
 80005f0:	08001619 	.word	0x08001619
 80005f4:	08001619 	.word	0x08001619
 80005f8:	08001619 	.word	0x08001619
 80005fc:	08001619 	.word	0x08001619
 8000600:	08001619 	.word	0x08001619
 8000604:	08001619 	.word	0x08001619
 8000608:	08001619 	.word	0x08001619
 800060c:	08001619 	.word	0x08001619
 8000610:	08001619 	.word	0x08001619
 8000614:	08001619 	.word	0x08001619
 8000618:	08001619 	.word	0x08001619
 800061c:	08001619 	.word	0x08001619
 8000620:	08001619 	.word	0x08001619
 8000624:	08001619 	.word	0x08001619
 8000628:	08001619 	.word	0x08001619
 800062c:	08001619 	.word	0x08001619
 8000630:	08001619 	.word	0x08001619
 8000634:	080015d7 	.word	0x080015d7
 8000638:	08001619 	.word	0x08001619
 800063c:	08001619 	.word	0x08001619
 8000640:	08001619 	.word	0x08001619
 8000644:	0800065d 	.word	0x0800065d
 8000648:	08001619 	.word	0x08001619
 800064c:	08001619 	.word	0x08001619
 8000650:	08001619 	.word	0x08001619
 8000654:	08001619 	.word	0x08001619
 8000658:	080015b9 	.word	0x080015b9
   {
      case SOCK_ESTABLISHED :

         if(getSn_IR(sn) & Sn_IR_CON)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	3301      	adds	r3, #1
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fd87 	bl	800217c <WIZCHIP_READ>
 800066e:	4603      	mov	r3, r0
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d009      	beq.n	800068c <tcp_http_mt+0xe0>
         {
            setSn_IR(sn,Sn_IR_CON);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3301      	adds	r3, #1
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000684:	2101      	movs	r1, #1
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fda8 	bl	80021dc <WIZCHIP_WRITE>
         }

         if((size = getSn_RX_RSR(sn)) > 0)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4618      	mov	r0, r3
 8000690:	f001 feb1 	bl	80023f6 <getSn_RX_RSR>
 8000694:	4603      	mov	r3, r0
 8000696:	61fb      	str	r3, [r7, #28]
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	2b00      	cmp	r3, #0
 800069c:	f000 87c1 	beq.w	8001622 <tcp_http_mt+0x1076>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006a6:	d902      	bls.n	80006ae <tcp_http_mt+0x102>
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61fb      	str	r3, [r7, #28]
            ret = recv(sn,buf,size);
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fcaa 	bl	8002010 <recv>
 80006bc:	6178      	str	r0, [r7, #20]

            HTTP_reset(sn);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff5b 	bl	800057c <HTTP_reset>

            if(ret <= 0)
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	dc02      	bgt.n	80006d2 <tcp_http_mt+0x126>
            return ret;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	f000 bfb0 	b.w	8001632 <tcp_http_mt+0x1086>

            url =(char*) buf + 4;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	3304      	adds	r3, #4
 80006d6:	613b      	str	r3, [r7, #16]

            if((http_state[sn]==HTTP_IDLE)&&(memcmp(buf, "GET ", 4)==0)&&((p = strchr(url, ' '))))// extract URL from request header
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	4aa1      	ldr	r2, [pc, #644]	; (8000960 <tcp_http_mt+0x3b4>)
 80006dc:	5cd3      	ldrb	r3, [r2, r3]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f040 879f 	bne.w	8001622 <tcp_http_mt+0x1076>
 80006e4:	2204      	movs	r2, #4
 80006e6:	499f      	ldr	r1, [pc, #636]	; (8000964 <tcp_http_mt+0x3b8>)
 80006e8:	6838      	ldr	r0, [r7, #0]
 80006ea:	f006 fe23 	bl	8007334 <memcmp>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f040 8796 	bne.w	8001622 <tcp_http_mt+0x1076>
 80006f6:	2120      	movs	r1, #32
 80006f8:	6938      	ldr	r0, [r7, #16]
 80006fa:	f006 fe3d 	bl	8007378 <strchr>
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	f000 878d 	beq.w	8001622 <tcp_http_mt+0x1076>
            {
              *(p++) = 0;//making zeroed url string
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	60fa      	str	r2, [r7, #12]
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]

				if ((url != NULL)&&(strncmp("/favicon.ico",url,12) != 0))
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	2b00      	cmp	r3, #0
 8000716:	f000 8745 	beq.w	80015a4 <tcp_http_mt+0xff8>
 800071a:	220c      	movs	r2, #12
 800071c:	6939      	ldr	r1, [r7, #16]
 800071e:	4892      	ldr	r0, [pc, #584]	; (8000968 <tcp_http_mt+0x3bc>)
 8000720:	f006 fe37 	bl	8007392 <strncmp>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	f000 873c 	beq.w	80015a4 <tcp_http_mt+0xff8>
				{
					flagHtmlGen = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	76fb      	strb	r3, [r7, #27]

					//Gera��o da HTML
					if(flagHtmlGen == 1)
 8000730:	7efb      	ldrb	r3, [r7, #27]
 8000732:	2b01      	cmp	r3, #1
 8000734:	f040 873f 	bne.w	80015b6 <tcp_http_mt+0x100a>
					{
						if(strncmp("/rede", url, 6) == 0)
 8000738:	2206      	movs	r2, #6
 800073a:	6939      	ldr	r1, [r7, #16]
 800073c:	488b      	ldr	r0, [pc, #556]	; (800096c <tcp_http_mt+0x3c0>)
 800073e:	f006 fe28 	bl	8007392 <strncmp>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	f040 8131 	bne.w	80009ac <tcp_http_mt+0x400>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	4a88      	ldr	r2, [pc, #544]	; (8000970 <tcp_http_mt+0x3c4>)
 800074e:	4614      	mov	r4, r2
 8000750:	469c      	mov	ip, r3
 8000752:	f104 0e20 	add.w	lr, r4, #32
 8000756:	4665      	mov	r5, ip
 8000758:	4626      	mov	r6, r4
 800075a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800075c:	6028      	str	r0, [r5, #0]
 800075e:	6069      	str	r1, [r5, #4]
 8000760:	60aa      	str	r2, [r5, #8]
 8000762:	60eb      	str	r3, [r5, #12]
 8000764:	3410      	adds	r4, #16
 8000766:	f10c 0c10 	add.w	ip, ip, #16
 800076a:	4574      	cmp	r4, lr
 800076c:	d1f3      	bne.n	8000756 <tcp_http_mt+0x1aa>
 800076e:	4665      	mov	r5, ip
 8000770:	4623      	mov	r3, r4
 8000772:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000774:	6028      	str	r0, [r5, #0]
 8000776:	6069      	str	r1, [r5, #4]
 8000778:	60aa      	str	r2, [r5, #8]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 800077e:	6838      	ldr	r0, [r7, #0]
 8000780:	f7ff fce6 	bl	8000150 <strlen>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a79      	ldr	r2, [pc, #484]	; (8000974 <tcp_http_mt+0x3c8>)
 800078e:	461c      	mov	r4, r3
 8000790:	4613      	mov	r3, r2
 8000792:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000794:	6020      	str	r0, [r4, #0]
 8000796:	6061      	str	r1, [r4, #4]
 8000798:	60a2      	str	r2, [r4, #8]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Mestre Config</title>");
 800079e:	6838      	ldr	r0, [r7, #0]
 80007a0:	f7ff fcd6 	bl	8000150 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a72      	ldr	r2, [pc, #456]	; (8000978 <tcp_http_mt+0x3cc>)
 80007ae:	461d      	mov	r5, r3
 80007b0:	4614      	mov	r4, r2
 80007b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b4:	6028      	str	r0, [r5, #0]
 80007b6:	6069      	str	r1, [r5, #4]
 80007b8:	60aa      	str	r2, [r5, #8]
 80007ba:	60eb      	str	r3, [r5, #12]
 80007bc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80007be:	6128      	str	r0, [r5, #16]
 80007c0:	6169      	str	r1, [r5, #20]
 80007c2:	61aa      	str	r2, [r5, #24]
 80007c4:	7823      	ldrb	r3, [r4, #0]
 80007c6:	772b      	strb	r3, [r5, #28]
							strcat((char*)buf, "</head>");
 80007c8:	6838      	ldr	r0, [r7, #0]
 80007ca:	f7ff fcc1 	bl	8000150 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	4413      	add	r3, r2
 80007d6:	4969      	ldr	r1, [pc, #420]	; (800097c <tcp_http_mt+0x3d0>)
 80007d8:	461a      	mov	r2, r3
 80007da:	460b      	mov	r3, r1
 80007dc:	cb03      	ldmia	r3!, {r0, r1}
 80007de:	6010      	str	r0, [r2, #0]
 80007e0:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 80007e2:	6838      	ldr	r0, [r7, #0]
 80007e4:	f7ff fcb4 	bl	8000150 <strlen>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a63      	ldr	r2, [pc, #396]	; (8000980 <tcp_http_mt+0x3d4>)
 80007f2:	6810      	ldr	r0, [r2, #0]
 80007f4:	6018      	str	r0, [r3, #0]
 80007f6:	8891      	ldrh	r1, [r2, #4]
 80007f8:	7992      	ldrb	r2, [r2, #6]
 80007fa:	8099      	strh	r1, [r3, #4]
 80007fc:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<b><center>Configuracao da Placa de rede</b></center><br>");
 80007fe:	6838      	ldr	r0, [r7, #0]
 8000800:	f7ff fca6 	bl	8000150 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a5d      	ldr	r2, [pc, #372]	; (8000984 <tcp_http_mt+0x3d8>)
 800080e:	4614      	mov	r4, r2
 8000810:	469c      	mov	ip, r3
 8000812:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000816:	4665      	mov	r5, ip
 8000818:	4626      	mov	r6, r4
 800081a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800081c:	6028      	str	r0, [r5, #0]
 800081e:	6069      	str	r1, [r5, #4]
 8000820:	60aa      	str	r2, [r5, #8]
 8000822:	60eb      	str	r3, [r5, #12]
 8000824:	3410      	adds	r4, #16
 8000826:	f10c 0c10 	add.w	ip, ip, #16
 800082a:	4574      	cmp	r4, lr
 800082c:	d1f3      	bne.n	8000816 <tcp_http_mt+0x26a>
 800082e:	4662      	mov	r2, ip
 8000830:	4623      	mov	r3, r4
 8000832:	cb03      	ldmia	r3!, {r0, r1}
 8000834:	6010      	str	r0, [r2, #0]
 8000836:	6051      	str	r1, [r2, #4]
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "<center><form action=''>");
 800083c:	6838      	ldr	r0, [r7, #0]
 800083e:	f7ff fc87 	bl	8000150 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	4413      	add	r3, r2
 800084a:	4a4f      	ldr	r2, [pc, #316]	; (8000988 <tcp_http_mt+0x3dc>)
 800084c:	461d      	mov	r5, r3
 800084e:	4614      	mov	r4, r2
 8000850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000852:	6028      	str	r0, [r5, #0]
 8000854:	6069      	str	r1, [r5, #4]
 8000856:	60aa      	str	r2, [r5, #8]
 8000858:	60eb      	str	r3, [r5, #12]
 800085a:	cc03      	ldmia	r4!, {r0, r1}
 800085c:	6128      	str	r0, [r5, #16]
 800085e:	6169      	str	r1, [r5, #20]
 8000860:	7823      	ldrb	r3, [r4, #0]
 8000862:	762b      	strb	r3, [r5, #24]
							strcat((char*)buf, "IP: <input type='text' name='ip'>		Mascara: <input type='text' name='mascara'><br><br>");
 8000864:	6838      	ldr	r0, [r7, #0]
 8000866:	f7ff fc73 	bl	8000150 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	4413      	add	r3, r2
 8000872:	4a46      	ldr	r2, [pc, #280]	; (800098c <tcp_http_mt+0x3e0>)
 8000874:	4618      	mov	r0, r3
 8000876:	4611      	mov	r1, r2
 8000878:	2357      	movs	r3, #87	; 0x57
 800087a:	461a      	mov	r2, r3
 800087c:	f006 fd69 	bl	8007352 <memcpy>
							strcat((char*)buf, "Porta: <input type='text' name='porta'>		Gateway: <input type='text' name='gateway'><br><br>");
 8000880:	6838      	ldr	r0, [r7, #0]
 8000882:	f7ff fc65 	bl	8000150 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	4413      	add	r3, r2
 800088e:	4a40      	ldr	r2, [pc, #256]	; (8000990 <tcp_http_mt+0x3e4>)
 8000890:	4618      	mov	r0, r3
 8000892:	4611      	mov	r1, r2
 8000894:	235d      	movs	r3, #93	; 0x5d
 8000896:	461a      	mov	r2, r3
 8000898:	f006 fd5b 	bl	8007352 <memcpy>
							strcat((char*)buf, "DNS 1: <input type='text' name='dns1'>		DNS 2: <input type='text' name='dns2'><br><br>");
 800089c:	6838      	ldr	r0, [r7, #0]
 800089e:	f7ff fc57 	bl	8000150 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a3a      	ldr	r2, [pc, #232]	; (8000994 <tcp_http_mt+0x3e8>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	4611      	mov	r1, r2
 80008b0:	2357      	movs	r3, #87	; 0x57
 80008b2:	461a      	mov	r2, r3
 80008b4:	f006 fd4d 	bl	8007352 <memcpy>
							strcat((char*)buf, "DHCP: <button>On</button>  <button>Off</button>");
 80008b8:	6838      	ldr	r0, [r7, #0]
 80008ba:	f7ff fc49 	bl	8000150 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <tcp_http_mt+0x3ec>)
 80008c8:	4614      	mov	r4, r2
 80008ca:	469c      	mov	ip, r3
 80008cc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80008d0:	4665      	mov	r5, ip
 80008d2:	4626      	mov	r6, r4
 80008d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008d6:	6028      	str	r0, [r5, #0]
 80008d8:	6069      	str	r1, [r5, #4]
 80008da:	60aa      	str	r2, [r5, #8]
 80008dc:	60eb      	str	r3, [r5, #12]
 80008de:	3410      	adds	r4, #16
 80008e0:	f10c 0c10 	add.w	ip, ip, #16
 80008e4:	4574      	cmp	r4, lr
 80008e6:	d1f3      	bne.n	80008d0 <tcp_http_mt+0x324>
							strcat((char*)buf, "</center></form>");
 80008e8:	6838      	ldr	r0, [r7, #0]
 80008ea:	f7ff fc31 	bl	8000150 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	4413      	add	r3, r2
 80008f6:	4a29      	ldr	r2, [pc, #164]	; (800099c <tcp_http_mt+0x3f0>)
 80008f8:	461d      	mov	r5, r3
 80008fa:	4614      	mov	r4, r2
 80008fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fe:	6028      	str	r0, [r5, #0]
 8000900:	6069      	str	r1, [r5, #4]
 8000902:	60aa      	str	r2, [r5, #8]
 8000904:	60eb      	str	r3, [r5, #12]
 8000906:	7823      	ldrb	r3, [r4, #0]
 8000908:	742b      	strb	r3, [r5, #16]
							strcat((char*)buf, "<center><button>Salvar</button><br><br><a href='http://192.168.0.231'>Voltar</a><br></center>");
 800090a:	6838      	ldr	r0, [r7, #0]
 800090c:	f7ff fc20 	bl	8000150 <strlen>
 8000910:	4603      	mov	r3, r0
 8000912:	461a      	mov	r2, r3
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <tcp_http_mt+0x3f4>)
 800091a:	4618      	mov	r0, r3
 800091c:	4611      	mov	r1, r2
 800091e:	235e      	movs	r3, #94	; 0x5e
 8000920:	461a      	mov	r2, r3
 8000922:	f006 fd16 	bl	8007352 <memcpy>

							strcat((char*)buf, "</body>");
 8000926:	6838      	ldr	r0, [r7, #0]
 8000928:	f7ff fc12 	bl	8000150 <strlen>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	4413      	add	r3, r2
 8000934:	491b      	ldr	r1, [pc, #108]	; (80009a4 <tcp_http_mt+0x3f8>)
 8000936:	461a      	mov	r2, r3
 8000938:	460b      	mov	r3, r1
 800093a:	cb03      	ldmia	r3!, {r0, r1}
 800093c:	6010      	str	r0, [r2, #0]
 800093e:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8000940:	6838      	ldr	r0, [r7, #0]
 8000942:	f7ff fc05 	bl	8000150 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	4413      	add	r3, r2
 800094e:	4916      	ldr	r1, [pc, #88]	; (80009a8 <tcp_http_mt+0x3fc>)
 8000950:	461a      	mov	r2, r3
 8000952:	460b      	mov	r3, r1
 8000954:	cb03      	ldmia	r3!, {r0, r1}
 8000956:	6010      	str	r0, [r2, #0]
 8000958:	6051      	str	r1, [r2, #4]
 800095a:	f000 be05 	b.w	8001568 <tcp_http_mt+0xfbc>
 800095e:	bf00      	nop
 8000960:	20001a9c 	.word	0x20001a9c
 8000964:	080073f0 	.word	0x080073f0
 8000968:	080073f8 	.word	0x080073f8
 800096c:	08007408 	.word	0x08007408
 8000970:	08007410 	.word	0x08007410
 8000974:	08007440 	.word	0x08007440
 8000978:	08007450 	.word	0x08007450
 800097c:	08007470 	.word	0x08007470
 8000980:	08007478 	.word	0x08007478
 8000984:	08007480 	.word	0x08007480
 8000988:	080074bc 	.word	0x080074bc
 800098c:	080074d8 	.word	0x080074d8
 8000990:	08007530 	.word	0x08007530
 8000994:	08007590 	.word	0x08007590
 8000998:	080075e8 	.word	0x080075e8
 800099c:	08007618 	.word	0x08007618
 80009a0:	0800762c 	.word	0x0800762c
 80009a4:	0800768c 	.word	0x0800768c
 80009a8:	08007694 	.word	0x08007694
						}
						else if(strncmp("/interfaces", url, 6) == 0)
 80009ac:	2206      	movs	r2, #6
 80009ae:	6939      	ldr	r1, [r7, #16]
 80009b0:	48ce      	ldr	r0, [pc, #824]	; (8000cec <tcp_http_mt+0x740>)
 80009b2:	f006 fcee 	bl	8007392 <strncmp>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	f040 84e9 	bne.w	8001390 <tcp_http_mt+0xde4>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	4acb      	ldr	r2, [pc, #812]	; (8000cf0 <tcp_http_mt+0x744>)
 80009c2:	4614      	mov	r4, r2
 80009c4:	469c      	mov	ip, r3
 80009c6:	f104 0e20 	add.w	lr, r4, #32
 80009ca:	4665      	mov	r5, ip
 80009cc:	4626      	mov	r6, r4
 80009ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80009d0:	6028      	str	r0, [r5, #0]
 80009d2:	6069      	str	r1, [r5, #4]
 80009d4:	60aa      	str	r2, [r5, #8]
 80009d6:	60eb      	str	r3, [r5, #12]
 80009d8:	3410      	adds	r4, #16
 80009da:	f10c 0c10 	add.w	ip, ip, #16
 80009de:	4574      	cmp	r4, lr
 80009e0:	d1f3      	bne.n	80009ca <tcp_http_mt+0x41e>
 80009e2:	4665      	mov	r5, ip
 80009e4:	4623      	mov	r3, r4
 80009e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80009e8:	6028      	str	r0, [r5, #0]
 80009ea:	6069      	str	r1, [r5, #4]
 80009ec:	60aa      	str	r2, [r5, #8]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head><title>Escrava Config</title>");
 80009f2:	6838      	ldr	r0, [r7, #0]
 80009f4:	f7ff fbac 	bl	8000150 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4abc      	ldr	r2, [pc, #752]	; (8000cf4 <tcp_http_mt+0x748>)
 8000a02:	4614      	mov	r4, r2
 8000a04:	469c      	mov	ip, r3
 8000a06:	f104 0e20 	add.w	lr, r4, #32
 8000a0a:	4665      	mov	r5, ip
 8000a0c:	4626      	mov	r6, r4
 8000a0e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a10:	6028      	str	r0, [r5, #0]
 8000a12:	6069      	str	r1, [r5, #4]
 8000a14:	60aa      	str	r2, [r5, #8]
 8000a16:	60eb      	str	r3, [r5, #12]
 8000a18:	3410      	adds	r4, #16
 8000a1a:	f10c 0c10 	add.w	ip, ip, #16
 8000a1e:	4574      	cmp	r4, lr
 8000a20:	d1f3      	bne.n	8000a0a <tcp_http_mt+0x45e>
 8000a22:	4662      	mov	r2, ip
 8000a24:	4623      	mov	r3, r4
 8000a26:	cb03      	ldmia	r3!, {r0, r1}
 8000a28:	6010      	str	r0, [r2, #0]
 8000a2a:	6051      	str	r1, [r2, #4]
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "<center><table border='1'><tr>");
 8000a30:	6838      	ldr	r0, [r7, #0]
 8000a32:	f7ff fb8d 	bl	8000150 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4aae      	ldr	r2, [pc, #696]	; (8000cf8 <tcp_http_mt+0x74c>)
 8000a40:	461d      	mov	r5, r3
 8000a42:	4614      	mov	r4, r2
 8000a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a46:	6028      	str	r0, [r5, #0]
 8000a48:	6069      	str	r1, [r5, #4]
 8000a4a:	60aa      	str	r2, [r5, #8]
 8000a4c:	60eb      	str	r3, [r5, #12]
 8000a4e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000a50:	6128      	str	r0, [r5, #16]
 8000a52:	6169      	str	r1, [r5, #20]
 8000a54:	61aa      	str	r2, [r5, #24]
 8000a56:	8823      	ldrh	r3, [r4, #0]
 8000a58:	78a2      	ldrb	r2, [r4, #2]
 8000a5a:	83ab      	strh	r3, [r5, #28]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "<td><b>Entrada / IP da placa destino</b></td>");
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	f7ff fb75 	bl	8000150 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4aa3      	ldr	r2, [pc, #652]	; (8000cfc <tcp_http_mt+0x750>)
 8000a70:	4614      	mov	r4, r2
 8000a72:	469c      	mov	ip, r3
 8000a74:	f104 0e20 	add.w	lr, r4, #32
 8000a78:	4665      	mov	r5, ip
 8000a7a:	4626      	mov	r6, r4
 8000a7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a7e:	6028      	str	r0, [r5, #0]
 8000a80:	6069      	str	r1, [r5, #4]
 8000a82:	60aa      	str	r2, [r5, #8]
 8000a84:	60eb      	str	r3, [r5, #12]
 8000a86:	3410      	adds	r4, #16
 8000a88:	f10c 0c10 	add.w	ip, ip, #16
 8000a8c:	4574      	cmp	r4, lr
 8000a8e:	d1f3      	bne.n	8000a78 <tcp_http_mt+0x4cc>
 8000a90:	4665      	mov	r5, ip
 8000a92:	4623      	mov	r3, r4
 8000a94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a96:	6028      	str	r0, [r5, #0]
 8000a98:	6069      	str	r1, [r5, #4]
 8000a9a:	60aa      	str	r2, [r5, #8]
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><b>Rele da placa destino</b></td></tr>");
 8000aa0:	6838      	ldr	r0, [r7, #0]
 8000aa2:	f7ff fb55 	bl	8000150 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a94      	ldr	r2, [pc, #592]	; (8000d00 <tcp_http_mt+0x754>)
 8000ab0:	4614      	mov	r4, r2
 8000ab2:	469c      	mov	ip, r3
 8000ab4:	f104 0e20 	add.w	lr, r4, #32
 8000ab8:	4665      	mov	r5, ip
 8000aba:	4626      	mov	r6, r4
 8000abc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000abe:	6028      	str	r0, [r5, #0]
 8000ac0:	6069      	str	r1, [r5, #4]
 8000ac2:	60aa      	str	r2, [r5, #8]
 8000ac4:	60eb      	str	r3, [r5, #12]
 8000ac6:	3410      	adds	r4, #16
 8000ac8:	f10c 0c10 	add.w	ip, ip, #16
 8000acc:	4574      	cmp	r4, lr
 8000ace:	d1f3      	bne.n	8000ab8 <tcp_http_mt+0x50c>
 8000ad0:	4662      	mov	r2, ip
 8000ad2:	4623      	mov	r3, r4
 8000ad4:	cb03      	ldmia	r3!, {r0, r1}
 8000ad6:	6010      	str	r0, [r2, #0]
 8000ad8:	6051      	str	r1, [r2, #4]
 8000ada:	8819      	ldrh	r1, [r3, #0]
 8000adc:	789b      	ldrb	r3, [r3, #2]
 8000ade:	8111      	strh	r1, [r2, #8]
 8000ae0:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>1:  <input type='text' name='ipDestino1'></td>");
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f7ff fb34 	bl	8000150 <strlen>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	461a      	mov	r2, r3
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a84      	ldr	r2, [pc, #528]	; (8000d04 <tcp_http_mt+0x758>)
 8000af2:	4614      	mov	r4, r2
 8000af4:	469c      	mov	ip, r3
 8000af6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000afa:	4665      	mov	r5, ip
 8000afc:	4626      	mov	r6, r4
 8000afe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b00:	6028      	str	r0, [r5, #0]
 8000b02:	6069      	str	r1, [r5, #4]
 8000b04:	60aa      	str	r2, [r5, #8]
 8000b06:	60eb      	str	r3, [r5, #12]
 8000b08:	3410      	adds	r4, #16
 8000b0a:	f10c 0c10 	add.w	ip, ip, #16
 8000b0e:	4574      	cmp	r4, lr
 8000b10:	d1f3      	bne.n	8000afa <tcp_http_mt+0x54e>
 8000b12:	4663      	mov	r3, ip
 8000b14:	4622      	mov	r2, r4
 8000b16:	6810      	ldr	r0, [r2, #0]
 8000b18:	6018      	str	r0, [r3, #0]
 8000b1a:	8891      	ldrh	r1, [r2, #4]
 8000b1c:	7992      	ldrb	r2, [r2, #6]
 8000b1e:	8099      	strh	r1, [r3, #4]
 8000b20:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino1'></td></tr>");
 8000b22:	6838      	ldr	r0, [r7, #0]
 8000b24:	f7ff fb14 	bl	8000150 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a75      	ldr	r2, [pc, #468]	; (8000d08 <tcp_http_mt+0x75c>)
 8000b32:	4614      	mov	r4, r2
 8000b34:	469c      	mov	ip, r3
 8000b36:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000b3a:	4665      	mov	r5, ip
 8000b3c:	4626      	mov	r6, r4
 8000b3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b40:	6028      	str	r0, [r5, #0]
 8000b42:	6069      	str	r1, [r5, #4]
 8000b44:	60aa      	str	r2, [r5, #8]
 8000b46:	60eb      	str	r3, [r5, #12]
 8000b48:	3410      	adds	r4, #16
 8000b4a:	f10c 0c10 	add.w	ip, ip, #16
 8000b4e:	4574      	cmp	r4, lr
 8000b50:	d1f3      	bne.n	8000b3a <tcp_http_mt+0x58e>
 8000b52:	4663      	mov	r3, ip
 8000b54:	4622      	mov	r2, r4
 8000b56:	6810      	ldr	r0, [r2, #0]
 8000b58:	6018      	str	r0, [r3, #0]
 8000b5a:	8892      	ldrh	r2, [r2, #4]
 8000b5c:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>2:  <input type='text' name='ipDestino2'></td>");
 8000b5e:	6838      	ldr	r0, [r7, #0]
 8000b60:	f7ff faf6 	bl	8000150 <strlen>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a67      	ldr	r2, [pc, #412]	; (8000d0c <tcp_http_mt+0x760>)
 8000b6e:	4614      	mov	r4, r2
 8000b70:	469c      	mov	ip, r3
 8000b72:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000b76:	4665      	mov	r5, ip
 8000b78:	4626      	mov	r6, r4
 8000b7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b7c:	6028      	str	r0, [r5, #0]
 8000b7e:	6069      	str	r1, [r5, #4]
 8000b80:	60aa      	str	r2, [r5, #8]
 8000b82:	60eb      	str	r3, [r5, #12]
 8000b84:	3410      	adds	r4, #16
 8000b86:	f10c 0c10 	add.w	ip, ip, #16
 8000b8a:	4574      	cmp	r4, lr
 8000b8c:	d1f3      	bne.n	8000b76 <tcp_http_mt+0x5ca>
 8000b8e:	4663      	mov	r3, ip
 8000b90:	4622      	mov	r2, r4
 8000b92:	6810      	ldr	r0, [r2, #0]
 8000b94:	6018      	str	r0, [r3, #0]
 8000b96:	8891      	ldrh	r1, [r2, #4]
 8000b98:	7992      	ldrb	r2, [r2, #6]
 8000b9a:	8099      	strh	r1, [r3, #4]
 8000b9c:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino2'></td></tr>");
 8000b9e:	6838      	ldr	r0, [r7, #0]
 8000ba0:	f7ff fad6 	bl	8000150 <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a58      	ldr	r2, [pc, #352]	; (8000d10 <tcp_http_mt+0x764>)
 8000bae:	4614      	mov	r4, r2
 8000bb0:	469c      	mov	ip, r3
 8000bb2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	4626      	mov	r6, r4
 8000bba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bbc:	6028      	str	r0, [r5, #0]
 8000bbe:	6069      	str	r1, [r5, #4]
 8000bc0:	60aa      	str	r2, [r5, #8]
 8000bc2:	60eb      	str	r3, [r5, #12]
 8000bc4:	3410      	adds	r4, #16
 8000bc6:	f10c 0c10 	add.w	ip, ip, #16
 8000bca:	4574      	cmp	r4, lr
 8000bcc:	d1f3      	bne.n	8000bb6 <tcp_http_mt+0x60a>
 8000bce:	4663      	mov	r3, ip
 8000bd0:	4622      	mov	r2, r4
 8000bd2:	6810      	ldr	r0, [r2, #0]
 8000bd4:	6018      	str	r0, [r3, #0]
 8000bd6:	8892      	ldrh	r2, [r2, #4]
 8000bd8:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>3:  <input type='text' name='ipDestino3'></td>");
 8000bda:	6838      	ldr	r0, [r7, #0]
 8000bdc:	f7ff fab8 	bl	8000150 <strlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	461a      	mov	r2, r3
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a4a      	ldr	r2, [pc, #296]	; (8000d14 <tcp_http_mt+0x768>)
 8000bea:	4614      	mov	r4, r2
 8000bec:	469c      	mov	ip, r3
 8000bee:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000bf2:	4665      	mov	r5, ip
 8000bf4:	4626      	mov	r6, r4
 8000bf6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bf8:	6028      	str	r0, [r5, #0]
 8000bfa:	6069      	str	r1, [r5, #4]
 8000bfc:	60aa      	str	r2, [r5, #8]
 8000bfe:	60eb      	str	r3, [r5, #12]
 8000c00:	3410      	adds	r4, #16
 8000c02:	f10c 0c10 	add.w	ip, ip, #16
 8000c06:	4574      	cmp	r4, lr
 8000c08:	d1f3      	bne.n	8000bf2 <tcp_http_mt+0x646>
 8000c0a:	4663      	mov	r3, ip
 8000c0c:	4622      	mov	r2, r4
 8000c0e:	6810      	ldr	r0, [r2, #0]
 8000c10:	6018      	str	r0, [r3, #0]
 8000c12:	8891      	ldrh	r1, [r2, #4]
 8000c14:	7992      	ldrb	r2, [r2, #6]
 8000c16:	8099      	strh	r1, [r3, #4]
 8000c18:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino3'></td></tr>");
 8000c1a:	6838      	ldr	r0, [r7, #0]
 8000c1c:	f7ff fa98 	bl	8000150 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a3b      	ldr	r2, [pc, #236]	; (8000d18 <tcp_http_mt+0x76c>)
 8000c2a:	4614      	mov	r4, r2
 8000c2c:	469c      	mov	ip, r3
 8000c2e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c32:	4665      	mov	r5, ip
 8000c34:	4626      	mov	r6, r4
 8000c36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c38:	6028      	str	r0, [r5, #0]
 8000c3a:	6069      	str	r1, [r5, #4]
 8000c3c:	60aa      	str	r2, [r5, #8]
 8000c3e:	60eb      	str	r3, [r5, #12]
 8000c40:	3410      	adds	r4, #16
 8000c42:	f10c 0c10 	add.w	ip, ip, #16
 8000c46:	4574      	cmp	r4, lr
 8000c48:	d1f3      	bne.n	8000c32 <tcp_http_mt+0x686>
 8000c4a:	4663      	mov	r3, ip
 8000c4c:	4622      	mov	r2, r4
 8000c4e:	6810      	ldr	r0, [r2, #0]
 8000c50:	6018      	str	r0, [r3, #0]
 8000c52:	8892      	ldrh	r2, [r2, #4]
 8000c54:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>4:  <input type='text' name='ipDestino4'></td>");
 8000c56:	6838      	ldr	r0, [r7, #0]
 8000c58:	f7ff fa7a 	bl	8000150 <strlen>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <tcp_http_mt+0x770>)
 8000c66:	4614      	mov	r4, r2
 8000c68:	469c      	mov	ip, r3
 8000c6a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c6e:	4665      	mov	r5, ip
 8000c70:	4626      	mov	r6, r4
 8000c72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c74:	6028      	str	r0, [r5, #0]
 8000c76:	6069      	str	r1, [r5, #4]
 8000c78:	60aa      	str	r2, [r5, #8]
 8000c7a:	60eb      	str	r3, [r5, #12]
 8000c7c:	3410      	adds	r4, #16
 8000c7e:	f10c 0c10 	add.w	ip, ip, #16
 8000c82:	4574      	cmp	r4, lr
 8000c84:	d1f3      	bne.n	8000c6e <tcp_http_mt+0x6c2>
 8000c86:	4663      	mov	r3, ip
 8000c88:	4622      	mov	r2, r4
 8000c8a:	6810      	ldr	r0, [r2, #0]
 8000c8c:	6018      	str	r0, [r3, #0]
 8000c8e:	8891      	ldrh	r1, [r2, #4]
 8000c90:	7992      	ldrb	r2, [r2, #6]
 8000c92:	8099      	strh	r1, [r3, #4]
 8000c94:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino4'></td></tr>");
 8000c96:	6838      	ldr	r0, [r7, #0]
 8000c98:	f7ff fa5a 	bl	8000150 <strlen>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <tcp_http_mt+0x774>)
 8000ca6:	4614      	mov	r4, r2
 8000ca8:	469c      	mov	ip, r3
 8000caa:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000cae:	4665      	mov	r5, ip
 8000cb0:	4626      	mov	r6, r4
 8000cb2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cb4:	6028      	str	r0, [r5, #0]
 8000cb6:	6069      	str	r1, [r5, #4]
 8000cb8:	60aa      	str	r2, [r5, #8]
 8000cba:	60eb      	str	r3, [r5, #12]
 8000cbc:	3410      	adds	r4, #16
 8000cbe:	f10c 0c10 	add.w	ip, ip, #16
 8000cc2:	4574      	cmp	r4, lr
 8000cc4:	d1f3      	bne.n	8000cae <tcp_http_mt+0x702>
 8000cc6:	4663      	mov	r3, ip
 8000cc8:	4622      	mov	r2, r4
 8000cca:	6810      	ldr	r0, [r2, #0]
 8000ccc:	6018      	str	r0, [r3, #0]
 8000cce:	8892      	ldrh	r2, [r2, #4]
 8000cd0:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>5:  <input type='text' name='ipDestino5'></td>");
 8000cd2:	6838      	ldr	r0, [r7, #0]
 8000cd4:	f7ff fa3c 	bl	8000150 <strlen>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <tcp_http_mt+0x778>)
 8000ce2:	4614      	mov	r4, r2
 8000ce4:	469c      	mov	ip, r3
 8000ce6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000cea:	e01d      	b.n	8000d28 <tcp_http_mt+0x77c>
 8000cec:	0800769c 	.word	0x0800769c
 8000cf0:	08007410 	.word	0x08007410
 8000cf4:	080076a8 	.word	0x080076a8
 8000cf8:	080076d4 	.word	0x080076d4
 8000cfc:	080076f4 	.word	0x080076f4
 8000d00:	08007724 	.word	0x08007724
 8000d04:	08007750 	.word	0x08007750
 8000d08:	08007788 	.word	0x08007788
 8000d0c:	080077c0 	.word	0x080077c0
 8000d10:	080077f8 	.word	0x080077f8
 8000d14:	08007830 	.word	0x08007830
 8000d18:	08007868 	.word	0x08007868
 8000d1c:	080078a0 	.word	0x080078a0
 8000d20:	080078d8 	.word	0x080078d8
 8000d24:	08007910 	.word	0x08007910
 8000d28:	4665      	mov	r5, ip
 8000d2a:	4626      	mov	r6, r4
 8000d2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d2e:	6028      	str	r0, [r5, #0]
 8000d30:	6069      	str	r1, [r5, #4]
 8000d32:	60aa      	str	r2, [r5, #8]
 8000d34:	60eb      	str	r3, [r5, #12]
 8000d36:	3410      	adds	r4, #16
 8000d38:	f10c 0c10 	add.w	ip, ip, #16
 8000d3c:	4574      	cmp	r4, lr
 8000d3e:	d1f3      	bne.n	8000d28 <tcp_http_mt+0x77c>
 8000d40:	4663      	mov	r3, ip
 8000d42:	4622      	mov	r2, r4
 8000d44:	6810      	ldr	r0, [r2, #0]
 8000d46:	6018      	str	r0, [r3, #0]
 8000d48:	8891      	ldrh	r1, [r2, #4]
 8000d4a:	7992      	ldrb	r2, [r2, #6]
 8000d4c:	8099      	strh	r1, [r3, #4]
 8000d4e:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino5'></td></tr>");
 8000d50:	6838      	ldr	r0, [r7, #0]
 8000d52:	f7ff f9fd 	bl	8000150 <strlen>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4acb      	ldr	r2, [pc, #812]	; (800108c <tcp_http_mt+0xae0>)
 8000d60:	4614      	mov	r4, r2
 8000d62:	469c      	mov	ip, r3
 8000d64:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4626      	mov	r6, r4
 8000d6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d6e:	6028      	str	r0, [r5, #0]
 8000d70:	6069      	str	r1, [r5, #4]
 8000d72:	60aa      	str	r2, [r5, #8]
 8000d74:	60eb      	str	r3, [r5, #12]
 8000d76:	3410      	adds	r4, #16
 8000d78:	f10c 0c10 	add.w	ip, ip, #16
 8000d7c:	4574      	cmp	r4, lr
 8000d7e:	d1f3      	bne.n	8000d68 <tcp_http_mt+0x7bc>
 8000d80:	4663      	mov	r3, ip
 8000d82:	4622      	mov	r2, r4
 8000d84:	6810      	ldr	r0, [r2, #0]
 8000d86:	6018      	str	r0, [r3, #0]
 8000d88:	8892      	ldrh	r2, [r2, #4]
 8000d8a:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>6:  <input type='text' name='ipDestino6'></td>");
 8000d8c:	6838      	ldr	r0, [r7, #0]
 8000d8e:	f7ff f9df 	bl	8000150 <strlen>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4abd      	ldr	r2, [pc, #756]	; (8001090 <tcp_http_mt+0xae4>)
 8000d9c:	4614      	mov	r4, r2
 8000d9e:	469c      	mov	ip, r3
 8000da0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000da4:	4665      	mov	r5, ip
 8000da6:	4626      	mov	r6, r4
 8000da8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000daa:	6028      	str	r0, [r5, #0]
 8000dac:	6069      	str	r1, [r5, #4]
 8000dae:	60aa      	str	r2, [r5, #8]
 8000db0:	60eb      	str	r3, [r5, #12]
 8000db2:	3410      	adds	r4, #16
 8000db4:	f10c 0c10 	add.w	ip, ip, #16
 8000db8:	4574      	cmp	r4, lr
 8000dba:	d1f3      	bne.n	8000da4 <tcp_http_mt+0x7f8>
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	4622      	mov	r2, r4
 8000dc0:	6810      	ldr	r0, [r2, #0]
 8000dc2:	6018      	str	r0, [r3, #0]
 8000dc4:	8891      	ldrh	r1, [r2, #4]
 8000dc6:	7992      	ldrb	r2, [r2, #6]
 8000dc8:	8099      	strh	r1, [r3, #4]
 8000dca:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino6'></td></tr>");
 8000dcc:	6838      	ldr	r0, [r7, #0]
 8000dce:	f7ff f9bf 	bl	8000150 <strlen>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4aae      	ldr	r2, [pc, #696]	; (8001094 <tcp_http_mt+0xae8>)
 8000ddc:	4614      	mov	r4, r2
 8000dde:	469c      	mov	ip, r3
 8000de0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000de4:	4665      	mov	r5, ip
 8000de6:	4626      	mov	r6, r4
 8000de8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000dea:	6028      	str	r0, [r5, #0]
 8000dec:	6069      	str	r1, [r5, #4]
 8000dee:	60aa      	str	r2, [r5, #8]
 8000df0:	60eb      	str	r3, [r5, #12]
 8000df2:	3410      	adds	r4, #16
 8000df4:	f10c 0c10 	add.w	ip, ip, #16
 8000df8:	4574      	cmp	r4, lr
 8000dfa:	d1f3      	bne.n	8000de4 <tcp_http_mt+0x838>
 8000dfc:	4663      	mov	r3, ip
 8000dfe:	4622      	mov	r2, r4
 8000e00:	6810      	ldr	r0, [r2, #0]
 8000e02:	6018      	str	r0, [r3, #0]
 8000e04:	8892      	ldrh	r2, [r2, #4]
 8000e06:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>7:  <input type='text' name='ipDestino7'></td>");
 8000e08:	6838      	ldr	r0, [r7, #0]
 8000e0a:	f7ff f9a1 	bl	8000150 <strlen>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	4aa0      	ldr	r2, [pc, #640]	; (8001098 <tcp_http_mt+0xaec>)
 8000e18:	4614      	mov	r4, r2
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e20:	4665      	mov	r5, ip
 8000e22:	4626      	mov	r6, r4
 8000e24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e26:	6028      	str	r0, [r5, #0]
 8000e28:	6069      	str	r1, [r5, #4]
 8000e2a:	60aa      	str	r2, [r5, #8]
 8000e2c:	60eb      	str	r3, [r5, #12]
 8000e2e:	3410      	adds	r4, #16
 8000e30:	f10c 0c10 	add.w	ip, ip, #16
 8000e34:	4574      	cmp	r4, lr
 8000e36:	d1f3      	bne.n	8000e20 <tcp_http_mt+0x874>
 8000e38:	4663      	mov	r3, ip
 8000e3a:	4622      	mov	r2, r4
 8000e3c:	6810      	ldr	r0, [r2, #0]
 8000e3e:	6018      	str	r0, [r3, #0]
 8000e40:	8891      	ldrh	r1, [r2, #4]
 8000e42:	7992      	ldrb	r2, [r2, #6]
 8000e44:	8099      	strh	r1, [r3, #4]
 8000e46:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino7'></td></tr>");
 8000e48:	6838      	ldr	r0, [r7, #0]
 8000e4a:	f7ff f981 	bl	8000150 <strlen>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a91      	ldr	r2, [pc, #580]	; (800109c <tcp_http_mt+0xaf0>)
 8000e58:	4614      	mov	r4, r2
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e60:	4665      	mov	r5, ip
 8000e62:	4626      	mov	r6, r4
 8000e64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e66:	6028      	str	r0, [r5, #0]
 8000e68:	6069      	str	r1, [r5, #4]
 8000e6a:	60aa      	str	r2, [r5, #8]
 8000e6c:	60eb      	str	r3, [r5, #12]
 8000e6e:	3410      	adds	r4, #16
 8000e70:	f10c 0c10 	add.w	ip, ip, #16
 8000e74:	4574      	cmp	r4, lr
 8000e76:	d1f3      	bne.n	8000e60 <tcp_http_mt+0x8b4>
 8000e78:	4663      	mov	r3, ip
 8000e7a:	4622      	mov	r2, r4
 8000e7c:	6810      	ldr	r0, [r2, #0]
 8000e7e:	6018      	str	r0, [r3, #0]
 8000e80:	8892      	ldrh	r2, [r2, #4]
 8000e82:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>8:  <input type='text' name='ipDestino8'></td>");
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	f7ff f963 	bl	8000150 <strlen>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a83      	ldr	r2, [pc, #524]	; (80010a0 <tcp_http_mt+0xaf4>)
 8000e94:	4614      	mov	r4, r2
 8000e96:	469c      	mov	ip, r3
 8000e98:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e9c:	4665      	mov	r5, ip
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ea2:	6028      	str	r0, [r5, #0]
 8000ea4:	6069      	str	r1, [r5, #4]
 8000ea6:	60aa      	str	r2, [r5, #8]
 8000ea8:	60eb      	str	r3, [r5, #12]
 8000eaa:	3410      	adds	r4, #16
 8000eac:	f10c 0c10 	add.w	ip, ip, #16
 8000eb0:	4574      	cmp	r4, lr
 8000eb2:	d1f3      	bne.n	8000e9c <tcp_http_mt+0x8f0>
 8000eb4:	4663      	mov	r3, ip
 8000eb6:	4622      	mov	r2, r4
 8000eb8:	6810      	ldr	r0, [r2, #0]
 8000eba:	6018      	str	r0, [r3, #0]
 8000ebc:	8891      	ldrh	r1, [r2, #4]
 8000ebe:	7992      	ldrb	r2, [r2, #6]
 8000ec0:	8099      	strh	r1, [r3, #4]
 8000ec2:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino8'></td></tr>");
 8000ec4:	6838      	ldr	r0, [r7, #0]
 8000ec6:	f7ff f943 	bl	8000150 <strlen>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	461a      	mov	r2, r3
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a74      	ldr	r2, [pc, #464]	; (80010a4 <tcp_http_mt+0xaf8>)
 8000ed4:	4614      	mov	r4, r2
 8000ed6:	469c      	mov	ip, r3
 8000ed8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000edc:	4665      	mov	r5, ip
 8000ede:	4626      	mov	r6, r4
 8000ee0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ee2:	6028      	str	r0, [r5, #0]
 8000ee4:	6069      	str	r1, [r5, #4]
 8000ee6:	60aa      	str	r2, [r5, #8]
 8000ee8:	60eb      	str	r3, [r5, #12]
 8000eea:	3410      	adds	r4, #16
 8000eec:	f10c 0c10 	add.w	ip, ip, #16
 8000ef0:	4574      	cmp	r4, lr
 8000ef2:	d1f3      	bne.n	8000edc <tcp_http_mt+0x930>
 8000ef4:	4663      	mov	r3, ip
 8000ef6:	4622      	mov	r2, r4
 8000ef8:	6810      	ldr	r0, [r2, #0]
 8000efa:	6018      	str	r0, [r3, #0]
 8000efc:	8892      	ldrh	r2, [r2, #4]
 8000efe:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>9:  <input type='text' name='ipDestino9'></td>");
 8000f00:	6838      	ldr	r0, [r7, #0]
 8000f02:	f7ff f925 	bl	8000150 <strlen>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a66      	ldr	r2, [pc, #408]	; (80010a8 <tcp_http_mt+0xafc>)
 8000f10:	4614      	mov	r4, r2
 8000f12:	469c      	mov	ip, r3
 8000f14:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f18:	4665      	mov	r5, ip
 8000f1a:	4626      	mov	r6, r4
 8000f1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f1e:	6028      	str	r0, [r5, #0]
 8000f20:	6069      	str	r1, [r5, #4]
 8000f22:	60aa      	str	r2, [r5, #8]
 8000f24:	60eb      	str	r3, [r5, #12]
 8000f26:	3410      	adds	r4, #16
 8000f28:	f10c 0c10 	add.w	ip, ip, #16
 8000f2c:	4574      	cmp	r4, lr
 8000f2e:	d1f3      	bne.n	8000f18 <tcp_http_mt+0x96c>
 8000f30:	4663      	mov	r3, ip
 8000f32:	4622      	mov	r2, r4
 8000f34:	6810      	ldr	r0, [r2, #0]
 8000f36:	6018      	str	r0, [r3, #0]
 8000f38:	8891      	ldrh	r1, [r2, #4]
 8000f3a:	7992      	ldrb	r2, [r2, #6]
 8000f3c:	8099      	strh	r1, [r3, #4]
 8000f3e:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino9'></td></tr>");
 8000f40:	6838      	ldr	r0, [r7, #0]
 8000f42:	f7ff f905 	bl	8000150 <strlen>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a57      	ldr	r2, [pc, #348]	; (80010ac <tcp_http_mt+0xb00>)
 8000f50:	4614      	mov	r4, r2
 8000f52:	469c      	mov	ip, r3
 8000f54:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f58:	4665      	mov	r5, ip
 8000f5a:	4626      	mov	r6, r4
 8000f5c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f5e:	6028      	str	r0, [r5, #0]
 8000f60:	6069      	str	r1, [r5, #4]
 8000f62:	60aa      	str	r2, [r5, #8]
 8000f64:	60eb      	str	r3, [r5, #12]
 8000f66:	3410      	adds	r4, #16
 8000f68:	f10c 0c10 	add.w	ip, ip, #16
 8000f6c:	4574      	cmp	r4, lr
 8000f6e:	d1f3      	bne.n	8000f58 <tcp_http_mt+0x9ac>
 8000f70:	4663      	mov	r3, ip
 8000f72:	4622      	mov	r2, r4
 8000f74:	6810      	ldr	r0, [r2, #0]
 8000f76:	6018      	str	r0, [r3, #0]
 8000f78:	8892      	ldrh	r2, [r2, #4]
 8000f7a:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>10: <input type='text' name='ipDestino10'></td>");
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f7ff f8e7 	bl	8000150 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a49      	ldr	r2, [pc, #292]	; (80010b0 <tcp_http_mt+0xb04>)
 8000f8c:	4614      	mov	r4, r2
 8000f8e:	469c      	mov	ip, r3
 8000f90:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f94:	4665      	mov	r5, ip
 8000f96:	4626      	mov	r6, r4
 8000f98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f9a:	6028      	str	r0, [r5, #0]
 8000f9c:	6069      	str	r1, [r5, #4]
 8000f9e:	60aa      	str	r2, [r5, #8]
 8000fa0:	60eb      	str	r3, [r5, #12]
 8000fa2:	3410      	adds	r4, #16
 8000fa4:	f10c 0c10 	add.w	ip, ip, #16
 8000fa8:	4574      	cmp	r4, lr
 8000faa:	d1f3      	bne.n	8000f94 <tcp_http_mt+0x9e8>
 8000fac:	4662      	mov	r2, ip
 8000fae:	4623      	mov	r3, r4
 8000fb0:	cb03      	ldmia	r3!, {r0, r1}
 8000fb2:	6010      	str	r0, [r2, #0]
 8000fb4:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino10'></td></tr>");
 8000fb6:	6838      	ldr	r0, [r7, #0]
 8000fb8:	f7ff f8ca 	bl	8000150 <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a3b      	ldr	r2, [pc, #236]	; (80010b4 <tcp_http_mt+0xb08>)
 8000fc6:	4614      	mov	r4, r2
 8000fc8:	469c      	mov	ip, r3
 8000fca:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000fce:	4665      	mov	r5, ip
 8000fd0:	4626      	mov	r6, r4
 8000fd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fd4:	6028      	str	r0, [r5, #0]
 8000fd6:	6069      	str	r1, [r5, #4]
 8000fd8:	60aa      	str	r2, [r5, #8]
 8000fda:	60eb      	str	r3, [r5, #12]
 8000fdc:	3410      	adds	r4, #16
 8000fde:	f10c 0c10 	add.w	ip, ip, #16
 8000fe2:	4574      	cmp	r4, lr
 8000fe4:	d1f3      	bne.n	8000fce <tcp_http_mt+0xa22>
 8000fe6:	4663      	mov	r3, ip
 8000fe8:	4622      	mov	r2, r4
 8000fea:	6810      	ldr	r0, [r2, #0]
 8000fec:	6018      	str	r0, [r3, #0]
 8000fee:	8891      	ldrh	r1, [r2, #4]
 8000ff0:	7992      	ldrb	r2, [r2, #6]
 8000ff2:	8099      	strh	r1, [r3, #4]
 8000ff4:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>11: <input type='text' name='ipDestino11'></td>");
 8000ff6:	6838      	ldr	r0, [r7, #0]
 8000ff8:	f7ff f8aa 	bl	8000150 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a2c      	ldr	r2, [pc, #176]	; (80010b8 <tcp_http_mt+0xb0c>)
 8001006:	4614      	mov	r4, r2
 8001008:	469c      	mov	ip, r3
 800100a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800100e:	4665      	mov	r5, ip
 8001010:	4626      	mov	r6, r4
 8001012:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001014:	6028      	str	r0, [r5, #0]
 8001016:	6069      	str	r1, [r5, #4]
 8001018:	60aa      	str	r2, [r5, #8]
 800101a:	60eb      	str	r3, [r5, #12]
 800101c:	3410      	adds	r4, #16
 800101e:	f10c 0c10 	add.w	ip, ip, #16
 8001022:	4574      	cmp	r4, lr
 8001024:	d1f3      	bne.n	800100e <tcp_http_mt+0xa62>
 8001026:	4662      	mov	r2, ip
 8001028:	4623      	mov	r3, r4
 800102a:	cb03      	ldmia	r3!, {r0, r1}
 800102c:	6010      	str	r0, [r2, #0]
 800102e:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino11'></td></tr>");
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f7ff f88d 	bl	8000150 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <tcp_http_mt+0xb10>)
 8001040:	4614      	mov	r4, r2
 8001042:	469c      	mov	ip, r3
 8001044:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001048:	4665      	mov	r5, ip
 800104a:	4626      	mov	r6, r4
 800104c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800104e:	6028      	str	r0, [r5, #0]
 8001050:	6069      	str	r1, [r5, #4]
 8001052:	60aa      	str	r2, [r5, #8]
 8001054:	60eb      	str	r3, [r5, #12]
 8001056:	3410      	adds	r4, #16
 8001058:	f10c 0c10 	add.w	ip, ip, #16
 800105c:	4574      	cmp	r4, lr
 800105e:	d1f3      	bne.n	8001048 <tcp_http_mt+0xa9c>
 8001060:	4663      	mov	r3, ip
 8001062:	4622      	mov	r2, r4
 8001064:	6810      	ldr	r0, [r2, #0]
 8001066:	6018      	str	r0, [r3, #0]
 8001068:	8891      	ldrh	r1, [r2, #4]
 800106a:	7992      	ldrb	r2, [r2, #6]
 800106c:	8099      	strh	r1, [r3, #4]
 800106e:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>12: <input type='text' name='ipDestino12'></td>");
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff f86d 	bl	8000150 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <tcp_http_mt+0xb14>)
 8001080:	4614      	mov	r4, r2
 8001082:	469c      	mov	ip, r3
 8001084:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001088:	e01c      	b.n	80010c4 <tcp_http_mt+0xb18>
 800108a:	bf00      	nop
 800108c:	08007948 	.word	0x08007948
 8001090:	08007980 	.word	0x08007980
 8001094:	080079b8 	.word	0x080079b8
 8001098:	080079f0 	.word	0x080079f0
 800109c:	08007a28 	.word	0x08007a28
 80010a0:	08007a60 	.word	0x08007a60
 80010a4:	08007a98 	.word	0x08007a98
 80010a8:	08007ad0 	.word	0x08007ad0
 80010ac:	08007b08 	.word	0x08007b08
 80010b0:	08007b40 	.word	0x08007b40
 80010b4:	08007b78 	.word	0x08007b78
 80010b8:	08007bb0 	.word	0x08007bb0
 80010bc:	08007be8 	.word	0x08007be8
 80010c0:	08007c20 	.word	0x08007c20
 80010c4:	4665      	mov	r5, ip
 80010c6:	4626      	mov	r6, r4
 80010c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010ca:	6028      	str	r0, [r5, #0]
 80010cc:	6069      	str	r1, [r5, #4]
 80010ce:	60aa      	str	r2, [r5, #8]
 80010d0:	60eb      	str	r3, [r5, #12]
 80010d2:	3410      	adds	r4, #16
 80010d4:	f10c 0c10 	add.w	ip, ip, #16
 80010d8:	4574      	cmp	r4, lr
 80010da:	d1f3      	bne.n	80010c4 <tcp_http_mt+0xb18>
 80010dc:	4662      	mov	r2, ip
 80010de:	4623      	mov	r3, r4
 80010e0:	cb03      	ldmia	r3!, {r0, r1}
 80010e2:	6010      	str	r0, [r2, #0]
 80010e4:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino12'></td></tr>");
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f7ff f832 	bl	8000150 <strlen>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a9a      	ldr	r2, [pc, #616]	; (8001360 <tcp_http_mt+0xdb4>)
 80010f6:	4614      	mov	r4, r2
 80010f8:	469c      	mov	ip, r3
 80010fa:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010fe:	4665      	mov	r5, ip
 8001100:	4626      	mov	r6, r4
 8001102:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001104:	6028      	str	r0, [r5, #0]
 8001106:	6069      	str	r1, [r5, #4]
 8001108:	60aa      	str	r2, [r5, #8]
 800110a:	60eb      	str	r3, [r5, #12]
 800110c:	3410      	adds	r4, #16
 800110e:	f10c 0c10 	add.w	ip, ip, #16
 8001112:	4574      	cmp	r4, lr
 8001114:	d1f3      	bne.n	80010fe <tcp_http_mt+0xb52>
 8001116:	4663      	mov	r3, ip
 8001118:	4622      	mov	r2, r4
 800111a:	6810      	ldr	r0, [r2, #0]
 800111c:	6018      	str	r0, [r3, #0]
 800111e:	8891      	ldrh	r1, [r2, #4]
 8001120:	7992      	ldrb	r2, [r2, #6]
 8001122:	8099      	strh	r1, [r3, #4]
 8001124:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>13: <input type='text' name='ipDestino13'></td>");
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f7ff f812 	bl	8000150 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a8b      	ldr	r2, [pc, #556]	; (8001364 <tcp_http_mt+0xdb8>)
 8001136:	4614      	mov	r4, r2
 8001138:	469c      	mov	ip, r3
 800113a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800113e:	4665      	mov	r5, ip
 8001140:	4626      	mov	r6, r4
 8001142:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001144:	6028      	str	r0, [r5, #0]
 8001146:	6069      	str	r1, [r5, #4]
 8001148:	60aa      	str	r2, [r5, #8]
 800114a:	60eb      	str	r3, [r5, #12]
 800114c:	3410      	adds	r4, #16
 800114e:	f10c 0c10 	add.w	ip, ip, #16
 8001152:	4574      	cmp	r4, lr
 8001154:	d1f3      	bne.n	800113e <tcp_http_mt+0xb92>
 8001156:	4662      	mov	r2, ip
 8001158:	4623      	mov	r3, r4
 800115a:	cb03      	ldmia	r3!, {r0, r1}
 800115c:	6010      	str	r0, [r2, #0]
 800115e:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino13'></td></tr>");
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f7fe fff5 	bl	8000150 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	4413      	add	r3, r2
 800116e:	4a7e      	ldr	r2, [pc, #504]	; (8001368 <tcp_http_mt+0xdbc>)
 8001170:	4614      	mov	r4, r2
 8001172:	469c      	mov	ip, r3
 8001174:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001178:	4665      	mov	r5, ip
 800117a:	4626      	mov	r6, r4
 800117c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800117e:	6028      	str	r0, [r5, #0]
 8001180:	6069      	str	r1, [r5, #4]
 8001182:	60aa      	str	r2, [r5, #8]
 8001184:	60eb      	str	r3, [r5, #12]
 8001186:	3410      	adds	r4, #16
 8001188:	f10c 0c10 	add.w	ip, ip, #16
 800118c:	4574      	cmp	r4, lr
 800118e:	d1f3      	bne.n	8001178 <tcp_http_mt+0xbcc>
 8001190:	4663      	mov	r3, ip
 8001192:	4622      	mov	r2, r4
 8001194:	6810      	ldr	r0, [r2, #0]
 8001196:	6018      	str	r0, [r3, #0]
 8001198:	8891      	ldrh	r1, [r2, #4]
 800119a:	7992      	ldrb	r2, [r2, #6]
 800119c:	8099      	strh	r1, [r3, #4]
 800119e:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>14: <input type='text' name='ipDestino14'></td>");
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	f7fe ffd5 	bl	8000150 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a6f      	ldr	r2, [pc, #444]	; (800136c <tcp_http_mt+0xdc0>)
 80011b0:	4614      	mov	r4, r2
 80011b2:	469c      	mov	ip, r3
 80011b4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011b8:	4665      	mov	r5, ip
 80011ba:	4626      	mov	r6, r4
 80011bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011be:	6028      	str	r0, [r5, #0]
 80011c0:	6069      	str	r1, [r5, #4]
 80011c2:	60aa      	str	r2, [r5, #8]
 80011c4:	60eb      	str	r3, [r5, #12]
 80011c6:	3410      	adds	r4, #16
 80011c8:	f10c 0c10 	add.w	ip, ip, #16
 80011cc:	4574      	cmp	r4, lr
 80011ce:	d1f3      	bne.n	80011b8 <tcp_http_mt+0xc0c>
 80011d0:	4662      	mov	r2, ip
 80011d2:	4623      	mov	r3, r4
 80011d4:	cb03      	ldmia	r3!, {r0, r1}
 80011d6:	6010      	str	r0, [r2, #0]
 80011d8:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino14'></td></tr>");
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f7fe ffb8 	bl	8000150 <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a61      	ldr	r2, [pc, #388]	; (8001370 <tcp_http_mt+0xdc4>)
 80011ea:	4614      	mov	r4, r2
 80011ec:	469c      	mov	ip, r3
 80011ee:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011f2:	4665      	mov	r5, ip
 80011f4:	4626      	mov	r6, r4
 80011f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011f8:	6028      	str	r0, [r5, #0]
 80011fa:	6069      	str	r1, [r5, #4]
 80011fc:	60aa      	str	r2, [r5, #8]
 80011fe:	60eb      	str	r3, [r5, #12]
 8001200:	3410      	adds	r4, #16
 8001202:	f10c 0c10 	add.w	ip, ip, #16
 8001206:	4574      	cmp	r4, lr
 8001208:	d1f3      	bne.n	80011f2 <tcp_http_mt+0xc46>
 800120a:	4663      	mov	r3, ip
 800120c:	4622      	mov	r2, r4
 800120e:	6810      	ldr	r0, [r2, #0]
 8001210:	6018      	str	r0, [r3, #0]
 8001212:	8891      	ldrh	r1, [r2, #4]
 8001214:	7992      	ldrb	r2, [r2, #6]
 8001216:	8099      	strh	r1, [r3, #4]
 8001218:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>15: <input type='text' name='ipDestino15'></td>");
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f7fe ff98 	bl	8000150 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a52      	ldr	r2, [pc, #328]	; (8001374 <tcp_http_mt+0xdc8>)
 800122a:	4614      	mov	r4, r2
 800122c:	469c      	mov	ip, r3
 800122e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001232:	4665      	mov	r5, ip
 8001234:	4626      	mov	r6, r4
 8001236:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001238:	6028      	str	r0, [r5, #0]
 800123a:	6069      	str	r1, [r5, #4]
 800123c:	60aa      	str	r2, [r5, #8]
 800123e:	60eb      	str	r3, [r5, #12]
 8001240:	3410      	adds	r4, #16
 8001242:	f10c 0c10 	add.w	ip, ip, #16
 8001246:	4574      	cmp	r4, lr
 8001248:	d1f3      	bne.n	8001232 <tcp_http_mt+0xc86>
 800124a:	4662      	mov	r2, ip
 800124c:	4623      	mov	r3, r4
 800124e:	cb03      	ldmia	r3!, {r0, r1}
 8001250:	6010      	str	r0, [r2, #0]
 8001252:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino15'></td></tr>");
 8001254:	6838      	ldr	r0, [r7, #0]
 8001256:	f7fe ff7b 	bl	8000150 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	4413      	add	r3, r2
 8001262:	4a45      	ldr	r2, [pc, #276]	; (8001378 <tcp_http_mt+0xdcc>)
 8001264:	4614      	mov	r4, r2
 8001266:	469c      	mov	ip, r3
 8001268:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800126c:	4665      	mov	r5, ip
 800126e:	4626      	mov	r6, r4
 8001270:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001272:	6028      	str	r0, [r5, #0]
 8001274:	6069      	str	r1, [r5, #4]
 8001276:	60aa      	str	r2, [r5, #8]
 8001278:	60eb      	str	r3, [r5, #12]
 800127a:	3410      	adds	r4, #16
 800127c:	f10c 0c10 	add.w	ip, ip, #16
 8001280:	4574      	cmp	r4, lr
 8001282:	d1f3      	bne.n	800126c <tcp_http_mt+0xcc0>
 8001284:	4663      	mov	r3, ip
 8001286:	4622      	mov	r2, r4
 8001288:	6810      	ldr	r0, [r2, #0]
 800128a:	6018      	str	r0, [r3, #0]
 800128c:	8891      	ldrh	r1, [r2, #4]
 800128e:	7992      	ldrb	r2, [r2, #6]
 8001290:	8099      	strh	r1, [r3, #4]
 8001292:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>16: <input type='text' name='ipDestino16'></td>");
 8001294:	6838      	ldr	r0, [r7, #0]
 8001296:	f7fe ff5b 	bl	8000150 <strlen>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a36      	ldr	r2, [pc, #216]	; (800137c <tcp_http_mt+0xdd0>)
 80012a4:	4614      	mov	r4, r2
 80012a6:	469c      	mov	ip, r3
 80012a8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80012ac:	4665      	mov	r5, ip
 80012ae:	4626      	mov	r6, r4
 80012b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012b2:	6028      	str	r0, [r5, #0]
 80012b4:	6069      	str	r1, [r5, #4]
 80012b6:	60aa      	str	r2, [r5, #8]
 80012b8:	60eb      	str	r3, [r5, #12]
 80012ba:	3410      	adds	r4, #16
 80012bc:	f10c 0c10 	add.w	ip, ip, #16
 80012c0:	4574      	cmp	r4, lr
 80012c2:	d1f3      	bne.n	80012ac <tcp_http_mt+0xd00>
 80012c4:	4662      	mov	r2, ip
 80012c6:	4623      	mov	r3, r4
 80012c8:	cb03      	ldmia	r3!, {r0, r1}
 80012ca:	6010      	str	r0, [r2, #0]
 80012cc:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino16'></td></tr>");
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7fe ff3e 	bl	8000150 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <tcp_http_mt+0xdd4>)
 80012de:	4614      	mov	r4, r2
 80012e0:	469c      	mov	ip, r3
 80012e2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80012e6:	4665      	mov	r5, ip
 80012e8:	4626      	mov	r6, r4
 80012ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012ec:	6028      	str	r0, [r5, #0]
 80012ee:	6069      	str	r1, [r5, #4]
 80012f0:	60aa      	str	r2, [r5, #8]
 80012f2:	60eb      	str	r3, [r5, #12]
 80012f4:	3410      	adds	r4, #16
 80012f6:	f10c 0c10 	add.w	ip, ip, #16
 80012fa:	4574      	cmp	r4, lr
 80012fc:	d1f3      	bne.n	80012e6 <tcp_http_mt+0xd3a>
 80012fe:	4663      	mov	r3, ip
 8001300:	4622      	mov	r2, r4
 8001302:	6810      	ldr	r0, [r2, #0]
 8001304:	6018      	str	r0, [r3, #0]
 8001306:	8891      	ldrh	r1, [r2, #4]
 8001308:	7992      	ldrb	r2, [r2, #6]
 800130a:	8099      	strh	r1, [r3, #4]
 800130c:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "</table><br><button>Salvar</button><br><br><a href='http://192.168.0.231'>Voltar</a><br></center>");
 800130e:	6838      	ldr	r0, [r7, #0]
 8001310:	f7fe ff1e 	bl	8000150 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a19      	ldr	r2, [pc, #100]	; (8001384 <tcp_http_mt+0xdd8>)
 800131e:	4618      	mov	r0, r3
 8001320:	4611      	mov	r1, r2
 8001322:	2362      	movs	r3, #98	; 0x62
 8001324:	461a      	mov	r2, r3
 8001326:	f006 f814 	bl	8007352 <memcpy>

							strcat((char*)buf, "</body>");
 800132a:	6838      	ldr	r0, [r7, #0]
 800132c:	f7fe ff10 	bl	8000150 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4913      	ldr	r1, [pc, #76]	; (8001388 <tcp_http_mt+0xddc>)
 800133a:	461a      	mov	r2, r3
 800133c:	460b      	mov	r3, r1
 800133e:	cb03      	ldmia	r3!, {r0, r1}
 8001340:	6010      	str	r0, [r2, #0]
 8001342:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8001344:	6838      	ldr	r0, [r7, #0]
 8001346:	f7fe ff03 	bl	8000150 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	4413      	add	r3, r2
 8001352:	490e      	ldr	r1, [pc, #56]	; (800138c <tcp_http_mt+0xde0>)
 8001354:	461a      	mov	r2, r3
 8001356:	460b      	mov	r3, r1
 8001358:	cb03      	ldmia	r3!, {r0, r1}
 800135a:	6010      	str	r0, [r2, #0]
 800135c:	6051      	str	r1, [r2, #4]
 800135e:	e103      	b.n	8001568 <tcp_http_mt+0xfbc>
 8001360:	08007c58 	.word	0x08007c58
 8001364:	08007c90 	.word	0x08007c90
 8001368:	08007cc8 	.word	0x08007cc8
 800136c:	08007d00 	.word	0x08007d00
 8001370:	08007d38 	.word	0x08007d38
 8001374:	08007d70 	.word	0x08007d70
 8001378:	08007da8 	.word	0x08007da8
 800137c:	08007de0 	.word	0x08007de0
 8001380:	08007e18 	.word	0x08007e18
 8001384:	08007e50 	.word	0x08007e50
 8001388:	0800768c 	.word	0x0800768c
 800138c:	08007694 	.word	0x08007694
						}
						else
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	4aaa      	ldr	r2, [pc, #680]	; (800163c <tcp_http_mt+0x1090>)
 8001394:	4614      	mov	r4, r2
 8001396:	469c      	mov	ip, r3
 8001398:	f104 0e20 	add.w	lr, r4, #32
 800139c:	4665      	mov	r5, ip
 800139e:	4626      	mov	r6, r4
 80013a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013a2:	6028      	str	r0, [r5, #0]
 80013a4:	6069      	str	r1, [r5, #4]
 80013a6:	60aa      	str	r2, [r5, #8]
 80013a8:	60eb      	str	r3, [r5, #12]
 80013aa:	3410      	adds	r4, #16
 80013ac:	f10c 0c10 	add.w	ip, ip, #16
 80013b0:	4574      	cmp	r4, lr
 80013b2:	d1f3      	bne.n	800139c <tcp_http_mt+0xdf0>
 80013b4:	4665      	mov	r5, ip
 80013b6:	4623      	mov	r3, r4
 80013b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013ba:	6028      	str	r0, [r5, #0]
 80013bc:	6069      	str	r1, [r5, #4]
 80013be:	60aa      	str	r2, [r5, #8]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f7fe fec3 	bl	8000150 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a9b      	ldr	r2, [pc, #620]	; (8001640 <tcp_http_mt+0x1094>)
 80013d4:	461c      	mov	r4, r3
 80013d6:	4613      	mov	r3, r2
 80013d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013da:	6020      	str	r0, [r4, #0]
 80013dc:	6061      	str	r1, [r4, #4]
 80013de:	60a2      	str	r2, [r4, #8]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Escrava Config</title>");
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	f7fe feb3 	bl	8000150 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a94      	ldr	r2, [pc, #592]	; (8001644 <tcp_http_mt+0x1098>)
 80013f4:	461d      	mov	r5, r3
 80013f6:	4614      	mov	r4, r2
 80013f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fa:	6028      	str	r0, [r5, #0]
 80013fc:	6069      	str	r1, [r5, #4]
 80013fe:	60aa      	str	r2, [r5, #8]
 8001400:	60eb      	str	r3, [r5, #12]
 8001402:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001404:	6128      	str	r0, [r5, #16]
 8001406:	6169      	str	r1, [r5, #20]
 8001408:	61aa      	str	r2, [r5, #24]
 800140a:	8823      	ldrh	r3, [r4, #0]
 800140c:	83ab      	strh	r3, [r5, #28]
							strcat((char*)buf, "<link href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css' rel='stylesheet'></link>");
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f7fe fe9e 	bl	8000150 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a8a      	ldr	r2, [pc, #552]	; (8001648 <tcp_http_mt+0x109c>)
 800141e:	4618      	mov	r0, r3
 8001420:	4611      	mov	r1, r2
 8001422:	236c      	movs	r3, #108	; 0x6c
 8001424:	461a      	mov	r2, r3
 8001426:	f005 ff94 	bl	8007352 <memcpy>
							strcat((char*)buf, "</head>");
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f7fe fe90 	bl	8000150 <strlen>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4984      	ldr	r1, [pc, #528]	; (800164c <tcp_http_mt+0x10a0>)
 800143a:	461a      	mov	r2, r3
 800143c:	460b      	mov	r3, r1
 800143e:	cb03      	ldmia	r3!, {r0, r1}
 8001440:	6010      	str	r0, [r2, #0]
 8001442:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 8001444:	6838      	ldr	r0, [r7, #0]
 8001446:	f7fe fe83 	bl	8000150 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	4413      	add	r3, r2
 8001452:	4a7f      	ldr	r2, [pc, #508]	; (8001650 <tcp_http_mt+0x10a4>)
 8001454:	6810      	ldr	r0, [r2, #0]
 8001456:	6018      	str	r0, [r3, #0]
 8001458:	8891      	ldrh	r1, [r2, #4]
 800145a:	7992      	ldrb	r2, [r2, #6]
 800145c:	8099      	strh	r1, [r3, #4]
 800145e:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<div class = 'entradas'>");
 8001460:	6838      	ldr	r0, [r7, #0]
 8001462:	f7fe fe75 	bl	8000150 <strlen>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	4413      	add	r3, r2
 800146e:	4a79      	ldr	r2, [pc, #484]	; (8001654 <tcp_http_mt+0x10a8>)
 8001470:	461d      	mov	r5, r3
 8001472:	4614      	mov	r4, r2
 8001474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001476:	6028      	str	r0, [r5, #0]
 8001478:	6069      	str	r1, [r5, #4]
 800147a:	60aa      	str	r2, [r5, #8]
 800147c:	60eb      	str	r3, [r5, #12]
 800147e:	cc03      	ldmia	r4!, {r0, r1}
 8001480:	6128      	str	r0, [r5, #16]
 8001482:	6169      	str	r1, [r5, #20]
 8001484:	7823      	ldrb	r3, [r4, #0]
 8001486:	762b      	strb	r3, [r5, #24]

							strcat((char*)buf, "<b><center>Menus para configuracao</b><br><br>");
 8001488:	6838      	ldr	r0, [r7, #0]
 800148a:	f7fe fe61 	bl	8000150 <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	4a70      	ldr	r2, [pc, #448]	; (8001658 <tcp_http_mt+0x10ac>)
 8001498:	4615      	mov	r5, r2
 800149a:	469c      	mov	ip, r3
 800149c:	f105 0e20 	add.w	lr, r5, #32
 80014a0:	4664      	mov	r4, ip
 80014a2:	462e      	mov	r6, r5
 80014a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014a6:	6020      	str	r0, [r4, #0]
 80014a8:	6061      	str	r1, [r4, #4]
 80014aa:	60a2      	str	r2, [r4, #8]
 80014ac:	60e3      	str	r3, [r4, #12]
 80014ae:	3510      	adds	r5, #16
 80014b0:	f10c 0c10 	add.w	ip, ip, #16
 80014b4:	4575      	cmp	r5, lr
 80014b6:	d1f3      	bne.n	80014a0 <tcp_http_mt+0xef4>
 80014b8:	4664      	mov	r4, ip
 80014ba:	462b      	mov	r3, r5
 80014bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014be:	6020      	str	r0, [r4, #0]
 80014c0:	6061      	str	r1, [r4, #4]
 80014c2:	60a2      	str	r2, [r4, #8]
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	789b      	ldrb	r3, [r3, #2]
 80014c8:	81a2      	strh	r2, [r4, #12]
 80014ca:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "<a href='http://192.168.0.231/rede'>Configurar rede</a><br><br>");
 80014cc:	6838      	ldr	r0, [r7, #0]
 80014ce:	f7fe fe3f 	bl	8000150 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4413      	add	r3, r2
 80014da:	4a60      	ldr	r2, [pc, #384]	; (800165c <tcp_http_mt+0x10b0>)
 80014dc:	4614      	mov	r4, r2
 80014de:	469c      	mov	ip, r3
 80014e0:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 80014e4:	4665      	mov	r5, ip
 80014e6:	4626      	mov	r6, r4
 80014e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014ea:	6028      	str	r0, [r5, #0]
 80014ec:	6069      	str	r1, [r5, #4]
 80014ee:	60aa      	str	r2, [r5, #8]
 80014f0:	60eb      	str	r3, [r5, #12]
 80014f2:	3410      	adds	r4, #16
 80014f4:	f10c 0c10 	add.w	ip, ip, #16
 80014f8:	4574      	cmp	r4, lr
 80014fa:	d1f3      	bne.n	80014e4 <tcp_http_mt+0xf38>
							strcat((char*)buf, "<a href='http://192.168.0.231/interfaces'>Configurar interfaces\n</a><br>");
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f7fe fe27 	bl	8000150 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	4413      	add	r3, r2
 800150a:	4a55      	ldr	r2, [pc, #340]	; (8001660 <tcp_http_mt+0x10b4>)
 800150c:	4618      	mov	r0, r3
 800150e:	4611      	mov	r1, r2
 8001510:	2349      	movs	r3, #73	; 0x49
 8001512:	461a      	mov	r2, r3
 8001514:	f005 ff1d 	bl	8007352 <memcpy>

							strcat((char*)buf, "</div>");
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f7fe fe19 	bl	8000150 <strlen>
 800151e:	4603      	mov	r3, r0
 8001520:	461a      	mov	r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	4413      	add	r3, r2
 8001526:	4a4f      	ldr	r2, [pc, #316]	; (8001664 <tcp_http_mt+0x10b8>)
 8001528:	6810      	ldr	r0, [r2, #0]
 800152a:	6018      	str	r0, [r3, #0]
 800152c:	8891      	ldrh	r1, [r2, #4]
 800152e:	7992      	ldrb	r2, [r2, #6]
 8001530:	8099      	strh	r1, [r3, #4]
 8001532:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "</body>");
 8001534:	6838      	ldr	r0, [r7, #0]
 8001536:	f7fe fe0b 	bl	8000150 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	4413      	add	r3, r2
 8001542:	4949      	ldr	r1, [pc, #292]	; (8001668 <tcp_http_mt+0x10bc>)
 8001544:	461a      	mov	r2, r3
 8001546:	460b      	mov	r3, r1
 8001548:	cb03      	ldmia	r3!, {r0, r1}
 800154a:	6010      	str	r0, [r2, #0]
 800154c:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 800154e:	6838      	ldr	r0, [r7, #0]
 8001550:	f7fe fdfe 	bl	8000150 <strlen>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4943      	ldr	r1, [pc, #268]	; (800166c <tcp_http_mt+0x10c0>)
 800155e:	461a      	mov	r2, r3
 8001560:	460b      	mov	r3, r1
 8001562:	cb03      	ldmia	r3!, {r0, r1}
 8001564:	6010      	str	r0, [r2, #0]
 8001566:	6051      	str	r1, [r2, #4]
						}

						blocklen = strlen((char*)buf);
 8001568:	6838      	ldr	r0, [r7, #0]
 800156a:	f7fe fdf1 	bl	8000150 <strlen>
 800156e:	4603      	mov	r3, r0
 8001570:	833b      	strh	r3, [r7, #24]

						ret = send(sn,buf,blocklen);
 8001572:	8b3a      	ldrh	r2, [r7, #24]
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fc4f 	bl	8001e1c <send>
 800157e:	6178      	str	r0, [r7, #20]
						if(ret < 0)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	da05      	bge.n	8001592 <tcp_http_mt+0xfe6>
						{
							close(sn);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fb0f 	bl	8001bac <close>
							return ret;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	e04f      	b.n	8001632 <tcp_http_mt+0x1086>
						}
						else
						{
							HTTP_reset(sn);
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fff1 	bl	800057c <HTTP_reset>
							disconnect(sn);
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fbc7 	bl	8001d30 <disconnect>
					if(flagHtmlGen == 1)
 80015a2:	e008      	b.n	80015b6 <tcp_http_mt+0x100a>
						}
					}
				}
				else
				{
					HTTP_reset(sn);
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ffe8 	bl	800057c <HTTP_reset>
					disconnect(sn);
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fbbe 	bl	8001d30 <disconnect>
				}

        	  }
         }
         break;
 80015b4:	e035      	b.n	8001622 <tcp_http_mt+0x1076>
 80015b6:	e034      	b.n	8001622 <tcp_http_mt+0x1076>
      case SOCK_CLOSE_WAIT :

    	  HTTP_reset(sn);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ffde 	bl	800057c <HTTP_reset>

         if((ret=disconnect(sn)) != SOCK_OK)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fbb4 	bl	8001d30 <disconnect>
 80015c8:	4603      	mov	r3, r0
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d029      	beq.n	8001626 <tcp_http_mt+0x107a>
         return ret;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	e02d      	b.n	8001632 <tcp_http_mt+0x1086>

         break;
      case SOCK_INIT :

    	  HTTP_reset(sn);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffcf 	bl	800057c <HTTP_reset>

         if( (ret = listen(sn)) != SOCK_OK) return ret;
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fb3f 	bl	8001c64 <listen>
 80015e6:	4603      	mov	r3, r0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d01c      	beq.n	800162a <tcp_http_mt+0x107e>
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	e01e      	b.n	8001632 <tcp_http_mt+0x1086>
         break;
      case SOCK_CLOSED:

    	  HTTP_reset(sn);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffc0 	bl	800057c <HTTP_reset>

         if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)
 80015fc:	88ba      	ldrh	r2, [r7, #4]
 80015fe:	79f8      	ldrb	r0, [r7, #7]
 8001600:	2300      	movs	r3, #0
 8001602:	2101      	movs	r1, #1
 8001604:	f000 f9da 	bl	80019bc <socket>
 8001608:	4603      	mov	r3, r0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	429a      	cmp	r2, r3
 8001612:	d00c      	beq.n	800162e <tcp_http_mt+0x1082>
         return ret;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	e00c      	b.n	8001632 <tcp_http_mt+0x1086>

         break;

      default:
    	  HTTP_reset(sn);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ffae 	bl	800057c <HTTP_reset>
         break;
 8001620:	e006      	b.n	8001630 <tcp_http_mt+0x1084>
         break;
 8001622:	bf00      	nop
 8001624:	e004      	b.n	8001630 <tcp_http_mt+0x1084>
         break;
 8001626:	bf00      	nop
 8001628:	e002      	b.n	8001630 <tcp_http_mt+0x1084>
         break;
 800162a:	bf00      	nop
 800162c:	e000      	b.n	8001630 <tcp_http_mt+0x1084>
         break;
 800162e:	bf00      	nop
   }
   return 1;
 8001630:	2301      	movs	r3, #1
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163a:	bf00      	nop
 800163c:	08007410 	.word	0x08007410
 8001640:	08007440 	.word	0x08007440
 8001644:	08007eb4 	.word	0x08007eb4
 8001648:	08007ed4 	.word	0x08007ed4
 800164c:	08007470 	.word	0x08007470
 8001650:	08007478 	.word	0x08007478
 8001654:	08007f40 	.word	0x08007f40
 8001658:	08007f5c 	.word	0x08007f5c
 800165c:	08007f8c 	.word	0x08007f8c
 8001660:	08007fcc 	.word	0x08007fcc
 8001664:	08008018 	.word	0x08008018
 8001668:	0800768c 	.word	0x0800768c
 800166c:	08007694 	.word	0x08007694

08001670 <StartEthernet>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEthernet */
void StartEthernet(void *argument)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t i;
  /* Infinite loop */
  for(;;)
  {
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 8001678:	2304      	movs	r3, #4
 800167a:	73fb      	strb	r3, [r7, #15]
 800167c:	e008      	b.n	8001690 <StartEthernet+0x20>
	  {
	  	tcp_http_mt(i, gDATABUF, 80);
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	2250      	movs	r2, #80	; 0x50
 8001682:	490d      	ldr	r1, [pc, #52]	; (80016b8 <StartEthernet+0x48>)
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff91 	bl	80005ac <tcp_http_mt>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	3301      	adds	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b07      	cmp	r3, #7
 8001694:	d9f3      	bls.n	800167e <StartEthernet+0xe>
	  }
	  //4 sockets para modbus TCP
	  for(i=0;i<4;i++)
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	e009      	b.n	80016b0 <StartEthernet+0x40>
	  {
	  	tcp_http_mt(i, gDATABUF, 502);
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80016a2:	4905      	ldr	r1, [pc, #20]	; (80016b8 <StartEthernet+0x48>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff81 	bl	80005ac <tcp_http_mt>
	  for(i=0;i<4;i++)
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	3301      	adds	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d9f2      	bls.n	800169c <StartEthernet+0x2c>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 80016b6:	e7df      	b.n	8001678 <StartEthernet+0x8>
 80016b8:	20001aa4 	.word	0x20001aa4

080016bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ce:	f001 fccd 	bl	800306c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40012c00 	.word	0x40012c00

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_MspInit+0x68>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	4a17      	ldr	r2, [pc, #92]	; (8001754 <HAL_MspInit+0x68>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6193      	str	r3, [r2, #24]
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_MspInit+0x68>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_MspInit+0x68>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a11      	ldr	r2, [pc, #68]	; (8001754 <HAL_MspInit+0x68>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_MspInit+0x68>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	210f      	movs	r1, #15
 8001726:	f06f 0001 	mvn.w	r0, #1
 800172a:	f001 fd70 	bl	800320e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_MspInit+0x6c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_MspInit+0x6c>)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	40010000 	.word	0x40010000

0800175c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a16      	ldr	r2, [pc, #88]	; (80017d0 <HAL_I2C_MspInit+0x74>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d124      	bne.n	80017c6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_I2C_MspInit+0x78>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_I2C_MspInit+0x78>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_I2C_MspInit+0x78>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001794:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179a:	2312      	movs	r3, #18
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4619      	mov	r1, r3
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <HAL_I2C_MspInit+0x7c>)
 80017aa:	f001 fd5b 	bl	8003264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_I2C_MspInit+0x78>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_I2C_MspInit+0x78>)
 80017b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_I2C_MspInit+0x78>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40005800 	.word	0x40005800
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010c00 	.word	0x40010c00

080017dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_SPI_MspInit+0x8c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d131      	bne.n	8001860 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_SPI_MspInit+0x90>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_SPI_MspInit+0x90>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001806:	61d3      	str	r3, [r2, #28]
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_SPI_MspInit+0x90>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_SPI_MspInit+0x90>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_SPI_MspInit+0x90>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_SPI_MspInit+0x90>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 800182c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	4619      	mov	r1, r3
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <HAL_SPI_MspInit+0x94>)
 8001842:	f001 fd0f 	bl	8003264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8001846:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800184a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_SPI_MspInit+0x94>)
 800185c:	f001 fd02 	bl	8003264 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40003800 	.word	0x40003800
 800186c:	40021000 	.word	0x40021000
 8001870:	40010c00 	.word	0x40010c00

08001874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08c      	sub	sp, #48	; 0x30
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	2019      	movs	r0, #25
 800188a:	f001 fcc0 	bl	800320e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800188e:	2019      	movs	r0, #25
 8001890:	f001 fcd9 	bl	8003246 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_InitTick+0x9c>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <HAL_InitTick+0x9c>)
 800189a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_InitTick+0x9c>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018ac:	f107 0210 	add.w	r2, r7, #16
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 fb7c 	bl	8003fb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018bc:	f002 fb66 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 80018c0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_InitTick+0xa0>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0c9b      	lsrs	r3, r3, #18
 80018cc:	3b01      	subs	r3, #1
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_InitTick+0xa4>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_InitTick+0xa8>)
 80018d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_InitTick+0xa4>)
 80018d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_InitTick+0xa4>)
 80018e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_InitTick+0xa4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_InitTick+0xa4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <HAL_InitTick+0xa4>)
 80018f2:	f002 fe79 	bl	80045e8 <HAL_TIM_Base_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d104      	bne.n	8001906 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <HAL_InitTick+0xa4>)
 80018fe:	f002 fecb 	bl	8004698 <HAL_TIM_Base_Start_IT>
 8001902:	4603      	mov	r3, r0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3730      	adds	r7, #48	; 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000
 8001914:	431bde83 	.word	0x431bde83
 8001918:	20002ac8 	.word	0x20002ac8
 800191c:	40012c00 	.word	0x40012c00

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <HardFault_Handler+0x4>

08001932 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <MemManage_Handler+0x4>

08001938 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <BusFault_Handler+0x4>

0800193e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <UsageFault_Handler+0x4>

08001944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <TIM1_UP_IRQHandler+0x10>)
 8001956:	f002 fef1 	bl	800473c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20002ac8 	.word	0x20002ac8

08001964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001970:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001972:	e003      	b.n	800197c <LoopCopyDataInit>

08001974 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001976:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001978:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800197a:	3104      	adds	r1, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800197c:	480a      	ldr	r0, [pc, #40]	; (80019a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001980:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001982:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001984:	d3f6      	bcc.n	8001974 <CopyDataInit>
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001988:	e002      	b.n	8001990 <LoopFillZerobss>

0800198a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800198c:	f842 3b04 	str.w	r3, [r2], #4

08001990 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001992:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001994:	d3f9      	bcc.n	800198a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001996:	f7ff ffe5 	bl	8001964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199a:	f005 fca7 	bl	80072ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800199e:	f7fe fbdf 	bl	8000160 <main>
  bx lr
 80019a2:	4770      	bx	lr
  ldr r3, =_sidata
 80019a4:	08008090 	.word	0x08008090
  ldr r0, =_sdata
 80019a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019ac:	2000004c 	.word	0x2000004c
  ldr r2, =_sbss
 80019b0:	2000004c 	.word	0x2000004c
  ldr r3, = _ebss
 80019b4:	20002b54 	.word	0x20002b54

080019b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC1_2_IRQHandler>
	...

080019bc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4604      	mov	r4, r0
 80019c4:	4608      	mov	r0, r1
 80019c6:	4611      	mov	r1, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	4603      	mov	r3, r0
 80019d0:	71bb      	strb	r3, [r7, #6]
 80019d2:	460b      	mov	r3, r1
 80019d4:	80bb      	strh	r3, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d902      	bls.n	80019e6 <socket+0x2a>
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	e0d3      	b.n	8001b8e <socket+0x1d2>
	switch(protocol)
 80019e6:	79bb      	ldrb	r3, [r7, #6]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	db03      	blt.n	80019f4 <socket+0x38>
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	dd04      	ble.n	80019fa <socket+0x3e>
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d002      	beq.n	80019fa <socket+0x3e>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80019f4:	f06f 0304 	mvn.w	r3, #4
 80019f8:	e0c9      	b.n	8001b8e <socket+0x1d2>
         break;
 80019fa:	bf00      	nop
	}
	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	f003 0306 	and.w	r3, r3, #6
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <socket+0x50>
 8001a06:	f06f 0305 	mvn.w	r3, #5
 8001a0a:	e0c0      	b.n	8001b8e <socket+0x1d2>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif

	if(flag != 0)
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d025      	beq.n	8001a5e <socket+0xa2>
	{
   	switch(protocol)
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d002      	beq.n	8001a1e <socket+0x62>
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d008      	beq.n	8001a2e <socket+0x72>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001a1c:	e024      	b.n	8001a68 <socket+0xac>
   	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11c      	bne.n	8001a62 <socket+0xa6>
 8001a28:	f06f 0305 	mvn.w	r3, #5
 8001a2c:	e0af      	b.n	8001b8e <socket+0x1d2>
   	      if(flag & SF_IGMP_VER2)
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <socket+0x8a>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db02      	blt.n	8001a46 <socket+0x8a>
 8001a40:	f06f 0305 	mvn.w	r3, #5
 8001a44:	e0a3      	b.n	8001b8e <socket+0x1d2>
      	      if(flag & SF_UNI_BLOCK)
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00a      	beq.n	8001a66 <socket+0xaa>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db06      	blt.n	8001a66 <socket+0xaa>
 8001a58:	f06f 0305 	mvn.w	r3, #5
 8001a5c:	e097      	b.n	8001b8e <socket+0x1d2>
   	}
   }
 8001a5e:	bf00      	nop
 8001a60:	e002      	b.n	8001a68 <socket+0xac>
   	      break;
 8001a62:	bf00      	nop
 8001a64:	e000      	b.n	8001a68 <socket+0xac>
   	      break;
 8001a66:	bf00      	nop
	close(sn);
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f89e 	bl	8001bac <close>
	setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	3301      	adds	r3, #1
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a7e:	f023 030f 	bic.w	r3, r3, #15
 8001a82:	b25a      	sxtb	r2, r3
 8001a84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f000 fba4 	bl	80021dc <WIZCHIP_WRITE>
	if(!port)
 8001a94:	88bb      	ldrh	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d110      	bne.n	8001abc <socket+0x100>
	{
	   port = sock_any_port++;
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <socket+0x1dc>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	b291      	uxth	r1, r2
 8001aa2:	4a3d      	ldr	r2, [pc, #244]	; (8001b98 <socket+0x1dc>)
 8001aa4:	8011      	strh	r1, [r2, #0]
 8001aa6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <socket+0x1dc>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d103      	bne.n	8001abc <socket+0x100>
 8001ab4:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <socket+0x1dc>)
 8001ab6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001aba:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac8:	461a      	mov	r2, r3
 8001aca:	88bb      	ldrh	r3, [r7, #4]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	f000 fb81 	bl	80021dc <WIZCHIP_WRITE>
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	3301      	adds	r3, #1
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	88bb      	ldrh	r3, [r7, #4]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f000 fb74 	bl	80021dc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	3301      	adds	r3, #1
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b00:	2101      	movs	r1, #1
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fb6a 	bl	80021dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001b08:	bf00      	nop
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	3301      	adds	r3, #1
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fb30 	bl	800217c <WIZCHIP_READ>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f3      	bne.n	8001b0a <socket+0x14e>
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 0201 	and.w	r2, r3, #1
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	b21a      	sxth	r2, r3
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <socket+0x1e0>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <socket+0x1e0>)
 8001b3e:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2201      	movs	r2, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <socket+0x1e4>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	4013      	ands	r3, r2
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <socket+0x1e4>)
 8001b5c:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <socket+0x1e8>)
 8001b62:	2100      	movs	r1, #0
 8001b64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = 0;
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <socket+0x1ec>)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001b70:	bf00      	nop
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	3301      	adds	r3, #1
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fafc 	bl	800217c <WIZCHIP_READ>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f3      	beq.n	8001b72 <socket+0x1b6>
   return (int8_t)sn;
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd90      	pop	{r4, r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000001c 	.word	0x2000001c
 8001b9c:	20000068 	.word	0x20000068
 8001ba0:	2000006a 	.word	0x2000006a
 8001ba4:	2000006c 	.word	0x2000006c
 8001ba8:	2000007c 	.word	0x2000007c

08001bac <close>:

int8_t close(uint8_t sn)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d902      	bls.n	8001bc2 <close+0x16>
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc0:	e046      	b.n	8001c50 <close+0xa4>

	setSn_CR(sn,Sn_CR_CLOSE);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bce:	2110      	movs	r1, #16
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fb03 	bl	80021dc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001bd6:	bf00      	nop
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	3301      	adds	r3, #1
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fac9 	bl	800217c <WIZCHIP_READ>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f3      	bne.n	8001bd8 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001bfc:	211f      	movs	r1, #31
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 faec 	bl	80021dc <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2201      	movs	r2, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	b21a      	sxth	r2, r3
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <close+0xac>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <close+0xac>)
 8001c20:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <close+0xb0>)
 8001c26:	2100      	movs	r1, #0
 8001c28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <close+0xb4>)
 8001c30:	2100      	movs	r1, #0
 8001c32:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001c34:	bf00      	nop
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 fa9a 	bl	800217c <WIZCHIP_READ>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f3      	bne.n	8001c36 <close+0x8a>
	return SOCK_OK;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000006a 	.word	0x2000006a
 8001c5c:	2000006c 	.word	0x2000006c
 8001c60:	2000007c 	.word	0x2000007c

08001c64 <listen>:

int8_t listen(uint8_t sn)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d902      	bls.n	8001c7a <listen+0x16>
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
 8001c78:	e055      	b.n	8001d26 <listen+0xc2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	3301      	adds	r3, #1
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 fa7a 	bl	800217c <WIZCHIP_READ>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d002      	beq.n	8001c98 <listen+0x34>
 8001c92:	f06f 0304 	mvn.w	r3, #4
 8001c96:	e046      	b.n	8001d26 <listen+0xc2>
	CHECK_SOCKINIT();
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fa69 	bl	800217c <WIZCHIP_READ>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b13      	cmp	r3, #19
 8001cae:	d002      	beq.n	8001cb6 <listen+0x52>
 8001cb0:	f06f 0302 	mvn.w	r3, #2
 8001cb4:	e037      	b.n	8001d26 <listen+0xc2>
	setSn_CR(sn,Sn_CR_LISTEN);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	3301      	adds	r3, #1
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fa89 	bl	80021dc <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8001cca:	bf00      	nop
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 fa4f 	bl	800217c <WIZCHIP_READ>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f3      	bne.n	8001ccc <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001ce4:	e012      	b.n	8001d0c <listen+0xa8>
   {
      if(getSn_CR(sn) == SOCK_CLOSED)
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	3301      	adds	r3, #1
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fa42 	bl	800217c <WIZCHIP_READ>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <listen+0xa8>
      {
         close(sn);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff53 	bl	8001bac <close>
         return SOCKERR_SOCKCLOSED;
 8001d06:	f06f 0303 	mvn.w	r3, #3
 8001d0a:	e00c      	b.n	8001d26 <listen+0xc2>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	3301      	adds	r3, #1
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fa2f 	bl	800217c <WIZCHIP_READ>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b14      	cmp	r3, #20
 8001d22:	d1e0      	bne.n	8001ce6 <listen+0x82>
      }
   }
   return SOCK_OK;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <disconnect>:

   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d902      	bls.n	8001d46 <disconnect+0x16>
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
 8001d44:	e062      	b.n	8001e0c <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fa14 	bl	800217c <WIZCHIP_READ>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d002      	beq.n	8001d64 <disconnect+0x34>
 8001d5e:	f06f 0304 	mvn.w	r3, #4
 8001d62:	e053      	b.n	8001e0c <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	3301      	adds	r3, #1
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d70:	2108      	movs	r1, #8
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fa32 	bl	80021dc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001d78:	bf00      	nop
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	3301      	adds	r3, #1
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f9f8 	bl	800217c <WIZCHIP_READ>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f3      	bne.n	8001d7a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2201      	movs	r2, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <disconnect+0xe4>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	4013      	ands	r3, r2
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <disconnect+0xe4>)
 8001dae:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <disconnect+0xe8>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	fa42 f303 	asr.w	r3, r2, r3
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d016      	beq.n	8001df2 <disconnect+0xc2>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e021      	b.n	8001e0c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	3301      	adds	r3, #1
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f9d1 	bl	800217c <WIZCHIP_READ>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <disconnect+0xc2>
	   {
	      close(sn);
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fee0 	bl	8001bac <close>
	      return SOCKERR_TIMEOUT;
 8001dec:	f06f 030c 	mvn.w	r3, #12
 8001df0:	e00c      	b.n	8001e0c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	3301      	adds	r3, #1
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f9bc 	bl	800217c <WIZCHIP_READ>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1de      	bne.n	8001dc8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000006a 	.word	0x2000006a
 8001e18:	20000068 	.word	0x20000068

08001e1c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	81bb      	strh	r3, [r7, #12]

   CHECK_SOCKNUM();
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d902      	bls.n	8001e40 <send+0x24>
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	e0de      	b.n	8001ffe <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	3301      	adds	r3, #1
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f997 	bl	800217c <WIZCHIP_READ>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d002      	beq.n	8001e5e <send+0x42>
 8001e58:	f06f 0304 	mvn.w	r3, #4
 8001e5c:	e0cf      	b.n	8001ffe <send+0x1e2>
   CHECK_SOCKDATA();
 8001e5e:	88bb      	ldrh	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <send+0x4e>
 8001e64:	f06f 030d 	mvn.w	r3, #13
 8001e68:	e0c9      	b.n	8001ffe <send+0x1e2>
   tmp = getSn_SR(sn);
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	3301      	adds	r3, #1
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f980 	bl	800217c <WIZCHIP_READ>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b17      	cmp	r3, #23
 8001e84:	d005      	beq.n	8001e92 <send+0x76>
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	2b1c      	cmp	r3, #28
 8001e8a:	d002      	beq.n	8001e92 <send+0x76>
 8001e8c:	f06f 0306 	mvn.w	r3, #6
 8001e90:	e0b5      	b.n	8001ffe <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001e92:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <send+0x1ec>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	fa42 f303 	asr.w	r3, r2, r3
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d039      	beq.n	8001f1a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	3301      	adds	r3, #1
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f962 	bl	800217c <WIZCHIP_READ>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d019      	beq.n	8001efe <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	3301      	adds	r3, #1
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f97f 	bl	80021dc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	b21b      	sxth	r3, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	4b46      	ldr	r3, [pc, #280]	; (8002008 <send+0x1ec>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <send+0x1ec>)
 8001efa:	801a      	strh	r2, [r3, #0]
 8001efc:	e00d      	b.n	8001f1a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <send+0xfa>
      {
         close(sn);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fe4e 	bl	8001bac <close>
         return SOCKERR_TIMEOUT;
 8001f10:	f06f 030c 	mvn.w	r3, #12
 8001f14:	e073      	b.n	8001ffe <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e071      	b.n	8001ffe <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	3301      	adds	r3, #1
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f928 	bl	800217c <WIZCHIP_READ>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001f34:	88ba      	ldrh	r2, [r7, #4]
 8001f36:	89bb      	ldrh	r3, [r7, #12]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d901      	bls.n	8001f40 <send+0x124>
 8001f3c:	89bb      	ldrh	r3, [r7, #12]
 8001f3e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fa0c 	bl	8002360 <getSn_TX_FSR>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	3301      	adds	r3, #1
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f90f 	bl	800217c <WIZCHIP_READ>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b17      	cmp	r3, #23
 8001f66:	d009      	beq.n	8001f7c <send+0x160>
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	2b1c      	cmp	r3, #28
 8001f6c:	d006      	beq.n	8001f7c <send+0x160>
      {
         close(sn);
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fe1b 	bl	8001bac <close>
         return SOCKERR_SOCKSTATUS;
 8001f76:	f06f 0306 	mvn.w	r3, #6
 8001f7a:	e040      	b.n	8001ffe <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001f7c:	4b23      	ldr	r3, [pc, #140]	; (800200c <send+0x1f0>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	fa42 f303 	asr.w	r3, r2, r3
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <send+0x180>
 8001f90:	88ba      	ldrh	r2, [r7, #4]
 8001f92:	89bb      	ldrh	r3, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d901      	bls.n	8001f9c <send+0x180>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e030      	b.n	8001ffe <send+0x1e2>
      if(len <= freesize) break;
 8001f9c:	88ba      	ldrh	r2, [r7, #4]
 8001f9e:	89bb      	ldrh	r3, [r7, #12]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d900      	bls.n	8001fa6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001fa4:	e7cc      	b.n	8001f40 <send+0x124>
      if(len <= freesize) break;
 8001fa6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001fa8:	88ba      	ldrh	r2, [r7, #4]
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	6839      	ldr	r1, [r7, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fa6c 	bl	800248c <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	3301      	adds	r3, #1
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f90a 	bl	80021dc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001fc8:	bf00      	nop
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	3301      	adds	r3, #1
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f8d0 	bl	800217c <WIZCHIP_READ>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f3      	bne.n	8001fca <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <send+0x1ec>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <send+0x1ec>)
 8001ffa:	801a      	strh	r2, [r3, #0]
   return len;
 8001ffc:	88bb      	ldrh	r3, [r7, #4]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000006a 	.word	0x2000006a
 800200c:	20000068 	.word	0x20000068

08002010 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
 800201c:	4613      	mov	r3, r2
 800201e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	81bb      	strh	r3, [r7, #12]
   CHECK_SOCKNUM();
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	2b08      	cmp	r3, #8
 800202c:	d902      	bls.n	8002034 <recv+0x24>
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	e09c      	b.n	800216e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	3301      	adds	r3, #1
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f89d 	bl	800217c <WIZCHIP_READ>
 8002042:	4603      	mov	r3, r0
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	2b01      	cmp	r3, #1
 800204a:	d002      	beq.n	8002052 <recv+0x42>
 800204c:	f06f 0304 	mvn.w	r3, #4
 8002050:	e08d      	b.n	800216e <recv+0x15e>
   CHECK_SOCKDATA();
 8002052:	88bb      	ldrh	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <recv+0x4e>
 8002058:	f06f 030d 	mvn.w	r3, #13
 800205c:	e087      	b.n	800216e <recv+0x15e>

   recvsize = getSn_RxMAX(sn);
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	3301      	adds	r3, #1
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f886 	bl	800217c <WIZCHIP_READ>
 8002070:	4603      	mov	r3, r0
 8002072:	b29b      	uxth	r3, r3
 8002074:	029b      	lsls	r3, r3, #10
 8002076:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002078:	89ba      	ldrh	r2, [r7, #12]
 800207a:	88bb      	ldrh	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d201      	bcs.n	8002084 <recv+0x74>
 8002080:	89bb      	ldrh	r3, [r7, #12]
 8002082:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f9b5 	bl	80023f6 <getSn_RX_RSR>
 800208c:	4603      	mov	r3, r0
 800208e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	3301      	adds	r3, #1
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800209c:	4618      	mov	r0, r3
 800209e:	f000 f86d 	bl	800217c <WIZCHIP_READ>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b17      	cmp	r3, #23
 80020aa:	d026      	beq.n	80020fa <recv+0xea>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	2b1c      	cmp	r3, #28
 80020b0:	d11c      	bne.n	80020ec <recv+0xdc>
         {
            if(recvsize != 0) break;
 80020b2:	89bb      	ldrh	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d133      	bne.n	8002120 <recv+0x110>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f950 	bl	8002360 <getSn_TX_FSR>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461c      	mov	r4, r3
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3301      	adds	r3, #1
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 f853 	bl	800217c <WIZCHIP_READ>
 80020d6:	4603      	mov	r3, r0
 80020d8:	029b      	lsls	r3, r3, #10
 80020da:	429c      	cmp	r4, r3
 80020dc:	d10d      	bne.n	80020fa <recv+0xea>
            {
               close(sn);
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fd63 	bl	8001bac <close>
               return SOCKERR_SOCKSTATUS;
 80020e6:	f06f 0306 	mvn.w	r3, #6
 80020ea:	e040      	b.n	800216e <recv+0x15e>
            }
         }
         else
         {
            close(sn);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fd5c 	bl	8001bac <close>
            return SOCKERR_SOCKSTATUS;
 80020f4:	f06f 0306 	mvn.w	r3, #6
 80020f8:	e039      	b.n	800216e <recv+0x15e>
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <recv+0x168>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	fa42 f303 	asr.w	r3, r2, r3
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <recv+0x108>
 800210e:	89bb      	ldrh	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <recv+0x108>
 8002114:	2300      	movs	r3, #0
 8002116:	e02a      	b.n	800216e <recv+0x15e>
      if(recvsize != 0) break;
 8002118:	89bb      	ldrh	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <recv+0x114>
      recvsize = getSn_RX_RSR(sn);
 800211e:	e7b1      	b.n	8002084 <recv+0x74>
            if(recvsize != 0) break;
 8002120:	bf00      	nop
 8002122:	e000      	b.n	8002126 <recv+0x116>
      if(recvsize != 0) break;
 8002124:	bf00      	nop
   };
   if(recvsize < len) len = recvsize;
 8002126:	89ba      	ldrh	r2, [r7, #12]
 8002128:	88bb      	ldrh	r3, [r7, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	d201      	bcs.n	8002132 <recv+0x122>
 800212e:	89bb      	ldrh	r3, [r7, #12]
 8002130:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002132:	88ba      	ldrh	r2, [r7, #4]
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	6839      	ldr	r1, [r7, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f000 fa03 	bl	8002544 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	3301      	adds	r3, #1
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800214a:	2140      	movs	r1, #64	; 0x40
 800214c:	4618      	mov	r0, r3
 800214e:	f000 f845 	bl	80021dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002152:	bf00      	nop
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	3301      	adds	r3, #1
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f80b 	bl	800217c <WIZCHIP_READ>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f3      	bne.n	8002154 <recv+0x144>
   return len;
 800216c:	88bb      	ldrh	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop
 8002178:	20000068 	.word	0x20000068

0800217c <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <WIZCHIP_READ+0x5c>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4798      	blx	r3
   WIZCHIP.CS._select();
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <WIZCHIP_READ+0x5c>)
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	4798      	blx	r3
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <WIZCHIP_READ+0x5c>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	0c12      	lsrs	r2, r2, #16
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	4610      	mov	r0, r2
 800219c:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <WIZCHIP_READ+0x5c>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	0a12      	lsrs	r2, r2, #8
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	4610      	mov	r0, r2
 80021aa:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <WIZCHIP_READ+0x5c>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	4610      	mov	r0, r2
 80021b6:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <WIZCHIP_READ+0x5c>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4798      	blx	r3
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"
#endif

   WIZCHIP.CS._deselect();
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <WIZCHIP_READ+0x5c>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <WIZCHIP_READ+0x5c>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4798      	blx	r3
   return ret;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000020 	.word	0x20000020

080021dc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
    WIZCHIP_CRITICAL_ENTER();
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <WIZCHIP_WRITE+0x68>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4798      	blx	r3
    WIZCHIP.CS._select();
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <WIZCHIP_WRITE+0x68>)
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	607b      	str	r3, [r7, #4]
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <WIZCHIP_WRITE+0x68>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	0c12      	lsrs	r2, r2, #16
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	4610      	mov	r0, r2
 8002208:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <WIZCHIP_WRITE+0x68>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	0a12      	lsrs	r2, r2, #8
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	4610      	mov	r0, r2
 8002216:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <WIZCHIP_WRITE+0x68>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	4610      	mov	r0, r2
 8002222:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <WIZCHIP_WRITE+0x68>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	4610      	mov	r0, r2
 800222c:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <WIZCHIP_WRITE+0x68>)
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <WIZCHIP_WRITE+0x68>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4798      	blx	r3
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000020 	.word	0x20000020

08002248 <WIZCHIP_READ_BUF>:

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <WIZCHIP_READ_BUF+0x84>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <WIZCHIP_READ_BUF+0x84>)
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <WIZCHIP_READ_BUF+0x84>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	0c12      	lsrs	r2, r2, #16
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4610      	mov	r0, r2
 8002276:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <WIZCHIP_READ_BUF+0x84>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	0a12      	lsrs	r2, r2, #8
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	4610      	mov	r0, r2
 8002284:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <WIZCHIP_READ_BUF+0x84>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	4610      	mov	r0, r2
 8002290:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8002292:	2300      	movs	r3, #0
 8002294:	82fb      	strh	r3, [r7, #22]
 8002296:	e00a      	b.n	80022ae <WIZCHIP_READ_BUF+0x66>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <WIZCHIP_READ_BUF+0x84>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	8afa      	ldrh	r2, [r7, #22]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	188c      	adds	r4, r1, r2
 80022a2:	4798      	blx	r3
 80022a4:	4603      	mov	r3, r0
 80022a6:	7023      	strb	r3, [r4, #0]
      for(i = 0; i < len; i++,j)
 80022a8:	8afb      	ldrh	r3, [r7, #22]
 80022aa:	3301      	adds	r3, #1
 80022ac:	82fb      	strh	r3, [r7, #22]
 80022ae:	8afa      	ldrh	r2, [r7, #22]
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3f0      	bcc.n	8002298 <WIZCHIP_READ_BUF+0x50>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <WIZCHIP_READ_BUF+0x84>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <WIZCHIP_READ_BUF+0x84>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4798      	blx	r3
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd90      	pop	{r4, r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000020 	.word	0x20000020

080022d0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	4613      	mov	r3, r2
 80022dc:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <WIZCHIP_WRITE_BUF+0x8c>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	4798      	blx	r3
   WIZCHIP.CS._select();
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <WIZCHIP_WRITE_BUF+0x8c>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <WIZCHIP_WRITE_BUF+0x8c>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	0c12      	lsrs	r2, r2, #16
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	4610      	mov	r0, r2
 8002306:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <WIZCHIP_WRITE_BUF+0x8c>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	0a12      	lsrs	r2, r2, #8
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	4610      	mov	r0, r2
 8002314:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <WIZCHIP_WRITE_BUF+0x8c>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	4610      	mov	r0, r2
 8002320:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8002322:	2300      	movs	r3, #0
 8002324:	82fb      	strh	r3, [r7, #22]
 8002326:	e00a      	b.n	800233e <WIZCHIP_WRITE_BUF+0x6e>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <WIZCHIP_WRITE_BUF+0x8c>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	8afa      	ldrh	r2, [r7, #22]
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	440a      	add	r2, r1
 8002332:	7812      	ldrb	r2, [r2, #0]
 8002334:	4610      	mov	r0, r2
 8002336:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8002338:	8afb      	ldrh	r3, [r7, #22]
 800233a:	3301      	adds	r3, #1
 800233c:	82fb      	strh	r3, [r7, #22]
 800233e:	8afa      	ldrh	r2, [r7, #22]
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	429a      	cmp	r2, r3
 8002344:	d3f0      	bcc.n	8002328 <WIZCHIP_WRITE_BUF+0x58>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <WIZCHIP_WRITE_BUF+0x8c>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <WIZCHIP_WRITE_BUF+0x8c>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4798      	blx	r3
}
 8002352:	bf00      	nop
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000020 	.word	0x20000020

08002360 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800236a:	2300      	movs	r3, #0
 800236c:	81fb      	strh	r3, [r7, #14]
 800236e:	2300      	movs	r3, #0
 8002370:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	3301      	adds	r3, #1
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fefc 	bl	800217c <WIZCHIP_READ>
 8002384:	4603      	mov	r3, r0
 8002386:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002388:	89bb      	ldrh	r3, [r7, #12]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b29c      	uxth	r4, r3
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	3301      	adds	r3, #1
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff feee 	bl	800217c <WIZCHIP_READ>
 80023a0:	4603      	mov	r3, r0
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	4423      	add	r3, r4
 80023a6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80023a8:	89bb      	ldrh	r3, [r7, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01a      	beq.n	80023e4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	3301      	adds	r3, #1
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fede 	bl	800217c <WIZCHIP_READ>
 80023c0:	4603      	mov	r3, r0
 80023c2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80023c4:	89fb      	ldrh	r3, [r7, #14]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	b29c      	uxth	r4, r3
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	3301      	adds	r3, #1
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fed0 	bl	800217c <WIZCHIP_READ>
 80023dc:	4603      	mov	r3, r0
 80023de:	b29b      	uxth	r3, r3
 80023e0:	4423      	add	r3, r4
 80023e2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80023e4:	89fa      	ldrh	r2, [r7, #14]
 80023e6:	89bb      	ldrh	r3, [r7, #12]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1c2      	bne.n	8002372 <getSn_TX_FSR+0x12>
   return val;
 80023ec:	89fb      	ldrh	r3, [r7, #14]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}

080023f6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80023f6:	b590      	push	{r4, r7, lr}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002400:	2300      	movs	r3, #0
 8002402:	81fb      	strh	r3, [r7, #14]
 8002404:	2300      	movs	r3, #0
 8002406:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	3301      	adds	r3, #1
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff feb1 	bl	800217c <WIZCHIP_READ>
 800241a:	4603      	mov	r3, r0
 800241c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800241e:	89bb      	ldrh	r3, [r7, #12]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	b29c      	uxth	r4, r3
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	3301      	adds	r3, #1
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fea3 	bl	800217c <WIZCHIP_READ>
 8002436:	4603      	mov	r3, r0
 8002438:	b29b      	uxth	r3, r3
 800243a:	4423      	add	r3, r4
 800243c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800243e:	89bb      	ldrh	r3, [r7, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01a      	beq.n	800247a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	3301      	adds	r3, #1
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fe93 	bl	800217c <WIZCHIP_READ>
 8002456:	4603      	mov	r3, r0
 8002458:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800245a:	89fb      	ldrh	r3, [r7, #14]
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	b29c      	uxth	r4, r3
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	3301      	adds	r3, #1
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe85 	bl	800217c <WIZCHIP_READ>
 8002472:	4603      	mov	r3, r0
 8002474:	b29b      	uxth	r3, r3
 8002476:	4423      	add	r3, r4
 8002478:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800247a:	89fa      	ldrh	r2, [r7, #14]
 800247c:	89bb      	ldrh	r3, [r7, #12]
 800247e:	429a      	cmp	r2, r3
 8002480:	d1c2      	bne.n	8002408 <getSn_RX_RSR+0x12>
   return val;
 8002482:	89fb      	ldrh	r3, [r7, #14]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}

0800248c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
 8002498:	4613      	mov	r3, r2
 800249a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
   if(len == 0)  return;
 80024a4:	88bb      	ldrh	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d048      	beq.n	800253c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	3301      	adds	r3, #1
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fe60 	bl	800217c <WIZCHIP_READ>
 80024bc:	4603      	mov	r3, r0
 80024be:	b29b      	uxth	r3, r3
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	b29c      	uxth	r4, r3
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	3301      	adds	r3, #1
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fe53 	bl	800217c <WIZCHIP_READ>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4423      	add	r3, r4
 80024dc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80024de:	89fb      	ldrh	r3, [r7, #14]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	79fa      	ldrb	r2, [r7, #7]
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	3202      	adds	r2, #2
 80024e8:	00d2      	lsls	r2, r2, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80024ee:	88bb      	ldrh	r3, [r7, #4]
 80024f0:	461a      	mov	r2, r3
 80024f2:	6839      	ldr	r1, [r7, #0]
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f7ff feeb 	bl	80022d0 <WIZCHIP_WRITE_BUF>

   ptr += len;
 80024fa:	89fa      	ldrh	r2, [r7, #14]
 80024fc:	88bb      	ldrh	r3, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	3301      	adds	r3, #1
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800250e:	461a      	mov	r2, r3
 8002510:	89fb      	ldrh	r3, [r7, #14]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	b29b      	uxth	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	4619      	mov	r1, r3
 800251a:	4610      	mov	r0, r2
 800251c:	f7ff fe5e 	bl	80021dc <WIZCHIP_WRITE>
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	3301      	adds	r3, #1
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800252c:	461a      	mov	r2, r3
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	4619      	mov	r1, r3
 8002534:	4610      	mov	r0, r2
 8002536:	f7ff fe51 	bl	80021dc <WIZCHIP_WRITE>
 800253a:	e000      	b.n	800253e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800253c:	bf00      	nop
}
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}

08002544 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
 8002550:	4613      	mov	r3, r2
 8002552:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]

   if(len == 0) return;
 800255c:	88bb      	ldrh	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d048      	beq.n	80025f4 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	3301      	adds	r3, #1
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fe04 	bl	800217c <WIZCHIP_READ>
 8002574:	4603      	mov	r3, r0
 8002576:	b29b      	uxth	r3, r3
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	b29c      	uxth	r4, r3
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	3301      	adds	r3, #1
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fdf7 	bl	800217c <WIZCHIP_READ>
 800258e:	4603      	mov	r3, r0
 8002590:	b29b      	uxth	r3, r3
 8002592:	4423      	add	r3, r4
 8002594:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	79fa      	ldrb	r2, [r7, #7]
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	3203      	adds	r2, #3
 80025a0:	00d2      	lsls	r2, r2, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80025a6:	88bb      	ldrh	r3, [r7, #4]
 80025a8:	461a      	mov	r2, r3
 80025aa:	6839      	ldr	r1, [r7, #0]
 80025ac:	68b8      	ldr	r0, [r7, #8]
 80025ae:	f7ff fe4b 	bl	8002248 <WIZCHIP_READ_BUF>
   ptr += len;
 80025b2:	89fa      	ldrh	r2, [r7, #14]
 80025b4:	88bb      	ldrh	r3, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	81fb      	strh	r3, [r7, #14]

   setSn_RX_RD(sn,ptr);
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	3301      	adds	r3, #1
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80025c6:	461a      	mov	r2, r3
 80025c8:	89fb      	ldrh	r3, [r7, #14]
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f7ff fe02 	bl	80021dc <WIZCHIP_WRITE>
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	3301      	adds	r3, #1
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80025e4:	461a      	mov	r2, r3
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	4619      	mov	r1, r3
 80025ec:	4610      	mov	r0, r2
 80025ee:	f7ff fdf5 	bl	80021dc <WIZCHIP_WRITE>
 80025f2:	e000      	b.n	80025f6 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80025f4:	bf00      	nop
}
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd90      	pop	{r4, r7, pc}

080025fc <wizchip_cris_enter>:
/**
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_enter(void)           {};
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <wizchip_cris_exit>:
/**
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_exit(void)          {};
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <wizchip_cs_select>:
/**
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_select(void)            {};
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <wizchip_cs_deselect>:
/**
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_deselect(void)          {};
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <wizchip_bus_readbyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20140501 : Explict pointer type casting
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); };
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <wizchip_bus_writebyte>:
 * null function is called.
 */

//M20140501 : Explict pointer type casting
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*) AddrSel) = wb; };
void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; };
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <wizchip_spi_readbyte>:
/**
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_spi_readbyte(void)        {return 0;};
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
 8002664:	2300      	movs	r3, #0
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <wizchip_spi_writebyte>:
/**
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_spi_writebyte(uint8_t wb) {};
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
	...

08002684 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <reg_wizchip_cs_cbfunc+0x16>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <reg_wizchip_cs_cbfunc+0x3c>)
 800269c:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <reg_wizchip_cs_cbfunc+0x40>)
 800269e:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <reg_wizchip_cs_cbfunc+0x3c>)
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <reg_wizchip_cs_cbfunc+0x44>)
 80026a4:	615a      	str	r2, [r3, #20]
 80026a6:	e005      	b.n	80026b4 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80026a8:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <reg_wizchip_cs_cbfunc+0x3c>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <reg_wizchip_cs_cbfunc+0x3c>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6153      	str	r3, [r2, #20]
   }
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000020 	.word	0x20000020
 80026c4:	08002615 	.word	0x08002615
 80026c8:	08002621 	.word	0x08002621

080026cc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80026d6:	bf00      	nop
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <reg_wizchip_spi_cbfunc+0x48>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f9      	beq.n	80026d8 <reg_wizchip_spi_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <reg_wizchip_spi_cbfunc+0x24>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d106      	bne.n	80026fe <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <reg_wizchip_spi_cbfunc+0x48>)
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <reg_wizchip_spi_cbfunc+0x4c>)
 80026f4:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <reg_wizchip_spi_cbfunc+0x48>)
 80026f8:	4a08      	ldr	r2, [pc, #32]	; (800271c <reg_wizchip_spi_cbfunc+0x50>)
 80026fa:	61da      	str	r2, [r3, #28]
 80026fc:	e005      	b.n	800270a <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <reg_wizchip_spi_cbfunc+0x48>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002704:	4a03      	ldr	r2, [pc, #12]	; (8002714 <reg_wizchip_spi_cbfunc+0x48>)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	61d3      	str	r3, [r2, #28]
   }
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	20000020 	.word	0x20000020
 8002718:	08002661 	.word	0x08002661
 800271c:	0800266f 	.word	0x0800266f

08002720 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	75fb      	strb	r3, [r7, #23]
   uint8_t* ptmp[2] = {0,0};
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	f200 80c2 	bhi.w	80028c4 <ctlwizchip+0x1a4>
 8002740:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <ctlwizchip+0x28>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	08002789 	.word	0x08002789
 800274c:	0800278f 	.word	0x0800278f
 8002750:	080027bb 	.word	0x080027bb
 8002754:	080027af 	.word	0x080027af
 8002758:	080027c9 	.word	0x080027c9
 800275c:	080027d5 	.word	0x080027d5
 8002760:	080027e3 	.word	0x080027e3
 8002764:	08002809 	.word	0x08002809
 8002768:	0800282f 	.word	0x0800282f
 800276c:	08002869 	.word	0x08002869
 8002770:	0800286f 	.word	0x0800286f
 8002774:	08002877 	.word	0x08002877
 8002778:	080028cb 	.word	0x080028cb
 800277c:	0800287f 	.word	0x0800287f
 8002780:	0800288d 	.word	0x0800288d
 8002784:	080028a9 	.word	0x080028a9
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002788:	f000 f8e6 	bl	8002958 <wizchip_sw_reset>
         break;
 800278c:	e09e      	b.n	80028cc <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3308      	adds	r3, #8
 800279c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f923 	bl	80029f0 <wizchip_init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	e08f      	b.n	80028ce <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f9a8 	bl	8002b08 <wizchip_clrinterrupt>
         break;
 80027b8:	e088      	b.n	80028cc <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80027ba:	f000 f9c3 	bl	8002b44 <wizchip_getinterrupt>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	801a      	strh	r2, [r3, #0]
         break;
 80027c6:	e081      	b.n	80028cc <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 f9de 	bl	8002b8e <wizchip_setinterruptmask>
         break;
 80027d2:	e07b      	b.n	80028cc <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80027d4:	f000 f9f6 	bl	8002bc4 <wizchip_getinterruptmask>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	801a      	strh	r2, [r3, #0]
         break;
 80027e0:	e074      	b.n	80028cc <ctlwizchip+0x1ac>
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	4619      	mov	r1, r3
 80027ee:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80027f2:	f7ff fcf3 	bl	80021dc <WIZCHIP_WRITE>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002802:	f7ff fceb 	bl	80021dc <WIZCHIP_WRITE>
         break;
 8002806:	e061      	b.n	80028cc <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8002808:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800280c:	f7ff fcb6 	bl	800217c <WIZCHIP_READ>
 8002810:	4603      	mov	r3, r0
 8002812:	b29b      	uxth	r3, r3
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	b29c      	uxth	r4, r3
 8002818:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800281c:	f7ff fcae 	bl	800217c <WIZCHIP_READ>
 8002820:	4603      	mov	r3, r0
 8002822:	b29b      	uxth	r3, r3
 8002824:	4423      	add	r3, r4
 8002826:	b29a      	uxth	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	801a      	strh	r2, [r3, #0]
         break;
 800282c:	e04e      	b.n	80028cc <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800282e:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <ctlwizchip+0x1b8>)
 8002830:	789a      	ldrb	r2, [r3, #2]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <ctlwizchip+0x1b8>)
 800283c:	78d2      	ldrb	r2, [r2, #3]
 800283e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	3302      	adds	r3, #2
 8002844:	4a24      	ldr	r2, [pc, #144]	; (80028d8 <ctlwizchip+0x1b8>)
 8002846:	7912      	ldrb	r2, [r2, #4]
 8002848:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	3303      	adds	r3, #3
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <ctlwizchip+0x1b8>)
 8002850:	7952      	ldrb	r2, [r2, #5]
 8002852:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	3304      	adds	r3, #4
 8002858:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <ctlwizchip+0x1b8>)
 800285a:	7992      	ldrb	r2, [r2, #6]
 800285c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	3305      	adds	r3, #5
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
         break;
 8002866:	e031      	b.n	80028cc <ctlwizchip+0x1ac>
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002868:	f000 f9ff 	bl	8002c6a <wizphy_reset>
         break;
 800286c:	e02e      	b.n	80028cc <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800286e:	6838      	ldr	r0, [r7, #0]
 8002870:	f000 fa22 	bl	8002cb8 <wizphy_setphyconf>
         break;
 8002874:	e02a      	b.n	80028cc <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002876:	6838      	ldr	r0, [r7, #0]
 8002878:	f000 fa60 	bl	8002d3c <wizphy_getphyconf>
         break;
 800287c:	e026      	b.n	80028cc <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 faa3 	bl	8002dce <wizphy_setphypmode>
 8002888:	4603      	mov	r3, r0
 800288a:	e020      	b.n	80028ce <ctlwizchip+0x1ae>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800288c:	f000 f9d4 	bl	8002c38 <wizphy_getphypmode>
 8002890:	4603      	mov	r3, r0
 8002892:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2bff      	cmp	r3, #255	; 0xff
 8002898:	d102      	bne.n	80028a0 <ctlwizchip+0x180>
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
 800289e:	e016      	b.n	80028ce <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	7dfa      	ldrb	r2, [r7, #23]
 80028a4:	701a      	strb	r2, [r3, #0]
         break;
 80028a6:	e011      	b.n	80028cc <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80028a8:	f000 f9af 	bl	8002c0a <wizphy_getphylink>
 80028ac:	4603      	mov	r3, r0
 80028ae:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	2bff      	cmp	r3, #255	; 0xff
 80028b4:	d102      	bne.n	80028bc <ctlwizchip+0x19c>
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ba:	e008      	b.n	80028ce <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	7dfa      	ldrb	r2, [r7, #23]
 80028c0:	701a      	strb	r2, [r3, #0]
         break;
 80028c2:	e003      	b.n	80028cc <ctlwizchip+0x1ac>
      default:
         return -1;
 80028c4:	f04f 33ff 	mov.w	r3, #4294967295
 80028c8:	e001      	b.n	80028ce <ctlwizchip+0x1ae>
         break;
 80028ca:	bf00      	nop
   }
   return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd90      	pop	{r4, r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000020 	.word	0x20000020

080028dc <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]

   switch(cntype)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	2b05      	cmp	r3, #5
 80028ec:	d82c      	bhi.n	8002948 <ctlnetwork+0x6c>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <ctlnetwork+0x18>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	0800290d 	.word	0x0800290d
 80028f8:	08002915 	.word	0x08002915
 80028fc:	0800291d 	.word	0x0800291d
 8002900:	0800292b 	.word	0x0800292b
 8002904:	08002939 	.word	0x08002939
 8002908:	08002941 	.word	0x08002941
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800290c:	6838      	ldr	r0, [r7, #0]
 800290e:	f000 faa9 	bl	8002e64 <wizchip_setnetinfo>
         break;
 8002912:	e01c      	b.n	800294e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002914:	6838      	ldr	r0, [r7, #0]
 8002916:	f000 fae5 	bl	8002ee4 <wizchip_getnetinfo>
         break;
 800291a:	e018      	b.n	800294e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fb1f 	bl	8002f64 <wizchip_setnetmode>
 8002926:	4603      	mov	r3, r0
 8002928:	e012      	b.n	8002950 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800292a:	f000 fb3d 	bl	8002fa8 <wizchip_getnetmode>
 800292e:	4603      	mov	r3, r0
 8002930:	461a      	mov	r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	701a      	strb	r2, [r3, #0]
         break;
 8002936:	e00a      	b.n	800294e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8002938:	6838      	ldr	r0, [r7, #0]
 800293a:	f000 fb3d 	bl	8002fb8 <wizchip_settimeout>
         break;
 800293e:	e006      	b.n	800294e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002940:	6838      	ldr	r0, [r7, #0]
 8002942:	f000 fb5a 	bl	8002ffa <wizchip_gettimeout>
         break;
 8002946:	e002      	b.n	800294e <ctlnetwork+0x72>
      default:
         return -1;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
 800294c:	e000      	b.n	8002950 <ctlnetwork+0x74>
   }
   return 0;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4];
   uint8_t mac[6];
   getSHAR(mac);
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	2206      	movs	r2, #6
 8002962:	4619      	mov	r1, r3
 8002964:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002968:	f7ff fc6e 	bl	8002248 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2204      	movs	r2, #4
 8002972:	4619      	mov	r1, r3
 8002974:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002978:	f7ff fc66 	bl	8002248 <WIZCHIP_READ_BUF>
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	2204      	movs	r2, #4
 8002982:	4619      	mov	r1, r3
 8002984:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002988:	f7ff fc5e 	bl	8002248 <WIZCHIP_READ_BUF>
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	2204      	movs	r2, #4
 8002992:	4619      	mov	r1, r3
 8002994:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002998:	f7ff fc56 	bl	8002248 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	2000      	movs	r0, #0
 80029a0:	f7ff fc1c 	bl	80021dc <WIZCHIP_WRITE>
   getMR(); // for delay
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7ff fbe9 	bl	800217c <WIZCHIP_READ>
   setSHAR(mac);
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2206      	movs	r2, #6
 80029ae:	4619      	mov	r1, r3
 80029b0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80029b4:	f7ff fc8c 	bl	80022d0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	2204      	movs	r2, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029c4:	f7ff fc84 	bl	80022d0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80029c8:	f107 0310 	add.w	r3, r7, #16
 80029cc:	2204      	movs	r2, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80029d4:	f7ff fc7c 	bl	80022d0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	2204      	movs	r2, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80029e4:	f7ff fc74 	bl	80022d0 <WIZCHIP_WRITE_BUF>
}
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80029fe:	f7ff ffab 	bl	8002958 <wizchip_sw_reset>
   if(txsize)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d03b      	beq.n	8002a80 <wizchip_init+0x90>
   {
      tmp = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e00e      	b.n	8002a30 <wizchip_init+0x40>
         tmp += txsize[i];
 8002a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781a      	ldrb	r2, [r3, #0]
 8002a1c:	7bbb      	ldrb	r3, [r7, #14]
 8002a1e:	4413      	add	r3, r2
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a34:	2b07      	cmp	r3, #7
 8002a36:	ddec      	ble.n	8002a12 <wizchip_init+0x22>
      if(tmp > 16) return -1;
 8002a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	dd02      	ble.n	8002a46 <wizchip_init+0x56>
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
 8002a44:	e05c      	b.n	8002b00 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
 8002a4a:	e015      	b.n	8002a78 <wizchip_init+0x88>
         setSn_TXBUF_SIZE(i, txsize[i]);
 8002a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	3301      	adds	r3, #1
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7ff fbb8 	bl	80021dc <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	73fb      	strb	r3, [r7, #15]
 8002a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7c:	2b07      	cmp	r3, #7
 8002a7e:	dde5      	ble.n	8002a4c <wizchip_init+0x5c>
   }
   if(rxsize)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03b      	beq.n	8002afe <wizchip_init+0x10e>
   {
      tmp = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]
 8002a8e:	e00e      	b.n	8002aae <wizchip_init+0xbe>
         tmp += rxsize[i];
 8002a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	7bbb      	ldrb	r3, [r7, #14]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	2b07      	cmp	r3, #7
 8002ab4:	ddec      	ble.n	8002a90 <wizchip_init+0xa0>
      if(tmp > 16) return -1;
 8002ab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	dd02      	ble.n	8002ac4 <wizchip_init+0xd4>
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	e01d      	b.n	8002b00 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	e015      	b.n	8002af6 <wizchip_init+0x106>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 8002aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7ff fb79 	bl	80021dc <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afa:	2b07      	cmp	r3, #7
 8002afc:	dde5      	ble.n	8002aca <wizchip_init+0xda>
   }
   return 0;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   ir |= sir;
   setIR(ir);
#else
   setIR(ir);
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	f023 030f 	bic.w	r3, r3, #15
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	4619      	mov	r1, r3
 8002b28:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002b2c:	f7ff fb56 	bl	80021dc <WIZCHIP_WRITE>
   setSIR(sir);
 8002b30:	7bbb      	ldrb	r3, [r7, #14]
 8002b32:	4619      	mov	r1, r3
 8002b34:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002b38:	f7ff fb50 	bl	80021dc <WIZCHIP_WRITE>
#endif
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   ir = getIR();
   sir = ir 0x0F;
#else
   ir  = getIR();
 8002b56:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002b5a:	f7ff fb0f 	bl	800217c <WIZCHIP_READ>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f023 030f 	bic.w	r3, r3, #15
 8002b64:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002b66:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002b6a:	f7ff fb07 	bl	800217c <WIZCHIP_READ>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002b72:	79bb      	ldrb	r3, [r7, #6]
 8002b74:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002b76:	88bb      	ldrh	r3, [r7, #4]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002b84:	88bb      	ldrh	r3, [r7, #4]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   imr |= simr;
   setIMR(imr);
#else
   setIMR(imr);
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002bac:	f7ff fb16 	bl	80021dc <WIZCHIP_WRITE>
   setSIMR(simr);
 8002bb0:	7bbb      	ldrb	r3, [r7, #14]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002bb8:	f7ff fb10 	bl	80021dc <WIZCHIP_WRITE>
#endif
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   imr  = getIMR();
   simr = imr 0x0F;
#else
   imr  = getIMR();
 8002bd6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002bda:	f7ff facf 	bl	800217c <WIZCHIP_READ>
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002be2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002be6:	f7ff fac9 	bl	800217c <WIZCHIP_READ>
 8002bea:	4603      	mov	r3, r0
 8002bec:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002bee:	79bb      	ldrb	r3, [r7, #6]
 8002bf0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002bf2:	88bb      	ldrh	r3, [r7, #4]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002c00:	88bb      	ldrh	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
   else
      tmp = PHY_LINK_OFF;
#elif _WIZCHIP_ == 5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002c10:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c14:	f7ff fab2 	bl	800217c <WIZCHIP_READ>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <wizphy_getphylink+0x1e>
      tmp = PHY_LINK_ON;
 8002c22:	2301      	movs	r3, #1
 8002c24:	71fb      	strb	r3, [r7, #7]
 8002c26:	e001      	b.n	8002c2c <wizphy_getphylink+0x22>
   else
      tmp = PHY_LINK_OFF;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	71fb      	strb	r3, [r7, #7]
#else
   tmp = -1;
#endif
   return tmp;
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <wizphy_getphypmode>:

#if _WIZCHIP_ > 5100

int8_t wizphy_getphypmode(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if(getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
 8002c42:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c46:	f7ff fa99 	bl	800217c <WIZCHIP_READ>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002c54:	2301      	movs	r3, #1
 8002c56:	71fb      	strb	r3, [r7, #7]
 8002c58:	e001      	b.n	8002c5e <wizphy_getphypmode+0x26>
      else
         tmp = PHY_POWER_NORM;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <wizphy_reset>:
#endif

#if _WIZCHIP_ == 5500
void wizphy_reset(void)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002c70:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c74:	f7ff fa82 	bl	800217c <WIZCHIP_READ>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c82:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	4619      	mov	r1, r3
 8002c88:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c8c:	f7ff faa6 	bl	80021dc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002c90:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c94:	f7ff fa72 	bl	800217c <WIZCHIP_READ>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ca2:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002cac:	f7ff fa96 	bl	80021dc <WIZCHIP_WRITE>
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d104      	bne.n	8002cd6 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e003      	b.n	8002cde <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cdc:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	785b      	ldrb	r3, [r3, #1]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d104      	bne.n	8002cf0 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e019      	b.n	8002d24 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	78db      	ldrb	r3, [r3, #3]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d10d      	bne.n	8002d14 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	789b      	ldrb	r3, [r3, #2]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d104      	bne.n	8002d0a <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	f043 0318 	orr.w	r3, r3, #24
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	e00c      	b.n	8002d24 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	f043 0308 	orr.w	r3, r3, #8
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e007      	b.n	8002d24 <wizphy_setphyconf+0x6c>
      }
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	789b      	ldrb	r3, [r3, #2]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d103      	bne.n	8002d24 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	f043 0310 	orr.w	r3, r3, #16
 8002d22:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	4619      	mov	r1, r3
 8002d28:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d2c:	f7ff fa56 	bl	80021dc <WIZCHIP_WRITE>
   wizphy_reset();
 8002d30:	f7ff ff9b 	bl	8002c6a <wizphy_reset>
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002d48:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d4c:	f7ff fa16 	bl	800217c <WIZCHIP_READ>
 8002d50:	4603      	mov	r3, r0
 8002d52:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	119b      	asrs	r3, r3, #6
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d001      	beq.n	8002d72 <wizphy_getphyconf+0x36>
 8002d6e:	2b38      	cmp	r3, #56	; 0x38
 8002d70:	d103      	bne.n	8002d7a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA:
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	705a      	strb	r2, [r3, #1]
         break;
 8002d78:	e003      	b.n	8002d82 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	705a      	strb	r2, [r3, #1]
         break;
 8002d80:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d88:	2b18      	cmp	r3, #24
 8002d8a:	d003      	beq.n	8002d94 <wizphy_getphyconf+0x58>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d001      	beq.n	8002d94 <wizphy_getphyconf+0x58>
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d103      	bne.n	8002d9c <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	709a      	strb	r2, [r3, #2]
         break;
 8002d9a:	e003      	b.n	8002da4 <wizphy_getphyconf+0x68>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	709a      	strb	r2, [r3, #2]
         break;
 8002da2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002daa:	2b18      	cmp	r3, #24
 8002dac:	d003      	beq.n	8002db6 <wizphy_getphyconf+0x7a>
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d001      	beq.n	8002db6 <wizphy_getphyconf+0x7a>
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d103      	bne.n	8002dbe <wizphy_getphyconf+0x82>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	70da      	strb	r2, [r3, #3]
         break;
 8002dbc:	e003      	b.n	8002dc6 <wizphy_getphyconf+0x8a>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	70da      	strb	r2, [r3, #3]
         break;
 8002dc4:	bf00      	nop
   }
}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002ddc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002de0:	f7ff f9cc 	bl	800217c <WIZCHIP_READ>
 8002de4:	4603      	mov	r3, r0
 8002de6:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d102      	bne.n	8002df8 <wizphy_setphypmode+0x2a>
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	e030      	b.n	8002e5a <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002dfe:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d104      	bne.n	8002e10 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002e0c:	73fb      	strb	r3, [r7, #15]
 8002e0e:	e003      	b.n	8002e18 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002e16:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e20:	f7ff f9dc 	bl	80021dc <WIZCHIP_WRITE>
   wizphy_reset();
 8002e24:	f7ff ff21 	bl	8002c6a <wizphy_reset>
   tmp = getPHYCFGR();
 8002e28:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e2c:	f7ff f9a6 	bl	800217c <WIZCHIP_READ>
 8002e30:	4603      	mov	r3, r0
 8002e32:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d106      	bne.n	8002e48 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <wizphy_setphypmode+0x88>
 8002e44:	2300      	movs	r3, #0
 8002e46:	e008      	b.n	8002e5a <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <wizphy_setphypmode+0x88>
 8002e52:	2300      	movs	r3, #0
 8002e54:	e001      	b.n	8002e5a <wizphy_setphypmode+0x8c>
   }
   return -1;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2206      	movs	r2, #6
 8002e70:	4619      	mov	r1, r3
 8002e72:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002e76:	f7ff fa2b 	bl	80022d0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	330e      	adds	r3, #14
 8002e7e:	2204      	movs	r2, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e86:	f7ff fa23 	bl	80022d0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	330a      	adds	r3, #10
 8002e8e:	2204      	movs	r2, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002e96:	f7ff fa1b 	bl	80022d0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3306      	adds	r3, #6
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002ea6:	f7ff fa13 	bl	80022d0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7c9a      	ldrb	r2, [r3, #18]
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <wizchip_setnetinfo+0x78>)
 8002eb0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7cda      	ldrb	r2, [r3, #19]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <wizchip_setnetinfo+0x78>)
 8002eb8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7d1a      	ldrb	r2, [r3, #20]
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <wizchip_setnetinfo+0x78>)
 8002ec0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	7d5a      	ldrb	r2, [r3, #21]
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <wizchip_setnetinfo+0x78>)
 8002ec8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7d9a      	ldrb	r2, [r3, #22]
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <wizchip_setnetinfo+0x7c>)
 8002ed0:	701a      	strb	r2, [r3, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000084 	.word	0x20000084
 8002ee0:	20000088 	.word	0x20000088

08002ee4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2206      	movs	r2, #6
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002ef6:	f7ff f9a7 	bl	8002248 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	330e      	adds	r3, #14
 8002efe:	2204      	movs	r2, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f06:	f7ff f99f 	bl	8002248 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	330a      	adds	r3, #10
 8002f0e:	2204      	movs	r2, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002f16:	f7ff f997 	bl	8002248 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3306      	adds	r3, #6
 8002f1e:	2204      	movs	r2, #4
 8002f20:	4619      	mov	r1, r3
 8002f22:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002f26:	f7ff f98f 	bl	8002248 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <wizchip_getnetinfo+0x78>)
 8002f2c:	781a      	ldrb	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <wizchip_getnetinfo+0x78>)
 8002f34:	785a      	ldrb	r2, [r3, #1]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <wizchip_getnetinfo+0x78>)
 8002f3c:	789a      	ldrb	r2, [r3, #2]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <wizchip_getnetinfo+0x78>)
 8002f44:	78da      	ldrb	r2, [r3, #3]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <wizchip_getnetinfo+0x7c>)
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	759a      	strb	r2, [r3, #22]
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000084 	.word	0x20000084
 8002f60:	20000088 	.word	0x20000088

08002f64 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != 5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <wizchip_setnetmode+0x1e>
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f80:	e00e      	b.n	8002fa0 <wizchip_setnetmode+0x3c>
#endif
   tmp = getMR();
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff f8fa 	bl	800217c <WIZCHIP_READ>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	4619      	mov	r1, r3
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7ff f91f 	bl	80021dc <WIZCHIP_WRITE>
   return 0;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7ff f8e5 	bl	800217c <WIZCHIP_READ>
 8002fb2:	4603      	mov	r3, r0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002fca:	f7ff f907 	bl	80021dc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	885b      	ldrh	r3, [r3, #2]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002fde:	f7ff f8fd 	bl	80021dc <WIZCHIP_WRITE>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	885b      	ldrh	r3, [r3, #2]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002fee:	f7ff f8f5 	bl	80021dc <WIZCHIP_WRITE>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8002ffa:	b590      	push	{r4, r7, lr}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8003002:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003006:	f7ff f8b9 	bl	800217c <WIZCHIP_READ>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003012:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003016:	f7ff f8b1 	bl	800217c <WIZCHIP_READ>
 800301a:	4603      	mov	r3, r0
 800301c:	b29b      	uxth	r3, r3
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	b29c      	uxth	r4, r3
 8003022:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003026:	f7ff f8a9 	bl	800217c <WIZCHIP_READ>
 800302a:	4603      	mov	r3, r0
 800302c:	b29b      	uxth	r3, r3
 800302e:	4423      	add	r3, r4
 8003030:	b29a      	uxth	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	805a      	strh	r2, [r3, #2]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bd90      	pop	{r4, r7, pc}
	...

08003040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <HAL_Init+0x28>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a07      	ldr	r2, [pc, #28]	; (8003068 <HAL_Init+0x28>)
 800304a:	f043 0310 	orr.w	r3, r3, #16
 800304e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003050:	2003      	movs	r0, #3
 8003052:	f000 f8d1 	bl	80031f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003056:	2000      	movs	r0, #0
 8003058:	f7fe fc0c 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800305c:	f7fe fb46 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40022000 	.word	0x40022000

0800306c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_IncTick+0x1c>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_IncTick+0x20>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4413      	add	r3, r2
 800307c:	4a03      	ldr	r2, [pc, #12]	; (800308c <HAL_IncTick+0x20>)
 800307e:	6013      	str	r3, [r2, #0]
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	20000044 	.word	0x20000044
 800308c:	20002b10 	.word	0x20002b10

08003090 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return uwTick;
 8003094:	4b02      	ldr	r3, [pc, #8]	; (80030a0 <HAL_GetTick+0x10>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	20002b10 	.word	0x20002b10

080030a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c0:	4013      	ands	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d6:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <__NVIC_SetPriorityGrouping+0x44>)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	60d3      	str	r3, [r2, #12]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <__NVIC_GetPriorityGrouping+0x18>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	f003 0307 	and.w	r3, r3, #7
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	2b00      	cmp	r3, #0
 8003118:	db0b      	blt.n	8003132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	f003 021f 	and.w	r2, r3, #31
 8003120:	4906      	ldr	r1, [pc, #24]	; (800313c <__NVIC_EnableIRQ+0x34>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2001      	movs	r0, #1
 800312a:	fa00 f202 	lsl.w	r2, r0, r2
 800312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	; (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	; (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
         );
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ff4f 	bl	80030a4 <__NVIC_SetPriorityGrouping>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003220:	f7ff ff64 	bl	80030ec <__NVIC_GetPriorityGrouping>
 8003224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	6978      	ldr	r0, [r7, #20]
 800322c:	f7ff ffb2 	bl	8003194 <NVIC_EncodePriority>
 8003230:	4602      	mov	r2, r0
 8003232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff81 	bl	8003140 <__NVIC_SetPriority>
}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff57 	bl	8003108 <__NVIC_EnableIRQ>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003264:	b480      	push	{r7}
 8003266:	b08b      	sub	sp, #44	; 0x2c
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003272:	2300      	movs	r3, #0
 8003274:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003276:	e127      	b.n	80034c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003278:	2201      	movs	r2, #1
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	429a      	cmp	r2, r3
 8003292:	f040 8116 	bne.w	80034c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b12      	cmp	r3, #18
 800329c:	d034      	beq.n	8003308 <HAL_GPIO_Init+0xa4>
 800329e:	2b12      	cmp	r3, #18
 80032a0:	d80d      	bhi.n	80032be <HAL_GPIO_Init+0x5a>
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d02b      	beq.n	80032fe <HAL_GPIO_Init+0x9a>
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d804      	bhi.n	80032b4 <HAL_GPIO_Init+0x50>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d031      	beq.n	8003312 <HAL_GPIO_Init+0xae>
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d01c      	beq.n	80032ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032b2:	e048      	b.n	8003346 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d043      	beq.n	8003340 <HAL_GPIO_Init+0xdc>
 80032b8:	2b11      	cmp	r3, #17
 80032ba:	d01b      	beq.n	80032f4 <HAL_GPIO_Init+0x90>
          break;
 80032bc:	e043      	b.n	8003346 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032be:	4a89      	ldr	r2, [pc, #548]	; (80034e4 <HAL_GPIO_Init+0x280>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d026      	beq.n	8003312 <HAL_GPIO_Init+0xae>
 80032c4:	4a87      	ldr	r2, [pc, #540]	; (80034e4 <HAL_GPIO_Init+0x280>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d806      	bhi.n	80032d8 <HAL_GPIO_Init+0x74>
 80032ca:	4a87      	ldr	r2, [pc, #540]	; (80034e8 <HAL_GPIO_Init+0x284>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d020      	beq.n	8003312 <HAL_GPIO_Init+0xae>
 80032d0:	4a86      	ldr	r2, [pc, #536]	; (80034ec <HAL_GPIO_Init+0x288>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01d      	beq.n	8003312 <HAL_GPIO_Init+0xae>
          break;
 80032d6:	e036      	b.n	8003346 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032d8:	4a85      	ldr	r2, [pc, #532]	; (80034f0 <HAL_GPIO_Init+0x28c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d019      	beq.n	8003312 <HAL_GPIO_Init+0xae>
 80032de:	4a85      	ldr	r2, [pc, #532]	; (80034f4 <HAL_GPIO_Init+0x290>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d016      	beq.n	8003312 <HAL_GPIO_Init+0xae>
 80032e4:	4a84      	ldr	r2, [pc, #528]	; (80034f8 <HAL_GPIO_Init+0x294>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_GPIO_Init+0xae>
          break;
 80032ea:	e02c      	b.n	8003346 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	623b      	str	r3, [r7, #32]
          break;
 80032f2:	e028      	b.n	8003346 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	3304      	adds	r3, #4
 80032fa:	623b      	str	r3, [r7, #32]
          break;
 80032fc:	e023      	b.n	8003346 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	3308      	adds	r3, #8
 8003304:	623b      	str	r3, [r7, #32]
          break;
 8003306:	e01e      	b.n	8003346 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	330c      	adds	r3, #12
 800330e:	623b      	str	r3, [r7, #32]
          break;
 8003310:	e019      	b.n	8003346 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800331a:	2304      	movs	r3, #4
 800331c:	623b      	str	r3, [r7, #32]
          break;
 800331e:	e012      	b.n	8003346 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d105      	bne.n	8003334 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003328:	2308      	movs	r3, #8
 800332a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	611a      	str	r2, [r3, #16]
          break;
 8003332:	e008      	b.n	8003346 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003334:	2308      	movs	r3, #8
 8003336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	615a      	str	r2, [r3, #20]
          break;
 800333e:	e002      	b.n	8003346 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003340:	2300      	movs	r3, #0
 8003342:	623b      	str	r3, [r7, #32]
          break;
 8003344:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2bff      	cmp	r3, #255	; 0xff
 800334a:	d801      	bhi.n	8003350 <HAL_GPIO_Init+0xec>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	e001      	b.n	8003354 <HAL_GPIO_Init+0xf0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2bff      	cmp	r3, #255	; 0xff
 800335a:	d802      	bhi.n	8003362 <HAL_GPIO_Init+0xfe>
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	e002      	b.n	8003368 <HAL_GPIO_Init+0x104>
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	3b08      	subs	r3, #8
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	210f      	movs	r1, #15
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	401a      	ands	r2, r3
 800337a:	6a39      	ldr	r1, [r7, #32]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	431a      	orrs	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8096 	beq.w	80034c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003396:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_GPIO_Init+0x298>)
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	4a58      	ldr	r2, [pc, #352]	; (80034fc <HAL_GPIO_Init+0x298>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6193      	str	r3, [r2, #24]
 80033a2:	4b56      	ldr	r3, [pc, #344]	; (80034fc <HAL_GPIO_Init+0x298>)
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033ae:	4a54      	ldr	r2, [pc, #336]	; (8003500 <HAL_GPIO_Init+0x29c>)
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4b      	ldr	r2, [pc, #300]	; (8003504 <HAL_GPIO_Init+0x2a0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0x19e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4a      	ldr	r2, [pc, #296]	; (8003508 <HAL_GPIO_Init+0x2a4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00d      	beq.n	80033fe <HAL_GPIO_Init+0x19a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a49      	ldr	r2, [pc, #292]	; (800350c <HAL_GPIO_Init+0x2a8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <HAL_GPIO_Init+0x196>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a48      	ldr	r2, [pc, #288]	; (8003510 <HAL_GPIO_Init+0x2ac>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_GPIO_Init+0x192>
 80033f2:	2303      	movs	r3, #3
 80033f4:	e006      	b.n	8003404 <HAL_GPIO_Init+0x1a0>
 80033f6:	2304      	movs	r3, #4
 80033f8:	e004      	b.n	8003404 <HAL_GPIO_Init+0x1a0>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e002      	b.n	8003404 <HAL_GPIO_Init+0x1a0>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <HAL_GPIO_Init+0x1a0>
 8003402:	2300      	movs	r3, #0
 8003404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003406:	f002 0203 	and.w	r2, r2, #3
 800340a:	0092      	lsls	r2, r2, #2
 800340c:	4093      	lsls	r3, r2
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003414:	493a      	ldr	r1, [pc, #232]	; (8003500 <HAL_GPIO_Init+0x29c>)
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	3302      	adds	r3, #2
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800342e:	4b39      	ldr	r3, [pc, #228]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4938      	ldr	r1, [pc, #224]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
 800343a:	e006      	b.n	800344a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800343c:	4b35      	ldr	r3, [pc, #212]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	43db      	mvns	r3, r3
 8003444:	4933      	ldr	r1, [pc, #204]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 8003446:	4013      	ands	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d006      	beq.n	8003464 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003456:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	492e      	ldr	r1, [pc, #184]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
 8003462:	e006      	b.n	8003472 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003464:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	43db      	mvns	r3, r3
 800346c:	4929      	ldr	r1, [pc, #164]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 800346e:	4013      	ands	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800347e:	4b25      	ldr	r3, [pc, #148]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	4924      	ldr	r1, [pc, #144]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
 800348a:	e006      	b.n	800349a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800348c:	4b21      	ldr	r3, [pc, #132]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	43db      	mvns	r3, r3
 8003494:	491f      	ldr	r1, [pc, #124]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 8003496:	4013      	ands	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d006      	beq.n	80034b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	491a      	ldr	r1, [pc, #104]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60cb      	str	r3, [r1, #12]
 80034b2:	e006      	b.n	80034c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034b4:	4b17      	ldr	r3, [pc, #92]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	4915      	ldr	r1, [pc, #84]	; (8003514 <HAL_GPIO_Init+0x2b0>)
 80034be:	4013      	ands	r3, r2
 80034c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	3301      	adds	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	fa22 f303 	lsr.w	r3, r2, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f47f aed0 	bne.w	8003278 <HAL_GPIO_Init+0x14>
  }
}
 80034d8:	bf00      	nop
 80034da:	372c      	adds	r7, #44	; 0x2c
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	10210000 	.word	0x10210000
 80034e8:	10110000 	.word	0x10110000
 80034ec:	10120000 	.word	0x10120000
 80034f0:	10310000 	.word	0x10310000
 80034f4:	10320000 	.word	0x10320000
 80034f8:	10220000 	.word	0x10220000
 80034fc:	40021000 	.word	0x40021000
 8003500:	40010000 	.word	0x40010000
 8003504:	40010800 	.word	0x40010800
 8003508:	40010c00 	.word	0x40010c00
 800350c:	40011000 	.word	0x40011000
 8003510:	40011400 	.word	0x40011400
 8003514:	40010400 	.word	0x40010400

08003518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	807b      	strh	r3, [r7, #2]
 8003524:	4613      	mov	r3, r2
 8003526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003528:	787b      	ldrb	r3, [r7, #1]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352e:	887a      	ldrh	r2, [r7, #2]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003534:	e003      	b.n	800353e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003536:	887b      	ldrh	r3, [r7, #2]
 8003538:	041a      	lsls	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e11f      	b.n	800379a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fe f8f4 	bl	800175c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2224      	movs	r2, #36	; 0x24
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800359a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035ac:	f000 fcda 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 80035b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a7b      	ldr	r2, [pc, #492]	; (80037a4 <HAL_I2C_Init+0x25c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d807      	bhi.n	80035cc <HAL_I2C_Init+0x84>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a7a      	ldr	r2, [pc, #488]	; (80037a8 <HAL_I2C_Init+0x260>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	bf94      	ite	ls
 80035c4:	2301      	movls	r3, #1
 80035c6:	2300      	movhi	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e006      	b.n	80035da <HAL_I2C_Init+0x92>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a77      	ldr	r2, [pc, #476]	; (80037ac <HAL_I2C_Init+0x264>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bf94      	ite	ls
 80035d4:	2301      	movls	r3, #1
 80035d6:	2300      	movhi	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0db      	b.n	800379a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a72      	ldr	r2, [pc, #456]	; (80037b0 <HAL_I2C_Init+0x268>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	0c9b      	lsrs	r3, r3, #18
 80035ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a64      	ldr	r2, [pc, #400]	; (80037a4 <HAL_I2C_Init+0x25c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d802      	bhi.n	800361c <HAL_I2C_Init+0xd4>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3301      	adds	r3, #1
 800361a:	e009      	b.n	8003630 <HAL_I2C_Init+0xe8>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	4a63      	ldr	r2, [pc, #396]	; (80037b4 <HAL_I2C_Init+0x26c>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	099b      	lsrs	r3, r3, #6
 800362e:	3301      	adds	r3, #1
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	430b      	orrs	r3, r1
 8003636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003642:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4956      	ldr	r1, [pc, #344]	; (80037a4 <HAL_I2C_Init+0x25c>)
 800364c:	428b      	cmp	r3, r1
 800364e:	d80d      	bhi.n	800366c <HAL_I2C_Init+0x124>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e59      	subs	r1, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fbb1 f3f3 	udiv	r3, r1, r3
 800365e:	3301      	adds	r3, #1
 8003660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003664:	2b04      	cmp	r3, #4
 8003666:	bf38      	it	cc
 8003668:	2304      	movcc	r3, #4
 800366a:	e04f      	b.n	800370c <HAL_I2C_Init+0x1c4>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d111      	bne.n	8003698 <HAL_I2C_Init+0x150>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1e58      	subs	r0, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	440b      	add	r3, r1
 8003682:	fbb0 f3f3 	udiv	r3, r0, r3
 8003686:	3301      	adds	r3, #1
 8003688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e012      	b.n	80036be <HAL_I2C_Init+0x176>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1e58      	subs	r0, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	0099      	lsls	r1, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ae:	3301      	adds	r3, #1
 80036b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Init+0x17e>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e022      	b.n	800370c <HAL_I2C_Init+0x1c4>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10e      	bne.n	80036ec <HAL_I2C_Init+0x1a4>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1e58      	subs	r0, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6859      	ldr	r1, [r3, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	440b      	add	r3, r1
 80036dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ea:	e00f      	b.n	800370c <HAL_I2C_Init+0x1c4>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1e58      	subs	r0, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	0099      	lsls	r1, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003702:	3301      	adds	r3, #1
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	6809      	ldr	r1, [r1, #0]
 8003710:	4313      	orrs	r3, r2
 8003712:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800373a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6911      	ldr	r1, [r2, #16]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68d2      	ldr	r2, [r2, #12]
 8003746:	4311      	orrs	r1, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	430b      	orrs	r3, r1
 800374e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	000186a0 	.word	0x000186a0
 80037a8:	001e847f 	.word	0x001e847f
 80037ac:	003d08ff 	.word	0x003d08ff
 80037b0:	431bde83 	.word	0x431bde83
 80037b4:	10624dd3 	.word	0x10624dd3

080037b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e26c      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8087 	beq.w	80038e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037d8:	4b92      	ldr	r3, [pc, #584]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d00c      	beq.n	80037fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037e4:	4b8f      	ldr	r3, [pc, #572]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d112      	bne.n	8003816 <HAL_RCC_OscConfig+0x5e>
 80037f0:	4b8c      	ldr	r3, [pc, #560]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d10b      	bne.n	8003816 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fe:	4b89      	ldr	r3, [pc, #548]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d06c      	beq.n	80038e4 <HAL_RCC_OscConfig+0x12c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d168      	bne.n	80038e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e246      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381e:	d106      	bne.n	800382e <HAL_RCC_OscConfig+0x76>
 8003820:	4b80      	ldr	r3, [pc, #512]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a7f      	ldr	r2, [pc, #508]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	e02e      	b.n	800388c <HAL_RCC_OscConfig+0xd4>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x98>
 8003836:	4b7b      	ldr	r3, [pc, #492]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a7a      	ldr	r2, [pc, #488]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 800383c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4b78      	ldr	r3, [pc, #480]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a77      	ldr	r2, [pc, #476]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e01d      	b.n	800388c <HAL_RCC_OscConfig+0xd4>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003858:	d10c      	bne.n	8003874 <HAL_RCC_OscConfig+0xbc>
 800385a:	4b72      	ldr	r3, [pc, #456]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a71      	ldr	r2, [pc, #452]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4b6f      	ldr	r3, [pc, #444]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6e      	ldr	r2, [pc, #440]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e00b      	b.n	800388c <HAL_RCC_OscConfig+0xd4>
 8003874:	4b6b      	ldr	r3, [pc, #428]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a6a      	ldr	r2, [pc, #424]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 800387a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	4b68      	ldr	r3, [pc, #416]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a67      	ldr	r2, [pc, #412]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d013      	beq.n	80038bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7ff fbfc 	bl	8003090 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800389c:	f7ff fbf8 	bl	8003090 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b64      	cmp	r3, #100	; 0x64
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e1fa      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	4b5d      	ldr	r3, [pc, #372]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0xe4>
 80038ba:	e014      	b.n	80038e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7ff fbe8 	bl	8003090 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c4:	f7ff fbe4 	bl	8003090 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e1e6      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d6:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x10c>
 80038e2:	e000      	b.n	80038e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d063      	beq.n	80039ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038f2:	4b4c      	ldr	r3, [pc, #304]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038fe:	4b49      	ldr	r3, [pc, #292]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b08      	cmp	r3, #8
 8003908:	d11c      	bne.n	8003944 <HAL_RCC_OscConfig+0x18c>
 800390a:	4b46      	ldr	r3, [pc, #280]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d116      	bne.n	8003944 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003916:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_RCC_OscConfig+0x176>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e1ba      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392e:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4939      	ldr	r1, [pc, #228]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003942:	e03a      	b.n	80039ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d020      	beq.n	800398e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800394c:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7ff fb9d 	bl	8003090 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395a:	f7ff fb99 	bl	8003090 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e19b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396c:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003978:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4927      	ldr	r1, [pc, #156]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]
 800398c:	e015      	b.n	80039ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <HAL_RCC_OscConfig+0x270>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7ff fb7c 	bl	8003090 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800399c:	f7ff fb78 	bl	8003090 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e17a      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d03a      	beq.n	8003a3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d019      	beq.n	8003a02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ce:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <HAL_RCC_OscConfig+0x274>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d4:	f7ff fb5c 	bl	8003090 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039dc:	f7ff fb58 	bl	8003090 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e15a      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039fa:	2001      	movs	r0, #1
 80039fc:	f000 fb0a 	bl	8004014 <RCC_Delay>
 8003a00:	e01c      	b.n	8003a3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <HAL_RCC_OscConfig+0x274>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a08:	f7ff fb42 	bl	8003090 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0e:	e00f      	b.n	8003a30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a10:	f7ff fb3e 	bl	8003090 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d908      	bls.n	8003a30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e140      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	42420000 	.word	0x42420000
 8003a2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a30:	4b9e      	ldr	r3, [pc, #632]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e9      	bne.n	8003a10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80a6 	beq.w	8003b96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4e:	4b97      	ldr	r3, [pc, #604]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	4b94      	ldr	r3, [pc, #592]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4a93      	ldr	r2, [pc, #588]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	61d3      	str	r3, [r2, #28]
 8003a66:	4b91      	ldr	r3, [pc, #580]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	4b8e      	ldr	r3, [pc, #568]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d118      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a82:	4b8b      	ldr	r3, [pc, #556]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a8a      	ldr	r2, [pc, #552]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8e:	f7ff faff 	bl	8003090 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a96:	f7ff fafb 	bl	8003090 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b64      	cmp	r3, #100	; 0x64
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e0fd      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa8:	4b81      	ldr	r3, [pc, #516]	; (8003cb0 <HAL_RCC_OscConfig+0x4f8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x312>
 8003abc:	4b7b      	ldr	r3, [pc, #492]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4a7a      	ldr	r2, [pc, #488]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6213      	str	r3, [r2, #32]
 8003ac8:	e02d      	b.n	8003b26 <HAL_RCC_OscConfig+0x36e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x334>
 8003ad2:	4b76      	ldr	r3, [pc, #472]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4a75      	ldr	r2, [pc, #468]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6213      	str	r3, [r2, #32]
 8003ade:	4b73      	ldr	r3, [pc, #460]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4a72      	ldr	r2, [pc, #456]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	6213      	str	r3, [r2, #32]
 8003aea:	e01c      	b.n	8003b26 <HAL_RCC_OscConfig+0x36e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d10c      	bne.n	8003b0e <HAL_RCC_OscConfig+0x356>
 8003af4:	4b6d      	ldr	r3, [pc, #436]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4a6c      	ldr	r2, [pc, #432]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003afa:	f043 0304 	orr.w	r3, r3, #4
 8003afe:	6213      	str	r3, [r2, #32]
 8003b00:	4b6a      	ldr	r3, [pc, #424]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4a69      	ldr	r2, [pc, #420]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6213      	str	r3, [r2, #32]
 8003b0c:	e00b      	b.n	8003b26 <HAL_RCC_OscConfig+0x36e>
 8003b0e:	4b67      	ldr	r3, [pc, #412]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	4a66      	ldr	r2, [pc, #408]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	6213      	str	r3, [r2, #32]
 8003b1a:	4b64      	ldr	r3, [pc, #400]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	4a63      	ldr	r2, [pc, #396]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d015      	beq.n	8003b5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7ff faaf 	bl	8003090 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7ff faab 	bl	8003090 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e0ab      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	4b57      	ldr	r3, [pc, #348]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ee      	beq.n	8003b36 <HAL_RCC_OscConfig+0x37e>
 8003b58:	e014      	b.n	8003b84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5a:	f7ff fa99 	bl	8003090 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7ff fa95 	bl	8003090 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e095      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b78:	4b4c      	ldr	r3, [pc, #304]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ee      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d105      	bne.n	8003b96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8a:	4b48      	ldr	r3, [pc, #288]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	4a47      	ldr	r2, [pc, #284]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8081 	beq.w	8003ca2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba0:	4b42      	ldr	r3, [pc, #264]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d061      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d146      	bne.n	8003c42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb4:	4b3f      	ldr	r3, [pc, #252]	; (8003cb4 <HAL_RCC_OscConfig+0x4fc>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7ff fa69 	bl	8003090 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc2:	f7ff fa65 	bl	8003090 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e067      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd4:	4b35      	ldr	r3, [pc, #212]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f0      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d108      	bne.n	8003bfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bea:	4b30      	ldr	r3, [pc, #192]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	492d      	ldr	r1, [pc, #180]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a19      	ldr	r1, [r3, #32]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	4927      	ldr	r1, [pc, #156]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c14:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <HAL_RCC_OscConfig+0x4fc>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7ff fa39 	bl	8003090 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c22:	f7ff fa35 	bl	8003090 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e037      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x46a>
 8003c40:	e02f      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <HAL_RCC_OscConfig+0x4fc>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7ff fa22 	bl	8003090 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7ff fa1e 	bl	8003090 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e020      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x498>
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e013      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_OscConfig+0x4f4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d001      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	42420060 	.word	0x42420060

08003cb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0d0      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b6a      	ldr	r3, [pc, #424]	; (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d910      	bls.n	8003cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b67      	ldr	r3, [pc, #412]	; (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 0207 	bic.w	r2, r3, #7
 8003ce2:	4965      	ldr	r1, [pc, #404]	; (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0b8      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d020      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d14:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4a58      	ldr	r2, [pc, #352]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d2c:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a52      	ldr	r2, [pc, #328]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d38:	4b50      	ldr	r3, [pc, #320]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	494d      	ldr	r1, [pc, #308]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d040      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5e:	4b47      	ldr	r3, [pc, #284]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d115      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e07f      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d76:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e073      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d86:	4b3d      	ldr	r3, [pc, #244]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e06b      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d96:	4b39      	ldr	r3, [pc, #228]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f023 0203 	bic.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4936      	ldr	r1, [pc, #216]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da8:	f7ff f972 	bl	8003090 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db0:	f7ff f96e 	bl	8003090 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e053      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 020c 	and.w	r2, r3, #12
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d1eb      	bne.n	8003db0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b27      	ldr	r3, [pc, #156]	; (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d210      	bcs.n	8003e08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 0207 	bic.w	r2, r3, #7
 8003dee:	4922      	ldr	r1, [pc, #136]	; (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e032      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4916      	ldr	r1, [pc, #88]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	490e      	ldr	r1, [pc, #56]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e46:	f000 f821 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003e4a:	4601      	mov	r1, r0
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <HAL_RCC_ClockConfig+0x1c8>)
 8003e58:	5cd3      	ldrb	r3, [r2, r3]
 8003e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e5e:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <HAL_RCC_ClockConfig+0x1cc>)
 8003e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCC_ClockConfig+0x1d0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd fd04 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	08008070 	.word	0x08008070
 8003e84:	20000018 	.word	0x20000018
 8003e88:	20000040 	.word	0x20000040

08003e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	b490      	push	{r4, r7}
 8003e8e:	b08a      	sub	sp, #40	; 0x28
 8003e90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e94:	1d3c      	adds	r4, r7, #4
 8003e96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e9c:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003eb6:	4b23      	ldr	r3, [pc, #140]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x40>
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x46>
 8003eca:	e02d      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ece:	623b      	str	r3, [r7, #32]
      break;
 8003ed0:	e02d      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	0c9b      	lsrs	r3, r3, #18
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ede:	4413      	add	r3, r2
 8003ee0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ee4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d013      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ef0:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	0c5b      	lsrs	r3, r3, #17
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003efe:	4413      	add	r3, r2
 8003f00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	4a0f      	ldr	r2, [pc, #60]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f0a:	fb02 f203 	mul.w	r2, r2, r3
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
 8003f16:	e004      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f1c:	fb02 f303 	mul.w	r3, r2, r3
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	623b      	str	r3, [r7, #32]
      break;
 8003f26:	e002      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f2a:	623b      	str	r3, [r7, #32]
      break;
 8003f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3728      	adds	r7, #40	; 0x28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc90      	pop	{r4, r7}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	08008020 	.word	0x08008020
 8003f40:	08008030 	.word	0x08008030
 8003f44:	40021000 	.word	0x40021000
 8003f48:	007a1200 	.word	0x007a1200
 8003f4c:	003d0900 	.word	0x003d0900

08003f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f54:	4b02      	ldr	r3, [pc, #8]	; (8003f60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	20000018 	.word	0x20000018

08003f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f68:	f7ff fff2 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003f6c:	4601      	mov	r1, r0
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4a03      	ldr	r2, [pc, #12]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
 8003f7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	08008080 	.word	0x08008080

08003f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f90:	f7ff ffde 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003f94:	4601      	mov	r1, r0
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	0adb      	lsrs	r3, r3, #11
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4a03      	ldr	r2, [pc, #12]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa2:	5cd3      	ldrb	r3, [r2, r3]
 8003fa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	08008080 	.word	0x08008080

08003fb4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	220f      	movs	r2, #15
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <HAL_RCC_GetClockConfig+0x58>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0203 	and.w	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <HAL_RCC_GetClockConfig+0x58>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_GetClockConfig+0x58>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003fe8:	4b08      	ldr	r3, [pc, #32]	; (800400c <HAL_RCC_GetClockConfig+0x58>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	08db      	lsrs	r3, r3, #3
 8003fee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_RCC_GetClockConfig+0x5c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0207 	and.w	r2, r3, #7
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	40021000 	.word	0x40021000
 8004010:	40022000 	.word	0x40022000

08004014 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <RCC_Delay+0x34>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <RCC_Delay+0x38>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	0a5b      	lsrs	r3, r3, #9
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004030:	bf00      	nop
  }
  while (Delay --);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	60fa      	str	r2, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f9      	bne.n	8004030 <RCC_Delay+0x1c>
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000018 	.word	0x20000018
 800404c:	10624dd3 	.word	0x10624dd3

08004050 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e076      	b.n	8004150 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d108      	bne.n	800407c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004072:	d009      	beq.n	8004088 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	61da      	str	r2, [r3, #28]
 800407a:	e005      	b.n	8004088 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fd fb9a 	bl	80017dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	ea42 0103 	orr.w	r1, r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	0c1a      	lsrs	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f002 0204 	and.w	r2, r2, #4
 800412e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800413e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08c      	sub	sp, #48	; 0x30
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004166:	2301      	movs	r3, #1
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_SPI_TransmitReceive+0x26>
 800417a:	2302      	movs	r3, #2
 800417c:	e18a      	b.n	8004494 <HAL_SPI_TransmitReceive+0x33c>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004186:	f7fe ff83 	bl	8003090 <HAL_GetTick>
 800418a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800419c:	887b      	ldrh	r3, [r7, #2]
 800419e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d00f      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x70>
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ae:	d107      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x68>
 80041b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d003      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
 80041c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041c6:	e15b      	b.n	8004480 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_SPI_TransmitReceive+0x82>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_SPI_TransmitReceive+0x82>
 80041d4:	887b      	ldrh	r3, [r7, #2]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041e0:	e14e      	b.n	8004480 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d003      	beq.n	80041f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2205      	movs	r2, #5
 80041f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	887a      	ldrh	r2, [r7, #2]
 8004206:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	887a      	ldrh	r2, [r7, #2]
 800420c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	887a      	ldrh	r2, [r7, #2]
 8004218:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	887a      	ldrh	r2, [r7, #2]
 800421e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d007      	beq.n	800424a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004248:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004252:	d178      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x10a>
 800425c:	8b7b      	ldrh	r3, [r7, #26]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d166      	bne.n	8004330 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	881a      	ldrh	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	1c9a      	adds	r2, r3, #2
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004286:	e053      	b.n	8004330 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d11b      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x176>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d016      	beq.n	80042ce <HAL_SPI_TransmitReceive+0x176>
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d113      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	881a      	ldrh	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	1c9a      	adds	r2, r3, #2
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d119      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x1b8>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d014      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	b292      	uxth	r2, r2
 80042f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	1c9a      	adds	r2, r3, #2
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800430c:	2301      	movs	r3, #1
 800430e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004310:	f7fe febe 	bl	8003090 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800431c:	429a      	cmp	r2, r3
 800431e:	d807      	bhi.n	8004330 <HAL_SPI_TransmitReceive+0x1d8>
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d003      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800432e:	e0a7      	b.n	8004480 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1a6      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x130>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1a1      	bne.n	8004288 <HAL_SPI_TransmitReceive+0x130>
 8004344:	e07c      	b.n	8004440 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_SPI_TransmitReceive+0x1fc>
 800434e:	8b7b      	ldrh	r3, [r7, #26]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d16b      	bne.n	800442c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	7812      	ldrb	r2, [r2, #0]
 8004360:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800437a:	e057      	b.n	800442c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b02      	cmp	r3, #2
 8004388:	d11c      	bne.n	80043c4 <HAL_SPI_TransmitReceive+0x26c>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d017      	beq.n	80043c4 <HAL_SPI_TransmitReceive+0x26c>
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	2b01      	cmp	r3, #1
 8004398:	d114      	bne.n	80043c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d119      	bne.n	8004406 <HAL_SPI_TransmitReceive+0x2ae>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d014      	beq.n	8004406 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004402:	2301      	movs	r3, #1
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004406:	f7fe fe43 	bl	8003090 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004412:	429a      	cmp	r2, r3
 8004414:	d803      	bhi.n	800441e <HAL_SPI_TransmitReceive+0x2c6>
 8004416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d102      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x2cc>
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	2b00      	cmp	r3, #0
 8004422:	d103      	bne.n	800442c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800442a:	e029      	b.n	8004480 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1a2      	bne.n	800437c <HAL_SPI_TransmitReceive+0x224>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d19d      	bne.n	800437c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004442:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f8b1 	bl	80045ac <SPI_EndRxTxTransaction>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d006      	beq.n	800445e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800445c:	e010      	b.n	8004480 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10b      	bne.n	800447e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	e000      	b.n	8004480 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800447e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004490:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004494:	4618      	mov	r0, r3
 8004496:	3730      	adds	r7, #48	; 0x30
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044ac:	f7fe fdf0 	bl	8003090 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	4413      	add	r3, r2
 80044ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044bc:	f7fe fde8 	bl	8003090 <HAL_GetTick>
 80044c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044c2:	4b39      	ldr	r3, [pc, #228]	; (80045a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	015b      	lsls	r3, r3, #5
 80044c8:	0d1b      	lsrs	r3, r3, #20
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	fb02 f303 	mul.w	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044d2:	e054      	b.n	800457e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d050      	beq.n	800457e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044dc:	f7fe fdd8 	bl	8003090 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d902      	bls.n	80044f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d13d      	bne.n	800456e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800450a:	d111      	bne.n	8004530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004514:	d004      	beq.n	8004520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451e:	d107      	bne.n	8004530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004538:	d10f      	bne.n	800455a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e017      	b.n	800459e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	3b01      	subs	r3, #1
 800457c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4013      	ands	r3, r2
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	429a      	cmp	r2, r3
 800458c:	bf0c      	ite	eq
 800458e:	2301      	moveq	r3, #1
 8004590:	2300      	movne	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	429a      	cmp	r2, r3
 800459a:	d19b      	bne.n	80044d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000018 	.word	0x20000018

080045ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2200      	movs	r2, #0
 80045c0:	2180      	movs	r1, #128	; 0x80
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff ff6a 	bl	800449c <SPI_WaitFlagStateUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e000      	b.n	80045e0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e041      	b.n	800467e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f839 	bl	8004686 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 f9b4 	bl	8004994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e03a      	b.n	8004726 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_TIM_Base_Start_IT+0x98>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00e      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x58>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046da:	d009      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x58>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a14      	ldr	r2, [pc, #80]	; (8004734 <HAL_TIM_Base_Start_IT+0x9c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x58>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a13      	ldr	r2, [pc, #76]	; (8004738 <HAL_TIM_Base_Start_IT+0xa0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d111      	bne.n	8004714 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d010      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	e007      	b.n	8004724 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800

0800473c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d122      	bne.n	8004798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b02      	cmp	r3, #2
 800475e:	d11b      	bne.n	8004798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0202 	mvn.w	r2, #2
 8004768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8ed 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 8004784:	e005      	b.n	8004792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f8e0 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f8ef 	bl	8004970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d122      	bne.n	80047ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d11b      	bne.n	80047ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0204 	mvn.w	r2, #4
 80047bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8c3 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f8b6 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f8c5 	bl	8004970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d122      	bne.n	8004840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b08      	cmp	r3, #8
 8004806:	d11b      	bne.n	8004840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0208 	mvn.w	r2, #8
 8004810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2204      	movs	r2, #4
 8004816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f899 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 800482c:	e005      	b.n	800483a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f88c 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f89b 	bl	8004970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0310 	and.w	r3, r3, #16
 800484a:	2b10      	cmp	r3, #16
 800484c:	d122      	bne.n	8004894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b10      	cmp	r3, #16
 800485a:	d11b      	bne.n	8004894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0210 	mvn.w	r2, #16
 8004864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2208      	movs	r2, #8
 800486a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f86f 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 8004880:	e005      	b.n	800488e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f862 	bl	800494c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f871 	bl	8004970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d10e      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d107      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0201 	mvn.w	r2, #1
 80048b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc fefe 	bl	80016bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ca:	2b80      	cmp	r3, #128	; 0x80
 80048cc:	d10e      	bne.n	80048ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d8:	2b80      	cmp	r3, #128	; 0x80
 80048da:	d107      	bne.n	80048ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8bf 	bl	8004a6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	d10e      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	d107      	bne.n	8004918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f835 	bl	8004982 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b20      	cmp	r3, #32
 8004924:	d10e      	bne.n	8004944 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b20      	cmp	r3, #32
 8004932:	d107      	bne.n	8004944 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0220 	mvn.w	r2, #32
 800493c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f88a 	bl	8004a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr

08004982 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a29      	ldr	r2, [pc, #164]	; (8004a4c <TIM_Base_SetConfig+0xb8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00b      	beq.n	80049c4 <TIM_Base_SetConfig+0x30>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d007      	beq.n	80049c4 <TIM_Base_SetConfig+0x30>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a26      	ldr	r2, [pc, #152]	; (8004a50 <TIM_Base_SetConfig+0xbc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_Base_SetConfig+0x30>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a25      	ldr	r2, [pc, #148]	; (8004a54 <TIM_Base_SetConfig+0xc0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d108      	bne.n	80049d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a1c      	ldr	r2, [pc, #112]	; (8004a4c <TIM_Base_SetConfig+0xb8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00b      	beq.n	80049f6 <TIM_Base_SetConfig+0x62>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e4:	d007      	beq.n	80049f6 <TIM_Base_SetConfig+0x62>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <TIM_Base_SetConfig+0xbc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d003      	beq.n	80049f6 <TIM_Base_SetConfig+0x62>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <TIM_Base_SetConfig+0xc0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d108      	bne.n	8004a08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a07      	ldr	r2, [pc, #28]	; (8004a4c <TIM_Base_SetConfig+0xb8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d103      	bne.n	8004a3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	615a      	str	r2, [r3, #20]
}
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800

08004a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a82:	f3ef 8305 	mrs	r3, IPSR
 8004a86:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a92:	607b      	str	r3, [r7, #4]
  return(result);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <osKernelInitialize+0x32>
 8004a9a:	4b10      	ldr	r3, [pc, #64]	; (8004adc <osKernelInitialize+0x60>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d109      	bne.n	8004ab6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004aae:	f06f 0305 	mvn.w	r3, #5
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e00c      	b.n	8004ad0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <osKernelInitialize+0x60>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d105      	bne.n	8004aca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004abe:	4b07      	ldr	r3, [pc, #28]	; (8004adc <osKernelInitialize+0x60>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e002      	b.n	8004ad0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004aca:	f04f 33ff 	mov.w	r3, #4294967295
 8004ace:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	2000008c 	.word	0x2000008c

08004ae0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ae6:	f3ef 8305 	mrs	r3, IPSR
 8004aea:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10f      	bne.n	8004b12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af2:	f3ef 8310 	mrs	r3, PRIMASK
 8004af6:	607b      	str	r3, [r7, #4]
  return(result);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <osKernelStart+0x32>
 8004afe:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <osKernelStart+0x64>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d109      	bne.n	8004b1a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b06:	f3ef 8311 	mrs	r3, BASEPRI
 8004b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b12:	f06f 0305 	mvn.w	r3, #5
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e00e      	b.n	8004b38 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <osKernelStart+0x64>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d107      	bne.n	8004b32 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <osKernelStart+0x64>)
 8004b24:	2202      	movs	r2, #2
 8004b26:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004b28:	f001 f802 	bl	8005b30 <vTaskStartScheduler>
      stat = osOK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e002      	b.n	8004b38 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004b32:	f04f 33ff 	mov.w	r3, #4294967295
 8004b36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b38:	68fb      	ldr	r3, [r7, #12]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	2000008c 	.word	0x2000008c

08004b48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b092      	sub	sp, #72	; 0x48
 8004b4c:	af04      	add	r7, sp, #16
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b58:	f3ef 8305 	mrs	r3, IPSR
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f040 8094 	bne.w	8004c8e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b66:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6a:	623b      	str	r3, [r7, #32]
  return(result);
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 808d 	bne.w	8004c8e <osThreadNew+0x146>
 8004b74:	4b48      	ldr	r3, [pc, #288]	; (8004c98 <osThreadNew+0x150>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d106      	bne.n	8004b8a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b80:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 8082 	bne.w	8004c8e <osThreadNew+0x146>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d07e      	beq.n	8004c8e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004b94:	2318      	movs	r3, #24
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004b98:	2300      	movs	r3, #0
 8004b9a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004b9c:	f107 031b 	add.w	r3, r7, #27
 8004ba0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d045      	beq.n	8004c3a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <osThreadNew+0x74>
        name = attr->name;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <osThreadNew+0x9a>
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	2b38      	cmp	r3, #56	; 0x38
 8004bd4:	d805      	bhi.n	8004be2 <osThreadNew+0x9a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <osThreadNew+0x9e>
        return (NULL);
 8004be2:	2300      	movs	r3, #0
 8004be4:	e054      	b.n	8004c90 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00e      	beq.n	8004c1c <osThreadNew+0xd4>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b5b      	cmp	r3, #91	; 0x5b
 8004c04:	d90a      	bls.n	8004c1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d006      	beq.n	8004c1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <osThreadNew+0xd4>
        mem = 1;
 8004c16:	2301      	movs	r3, #1
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1a:	e010      	b.n	8004c3e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10c      	bne.n	8004c3e <osThreadNew+0xf6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d108      	bne.n	8004c3e <osThreadNew+0xf6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <osThreadNew+0xf6>
          mem = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c38:	e001      	b.n	8004c3e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d110      	bne.n	8004c66 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c4c:	9202      	str	r2, [sp, #8]
 8004c4e:	9301      	str	r3, [sp, #4]
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 fdd4 	bl	8005808 <xTaskCreateStatic>
 8004c60:	4603      	mov	r3, r0
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	e013      	b.n	8004c8e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d110      	bne.n	8004c8e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	f107 0314 	add.w	r3, r7, #20
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fe1b 	bl	80058ba <xTaskCreate>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d001      	beq.n	8004c8e <osThreadNew+0x146>
          hTask = NULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c8e:	697b      	ldr	r3, [r7, #20]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3738      	adds	r7, #56	; 0x38
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	2000008c 	.word	0x2000008c

08004c9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4a06      	ldr	r2, [pc, #24]	; (8004cc4 <vApplicationGetIdleTaskMemory+0x28>)
 8004cac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a05      	ldr	r2, [pc, #20]	; (8004cc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2280      	movs	r2, #128	; 0x80
 8004cb8:	601a      	str	r2, [r3, #0]
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr
 8004cc4:	20000090 	.word	0x20000090
 8004cc8:	200000ec 	.word	0x200000ec

08004ccc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4a07      	ldr	r2, [pc, #28]	; (8004cf8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004cdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4a06      	ldr	r2, [pc, #24]	; (8004cfc <vApplicationGetTimerTaskMemory+0x30>)
 8004ce2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cea:	601a      	str	r2, [r3, #0]
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	200002ec 	.word	0x200002ec
 8004cfc:	20000348 	.word	0x20000348

08004d00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f103 0208 	add.w	r2, r3, #8
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f04f 32ff 	mov.w	r2, #4294967295
 8004d18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f103 0208 	add.w	r2, r3, #8
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f103 0208 	add.w	r2, r3, #8
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr

08004d56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	601a      	str	r2, [r3, #0]
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d103      	bne.n	8004dbc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e00c      	b.n	8004dd6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	e002      	b.n	8004dca <vListInsert+0x2e>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d2f6      	bcs.n	8004dc4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	601a      	str	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr

08004e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6892      	ldr	r2, [r2, #8]
 8004e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6852      	ldr	r2, [r2, #4]
 8004e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d103      	bne.n	8004e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	1e5a      	subs	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr
	...

08004e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d109      	bne.n	8004e88 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	e7fe      	b.n	8004e86 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004e88:	f001 ff66 	bl	8006d58 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	68f9      	ldr	r1, [r7, #12]
 8004e96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	441a      	add	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	68f9      	ldr	r1, [r7, #12]
 8004ebc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	22ff      	movs	r2, #255	; 0xff
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	22ff      	movs	r2, #255	; 0xff
 8004ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d114      	bne.n	8004f08 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01a      	beq.n	8004f1c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3310      	adds	r3, #16
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 f8a4 	bl	8006038 <xTaskRemoveFromEventList>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d012      	beq.n	8004f1c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <xQueueGenericReset+0xcc>)
 8004ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	e009      	b.n	8004f1c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3310      	adds	r3, #16
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fef7 	bl	8004d00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3324      	adds	r3, #36	; 0x24
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fef2 	bl	8004d00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f1c:	f001 ff4a 	bl	8006db4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f20:	2301      	movs	r3, #1
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	e000ed04 	.word	0xe000ed04

08004f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08e      	sub	sp, #56	; 0x38
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <xQueueGenericCreateStatic+0x28>
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f56:	e7fe      	b.n	8004f56 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <xQueueGenericCreateStatic+0x42>
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f70:	e7fe      	b.n	8004f70 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <xQueueGenericCreateStatic+0x4e>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <xQueueGenericCreateStatic+0x52>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <xQueueGenericCreateStatic+0x54>
 8004f82:	2300      	movs	r3, #0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d109      	bne.n	8004f9c <xQueueGenericCreateStatic+0x6c>
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	e7fe      	b.n	8004f9a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d102      	bne.n	8004fa8 <xQueueGenericCreateStatic+0x78>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <xQueueGenericCreateStatic+0x7c>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <xQueueGenericCreateStatic+0x7e>
 8004fac:	2300      	movs	r3, #0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <xQueueGenericCreateStatic+0x96>
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	e7fe      	b.n	8004fc4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fc6:	2350      	movs	r3, #80	; 0x50
 8004fc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b50      	cmp	r3, #80	; 0x50
 8004fce:	d009      	beq.n	8004fe4 <xQueueGenericCreateStatic+0xb4>
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	e7fe      	b.n	8004fe2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00d      	beq.n	800500a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ff6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	4613      	mov	r3, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f805 	bl	8005014 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800500c:	4618      	mov	r0, r3
 800500e:	3730      	adds	r7, #48	; 0x30
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e002      	b.n	8005036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005042:	2101      	movs	r1, #1
 8005044:	69b8      	ldr	r0, [r7, #24]
 8005046:	f7ff ff0b 	bl	8004e60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	78fa      	ldrb	r2, [r7, #3]
 800504e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08e      	sub	sp, #56	; 0x38
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <xQueueGenericSend+0x30>
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
 800508a:	e7fe      	b.n	800508a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <xQueueGenericSend+0x3e>
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <xQueueGenericSend+0x42>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <xQueueGenericSend+0x44>
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <xQueueGenericSend+0x5c>
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
 80050b6:	e7fe      	b.n	80050b6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d103      	bne.n	80050c6 <xQueueGenericSend+0x6a>
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <xQueueGenericSend+0x6e>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <xQueueGenericSend+0x70>
 80050ca:	2300      	movs	r3, #0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <xQueueGenericSend+0x88>
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	e7fe      	b.n	80050e2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050e4:	f001 f962 	bl	80063ac <xTaskGetSchedulerState>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d102      	bne.n	80050f4 <xQueueGenericSend+0x98>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <xQueueGenericSend+0x9c>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <xQueueGenericSend+0x9e>
 80050f8:	2300      	movs	r3, #0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <xQueueGenericSend+0xb6>
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	e7fe      	b.n	8005110 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005112:	f001 fe21 	bl	8006d58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <xQueueGenericSend+0xcc>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d129      	bne.n	800517c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800512e:	f000 f9ff 	bl	8005530 <prvCopyDataToQueue>
 8005132:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2b00      	cmp	r3, #0
 800513a:	d010      	beq.n	800515e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	3324      	adds	r3, #36	; 0x24
 8005140:	4618      	mov	r0, r3
 8005142:	f000 ff79 	bl	8006038 <xTaskRemoveFromEventList>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800514c:	4b3f      	ldr	r3, [pc, #252]	; (800524c <xQueueGenericSend+0x1f0>)
 800514e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	e00a      	b.n	8005174 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005164:	4b39      	ldr	r3, [pc, #228]	; (800524c <xQueueGenericSend+0x1f0>)
 8005166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005174:	f001 fe1e 	bl	8006db4 <vPortExitCritical>
				return pdPASS;
 8005178:	2301      	movs	r3, #1
 800517a:	e063      	b.n	8005244 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d103      	bne.n	800518a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005182:	f001 fe17 	bl	8006db4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005186:	2300      	movs	r3, #0
 8005188:	e05c      	b.n	8005244 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800518a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518c:	2b00      	cmp	r3, #0
 800518e:	d106      	bne.n	800519e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005190:	f107 0314 	add.w	r3, r7, #20
 8005194:	4618      	mov	r0, r3
 8005196:	f000 ffb1 	bl	80060fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800519a:	2301      	movs	r3, #1
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800519e:	f001 fe09 	bl	8006db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051a2:	f000 fd29 	bl	8005bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051a6:	f001 fdd7 	bl	8006d58 <vPortEnterCritical>
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051b0:	b25b      	sxtb	r3, r3
 80051b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b6:	d103      	bne.n	80051c0 <xQueueGenericSend+0x164>
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051c6:	b25b      	sxtb	r3, r3
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d103      	bne.n	80051d6 <xQueueGenericSend+0x17a>
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d6:	f001 fded 	bl	8006db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051da:	1d3a      	adds	r2, r7, #4
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 ffa0 	bl	8006128 <xTaskCheckForTimeOut>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d124      	bne.n	8005238 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051f0:	f000 fa96 	bl	8005720 <prvIsQueueFull>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d018      	beq.n	800522c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	3310      	adds	r3, #16
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	4611      	mov	r1, r2
 8005202:	4618      	mov	r0, r3
 8005204:	f000 feca 	bl	8005f9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800520a:	f000 fa21 	bl	8005650 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800520e:	f000 fd01 	bl	8005c14 <xTaskResumeAll>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	f47f af7c 	bne.w	8005112 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800521a:	4b0c      	ldr	r3, [pc, #48]	; (800524c <xQueueGenericSend+0x1f0>)
 800521c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	e772      	b.n	8005112 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800522c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800522e:	f000 fa0f 	bl	8005650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005232:	f000 fcef 	bl	8005c14 <xTaskResumeAll>
 8005236:	e76c      	b.n	8005112 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800523a:	f000 fa09 	bl	8005650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800523e:	f000 fce9 	bl	8005c14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005242:	2300      	movs	r3, #0
		}
	}
}
 8005244:	4618      	mov	r0, r3
 8005246:	3738      	adds	r7, #56	; 0x38
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	; 0x38
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <xQueueGenericSendFromISR+0x2c>
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
 800527a:	e7fe      	b.n	800527a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d103      	bne.n	800528a <xQueueGenericSendFromISR+0x3a>
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <xQueueGenericSendFromISR+0x3e>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <xQueueGenericSendFromISR+0x40>
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <xQueueGenericSendFromISR+0x58>
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	e7fe      	b.n	80052a6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d103      	bne.n	80052b6 <xQueueGenericSendFromISR+0x66>
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <xQueueGenericSendFromISR+0x6a>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <xQueueGenericSendFromISR+0x6c>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <xQueueGenericSendFromISR+0x84>
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	e7fe      	b.n	80052d2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052d4:	f001 fdfa 	bl	8006ecc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052d8:	f3ef 8211 	mrs	r2, BASEPRI
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61ba      	str	r2, [r7, #24]
 80052ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d302      	bcc.n	8005306 <xQueueGenericSendFromISR+0xb6>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d12c      	bne.n	8005360 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800530c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005316:	f000 f90b 	bl	8005530 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800531a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d112      	bne.n	800534a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	2b00      	cmp	r3, #0
 800532a:	d016      	beq.n	800535a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	3324      	adds	r3, #36	; 0x24
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fe81 	bl	8006038 <xTaskRemoveFromEventList>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00e      	beq.n	800535a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e007      	b.n	800535a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800534a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800534e:	3301      	adds	r3, #1
 8005350:	b2db      	uxtb	r3, r3
 8005352:	b25a      	sxtb	r2, r3
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800535a:	2301      	movs	r3, #1
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800535e:	e001      	b.n	8005364 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005360:	2300      	movs	r3, #0
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005370:	4618      	mov	r0, r3
 8005372:	3738      	adds	r7, #56	; 0x38
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08c      	sub	sp, #48	; 0x30
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005384:	2300      	movs	r3, #0
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <xQueueReceive+0x2e>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	e7fe      	b.n	80053a4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <xQueueReceive+0x3c>
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <xQueueReceive+0x40>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <xQueueReceive+0x42>
 80053b8:	2300      	movs	r3, #0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <xQueueReceive+0x5a>
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e7fe      	b.n	80053d0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053d2:	f000 ffeb 	bl	80063ac <xTaskGetSchedulerState>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d102      	bne.n	80053e2 <xQueueReceive+0x6a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <xQueueReceive+0x6e>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <xQueueReceive+0x70>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d109      	bne.n	8005400 <xQueueReceive+0x88>
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e7fe      	b.n	80053fe <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005400:	f001 fcaa 	bl	8006d58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01f      	beq.n	8005450 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005414:	f000 f8f6 	bl	8005604 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	1e5a      	subs	r2, r3, #1
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00f      	beq.n	8005448 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	3310      	adds	r3, #16
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fe03 	bl	8006038 <xTaskRemoveFromEventList>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005438:	4b3c      	ldr	r3, [pc, #240]	; (800552c <xQueueReceive+0x1b4>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005448:	f001 fcb4 	bl	8006db4 <vPortExitCritical>
				return pdPASS;
 800544c:	2301      	movs	r3, #1
 800544e:	e069      	b.n	8005524 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005456:	f001 fcad 	bl	8006db4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800545a:	2300      	movs	r3, #0
 800545c:	e062      	b.n	8005524 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005464:	f107 0310 	add.w	r3, r7, #16
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fe47 	bl	80060fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800546e:	2301      	movs	r3, #1
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005472:	f001 fc9f 	bl	8006db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005476:	f000 fbbf 	bl	8005bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800547a:	f001 fc6d 	bl	8006d58 <vPortEnterCritical>
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005484:	b25b      	sxtb	r3, r3
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d103      	bne.n	8005494 <xQueueReceive+0x11c>
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800549a:	b25b      	sxtb	r3, r3
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d103      	bne.n	80054aa <xQueueReceive+0x132>
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054aa:	f001 fc83 	bl	8006db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ae:	1d3a      	adds	r2, r7, #4
 80054b0:	f107 0310 	add.w	r3, r7, #16
 80054b4:	4611      	mov	r1, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fe36 	bl	8006128 <xTaskCheckForTimeOut>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d123      	bne.n	800550a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054c4:	f000 f916 	bl	80056f4 <prvIsQueueEmpty>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d017      	beq.n	80054fe <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	3324      	adds	r3, #36	; 0x24
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fd60 	bl	8005f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054de:	f000 f8b7 	bl	8005650 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054e2:	f000 fb97 	bl	8005c14 <xTaskResumeAll>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d189      	bne.n	8005400 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <xQueueReceive+0x1b4>)
 80054ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	e780      	b.n	8005400 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005500:	f000 f8a6 	bl	8005650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005504:	f000 fb86 	bl	8005c14 <xTaskResumeAll>
 8005508:	e77a      	b.n	8005400 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800550a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800550c:	f000 f8a0 	bl	8005650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005510:	f000 fb80 	bl	8005c14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005516:	f000 f8ed 	bl	80056f4 <prvIsQueueEmpty>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	f43f af6f 	beq.w	8005400 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005522:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005524:	4618      	mov	r0, r3
 8005526:	3730      	adds	r7, #48	; 0x30
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10d      	bne.n	800556a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d14d      	bne.n	80055f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 ff44 	bl	80063e8 <xTaskPriorityDisinherit>
 8005560:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	605a      	str	r2, [r3, #4]
 8005568:	e043      	b.n	80055f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d119      	bne.n	80055a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6898      	ldr	r0, [r3, #8]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	461a      	mov	r2, r3
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	f001 fee9 	bl	8007352 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	441a      	add	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d32b      	bcc.n	80055f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	609a      	str	r2, [r3, #8]
 80055a2:	e026      	b.n	80055f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68d8      	ldr	r0, [r3, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	461a      	mov	r2, r3
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	f001 fecf 	bl	8007352 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	425b      	negs	r3, r3
 80055be:	441a      	add	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d207      	bcs.n	80055e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	425b      	negs	r3, r3
 80055da:	441a      	add	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d105      	bne.n	80055f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055fa:	697b      	ldr	r3, [r7, #20]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d018      	beq.n	8005648 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	441a      	add	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	429a      	cmp	r2, r3
 800562e:	d303      	bcc.n	8005638 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68d9      	ldr	r1, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	461a      	mov	r2, r3
 8005642:	6838      	ldr	r0, [r7, #0]
 8005644:	f001 fe85 	bl	8007352 <memcpy>
	}
}
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005658:	f001 fb7e 	bl	8006d58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005662:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005664:	e011      	b.n	800568a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d012      	beq.n	8005694 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3324      	adds	r3, #36	; 0x24
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fce0 	bl	8006038 <xTaskRemoveFromEventList>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800567e:	f000 fdb3 	bl	80061e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	3b01      	subs	r3, #1
 8005686:	b2db      	uxtb	r3, r3
 8005688:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800568a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800568e:	2b00      	cmp	r3, #0
 8005690:	dce9      	bgt.n	8005666 <prvUnlockQueue+0x16>
 8005692:	e000      	b.n	8005696 <prvUnlockQueue+0x46>
					break;
 8005694:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	22ff      	movs	r2, #255	; 0xff
 800569a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800569e:	f001 fb89 	bl	8006db4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056a2:	f001 fb59 	bl	8006d58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056ae:	e011      	b.n	80056d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d012      	beq.n	80056de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3310      	adds	r3, #16
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fcbb 	bl	8006038 <xTaskRemoveFromEventList>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056c8:	f000 fd8e 	bl	80061e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056cc:	7bbb      	ldrb	r3, [r7, #14]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	dce9      	bgt.n	80056b0 <prvUnlockQueue+0x60>
 80056dc:	e000      	b.n	80056e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	22ff      	movs	r2, #255	; 0xff
 80056e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056e8:	f001 fb64 	bl	8006db4 <vPortExitCritical>
}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056fc:	f001 fb2c 	bl	8006d58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005708:	2301      	movs	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	e001      	b.n	8005712 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005712:	f001 fb4f 	bl	8006db4 <vPortExitCritical>

	return xReturn;
 8005716:	68fb      	ldr	r3, [r7, #12]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005728:	f001 fb16 	bl	8006d58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005734:	429a      	cmp	r2, r3
 8005736:	d102      	bne.n	800573e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005738:	2301      	movs	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e001      	b.n	8005742 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005742:	f001 fb37 	bl	8006db4 <vPortExitCritical>

	return xReturn;
 8005746:	68fb      	ldr	r3, [r7, #12]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	e014      	b.n	800578a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005760:	4a0e      	ldr	r2, [pc, #56]	; (800579c <vQueueAddToRegistry+0x4c>)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10b      	bne.n	8005784 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800576c:	490b      	ldr	r1, [pc, #44]	; (800579c <vQueueAddToRegistry+0x4c>)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <vQueueAddToRegistry+0x4c>)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4413      	add	r3, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005782:	e005      	b.n	8005790 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b07      	cmp	r3, #7
 800578e:	d9e7      	bls.n	8005760 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005790:	bf00      	nop
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20002b14 	.word	0x20002b14

080057a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057b0:	f001 fad2 	bl	8006d58 <vPortEnterCritical>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ba:	b25b      	sxtb	r3, r3
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d103      	bne.n	80057ca <vQueueWaitForMessageRestricted+0x2a>
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057d0:	b25b      	sxtb	r3, r3
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d103      	bne.n	80057e0 <vQueueWaitForMessageRestricted+0x40>
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e0:	f001 fae8 	bl	8006db4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3324      	adds	r3, #36	; 0x24
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	68b9      	ldr	r1, [r7, #8]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fbf5 	bl	8005fe4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057fa:	6978      	ldr	r0, [r7, #20]
 80057fc:	f7ff ff28 	bl	8005650 <prvUnlockQueue>
	}
 8005800:	bf00      	nop
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08e      	sub	sp, #56	; 0x38
 800580c:	af04      	add	r7, sp, #16
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <xTaskCreateStatic+0x28>
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	623b      	str	r3, [r7, #32]
 800582e:	e7fe      	b.n	800582e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <xTaskCreateStatic+0x42>
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	e7fe      	b.n	8005848 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800584a:	235c      	movs	r3, #92	; 0x5c
 800584c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b5c      	cmp	r3, #92	; 0x5c
 8005852:	d009      	beq.n	8005868 <xTaskCreateStatic+0x60>
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	e7fe      	b.n	8005866 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01e      	beq.n	80058ac <xTaskCreateStatic+0xa4>
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800587c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	2202      	movs	r2, #2
 8005882:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005886:	2300      	movs	r3, #0
 8005888:	9303      	str	r3, [sp, #12]
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	9302      	str	r3, [sp, #8]
 800588e:	f107 0314 	add.w	r3, r7, #20
 8005892:	9301      	str	r3, [sp, #4]
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f850 	bl	8005944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058a6:	f000 f8d3 	bl	8005a50 <prvAddNewTaskToReadyList>
 80058aa:	e001      	b.n	80058b0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058b0:	697b      	ldr	r3, [r7, #20]
	}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3728      	adds	r7, #40	; 0x28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b08c      	sub	sp, #48	; 0x30
 80058be:	af04      	add	r7, sp, #16
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	603b      	str	r3, [r7, #0]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f001 fb38 	bl	8006f44 <pvPortMalloc>
 80058d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00e      	beq.n	80058fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80058dc:	205c      	movs	r0, #92	; 0x5c
 80058de:	f001 fb31 	bl	8006f44 <pvPortMalloc>
 80058e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
 80058f0:	e005      	b.n	80058fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058f2:	6978      	ldr	r0, [r7, #20]
 80058f4:	f001 fbe8 	bl	80070c8 <vPortFree>
 80058f8:	e001      	b.n	80058fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d017      	beq.n	8005934 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800590c:	88fa      	ldrh	r2, [r7, #6]
 800590e:	2300      	movs	r3, #0
 8005910:	9303      	str	r3, [sp, #12]
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	9302      	str	r3, [sp, #8]
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f80e 	bl	8005944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005928:	69f8      	ldr	r0, [r7, #28]
 800592a:	f000 f891 	bl	8005a50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800592e:	2301      	movs	r3, #1
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	e002      	b.n	800593a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005934:	f04f 33ff 	mov.w	r3, #4294967295
 8005938:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800593a:	69bb      	ldr	r3, [r7, #24]
	}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	461a      	mov	r2, r3
 800595c:	21a5      	movs	r1, #165	; 0xa5
 800595e:	f001 fd03 	bl	8007368 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800596c:	3b01      	subs	r3, #1
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	f023 0307 	bic.w	r3, r3, #7
 800597a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <prvInitialiseNewTask+0x56>
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	e7fe      	b.n	8005998 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	e012      	b.n	80059c6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	7819      	ldrb	r1, [r3, #0]
 80059a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	3334      	adds	r3, #52	; 0x34
 80059b0:	460a      	mov	r2, r1
 80059b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d006      	beq.n	80059ce <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	3301      	adds	r3, #1
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b0f      	cmp	r3, #15
 80059ca:	d9e9      	bls.n	80059a0 <prvInitialiseNewTask+0x5c>
 80059cc:	e000      	b.n	80059d0 <prvInitialiseNewTask+0x8c>
		{
			break;
 80059ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	2b37      	cmp	r3, #55	; 0x37
 80059dc:	d901      	bls.n	80059e2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059de:	2337      	movs	r3, #55	; 0x37
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	2200      	movs	r2, #0
 80059f2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	3304      	adds	r3, #4
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff f9a0 	bl	8004d3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	3318      	adds	r3, #24
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff f99b 	bl	8004d3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	2200      	movs	r2, #0
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	69b8      	ldr	r0, [r7, #24]
 8005a32:	f001 f8a3 	bl	8006b7c <pxPortInitialiseStack>
 8005a36:	4602      	mov	r2, r0
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a48:	bf00      	nop
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a58:	f001 f97e 	bl	8006d58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a5c:	4b2d      	ldr	r3, [pc, #180]	; (8005b14 <prvAddNewTaskToReadyList+0xc4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3301      	adds	r3, #1
 8005a62:	4a2c      	ldr	r2, [pc, #176]	; (8005b14 <prvAddNewTaskToReadyList+0xc4>)
 8005a64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a66:	4b2c      	ldr	r3, [pc, #176]	; (8005b18 <prvAddNewTaskToReadyList+0xc8>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a6e:	4a2a      	ldr	r2, [pc, #168]	; (8005b18 <prvAddNewTaskToReadyList+0xc8>)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a74:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <prvAddNewTaskToReadyList+0xc4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d110      	bne.n	8005a9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a7c:	f000 fbd8 	bl	8006230 <prvInitialiseTaskLists>
 8005a80:	e00d      	b.n	8005a9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a82:	4b26      	ldr	r3, [pc, #152]	; (8005b1c <prvAddNewTaskToReadyList+0xcc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a8a:	4b23      	ldr	r3, [pc, #140]	; (8005b18 <prvAddNewTaskToReadyList+0xc8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d802      	bhi.n	8005a9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a98:	4a1f      	ldr	r2, [pc, #124]	; (8005b18 <prvAddNewTaskToReadyList+0xc8>)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a9e:	4b20      	ldr	r3, [pc, #128]	; (8005b20 <prvAddNewTaskToReadyList+0xd0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	4a1e      	ldr	r2, [pc, #120]	; (8005b20 <prvAddNewTaskToReadyList+0xd0>)
 8005aa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005aa8:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <prvAddNewTaskToReadyList+0xd0>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab4:	4b1b      	ldr	r3, [pc, #108]	; (8005b24 <prvAddNewTaskToReadyList+0xd4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d903      	bls.n	8005ac4 <prvAddNewTaskToReadyList+0x74>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	4a18      	ldr	r2, [pc, #96]	; (8005b24 <prvAddNewTaskToReadyList+0xd4>)
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <prvAddNewTaskToReadyList+0xd8>)
 8005ad2:	441a      	add	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f7ff f93b 	bl	8004d56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ae0:	f001 f968 	bl	8006db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ae4:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <prvAddNewTaskToReadyList+0xcc>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00e      	beq.n	8005b0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <prvAddNewTaskToReadyList+0xc8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d207      	bcs.n	8005b0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <prvAddNewTaskToReadyList+0xdc>)
 8005afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000c1c 	.word	0x20000c1c
 8005b18:	20000748 	.word	0x20000748
 8005b1c:	20000c28 	.word	0x20000c28
 8005b20:	20000c38 	.word	0x20000c38
 8005b24:	20000c24 	.word	0x20000c24
 8005b28:	2000074c 	.word	0x2000074c
 8005b2c:	e000ed04 	.word	0xe000ed04

08005b30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08a      	sub	sp, #40	; 0x28
 8005b34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b3e:	463a      	mov	r2, r7
 8005b40:	1d39      	adds	r1, r7, #4
 8005b42:	f107 0308 	add.w	r3, r7, #8
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff f8a8 	bl	8004c9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	9202      	str	r2, [sp, #8]
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	2300      	movs	r3, #0
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	460a      	mov	r2, r1
 8005b5e:	4920      	ldr	r1, [pc, #128]	; (8005be0 <vTaskStartScheduler+0xb0>)
 8005b60:	4820      	ldr	r0, [pc, #128]	; (8005be4 <vTaskStartScheduler+0xb4>)
 8005b62:	f7ff fe51 	bl	8005808 <xTaskCreateStatic>
 8005b66:	4602      	mov	r2, r0
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <vTaskStartScheduler+0xb8>)
 8005b6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b6c:	4b1e      	ldr	r3, [pc, #120]	; (8005be8 <vTaskStartScheduler+0xb8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b74:	2301      	movs	r3, #1
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	e001      	b.n	8005b7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d102      	bne.n	8005b8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b84:	f000 fcf0 	bl	8006568 <xTimerCreateTimerTask>
 8005b88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d115      	bne.n	8005bbc <vTaskStartScheduler+0x8c>
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <vTaskStartScheduler+0xbc>)
 8005ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <vTaskStartScheduler+0xc0>)
 8005bac:	2201      	movs	r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005bb0:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <vTaskStartScheduler+0xc4>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bb6:	f001 f85f 	bl	8006c78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bba:	e00d      	b.n	8005bd8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d109      	bne.n	8005bd8 <vTaskStartScheduler+0xa8>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e7fe      	b.n	8005bd6 <vTaskStartScheduler+0xa6>
}
 8005bd8:	bf00      	nop
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	08008034 	.word	0x08008034
 8005be4:	08006201 	.word	0x08006201
 8005be8:	20000c40 	.word	0x20000c40
 8005bec:	20000c3c 	.word	0x20000c3c
 8005bf0:	20000c28 	.word	0x20000c28
 8005bf4:	20000c20 	.word	0x20000c20

08005bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005bfc:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <vTaskSuspendAll+0x18>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3301      	adds	r3, #1
 8005c02:	4a03      	ldr	r2, [pc, #12]	; (8005c10 <vTaskSuspendAll+0x18>)
 8005c04:	6013      	str	r3, [r2, #0]
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bc80      	pop	{r7}
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000c44 	.word	0x20000c44

08005c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c22:	4b41      	ldr	r3, [pc, #260]	; (8005d28 <xTaskResumeAll+0x114>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <xTaskResumeAll+0x2a>
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	e7fe      	b.n	8005c3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c3e:	f001 f88b 	bl	8006d58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c42:	4b39      	ldr	r3, [pc, #228]	; (8005d28 <xTaskResumeAll+0x114>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	4a37      	ldr	r2, [pc, #220]	; (8005d28 <xTaskResumeAll+0x114>)
 8005c4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c4c:	4b36      	ldr	r3, [pc, #216]	; (8005d28 <xTaskResumeAll+0x114>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d162      	bne.n	8005d1a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c54:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <xTaskResumeAll+0x118>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d05e      	beq.n	8005d1a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c5c:	e02f      	b.n	8005cbe <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c5e:	4b34      	ldr	r3, [pc, #208]	; (8005d30 <xTaskResumeAll+0x11c>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3318      	adds	r3, #24
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff f8ce 	bl	8004e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3304      	adds	r3, #4
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff f8c9 	bl	8004e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7e:	4b2d      	ldr	r3, [pc, #180]	; (8005d34 <xTaskResumeAll+0x120>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d903      	bls.n	8005c8e <xTaskResumeAll+0x7a>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	4a2a      	ldr	r2, [pc, #168]	; (8005d34 <xTaskResumeAll+0x120>)
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4a27      	ldr	r2, [pc, #156]	; (8005d38 <xTaskResumeAll+0x124>)
 8005c9c:	441a      	add	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f7ff f856 	bl	8004d56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cae:	4b23      	ldr	r3, [pc, #140]	; (8005d3c <xTaskResumeAll+0x128>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005cb8:	4b21      	ldr	r3, [pc, #132]	; (8005d40 <xTaskResumeAll+0x12c>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cbe:	4b1c      	ldr	r3, [pc, #112]	; (8005d30 <xTaskResumeAll+0x11c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1cb      	bne.n	8005c5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ccc:	f000 fb4a 	bl	8006364 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cd0:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <xTaskResumeAll+0x130>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d010      	beq.n	8005cfe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cdc:	f000 f844 	bl	8005d68 <xTaskIncrementTick>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005ce6:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <xTaskResumeAll+0x12c>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f1      	bne.n	8005cdc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005cf8:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <xTaskResumeAll+0x130>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cfe:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <xTaskResumeAll+0x12c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d06:	2301      	movs	r3, #1
 8005d08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d0a:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <xTaskResumeAll+0x134>)
 8005d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d1a:	f001 f84b 	bl	8006db4 <vPortExitCritical>

	return xAlreadyYielded;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20000c44 	.word	0x20000c44
 8005d2c:	20000c1c 	.word	0x20000c1c
 8005d30:	20000bdc 	.word	0x20000bdc
 8005d34:	20000c24 	.word	0x20000c24
 8005d38:	2000074c 	.word	0x2000074c
 8005d3c:	20000748 	.word	0x20000748
 8005d40:	20000c30 	.word	0x20000c30
 8005d44:	20000c2c 	.word	0x20000c2c
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d52:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <xTaskGetTickCount+0x18>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d58:	687b      	ldr	r3, [r7, #4]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr
 8005d64:	20000c20 	.word	0x20000c20

08005d68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d72:	4b51      	ldr	r3, [pc, #324]	; (8005eb8 <xTaskIncrementTick+0x150>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 808d 	bne.w	8005e96 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d7c:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <xTaskIncrementTick+0x154>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d84:	4a4d      	ldr	r2, [pc, #308]	; (8005ebc <xTaskIncrementTick+0x154>)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d11f      	bne.n	8005dd0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d90:	4b4b      	ldr	r3, [pc, #300]	; (8005ec0 <xTaskIncrementTick+0x158>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <xTaskIncrementTick+0x46>
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	e7fe      	b.n	8005dac <xTaskIncrementTick+0x44>
 8005dae:	4b44      	ldr	r3, [pc, #272]	; (8005ec0 <xTaskIncrementTick+0x158>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	4b43      	ldr	r3, [pc, #268]	; (8005ec4 <xTaskIncrementTick+0x15c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a41      	ldr	r2, [pc, #260]	; (8005ec0 <xTaskIncrementTick+0x158>)
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	4a41      	ldr	r2, [pc, #260]	; (8005ec4 <xTaskIncrementTick+0x15c>)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	4b41      	ldr	r3, [pc, #260]	; (8005ec8 <xTaskIncrementTick+0x160>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	4a3f      	ldr	r2, [pc, #252]	; (8005ec8 <xTaskIncrementTick+0x160>)
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	f000 faca 	bl	8006364 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dd0:	4b3e      	ldr	r3, [pc, #248]	; (8005ecc <xTaskIncrementTick+0x164>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d34e      	bcc.n	8005e78 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dda:	4b39      	ldr	r3, [pc, #228]	; (8005ec0 <xTaskIncrementTick+0x158>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <xTaskIncrementTick+0x80>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <xTaskIncrementTick+0x82>
 8005de8:	2300      	movs	r3, #0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dee:	4b37      	ldr	r3, [pc, #220]	; (8005ecc <xTaskIncrementTick+0x164>)
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	601a      	str	r2, [r3, #0]
					break;
 8005df6:	e03f      	b.n	8005e78 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005df8:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <xTaskIncrementTick+0x158>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d203      	bcs.n	8005e18 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e10:	4a2e      	ldr	r2, [pc, #184]	; (8005ecc <xTaskIncrementTick+0x164>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6013      	str	r3, [r2, #0]
						break;
 8005e16:	e02f      	b.n	8005e78 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fe fff5 	bl	8004e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3318      	adds	r3, #24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe ffec 	bl	8004e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e38:	4b25      	ldr	r3, [pc, #148]	; (8005ed0 <xTaskIncrementTick+0x168>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d903      	bls.n	8005e48 <xTaskIncrementTick+0xe0>
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	4a22      	ldr	r2, [pc, #136]	; (8005ed0 <xTaskIncrementTick+0x168>)
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <xTaskIncrementTick+0x16c>)
 8005e56:	441a      	add	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f7fe ff79 	bl	8004d56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <xTaskIncrementTick+0x170>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d3b3      	bcc.n	8005dda <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005e72:	2301      	movs	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e76:	e7b0      	b.n	8005dda <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e78:	4b17      	ldr	r3, [pc, #92]	; (8005ed8 <xTaskIncrementTick+0x170>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	4915      	ldr	r1, [pc, #84]	; (8005ed4 <xTaskIncrementTick+0x16c>)
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d907      	bls.n	8005ea0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005e90:	2301      	movs	r3, #1
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e004      	b.n	8005ea0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e96:	4b11      	ldr	r3, [pc, #68]	; (8005edc <xTaskIncrementTick+0x174>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	4a0f      	ldr	r2, [pc, #60]	; (8005edc <xTaskIncrementTick+0x174>)
 8005e9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <xTaskIncrementTick+0x178>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005eac:	697b      	ldr	r3, [r7, #20]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000c44 	.word	0x20000c44
 8005ebc:	20000c20 	.word	0x20000c20
 8005ec0:	20000bd4 	.word	0x20000bd4
 8005ec4:	20000bd8 	.word	0x20000bd8
 8005ec8:	20000c34 	.word	0x20000c34
 8005ecc:	20000c3c 	.word	0x20000c3c
 8005ed0:	20000c24 	.word	0x20000c24
 8005ed4:	2000074c 	.word	0x2000074c
 8005ed8:	20000748 	.word	0x20000748
 8005edc:	20000c2c 	.word	0x20000c2c
 8005ee0:	20000c30 	.word	0x20000c30

08005ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eea:	4b27      	ldr	r3, [pc, #156]	; (8005f88 <vTaskSwitchContext+0xa4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ef2:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <vTaskSwitchContext+0xa8>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ef8:	e040      	b.n	8005f7c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005efa:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <vTaskSwitchContext+0xa8>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005f00:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <vTaskSwitchContext+0xac>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	e00f      	b.n	8005f28 <vTaskSwitchContext+0x44>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d109      	bne.n	8005f22 <vTaskSwitchContext+0x3e>
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	e7fe      	b.n	8005f20 <vTaskSwitchContext+0x3c>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	491a      	ldr	r1, [pc, #104]	; (8005f94 <vTaskSwitchContext+0xb0>)
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0e5      	beq.n	8005f08 <vTaskSwitchContext+0x24>
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4a13      	ldr	r2, [pc, #76]	; (8005f94 <vTaskSwitchContext+0xb0>)
 8005f48:	4413      	add	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d104      	bne.n	8005f6c <vTaskSwitchContext+0x88>
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	605a      	str	r2, [r3, #4]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	4a09      	ldr	r2, [pc, #36]	; (8005f98 <vTaskSwitchContext+0xb4>)
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	4a06      	ldr	r2, [pc, #24]	; (8005f90 <vTaskSwitchContext+0xac>)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6013      	str	r3, [r2, #0]
}
 8005f7c:	bf00      	nop
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	20000c44 	.word	0x20000c44
 8005f8c:	20000c30 	.word	0x20000c30
 8005f90:	20000c24 	.word	0x20000c24
 8005f94:	2000074c 	.word	0x2000074c
 8005f98:	20000748 	.word	0x20000748

08005f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <vTaskPlaceOnEventList+0x24>
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	e7fe      	b.n	8005fbe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fc0:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <vTaskPlaceOnEventList+0x44>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3318      	adds	r3, #24
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fe fee7 	bl	8004d9c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fce:	2101      	movs	r1, #1
 8005fd0:	6838      	ldr	r0, [r7, #0]
 8005fd2:	f000 fa75 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000748 	.word	0x20000748

08005fe4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <vTaskPlaceOnEventListRestricted+0x26>
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e7fe      	b.n	8006008 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <vTaskPlaceOnEventListRestricted+0x50>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3318      	adds	r3, #24
 8006010:	4619      	mov	r1, r3
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7fe fe9f 	bl	8004d56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	68b8      	ldr	r0, [r7, #8]
 8006028:	f000 fa4a 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
	}
 800602c:	bf00      	nop
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000748 	.word	0x20000748

08006038 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d109      	bne.n	8006062 <xTaskRemoveFromEventList+0x2a>
 800604e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e7fe      	b.n	8006060 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	3318      	adds	r3, #24
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe fed0 	bl	8004e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800606c:	4b1d      	ldr	r3, [pc, #116]	; (80060e4 <xTaskRemoveFromEventList+0xac>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11d      	bne.n	80060b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	3304      	adds	r3, #4
 8006078:	4618      	mov	r0, r3
 800607a:	f7fe fec7 	bl	8004e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006082:	4b19      	ldr	r3, [pc, #100]	; (80060e8 <xTaskRemoveFromEventList+0xb0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d903      	bls.n	8006092 <xTaskRemoveFromEventList+0x5a>
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	4a16      	ldr	r2, [pc, #88]	; (80060e8 <xTaskRemoveFromEventList+0xb0>)
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4a13      	ldr	r2, [pc, #76]	; (80060ec <xTaskRemoveFromEventList+0xb4>)
 80060a0:	441a      	add	r2, r3
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7fe fe54 	bl	8004d56 <vListInsertEnd>
 80060ae:	e005      	b.n	80060bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	3318      	adds	r3, #24
 80060b4:	4619      	mov	r1, r3
 80060b6:	480e      	ldr	r0, [pc, #56]	; (80060f0 <xTaskRemoveFromEventList+0xb8>)
 80060b8:	f7fe fe4d 	bl	8004d56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <xTaskRemoveFromEventList+0xbc>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d905      	bls.n	80060d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060ca:	2301      	movs	r3, #1
 80060cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <xTaskRemoveFromEventList+0xc0>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e001      	b.n	80060da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80060da:	697b      	ldr	r3, [r7, #20]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000c44 	.word	0x20000c44
 80060e8:	20000c24 	.word	0x20000c24
 80060ec:	2000074c 	.word	0x2000074c
 80060f0:	20000bdc 	.word	0x20000bdc
 80060f4:	20000748 	.word	0x20000748
 80060f8:	20000c30 	.word	0x20000c30

080060fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006104:	4b06      	ldr	r3, [pc, #24]	; (8006120 <vTaskInternalSetTimeOutState+0x24>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800610c:	4b05      	ldr	r3, [pc, #20]	; (8006124 <vTaskInternalSetTimeOutState+0x28>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	605a      	str	r2, [r3, #4]
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	20000c34 	.word	0x20000c34
 8006124:	20000c20 	.word	0x20000c20

08006128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d109      	bne.n	800614c <xTaskCheckForTimeOut+0x24>
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	e7fe      	b.n	800614a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <xTaskCheckForTimeOut+0x3e>
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e7fe      	b.n	8006164 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006166:	f000 fdf7 	bl	8006d58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800616a:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <xTaskCheckForTimeOut+0xb8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d102      	bne.n	800618a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	e023      	b.n	80061d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <xTaskCheckForTimeOut+0xbc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d007      	beq.n	80061a6 <xTaskCheckForTimeOut+0x7e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	429a      	cmp	r2, r3
 800619e:	d302      	bcc.n	80061a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	e015      	b.n	80061d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d20b      	bcs.n	80061c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1ad2      	subs	r2, r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff ff9d 	bl	80060fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	e004      	b.n	80061d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061ce:	2301      	movs	r3, #1
 80061d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061d2:	f000 fdef 	bl	8006db4 <vPortExitCritical>

	return xReturn;
 80061d6:	69fb      	ldr	r3, [r7, #28]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20000c20 	.word	0x20000c20
 80061e4:	20000c34 	.word	0x20000c34

080061e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061ec:	4b03      	ldr	r3, [pc, #12]	; (80061fc <vTaskMissedYield+0x14>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
}
 80061f2:	bf00      	nop
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	20000c30 	.word	0x20000c30

08006200 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006208:	f000 f852 	bl	80062b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800620c:	4b06      	ldr	r3, [pc, #24]	; (8006228 <prvIdleTask+0x28>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d9f9      	bls.n	8006208 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <prvIdleTask+0x2c>)
 8006216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006224:	e7f0      	b.n	8006208 <prvIdleTask+0x8>
 8006226:	bf00      	nop
 8006228:	2000074c 	.word	0x2000074c
 800622c:	e000ed04 	.word	0xe000ed04

08006230 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006236:	2300      	movs	r3, #0
 8006238:	607b      	str	r3, [r7, #4]
 800623a:	e00c      	b.n	8006256 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4a12      	ldr	r2, [pc, #72]	; (8006290 <prvInitialiseTaskLists+0x60>)
 8006248:	4413      	add	r3, r2
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fd58 	bl	8004d00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3301      	adds	r3, #1
 8006254:	607b      	str	r3, [r7, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b37      	cmp	r3, #55	; 0x37
 800625a:	d9ef      	bls.n	800623c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800625c:	480d      	ldr	r0, [pc, #52]	; (8006294 <prvInitialiseTaskLists+0x64>)
 800625e:	f7fe fd4f 	bl	8004d00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006262:	480d      	ldr	r0, [pc, #52]	; (8006298 <prvInitialiseTaskLists+0x68>)
 8006264:	f7fe fd4c 	bl	8004d00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006268:	480c      	ldr	r0, [pc, #48]	; (800629c <prvInitialiseTaskLists+0x6c>)
 800626a:	f7fe fd49 	bl	8004d00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800626e:	480c      	ldr	r0, [pc, #48]	; (80062a0 <prvInitialiseTaskLists+0x70>)
 8006270:	f7fe fd46 	bl	8004d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006274:	480b      	ldr	r0, [pc, #44]	; (80062a4 <prvInitialiseTaskLists+0x74>)
 8006276:	f7fe fd43 	bl	8004d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800627a:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <prvInitialiseTaskLists+0x78>)
 800627c:	4a05      	ldr	r2, [pc, #20]	; (8006294 <prvInitialiseTaskLists+0x64>)
 800627e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <prvInitialiseTaskLists+0x7c>)
 8006282:	4a05      	ldr	r2, [pc, #20]	; (8006298 <prvInitialiseTaskLists+0x68>)
 8006284:	601a      	str	r2, [r3, #0]
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	2000074c 	.word	0x2000074c
 8006294:	20000bac 	.word	0x20000bac
 8006298:	20000bc0 	.word	0x20000bc0
 800629c:	20000bdc 	.word	0x20000bdc
 80062a0:	20000bf0 	.word	0x20000bf0
 80062a4:	20000c08 	.word	0x20000c08
 80062a8:	20000bd4 	.word	0x20000bd4
 80062ac:	20000bd8 	.word	0x20000bd8

080062b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062b6:	e019      	b.n	80062ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062b8:	f000 fd4e 	bl	8006d58 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80062bc:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <prvCheckTasksWaitingTermination+0x4c>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fe fd9f 	bl	8004e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <prvCheckTasksWaitingTermination+0x50>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	4a0a      	ldr	r2, [pc, #40]	; (8006300 <prvCheckTasksWaitingTermination+0x50>)
 80062d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062d8:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <prvCheckTasksWaitingTermination+0x54>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3b01      	subs	r3, #1
 80062de:	4a09      	ldr	r2, [pc, #36]	; (8006304 <prvCheckTasksWaitingTermination+0x54>)
 80062e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062e2:	f000 fd67 	bl	8006db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f80e 	bl	8006308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ec:	4b05      	ldr	r3, [pc, #20]	; (8006304 <prvCheckTasksWaitingTermination+0x54>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e1      	bne.n	80062b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062f4:	bf00      	nop
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20000bf0 	.word	0x20000bf0
 8006300:	20000c1c 	.word	0x20000c1c
 8006304:	20000c04 	.word	0x20000c04

08006308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006316:	2b00      	cmp	r3, #0
 8006318:	d108      	bne.n	800632c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fed2 	bl	80070c8 <vPortFree>
				vPortFree( pxTCB );
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fecf 	bl	80070c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800632a:	e017      	b.n	800635c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006332:	2b01      	cmp	r3, #1
 8006334:	d103      	bne.n	800633e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fec6 	bl	80070c8 <vPortFree>
	}
 800633c:	e00e      	b.n	800635c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006344:	2b02      	cmp	r3, #2
 8006346:	d009      	beq.n	800635c <prvDeleteTCB+0x54>
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	e7fe      	b.n	800635a <prvDeleteTCB+0x52>
	}
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800636a:	4b0e      	ldr	r3, [pc, #56]	; (80063a4 <prvResetNextTaskUnblockTime+0x40>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <prvResetNextTaskUnblockTime+0x14>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <prvResetNextTaskUnblockTime+0x16>
 8006378:	2300      	movs	r3, #0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800637e:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <prvResetNextTaskUnblockTime+0x44>)
 8006380:	f04f 32ff 	mov.w	r2, #4294967295
 8006384:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006386:	e008      	b.n	800639a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006388:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <prvResetNextTaskUnblockTime+0x40>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	4a04      	ldr	r2, [pc, #16]	; (80063a8 <prvResetNextTaskUnblockTime+0x44>)
 8006398:	6013      	str	r3, [r2, #0]
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	bc80      	pop	{r7}
 80063a2:	4770      	bx	lr
 80063a4:	20000bd4 	.word	0x20000bd4
 80063a8:	20000c3c 	.word	0x20000c3c

080063ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063b2:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <xTaskGetSchedulerState+0x34>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063ba:	2301      	movs	r3, #1
 80063bc:	607b      	str	r3, [r7, #4]
 80063be:	e008      	b.n	80063d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063c0:	4b08      	ldr	r3, [pc, #32]	; (80063e4 <xTaskGetSchedulerState+0x38>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d102      	bne.n	80063ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063c8:	2302      	movs	r3, #2
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	e001      	b.n	80063d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063ce:	2300      	movs	r3, #0
 80063d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063d2:	687b      	ldr	r3, [r7, #4]
	}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000c28 	.word	0x20000c28
 80063e4:	20000c44 	.word	0x20000c44

080063e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d054      	beq.n	80064a8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063fe:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <xTaskPriorityDisinherit+0xcc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	429a      	cmp	r2, r3
 8006406:	d009      	beq.n	800641c <xTaskPriorityDisinherit+0x34>
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	e7fe      	b.n	800641a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006420:	2b00      	cmp	r3, #0
 8006422:	d109      	bne.n	8006438 <xTaskPriorityDisinherit+0x50>
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	60bb      	str	r3, [r7, #8]
 8006436:	e7fe      	b.n	8006436 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643c:	1e5a      	subs	r2, r3, #1
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	429a      	cmp	r2, r3
 800644c:	d02c      	beq.n	80064a8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006452:	2b00      	cmp	r3, #0
 8006454:	d128      	bne.n	80064a8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3304      	adds	r3, #4
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe fcd6 	bl	8004e0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <xTaskPriorityDisinherit+0xd0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d903      	bls.n	8006488 <xTaskPriorityDisinherit+0xa0>
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a0c      	ldr	r2, [pc, #48]	; (80064b8 <xTaskPriorityDisinherit+0xd0>)
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4a09      	ldr	r2, [pc, #36]	; (80064bc <xTaskPriorityDisinherit+0xd4>)
 8006496:	441a      	add	r2, r3
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fe fc59 	bl	8004d56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064a4:	2301      	movs	r3, #1
 80064a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064a8:	697b      	ldr	r3, [r7, #20]
	}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000748 	.word	0x20000748
 80064b8:	20000c24 	.word	0x20000c24
 80064bc:	2000074c 	.word	0x2000074c

080064c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064ca:	4b21      	ldr	r3, [pc, #132]	; (8006550 <prvAddCurrentTaskToDelayedList+0x90>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064d0:	4b20      	ldr	r3, [pc, #128]	; (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fc98 	bl	8004e0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d10a      	bne.n	80064fa <prvAddCurrentTaskToDelayedList+0x3a>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ea:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4819      	ldr	r0, [pc, #100]	; (8006558 <prvAddCurrentTaskToDelayedList+0x98>)
 80064f4:	f7fe fc2f 	bl	8004d56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064f8:	e026      	b.n	8006548 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4413      	add	r3, r2
 8006500:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006502:	4b14      	ldr	r3, [pc, #80]	; (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	429a      	cmp	r2, r3
 8006510:	d209      	bcs.n	8006526 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006512:	4b12      	ldr	r3, [pc, #72]	; (800655c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3304      	adds	r3, #4
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f7fe fc3c 	bl	8004d9c <vListInsert>
}
 8006524:	e010      	b.n	8006548 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006526:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f7fe fc32 	bl	8004d9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006538:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <prvAddCurrentTaskToDelayedList+0xa4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d202      	bcs.n	8006548 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006542:	4a08      	ldr	r2, [pc, #32]	; (8006564 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6013      	str	r3, [r2, #0]
}
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000c20 	.word	0x20000c20
 8006554:	20000748 	.word	0x20000748
 8006558:	20000c08 	.word	0x20000c08
 800655c:	20000bd8 	.word	0x20000bd8
 8006560:	20000bd4 	.word	0x20000bd4
 8006564:	20000c3c 	.word	0x20000c3c

08006568 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	; 0x28
 800656c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006572:	f000 fac3 	bl	8006afc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006576:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <xTimerCreateTimerTask+0x80>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d021      	beq.n	80065c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006586:	1d3a      	adds	r2, r7, #4
 8006588:	f107 0108 	add.w	r1, r7, #8
 800658c:	f107 030c 	add.w	r3, r7, #12
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe fb9b 	bl	8004ccc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	9202      	str	r2, [sp, #8]
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	2302      	movs	r3, #2
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	460a      	mov	r2, r1
 80065a8:	4910      	ldr	r1, [pc, #64]	; (80065ec <xTimerCreateTimerTask+0x84>)
 80065aa:	4811      	ldr	r0, [pc, #68]	; (80065f0 <xTimerCreateTimerTask+0x88>)
 80065ac:	f7ff f92c 	bl	8005808 <xTaskCreateStatic>
 80065b0:	4602      	mov	r2, r0
 80065b2:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <xTimerCreateTimerTask+0x8c>)
 80065b4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <xTimerCreateTimerTask+0x8c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065be:	2301      	movs	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <xTimerCreateTimerTask+0x74>
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	e7fe      	b.n	80065da <xTimerCreateTimerTask+0x72>
	return xReturn;
 80065dc:	697b      	ldr	r3, [r7, #20]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000c78 	.word	0x20000c78
 80065ec:	0800803c 	.word	0x0800803c
 80065f0:	08006711 	.word	0x08006711
 80065f4:	20000c7c 	.word	0x20000c7c

080065f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006606:	2300      	movs	r3, #0
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <xTimerGenericCommand+0x2c>
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	623b      	str	r3, [r7, #32]
 8006622:	e7fe      	b.n	8006622 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006624:	4b19      	ldr	r3, [pc, #100]	; (800668c <xTimerGenericCommand+0x94>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d02a      	beq.n	8006682 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b05      	cmp	r3, #5
 800663c:	dc18      	bgt.n	8006670 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800663e:	f7ff feb5 	bl	80063ac <xTaskGetSchedulerState>
 8006642:	4603      	mov	r3, r0
 8006644:	2b02      	cmp	r3, #2
 8006646:	d109      	bne.n	800665c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006648:	4b10      	ldr	r3, [pc, #64]	; (800668c <xTimerGenericCommand+0x94>)
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	f107 0110 	add.w	r1, r7, #16
 8006650:	2300      	movs	r3, #0
 8006652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006654:	f7fe fd02 	bl	800505c <xQueueGenericSend>
 8006658:	6278      	str	r0, [r7, #36]	; 0x24
 800665a:	e012      	b.n	8006682 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <xTimerGenericCommand+0x94>)
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	f107 0110 	add.w	r1, r7, #16
 8006664:	2300      	movs	r3, #0
 8006666:	2200      	movs	r2, #0
 8006668:	f7fe fcf8 	bl	800505c <xQueueGenericSend>
 800666c:	6278      	str	r0, [r7, #36]	; 0x24
 800666e:	e008      	b.n	8006682 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <xTimerGenericCommand+0x94>)
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	f107 0110 	add.w	r1, r7, #16
 8006678:	2300      	movs	r3, #0
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	f7fe fde8 	bl	8005250 <xQueueGenericSendFromISR>
 8006680:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006684:	4618      	mov	r0, r3
 8006686:	3728      	adds	r7, #40	; 0x28
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	20000c78 	.word	0x20000c78

08006690 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af02      	add	r7, sp, #8
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800669a:	4b1c      	ldr	r3, [pc, #112]	; (800670c <prvProcessExpiredTimer+0x7c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fe fbaf 	bl	8004e0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d121      	bne.n	80066fa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	18d1      	adds	r1, r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	6978      	ldr	r0, [r7, #20]
 80066c4:	f000 f8c8 	bl	8006858 <prvInsertTimerInActiveList>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d015      	beq.n	80066fa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066ce:	2300      	movs	r3, #0
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	2300      	movs	r3, #0
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	2100      	movs	r1, #0
 80066d8:	6978      	ldr	r0, [r7, #20]
 80066da:	f7ff ff8d 	bl	80065f8 <xTimerGenericCommand>
 80066de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <prvProcessExpiredTimer+0x6a>
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	e7fe      	b.n	80066f8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	6978      	ldr	r0, [r7, #20]
 8006700:	4798      	blx	r3
}
 8006702:	bf00      	nop
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000c70 	.word	0x20000c70

08006710 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006718:	f107 0308 	add.w	r3, r7, #8
 800671c:	4618      	mov	r0, r3
 800671e:	f000 f857 	bl	80067d0 <prvGetNextExpireTime>
 8006722:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4619      	mov	r1, r3
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f803 	bl	8006734 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800672e:	f000 f8d5 	bl	80068dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006732:	e7f1      	b.n	8006718 <prvTimerTask+0x8>

08006734 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800673e:	f7ff fa5b 	bl	8005bf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006742:	f107 0308 	add.w	r3, r7, #8
 8006746:	4618      	mov	r0, r3
 8006748:	f000 f866 	bl	8006818 <prvSampleTimeNow>
 800674c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d130      	bne.n	80067b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <prvProcessTimerOrBlockTask+0x3c>
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	429a      	cmp	r2, r3
 8006760:	d806      	bhi.n	8006770 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006762:	f7ff fa57 	bl	8005c14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006766:	68f9      	ldr	r1, [r7, #12]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff ff91 	bl	8006690 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800676e:	e024      	b.n	80067ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d008      	beq.n	8006788 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <prvProcessTimerOrBlockTask+0x90>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	bf0c      	ite	eq
 8006780:	2301      	moveq	r3, #1
 8006782:	2300      	movne	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006788:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <prvProcessTimerOrBlockTask+0x94>)
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	4619      	mov	r1, r3
 8006796:	f7ff f803 	bl	80057a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800679a:	f7ff fa3b 	bl	8005c14 <xTaskResumeAll>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067a4:	4b09      	ldr	r3, [pc, #36]	; (80067cc <prvProcessTimerOrBlockTask+0x98>)
 80067a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	f3bf 8f6f 	isb	sy
}
 80067b4:	e001      	b.n	80067ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067b6:	f7ff fa2d 	bl	8005c14 <xTaskResumeAll>
}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000c74 	.word	0x20000c74
 80067c8:	20000c78 	.word	0x20000c78
 80067cc:	e000ed04 	.word	0xe000ed04

080067d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067d8:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <prvGetNextExpireTime+0x44>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bf0c      	ite	eq
 80067e2:	2301      	moveq	r3, #1
 80067e4:	2300      	movne	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d105      	bne.n	8006802 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <prvGetNextExpireTime+0x44>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	e001      	b.n	8006806 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006806:	68fb      	ldr	r3, [r7, #12]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	bc80      	pop	{r7}
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	20000c70 	.word	0x20000c70

08006818 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006820:	f7ff fa94 	bl	8005d4c <xTaskGetTickCount>
 8006824:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006826:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <prvSampleTimeNow+0x3c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	429a      	cmp	r2, r3
 800682e:	d205      	bcs.n	800683c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006830:	f000 f904 	bl	8006a3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	e002      	b.n	8006842 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006842:	4a04      	ldr	r2, [pc, #16]	; (8006854 <prvSampleTimeNow+0x3c>)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006848:	68fb      	ldr	r3, [r7, #12]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000c80 	.word	0x20000c80

08006858 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006866:	2300      	movs	r3, #0
 8006868:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	429a      	cmp	r2, r3
 800687c:	d812      	bhi.n	80068a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	429a      	cmp	r2, r3
 800688a:	d302      	bcc.n	8006892 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800688c:	2301      	movs	r3, #1
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	e01b      	b.n	80068ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006892:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <prvInsertTimerInActiveList+0x7c>)
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3304      	adds	r3, #4
 800689a:	4619      	mov	r1, r3
 800689c:	4610      	mov	r0, r2
 800689e:	f7fe fa7d 	bl	8004d9c <vListInsert>
 80068a2:	e012      	b.n	80068ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d206      	bcs.n	80068ba <prvInsertTimerInActiveList+0x62>
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d302      	bcc.n	80068ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068b4:	2301      	movs	r3, #1
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e007      	b.n	80068ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068ba:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <prvInsertTimerInActiveList+0x80>)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3304      	adds	r3, #4
 80068c2:	4619      	mov	r1, r3
 80068c4:	4610      	mov	r0, r2
 80068c6:	f7fe fa69 	bl	8004d9c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068ca:	697b      	ldr	r3, [r7, #20]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20000c74 	.word	0x20000c74
 80068d8:	20000c70 	.word	0x20000c70

080068dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08e      	sub	sp, #56	; 0x38
 80068e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068e2:	e099      	b.n	8006a18 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	da17      	bge.n	800691a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80068ea:	1d3b      	adds	r3, r7, #4
 80068ec:	3304      	adds	r3, #4
 80068ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <prvProcessReceivedCommands+0x2e>
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	e7fe      	b.n	8006908 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006910:	6850      	ldr	r0, [r2, #4]
 8006912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006914:	6892      	ldr	r2, [r2, #8]
 8006916:	4611      	mov	r1, r2
 8006918:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	db7a      	blt.n	8006a16 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	3304      	adds	r3, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe fa6b 	bl	8004e0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006936:	463b      	mov	r3, r7
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff ff6d 	bl	8006818 <prvSampleTimeNow>
 800693e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b09      	cmp	r3, #9
 8006944:	d868      	bhi.n	8006a18 <prvProcessReceivedCommands+0x13c>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <prvProcessReceivedCommands+0x70>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	08006975 	.word	0x08006975
 8006950:	08006975 	.word	0x08006975
 8006954:	08006975 	.word	0x08006975
 8006958:	08006a19 	.word	0x08006a19
 800695c:	080069cf 	.word	0x080069cf
 8006960:	08006a05 	.word	0x08006a05
 8006964:	08006975 	.word	0x08006975
 8006968:	08006975 	.word	0x08006975
 800696c:	08006a19 	.word	0x08006a19
 8006970:	080069cf 	.word	0x080069cf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	18d1      	adds	r1, r2, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006982:	f7ff ff69 	bl	8006858 <prvInsertTimerInActiveList>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d045      	beq.n	8006a18 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006992:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d13d      	bne.n	8006a18 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	441a      	add	r2, r3
 80069a4:	2300      	movs	r3, #0
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	2300      	movs	r3, #0
 80069aa:	2100      	movs	r1, #0
 80069ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ae:	f7ff fe23 	bl	80065f8 <xTimerGenericCommand>
 80069b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d12e      	bne.n	8006a18 <prvProcessReceivedCommands+0x13c>
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	61bb      	str	r3, [r7, #24]
 80069cc:	e7fe      	b.n	80069cc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d109      	bne.n	80069f0 <prvProcessReceivedCommands+0x114>
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	e7fe      	b.n	80069ee <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	699a      	ldr	r2, [r3, #24]
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	18d1      	adds	r1, r2, r3
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069fe:	f7ff ff2b 	bl	8006858 <prvInsertTimerInActiveList>
					break;
 8006a02:	e009      	b.n	8006a18 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d104      	bne.n	8006a18 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a10:	f000 fb5a 	bl	80070c8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a14:	e000      	b.n	8006a18 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a16:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a18:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <prvProcessReceivedCommands+0x15c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	1d39      	adds	r1, r7, #4
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fe fca9 	bl	8005378 <xQueueReceive>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f47f af5b 	bne.w	80068e4 <prvProcessReceivedCommands+0x8>
	}
}
 8006a2e:	bf00      	nop
 8006a30:	3730      	adds	r7, #48	; 0x30
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000c78 	.word	0x20000c78

08006a3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a42:	e044      	b.n	8006ace <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a44:	4b2b      	ldr	r3, [pc, #172]	; (8006af4 <prvSwitchTimerLists+0xb8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a4e:	4b29      	ldr	r3, [pc, #164]	; (8006af4 <prvSwitchTimerLists+0xb8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe f9d5 	bl	8004e0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d12d      	bne.n	8006ace <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4413      	add	r3, r2
 8006a7a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d90e      	bls.n	8006aa2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a90:	4b18      	ldr	r3, [pc, #96]	; (8006af4 <prvSwitchTimerLists+0xb8>)
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f7fe f97e 	bl	8004d9c <vListInsert>
 8006aa0:	e015      	b.n	8006ace <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	2100      	movs	r1, #0
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f7ff fda3 	bl	80065f8 <xTimerGenericCommand>
 8006ab2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <prvSwitchTimerLists+0x92>
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	e7fe      	b.n	8006acc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ace:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <prvSwitchTimerLists+0xb8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1b5      	bne.n	8006a44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <prvSwitchTimerLists+0xb8>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <prvSwitchTimerLists+0xbc>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a04      	ldr	r2, [pc, #16]	; (8006af4 <prvSwitchTimerLists+0xb8>)
 8006ae4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ae6:	4a04      	ldr	r2, [pc, #16]	; (8006af8 <prvSwitchTimerLists+0xbc>)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	6013      	str	r3, [r2, #0]
}
 8006aec:	bf00      	nop
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20000c70 	.word	0x20000c70
 8006af8:	20000c74 	.word	0x20000c74

08006afc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b02:	f000 f929 	bl	8006d58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b06:	4b15      	ldr	r3, [pc, #84]	; (8006b5c <prvCheckForValidListAndQueue+0x60>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d120      	bne.n	8006b50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b0e:	4814      	ldr	r0, [pc, #80]	; (8006b60 <prvCheckForValidListAndQueue+0x64>)
 8006b10:	f7fe f8f6 	bl	8004d00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b14:	4813      	ldr	r0, [pc, #76]	; (8006b64 <prvCheckForValidListAndQueue+0x68>)
 8006b16:	f7fe f8f3 	bl	8004d00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <prvCheckForValidListAndQueue+0x6c>)
 8006b1c:	4a10      	ldr	r2, [pc, #64]	; (8006b60 <prvCheckForValidListAndQueue+0x64>)
 8006b1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b20:	4b12      	ldr	r3, [pc, #72]	; (8006b6c <prvCheckForValidListAndQueue+0x70>)
 8006b22:	4a10      	ldr	r2, [pc, #64]	; (8006b64 <prvCheckForValidListAndQueue+0x68>)
 8006b24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b26:	2300      	movs	r3, #0
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	4b11      	ldr	r3, [pc, #68]	; (8006b70 <prvCheckForValidListAndQueue+0x74>)
 8006b2c:	4a11      	ldr	r2, [pc, #68]	; (8006b74 <prvCheckForValidListAndQueue+0x78>)
 8006b2e:	2110      	movs	r1, #16
 8006b30:	200a      	movs	r0, #10
 8006b32:	f7fe f9fd 	bl	8004f30 <xQueueGenericCreateStatic>
 8006b36:	4602      	mov	r2, r0
 8006b38:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <prvCheckForValidListAndQueue+0x60>)
 8006b3a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b3c:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <prvCheckForValidListAndQueue+0x60>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b44:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <prvCheckForValidListAndQueue+0x60>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	490b      	ldr	r1, [pc, #44]	; (8006b78 <prvCheckForValidListAndQueue+0x7c>)
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fe fe00 	bl	8005750 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b50:	f000 f930 	bl	8006db4 <vPortExitCritical>
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000c78 	.word	0x20000c78
 8006b60:	20000c48 	.word	0x20000c48
 8006b64:	20000c5c 	.word	0x20000c5c
 8006b68:	20000c70 	.word	0x20000c70
 8006b6c:	20000c74 	.word	0x20000c74
 8006b70:	20000d24 	.word	0x20000d24
 8006b74:	20000c84 	.word	0x20000c84
 8006b78:	08008044 	.word	0x08008044

08006b7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3b04      	subs	r3, #4
 8006b8c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3b04      	subs	r3, #4
 8006b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f023 0201 	bic.w	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3b04      	subs	r3, #4
 8006baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bac:	4a08      	ldr	r2, [pc, #32]	; (8006bd0 <pxPortInitialiseStack+0x54>)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3b14      	subs	r3, #20
 8006bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3b20      	subs	r3, #32
 8006bc2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bc80      	pop	{r7}
 8006bce:	4770      	bx	lr
 8006bd0:	08006bd5 	.word	0x08006bd5

08006bd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bde:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <prvTaskExitError+0x4c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d009      	beq.n	8006bfc <prvTaskExitError+0x28>
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	e7fe      	b.n	8006bfa <prvTaskExitError+0x26>
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c0e:	bf00      	nop
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0fc      	beq.n	8006c10 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr
 8006c20:	20000048 	.word	0x20000048
	...

08006c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <pxCurrentTCBConst2>)
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	6808      	ldr	r0, [r1, #0]
 8006c36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c3a:	f380 8809 	msr	PSP, r0
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f04f 0000 	mov.w	r0, #0
 8006c46:	f380 8811 	msr	BASEPRI, r0
 8006c4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c4e:	4770      	bx	lr

08006c50 <pxCurrentTCBConst2>:
 8006c50:	20000748 	.word	0x20000748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop

08006c58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006c58:	4806      	ldr	r0, [pc, #24]	; (8006c74 <prvPortStartFirstTask+0x1c>)
 8006c5a:	6800      	ldr	r0, [r0, #0]
 8006c5c:	6800      	ldr	r0, [r0, #0]
 8006c5e:	f380 8808 	msr	MSP, r0
 8006c62:	b662      	cpsie	i
 8006c64:	b661      	cpsie	f
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	df00      	svc	0
 8006c70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c72:	bf00      	nop
 8006c74:	e000ed08 	.word	0xe000ed08

08006c78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c7e:	4b31      	ldr	r3, [pc, #196]	; (8006d44 <xPortStartScheduler+0xcc>)
 8006c80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	22ff      	movs	r2, #255	; 0xff
 8006c8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <xPortStartScheduler+0xd0>)
 8006ca4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ca6:	4b29      	ldr	r3, [pc, #164]	; (8006d4c <xPortStartScheduler+0xd4>)
 8006ca8:	2207      	movs	r2, #7
 8006caa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cac:	e009      	b.n	8006cc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006cae:	4b27      	ldr	r3, [pc, #156]	; (8006d4c <xPortStartScheduler+0xd4>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	4a25      	ldr	r2, [pc, #148]	; (8006d4c <xPortStartScheduler+0xd4>)
 8006cb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cca:	2b80      	cmp	r3, #128	; 0x80
 8006ccc:	d0ef      	beq.n	8006cae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cce:	4b1f      	ldr	r3, [pc, #124]	; (8006d4c <xPortStartScheduler+0xd4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f1c3 0307 	rsb	r3, r3, #7
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d009      	beq.n	8006cee <xPortStartScheduler+0x76>
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	60bb      	str	r3, [r7, #8]
 8006cec:	e7fe      	b.n	8006cec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cee:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <xPortStartScheduler+0xd4>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	4a15      	ldr	r2, [pc, #84]	; (8006d4c <xPortStartScheduler+0xd4>)
 8006cf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cf8:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <xPortStartScheduler+0xd4>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d00:	4a12      	ldr	r2, [pc, #72]	; (8006d4c <xPortStartScheduler+0xd4>)
 8006d02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d0c:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <xPortStartScheduler+0xd8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a0f      	ldr	r2, [pc, #60]	; (8006d50 <xPortStartScheduler+0xd8>)
 8006d12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d18:	4b0d      	ldr	r3, [pc, #52]	; (8006d50 <xPortStartScheduler+0xd8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a0c      	ldr	r2, [pc, #48]	; (8006d50 <xPortStartScheduler+0xd8>)
 8006d1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d24:	f000 f8b0 	bl	8006e88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d28:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <xPortStartScheduler+0xdc>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d2e:	f7ff ff93 	bl	8006c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d32:	f7ff f8d7 	bl	8005ee4 <vTaskSwitchContext>
	prvTaskExitError();
 8006d36:	f7ff ff4d 	bl	8006bd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	e000e400 	.word	0xe000e400
 8006d48:	20000d74 	.word	0x20000d74
 8006d4c:	20000d78 	.word	0x20000d78
 8006d50:	e000ed20 	.word	0xe000ed20
 8006d54:	20000048 	.word	0x20000048

08006d58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d70:	4b0e      	ldr	r3, [pc, #56]	; (8006dac <vPortEnterCritical+0x54>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	4a0d      	ldr	r2, [pc, #52]	; (8006dac <vPortEnterCritical+0x54>)
 8006d78:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d7a:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <vPortEnterCritical+0x54>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d10e      	bne.n	8006da0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d82:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <vPortEnterCritical+0x58>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <vPortEnterCritical+0x48>
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	603b      	str	r3, [r7, #0]
 8006d9e:	e7fe      	b.n	8006d9e <vPortEnterCritical+0x46>
	}
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	20000048 	.word	0x20000048
 8006db0:	e000ed04 	.word	0xe000ed04

08006db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dba:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <vPortExitCritical+0x48>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <vPortExitCritical+0x22>
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	607b      	str	r3, [r7, #4]
 8006dd4:	e7fe      	b.n	8006dd4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <vPortExitCritical+0x48>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	4a07      	ldr	r2, [pc, #28]	; (8006dfc <vPortExitCritical+0x48>)
 8006dde:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006de0:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <vPortExitCritical+0x48>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d104      	bne.n	8006df2 <vPortExitCritical+0x3e>
 8006de8:	2300      	movs	r3, #0
 8006dea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bc80      	pop	{r7}
 8006dfa:	4770      	bx	lr
 8006dfc:	20000048 	.word	0x20000048

08006e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e00:	f3ef 8009 	mrs	r0, PSP
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <pxCurrentTCBConst>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e10:	6010      	str	r0, [r2, #0]
 8006e12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e1a:	f380 8811 	msr	BASEPRI, r0
 8006e1e:	f7ff f861 	bl	8005ee4 <vTaskSwitchContext>
 8006e22:	f04f 0000 	mov.w	r0, #0
 8006e26:	f380 8811 	msr	BASEPRI, r0
 8006e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e2e:	6819      	ldr	r1, [r3, #0]
 8006e30:	6808      	ldr	r0, [r1, #0]
 8006e32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e36:	f380 8809 	msr	PSP, r0
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	4770      	bx	lr

08006e40 <pxCurrentTCBConst>:
 8006e40:	20000748 	.word	0x20000748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop

08006e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e60:	f7fe ff82 	bl	8005d68 <xTaskIncrementTick>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e6a:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <SysTick_Handler+0x3c>)
 8006e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <vPortSetupTimerInterrupt+0x30>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e92:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <vPortSetupTimerInterrupt+0x34>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e98:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <vPortSetupTimerInterrupt+0x38>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <vPortSetupTimerInterrupt+0x3c>)
 8006e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea2:	099b      	lsrs	r3, r3, #6
 8006ea4:	4a08      	ldr	r2, [pc, #32]	; (8006ec8 <vPortSetupTimerInterrupt+0x40>)
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006eaa:	4b03      	ldr	r3, [pc, #12]	; (8006eb8 <vPortSetupTimerInterrupt+0x30>)
 8006eac:	2207      	movs	r2, #7
 8006eae:	601a      	str	r2, [r3, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bc80      	pop	{r7}
 8006eb6:	4770      	bx	lr
 8006eb8:	e000e010 	.word	0xe000e010
 8006ebc:	e000e018 	.word	0xe000e018
 8006ec0:	20000018 	.word	0x20000018
 8006ec4:	10624dd3 	.word	0x10624dd3
 8006ec8:	e000e014 	.word	0xe000e014

08006ecc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ed2:	f3ef 8305 	mrs	r3, IPSR
 8006ed6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b0f      	cmp	r3, #15
 8006edc:	d913      	bls.n	8006f06 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ede:	4a15      	ldr	r2, [pc, #84]	; (8006f34 <vPortValidateInterruptPriority+0x68>)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ee8:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <vPortValidateInterruptPriority+0x6c>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	7afa      	ldrb	r2, [r7, #11]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d209      	bcs.n	8006f06 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	607b      	str	r3, [r7, #4]
 8006f04:	e7fe      	b.n	8006f04 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f06:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <vPortValidateInterruptPriority+0x70>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <vPortValidateInterruptPriority+0x74>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d909      	bls.n	8006f2a <vPortValidateInterruptPriority+0x5e>
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	e7fe      	b.n	8006f28 <vPortValidateInterruptPriority+0x5c>
	}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc80      	pop	{r7}
 8006f32:	4770      	bx	lr
 8006f34:	e000e3f0 	.word	0xe000e3f0
 8006f38:	20000d74 	.word	0x20000d74
 8006f3c:	e000ed0c 	.word	0xe000ed0c
 8006f40:	20000d78 	.word	0x20000d78

08006f44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	; 0x28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f50:	f7fe fe52 	bl	8005bf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f54:	4b57      	ldr	r3, [pc, #348]	; (80070b4 <pvPortMalloc+0x170>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f5c:	f000 f90c 	bl	8007178 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f60:	4b55      	ldr	r3, [pc, #340]	; (80070b8 <pvPortMalloc+0x174>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4013      	ands	r3, r2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 808c 	bne.w	8007086 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01c      	beq.n	8006fae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006f74:	2208      	movs	r2, #8
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4413      	add	r3, r2
 8006f7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d013      	beq.n	8006fae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f023 0307 	bic.w	r3, r3, #7
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d009      	beq.n	8006fae <pvPortMalloc+0x6a>
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e7fe      	b.n	8006fac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d068      	beq.n	8007086 <pvPortMalloc+0x142>
 8006fb4:	4b41      	ldr	r3, [pc, #260]	; (80070bc <pvPortMalloc+0x178>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d863      	bhi.n	8007086 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fbe:	4b40      	ldr	r3, [pc, #256]	; (80070c0 <pvPortMalloc+0x17c>)
 8006fc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fc2:	4b3f      	ldr	r3, [pc, #252]	; (80070c0 <pvPortMalloc+0x17c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fc8:	e004      	b.n	8006fd4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d903      	bls.n	8006fe6 <pvPortMalloc+0xa2>
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1f1      	bne.n	8006fca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fe6:	4b33      	ldr	r3, [pc, #204]	; (80070b4 <pvPortMalloc+0x170>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d04a      	beq.n	8007086 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2208      	movs	r2, #8
 8006ff6:	4413      	add	r3, r2
 8006ff8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	1ad2      	subs	r2, r2, r3
 800700a:	2308      	movs	r3, #8
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	429a      	cmp	r2, r3
 8007010:	d91e      	bls.n	8007050 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4413      	add	r3, r2
 8007018:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	2b00      	cmp	r3, #0
 8007022:	d009      	beq.n	8007038 <pvPortMalloc+0xf4>
 8007024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	e7fe      	b.n	8007036 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800704a:	69b8      	ldr	r0, [r7, #24]
 800704c:	f000 f8f6 	bl	800723c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007050:	4b1a      	ldr	r3, [pc, #104]	; (80070bc <pvPortMalloc+0x178>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	4a18      	ldr	r2, [pc, #96]	; (80070bc <pvPortMalloc+0x178>)
 800705c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800705e:	4b17      	ldr	r3, [pc, #92]	; (80070bc <pvPortMalloc+0x178>)
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	4b18      	ldr	r3, [pc, #96]	; (80070c4 <pvPortMalloc+0x180>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d203      	bcs.n	8007072 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800706a:	4b14      	ldr	r3, [pc, #80]	; (80070bc <pvPortMalloc+0x178>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <pvPortMalloc+0x180>)
 8007070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <pvPortMalloc+0x174>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	431a      	orrs	r2, r3
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007086:	f7fe fdc5 	bl	8005c14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <pvPortMalloc+0x164>
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	e7fe      	b.n	80070a6 <pvPortMalloc+0x162>
	return pvReturn;
 80070a8:	69fb      	ldr	r3, [r7, #28]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3728      	adds	r7, #40	; 0x28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20001984 	.word	0x20001984
 80070b8:	20001990 	.word	0x20001990
 80070bc:	20001988 	.word	0x20001988
 80070c0:	2000197c 	.word	0x2000197c
 80070c4:	2000198c 	.word	0x2000198c

080070c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d046      	beq.n	8007168 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070da:	2308      	movs	r3, #8
 80070dc:	425b      	negs	r3, r3
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4413      	add	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	4b20      	ldr	r3, [pc, #128]	; (8007170 <vPortFree+0xa8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <vPortFree+0x42>
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	e7fe      	b.n	8007108 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <vPortFree+0x5e>
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	60bb      	str	r3, [r7, #8]
 8007124:	e7fe      	b.n	8007124 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	4b11      	ldr	r3, [pc, #68]	; (8007170 <vPortFree+0xa8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4013      	ands	r3, r2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d019      	beq.n	8007168 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d115      	bne.n	8007168 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <vPortFree+0xa8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	43db      	mvns	r3, r3
 8007146:	401a      	ands	r2, r3
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800714c:	f7fe fd54 	bl	8005bf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	4b07      	ldr	r3, [pc, #28]	; (8007174 <vPortFree+0xac>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4413      	add	r3, r2
 800715a:	4a06      	ldr	r2, [pc, #24]	; (8007174 <vPortFree+0xac>)
 800715c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800715e:	6938      	ldr	r0, [r7, #16]
 8007160:	f000 f86c 	bl	800723c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007164:	f7fe fd56 	bl	8005c14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007168:	bf00      	nop
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	20001990 	.word	0x20001990
 8007174:	20001988 	.word	0x20001988

08007178 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800717e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007182:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007184:	4b27      	ldr	r3, [pc, #156]	; (8007224 <prvHeapInit+0xac>)
 8007186:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00c      	beq.n	80071ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3307      	adds	r3, #7
 8007196:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0307 	bic.w	r3, r3, #7
 800719e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	4a1f      	ldr	r2, [pc, #124]	; (8007224 <prvHeapInit+0xac>)
 80071a8:	4413      	add	r3, r2
 80071aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071b0:	4a1d      	ldr	r2, [pc, #116]	; (8007228 <prvHeapInit+0xb0>)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071b6:	4b1c      	ldr	r3, [pc, #112]	; (8007228 <prvHeapInit+0xb0>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4413      	add	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071c4:	2208      	movs	r2, #8
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	1a9b      	subs	r3, r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0307 	bic.w	r3, r3, #7
 80071d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4a15      	ldr	r2, [pc, #84]	; (800722c <prvHeapInit+0xb4>)
 80071d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071da:	4b14      	ldr	r3, [pc, #80]	; (800722c <prvHeapInit+0xb4>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2200      	movs	r2, #0
 80071e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <prvHeapInit+0xb4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2200      	movs	r2, #0
 80071e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	1ad2      	subs	r2, r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071f8:	4b0c      	ldr	r3, [pc, #48]	; (800722c <prvHeapInit+0xb4>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	4a0a      	ldr	r2, [pc, #40]	; (8007230 <prvHeapInit+0xb8>)
 8007206:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	4a09      	ldr	r2, [pc, #36]	; (8007234 <prvHeapInit+0xbc>)
 800720e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007210:	4b09      	ldr	r3, [pc, #36]	; (8007238 <prvHeapInit+0xc0>)
 8007212:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007216:	601a      	str	r2, [r3, #0]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000d7c 	.word	0x20000d7c
 8007228:	2000197c 	.word	0x2000197c
 800722c:	20001984 	.word	0x20001984
 8007230:	2000198c 	.word	0x2000198c
 8007234:	20001988 	.word	0x20001988
 8007238:	20001990 	.word	0x20001990

0800723c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007244:	4b27      	ldr	r3, [pc, #156]	; (80072e4 <prvInsertBlockIntoFreeList+0xa8>)
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	e002      	b.n	8007250 <prvInsertBlockIntoFreeList+0x14>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	429a      	cmp	r2, r3
 8007258:	d8f7      	bhi.n	800724a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	4413      	add	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	429a      	cmp	r2, r3
 800726a:	d108      	bne.n	800727e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	441a      	add	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	441a      	add	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	429a      	cmp	r2, r3
 8007290:	d118      	bne.n	80072c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <prvInsertBlockIntoFreeList+0xac>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d00d      	beq.n	80072ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	441a      	add	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	e008      	b.n	80072cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072ba:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <prvInsertBlockIntoFreeList+0xac>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	e003      	b.n	80072cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d002      	beq.n	80072da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072da:	bf00      	nop
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr
 80072e4:	2000197c 	.word	0x2000197c
 80072e8:	20001984 	.word	0x20001984

080072ec <__libc_init_array>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	2500      	movs	r5, #0
 80072f0:	4e0c      	ldr	r6, [pc, #48]	; (8007324 <__libc_init_array+0x38>)
 80072f2:	4c0d      	ldr	r4, [pc, #52]	; (8007328 <__libc_init_array+0x3c>)
 80072f4:	1ba4      	subs	r4, r4, r6
 80072f6:	10a4      	asrs	r4, r4, #2
 80072f8:	42a5      	cmp	r5, r4
 80072fa:	d109      	bne.n	8007310 <__libc_init_array+0x24>
 80072fc:	f000 f85c 	bl	80073b8 <_init>
 8007300:	2500      	movs	r5, #0
 8007302:	4e0a      	ldr	r6, [pc, #40]	; (800732c <__libc_init_array+0x40>)
 8007304:	4c0a      	ldr	r4, [pc, #40]	; (8007330 <__libc_init_array+0x44>)
 8007306:	1ba4      	subs	r4, r4, r6
 8007308:	10a4      	asrs	r4, r4, #2
 800730a:	42a5      	cmp	r5, r4
 800730c:	d105      	bne.n	800731a <__libc_init_array+0x2e>
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007314:	4798      	blx	r3
 8007316:	3501      	adds	r5, #1
 8007318:	e7ee      	b.n	80072f8 <__libc_init_array+0xc>
 800731a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800731e:	4798      	blx	r3
 8007320:	3501      	adds	r5, #1
 8007322:	e7f2      	b.n	800730a <__libc_init_array+0x1e>
 8007324:	08008088 	.word	0x08008088
 8007328:	08008088 	.word	0x08008088
 800732c:	08008088 	.word	0x08008088
 8007330:	0800808c 	.word	0x0800808c

08007334 <memcmp>:
 8007334:	b530      	push	{r4, r5, lr}
 8007336:	2400      	movs	r4, #0
 8007338:	42a2      	cmp	r2, r4
 800733a:	d101      	bne.n	8007340 <memcmp+0xc>
 800733c:	2000      	movs	r0, #0
 800733e:	e007      	b.n	8007350 <memcmp+0x1c>
 8007340:	5d03      	ldrb	r3, [r0, r4]
 8007342:	3401      	adds	r4, #1
 8007344:	190d      	adds	r5, r1, r4
 8007346:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800734a:	42ab      	cmp	r3, r5
 800734c:	d0f4      	beq.n	8007338 <memcmp+0x4>
 800734e:	1b58      	subs	r0, r3, r5
 8007350:	bd30      	pop	{r4, r5, pc}

08007352 <memcpy>:
 8007352:	b510      	push	{r4, lr}
 8007354:	1e43      	subs	r3, r0, #1
 8007356:	440a      	add	r2, r1
 8007358:	4291      	cmp	r1, r2
 800735a:	d100      	bne.n	800735e <memcpy+0xc>
 800735c:	bd10      	pop	{r4, pc}
 800735e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007366:	e7f7      	b.n	8007358 <memcpy+0x6>

08007368 <memset>:
 8007368:	4603      	mov	r3, r0
 800736a:	4402      	add	r2, r0
 800736c:	4293      	cmp	r3, r2
 800736e:	d100      	bne.n	8007372 <memset+0xa>
 8007370:	4770      	bx	lr
 8007372:	f803 1b01 	strb.w	r1, [r3], #1
 8007376:	e7f9      	b.n	800736c <memset+0x4>

08007378 <strchr>:
 8007378:	b2c9      	uxtb	r1, r1
 800737a:	4603      	mov	r3, r0
 800737c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007380:	b11a      	cbz	r2, 800738a <strchr+0x12>
 8007382:	428a      	cmp	r2, r1
 8007384:	d1f9      	bne.n	800737a <strchr+0x2>
 8007386:	4618      	mov	r0, r3
 8007388:	4770      	bx	lr
 800738a:	2900      	cmp	r1, #0
 800738c:	bf18      	it	ne
 800738e:	2300      	movne	r3, #0
 8007390:	e7f9      	b.n	8007386 <strchr+0xe>

08007392 <strncmp>:
 8007392:	b510      	push	{r4, lr}
 8007394:	b16a      	cbz	r2, 80073b2 <strncmp+0x20>
 8007396:	3901      	subs	r1, #1
 8007398:	1884      	adds	r4, r0, r2
 800739a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800739e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d103      	bne.n	80073ae <strncmp+0x1c>
 80073a6:	42a0      	cmp	r0, r4
 80073a8:	d001      	beq.n	80073ae <strncmp+0x1c>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1f5      	bne.n	800739a <strncmp+0x8>
 80073ae:	1a98      	subs	r0, r3, r2
 80073b0:	bd10      	pop	{r4, pc}
 80073b2:	4610      	mov	r0, r2
 80073b4:	e7fc      	b.n	80073b0 <strncmp+0x1e>
	...

080073b8 <_init>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	bf00      	nop
 80073bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	469e      	mov	lr, r3
 80073c2:	4770      	bx	lr

080073c4 <_fini>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	bf00      	nop
 80073c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ca:	bc08      	pop	{r3}
 80073cc:	469e      	mov	lr, r3
 80073ce:	4770      	bx	lr
