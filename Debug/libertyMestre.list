
libertyMestre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d2c  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088ec  080088ec  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  080088ec  080088ec  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088ec  080088ec  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080088f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cb8  20000050  08008940  00020050  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002d08  08008940  00022d08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8b2  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036f8  00000000  00000000  0003b927  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001828  00000000  00000000  0003f020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016c8  00000000  00000000  00040848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000042cd  00000000  00000000  00041f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012beb  00000000  00000000  000461dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099e42  00000000  00000000  00058dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2c0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d8  00000000  00000000  000f2c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000050 	.word	0x20000050
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ba8 	.word	0x08007ba8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000054 	.word	0x20000054
 800014c:	08007ba8 	.word	0x08007ba8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b590      	push	{r4, r7, lr}
 8000162:	b0a1      	sub	sp, #132	; 0x84
 8000164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i;
	uint8_t memsize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8000166:	4b42      	ldr	r3, [pc, #264]	; (8000270 <main+0x110>)
 8000168:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800016c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800016e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000172:	f003 f95d 	bl	8003430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000176:	f000 f8a5 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017a:	f000 f949 	bl	8000410 <MX_GPIO_Init>
  MX_SPI2_Init();
 800017e:	f000 f911 	bl	80003a4 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000182:	f000 f8e1 	bl	8000348 <MX_I2C2_Init>
  ////////////////////////////////////////////////////////////////////////////////////////////////////
     // First of all, Should register SPI callback functions implemented by user for accessing WIZCHIP //
     ////////////////////////////////////////////////////////////////////////////////////////////////////

     /* Chip selection call back */
  	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000186:	493b      	ldr	r1, [pc, #236]	; (8000274 <main+0x114>)
 8000188:	483b      	ldr	r0, [pc, #236]	; (8000278 <main+0x118>)
 800018a:	f002 fc73 	bl	8002a74 <reg_wizchip_cs_cbfunc>

  	 /* SPI Read & Write callback function */
  	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800018e:	493b      	ldr	r1, [pc, #236]	; (800027c <main+0x11c>)
 8000190:	483b      	ldr	r0, [pc, #236]	; (8000280 <main+0x120>)
 8000192:	f002 fc93 	bl	8002abc <reg_wizchip_spi_cbfunc>

  	////////////////////////////////////////////////////////////////////////
  	/* WIZCHIP SOCKET Buffer initialize */
  	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)memsize) == -1)
 8000196:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800019a:	4619      	mov	r1, r3
 800019c:	2001      	movs	r0, #1
 800019e:	f002 fcb7 	bl	8002b10 <ctlwizchip>
 80001a2:	4603      	mov	r3, r0
 80001a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001a8:	d100      	bne.n	80001ac <main+0x4c>
  	{
  	   //init fail
  	   while(1);
 80001aa:	e7fe      	b.n	80001aa <main+0x4a>
  	}

  	/* Network initialization */
  	network_init();
 80001ac:	f000 fa36 	bl	800061c <network_init>

  	//all connections inactive
  	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 80001b0:	2300      	movs	r3, #0
 80001b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80001b6:	e009      	b.n	80001cc <main+0x6c>
  	HTTP_reset(i);
 80001b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80001bc:	4618      	mov	r0, r3
 80001be:	f000 fa3f 	bl	8000640 <HTTP_reset>
  	for(i=0;i<_WIZCHIP_SOCK_NUM_;i++)
 80001c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80001c6:	3301      	adds	r3, #1
 80001c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80001cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80001d0:	2b07      	cmp	r3, #7
 80001d2:	d9f1      	bls.n	80001b8 <main+0x58>

  	char write_data[50];
  	memset(write_data, 0, sizeof(write_data));
 80001d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80001d8:	2232      	movs	r2, #50	; 0x32
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f007 fcb3 	bl	8007b48 <memset>
  	strcpy(write_data, "Hello World!!!");
 80001e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80001e6:	4a27      	ldr	r2, [pc, #156]	; (8000284 <main+0x124>)
 80001e8:	461c      	mov	r4, r3
 80001ea:	4613      	mov	r3, r2
 80001ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001ee:	c407      	stmia	r4!, {r0, r1, r2}
 80001f0:	8023      	strh	r3, [r4, #0]
 80001f2:	3402      	adds	r4, #2
 80001f4:	0c1b      	lsrs	r3, r3, #16
 80001f6:	7023      	strb	r3, [r4, #0]

  	save_to_flash((uint8_t*)write_data);
 80001f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 fa89 	bl	8001714 <save_to_flash>

  	char read_data[50];
  	  memset(read_data, 0, sizeof(read_data));
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2232      	movs	r2, #50	; 0x32
 8000206:	2100      	movs	r1, #0
 8000208:	4618      	mov	r0, r3
 800020a:	f007 fc9d 	bl	8007b48 <memset>

  	  read_flash((uint8_t*)read_data);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4618      	mov	r0, r3
 8000212:	f001 fb33 	bl	800187c <read_flash>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000216:	f004 ffc5 	bl	80051a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethernetTask */
  ethernetTaskHandle = osThreadNew(StartEthernet, NULL, &ethernetTask_attributes);
 800021a:	4a1b      	ldr	r2, [pc, #108]	; (8000288 <main+0x128>)
 800021c:	2100      	movs	r1, #0
 800021e:	481b      	ldr	r0, [pc, #108]	; (800028c <main+0x12c>)
 8000220:	f005 f826 	bl	8005270 <osThreadNew>
 8000224:	4602      	mov	r2, r0
 8000226:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <main+0x130>)
 8000228:	601a      	str	r2, [r3, #0]

  /* creation of readInput1Task */
  readInput1TaskHandle = osThreadNew(StartReadInput1, NULL, &readInput1Task_attributes);
 800022a:	4a1a      	ldr	r2, [pc, #104]	; (8000294 <main+0x134>)
 800022c:	2100      	movs	r1, #0
 800022e:	481a      	ldr	r0, [pc, #104]	; (8000298 <main+0x138>)
 8000230:	f005 f81e 	bl	8005270 <osThreadNew>
 8000234:	4602      	mov	r2, r0
 8000236:	4b19      	ldr	r3, [pc, #100]	; (800029c <main+0x13c>)
 8000238:	601a      	str	r2, [r3, #0]

  /* creation of readInput2Task */
  readInput2TaskHandle = osThreadNew(StartReadInput2, NULL, &readInput2Task_attributes);
 800023a:	4a19      	ldr	r2, [pc, #100]	; (80002a0 <main+0x140>)
 800023c:	2100      	movs	r1, #0
 800023e:	4819      	ldr	r0, [pc, #100]	; (80002a4 <main+0x144>)
 8000240:	f005 f816 	bl	8005270 <osThreadNew>
 8000244:	4602      	mov	r2, r0
 8000246:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <main+0x148>)
 8000248:	601a      	str	r2, [r3, #0]

  /* creation of readInput3Task */
  readInput3TaskHandle = osThreadNew(StartReadInput3, NULL, &readInput3Task_attributes);
 800024a:	4a18      	ldr	r2, [pc, #96]	; (80002ac <main+0x14c>)
 800024c:	2100      	movs	r1, #0
 800024e:	4818      	ldr	r0, [pc, #96]	; (80002b0 <main+0x150>)
 8000250:	f005 f80e 	bl	8005270 <osThreadNew>
 8000254:	4602      	mov	r2, r0
 8000256:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <main+0x154>)
 8000258:	601a      	str	r2, [r3, #0]

  /* creation of readInput4Task */
  readInput4TaskHandle = osThreadNew(StartReadInput4, NULL, &readInput4Task_attributes);
 800025a:	4a17      	ldr	r2, [pc, #92]	; (80002b8 <main+0x158>)
 800025c:	2100      	movs	r1, #0
 800025e:	4817      	ldr	r0, [pc, #92]	; (80002bc <main+0x15c>)
 8000260:	f005 f806 	bl	8005270 <osThreadNew>
 8000264:	4602      	mov	r2, r0
 8000266:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <main+0x160>)
 8000268:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800026a:	f004 ffcd 	bl	8005208 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026e:	e7fe      	b.n	800026e <main+0x10e>
 8000270:	08007c20 	.word	0x08007c20
 8000274:	080005d9 	.word	0x080005d9
 8000278:	080005c1 	.word	0x080005c1
 800027c:	080005f1 	.word	0x080005f1
 8000280:	0800060b 	.word	0x0800060b
 8000284:	08007c10 	.word	0x08007c10
 8000288:	08008820 	.word	0x08008820
 800028c:	080018f5 	.word	0x080018f5
 8000290:	20002c38 	.word	0x20002c38
 8000294:	08008844 	.word	0x08008844
 8000298:	08001941 	.word	0x08001941
 800029c:	20001c24 	.word	0x20001c24
 80002a0:	08008868 	.word	0x08008868
 80002a4:	08001999 	.word	0x08001999
 80002a8:	20002c34 	.word	0x20002c34
 80002ac:	0800888c 	.word	0x0800888c
 80002b0:	080019f1 	.word	0x080019f1
 80002b4:	20002c30 	.word	0x20002c30
 80002b8:	080088b0 	.word	0x080088b0
 80002bc:	08001a55 	.word	0x08001a55
 80002c0:	20001c00 	.word	0x20001c00

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f007 fc38 	bl	8007b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	2310      	movs	r3, #16
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	2302      	movs	r3, #2
 80002f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002f6:	2300      	movs	r3, #0
 80002f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002fa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0318 	add.w	r3, r7, #24
 8000304:	4618      	mov	r0, r3
 8000306:	f003 fdeb 	bl	8003ee0 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000310:	f001 fbde 	bl	8001ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2102      	movs	r1, #2
 800032e:	4618      	mov	r0, r3
 8000330:	f004 f856 	bl	80043e0 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800033a:	f001 fbc9 	bl	8001ad0 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3740      	adds	r7, #64	; 0x40
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_I2C2_Init+0x50>)
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <MX_I2C2_Init+0x54>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_I2C2_Init+0x50>)
 8000354:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <MX_I2C2_Init+0x58>)
 8000356:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_I2C2_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_I2C2_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_I2C2_Init+0x50>)
 8000366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800036a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_I2C2_Init+0x50>)
 800036e:	2200      	movs	r2, #0
 8000370:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_I2C2_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MX_I2C2_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_I2C2_Init+0x50>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_I2C2_Init+0x50>)
 8000386:	f003 fc73 	bl	8003c70 <HAL_I2C_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000390:	f001 fb9e 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20001bac 	.word	0x20001bac
 800039c:	40005800 	.word	0x40005800
 80003a0:	000186a0 	.word	0x000186a0

080003a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003a8:	4b17      	ldr	r3, [pc, #92]	; (8000408 <MX_SPI2_Init+0x64>)
 80003aa:	4a18      	ldr	r2, [pc, #96]	; (800040c <MX_SPI2_Init+0x68>)
 80003ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003ae:	4b16      	ldr	r3, [pc, #88]	; (8000408 <MX_SPI2_Init+0x64>)
 80003b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003b6:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_SPI2_Init+0x64>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_SPI2_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_SPI2_Init+0x64>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_SPI2_Init+0x64>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_SPI2_Init+0x64>)
 80003d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_SPI2_Init+0x64>)
 80003d8:	2218      	movs	r2, #24
 80003da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <MX_SPI2_Init+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_SPI2_Init+0x64>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <MX_SPI2_Init+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_SPI2_Init+0x64>)
 80003f0:	220a      	movs	r2, #10
 80003f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <MX_SPI2_Init+0x64>)
 80003f6:	f004 f9bf 	bl	8004778 <HAL_SPI_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000400:	f001 fb66 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20001b54 	.word	0x20001b54
 800040c:	40003800 	.word	0x40003800

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b08a      	sub	sp, #40	; 0x28
 8000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	f107 0314 	add.w	r3, r7, #20
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000424:	4b55      	ldr	r3, [pc, #340]	; (800057c <MX_GPIO_Init+0x16c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a54      	ldr	r2, [pc, #336]	; (800057c <MX_GPIO_Init+0x16c>)
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b52      	ldr	r3, [pc, #328]	; (800057c <MX_GPIO_Init+0x16c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0310 	and.w	r3, r3, #16
 8000438:	613b      	str	r3, [r7, #16]
 800043a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800043c:	4b4f      	ldr	r3, [pc, #316]	; (800057c <MX_GPIO_Init+0x16c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a4e      	ldr	r2, [pc, #312]	; (800057c <MX_GPIO_Init+0x16c>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b4c      	ldr	r3, [pc, #304]	; (800057c <MX_GPIO_Init+0x16c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0320 	and.w	r3, r3, #32
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b49      	ldr	r3, [pc, #292]	; (800057c <MX_GPIO_Init+0x16c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a48      	ldr	r2, [pc, #288]	; (800057c <MX_GPIO_Init+0x16c>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b46      	ldr	r3, [pc, #280]	; (800057c <MX_GPIO_Init+0x16c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b43      	ldr	r3, [pc, #268]	; (800057c <MX_GPIO_Init+0x16c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a42      	ldr	r2, [pc, #264]	; (800057c <MX_GPIO_Init+0x16c>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b40      	ldr	r3, [pc, #256]	; (800057c <MX_GPIO_Init+0x16c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0308 	and.w	r3, r3, #8
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT1_OP9_Pin|OUT1_OP10_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800048a:	483d      	ldr	r0, [pc, #244]	; (8000580 <MX_GPIO_Init+0x170>)
 800048c:	f003 fbd7 	bl	8003c3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_LED1_GPIO_Port, ON_LED1_Pin, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2102      	movs	r1, #2
 8000494:	483b      	ldr	r0, [pc, #236]	; (8000584 <MX_GPIO_Init+0x174>)
 8000496:	f003 fbd2 	bl	8003c3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ON_BUZZ_Pin|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f241 0101 	movw	r1, #4097	; 0x1001
 80004a0:	4839      	ldr	r0, [pc, #228]	; (8000588 <MX_GPIO_Init+0x178>)
 80004a2:	f003 fbcc 	bl	8003c3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rst_GPIO_Port, Rst_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ac:	4837      	ldr	r0, [pc, #220]	; (800058c <MX_GPIO_Init+0x17c>)
 80004ae:	f003 fbc6 	bl	8003c3e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_OP9_Pin OUT1_OP10_Pin */
  GPIO_InitStruct.Pin = OUT1_OP9_Pin|OUT1_OP10_Pin;
 80004b2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b8:	2301      	movs	r3, #1
 80004ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c0:	2302      	movs	r3, #2
 80004c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	4619      	mov	r1, r3
 80004ca:	482d      	ldr	r0, [pc, #180]	; (8000580 <MX_GPIO_Init+0x170>)
 80004cc:	f003 fa46 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_LED1_Pin */
  GPIO_InitStruct.Pin = ON_LED1_Pin;
 80004d0:	2302      	movs	r3, #2
 80004d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2302      	movs	r3, #2
 80004de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ON_LED1_GPIO_Port, &GPIO_InitStruct);
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	4619      	mov	r1, r3
 80004e6:	4827      	ldr	r0, [pc, #156]	; (8000584 <MX_GPIO_Init+0x174>)
 80004e8:	f003 fa38 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP4_Pin OUT1_OP3_Pin OUT1_OP2_Pin OUT1_OP1_Pin
                           OUT1_OP8_Pin OUT1_OP7_Pin OUT1_OP6_Pin OUT1_OP5_Pin */
  GPIO_InitStruct.Pin = OUT1_OP4_Pin|OUT1_OP3_Pin|OUT1_OP2_Pin|OUT1_OP1_Pin
 80004ec:	23ff      	movs	r3, #255	; 0xff
 80004ee:	617b      	str	r3, [r7, #20]
                          |OUT1_OP8_Pin|OUT1_OP7_Pin|OUT1_OP6_Pin|OUT1_OP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	4619      	mov	r1, r3
 80004fe:	4823      	ldr	r0, [pc, #140]	; (800058c <MX_GPIO_Init+0x17c>)
 8000500:	f003 fa2c 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_BUZZ_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = ON_BUZZ_Pin|GPIO_W5500_CS_Pin;
 8000504:	f241 0301 	movw	r3, #4097	; 0x1001
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2302      	movs	r3, #2
 8000514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4619      	mov	r1, r3
 800051c:	481a      	ldr	r0, [pc, #104]	; (8000588 <MX_GPIO_Init+0x178>)
 800051e:	f003 fa1d 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_OP12_Pin OUT1_OP11_Pin OUT1_OP15_Pin OUT1_OP16_Pin
                           OUT1_OP14_Pin OUT1_OP13_Pin */
  GPIO_InitStruct.Pin = OUT1_OP12_Pin|OUT1_OP11_Pin|OUT1_OP15_Pin|OUT1_OP16_Pin
 8000522:	237e      	movs	r3, #126	; 0x7e
 8000524:	617b      	str	r3, [r7, #20]
                          |OUT1_OP14_Pin|OUT1_OP13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4619      	mov	r1, r3
 8000534:	4814      	ldr	r0, [pc, #80]	; (8000588 <MX_GPIO_Init+0x178>)
 8000536:	f003 fa11 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : Rst_Pin */
  GPIO_InitStruct.Pin = Rst_Pin;
 800053a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000544:	2301      	movs	r3, #1
 8000546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2302      	movs	r3, #2
 800054a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Rst_GPIO_Port, &GPIO_InitStruct);
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	4619      	mov	r1, r3
 8000552:	480e      	ldr	r0, [pc, #56]	; (800058c <MX_GPIO_Init+0x17c>)
 8000554:	f003 fa02 	bl	800395c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <MX_GPIO_Init+0x180>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
 800055e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000560:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
 800056e:	4a08      	ldr	r2, [pc, #32]	; (8000590 <MX_GPIO_Init+0x180>)
 8000570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000572:	6053      	str	r3, [r2, #4]

}
 8000574:	bf00      	nop
 8000576:	3728      	adds	r7, #40	; 0x28
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	40011000 	.word	0x40011000
 8000584:	40011400 	.word	0x40011400
 8000588:	40010c00 	.word	0x40010c00
 800058c:	40010800 	.word	0x40010800
 8000590:	40010000 	.word	0x40010000

08000594 <W5500_rxtx>:

/* USER CODE BEGIN 4 */
uint8_t W5500_rxtx(uint8_t data)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af02      	add	r7, sp, #8
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	uint8_t rxdata;

	HAL_SPI_TransmitReceive(&hspi2, &data, &rxdata, 1, 50);
 800059e:	f107 020f 	add.w	r2, r7, #15
 80005a2:	1df9      	adds	r1, r7, #7
 80005a4:	2332      	movs	r3, #50	; 0x32
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2301      	movs	r3, #1
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <W5500_rxtx+0x28>)
 80005ac:	f004 f968 	bl	8004880 <HAL_SPI_TransmitReceive>

	return (rxdata);
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20001b54 	.word	0x20001b54

080005c0 <wizchip_select>:
/////////////////////////////////////////////////////////////////
// SPI Callback function for accessing WIZCHIP                 //
// WIZCHIP user should implement with your host spi peripheral //
/////////////////////////////////////////////////////////////////
void  wizchip_select(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	W5500_select();
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ca:	4802      	ldr	r0, [pc, #8]	; (80005d4 <wizchip_select+0x14>)
 80005cc:	f003 fb37 	bl	8003c3e <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40010c00 	.word	0x40010c00

080005d8 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	W5500_release();
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e2:	4802      	ldr	r0, [pc, #8]	; (80005ec <wizchip_deselect+0x14>)
 80005e4:	f003 fb2b 	bl	8003c3e <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	W5500_tx(wb);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffc9 	bl	8000594 <W5500_rxtx>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <wizchip_read>:

uint8_t wizchip_read()
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
   return W5500_rx();
 800060e:	20ff      	movs	r0, #255	; 0xff
 8000610:	f7ff ffc0 	bl	8000594 <W5500_rxtx>
 8000614:	4603      	mov	r3, r0
}
 8000616:	4618      	mov	r0, r3
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
   uint8_t tmpstr[6];

	ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000622:	4906      	ldr	r1, [pc, #24]	; (800063c <network_init+0x20>)
 8000624:	2000      	movs	r0, #0
 8000626:	f002 fb51 	bl	8002ccc <ctlnetwork>

	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	2008      	movs	r0, #8
 8000630:	f002 fa6e 	bl	8002b10 <ctlwizchip>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000000 	.word	0x20000000

08000640 <HTTP_reset>:
#define len(some) (sizeof(some)/sizeof(some[0]))

//http server

void HTTP_reset(uint8_t sockn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
    sentsize[sockn]=0;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HTTP_reset+0x28>)
 800064e:	2100      	movs	r1, #0
 8000650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	http_state[sockn]=HTTP_IDLE;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <HTTP_reset+0x2c>)
 8000658:	2100      	movs	r1, #0
 800065a:	54d1      	strb	r1, [r2, r3]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20002c3c 	.word	0x20002c3c
 800066c:	20001c28 	.word	0x20001c28

08000670 <tcp_http_mt>:

int32_t tcp_http_mt(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8000670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000672:	b089      	sub	sp, #36	; 0x24
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
 800067c:	4613      	mov	r3, r2
 800067e:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint32_t size = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
   uint8_t flagHtmlGen = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	76fb      	strb	r3, [r7, #27]
   char *url,*p;
   uint16_t blocklen=0;
 8000688:	2300      	movs	r3, #0
 800068a:	833b      	strh	r3, [r7, #24]

   switch(getSn_SR(sn))
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	3301      	adds	r3, #1
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000698:	4618      	mov	r0, r3
 800069a:	f001 ff67 	bl	800256c <WIZCHIP_READ>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b1c      	cmp	r3, #28
 80006a2:	f201 800d 	bhi.w	80016c0 <tcp_http_mt+0x1050>
 80006a6:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <tcp_http_mt+0x3c>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	0800169d 	.word	0x0800169d
 80006b0:	080016c1 	.word	0x080016c1
 80006b4:	080016c1 	.word	0x080016c1
 80006b8:	080016c1 	.word	0x080016c1
 80006bc:	080016c1 	.word	0x080016c1
 80006c0:	080016c1 	.word	0x080016c1
 80006c4:	080016c1 	.word	0x080016c1
 80006c8:	080016c1 	.word	0x080016c1
 80006cc:	080016c1 	.word	0x080016c1
 80006d0:	080016c1 	.word	0x080016c1
 80006d4:	080016c1 	.word	0x080016c1
 80006d8:	080016c1 	.word	0x080016c1
 80006dc:	080016c1 	.word	0x080016c1
 80006e0:	080016c1 	.word	0x080016c1
 80006e4:	080016c1 	.word	0x080016c1
 80006e8:	080016c1 	.word	0x080016c1
 80006ec:	080016c1 	.word	0x080016c1
 80006f0:	080016c1 	.word	0x080016c1
 80006f4:	080016c1 	.word	0x080016c1
 80006f8:	0800167f 	.word	0x0800167f
 80006fc:	080016c1 	.word	0x080016c1
 8000700:	080016c1 	.word	0x080016c1
 8000704:	080016c1 	.word	0x080016c1
 8000708:	08000721 	.word	0x08000721
 800070c:	080016c1 	.word	0x080016c1
 8000710:	080016c1 	.word	0x080016c1
 8000714:	080016c1 	.word	0x080016c1
 8000718:	080016c1 	.word	0x080016c1
 800071c:	08001661 	.word	0x08001661
   {
      case SOCK_ESTABLISHED :

         if(getSn_IR(sn) & Sn_IR_CON)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	3301      	adds	r3, #1
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800072c:	4618      	mov	r0, r3
 800072e:	f001 ff1d 	bl	800256c <WIZCHIP_READ>
 8000732:	4603      	mov	r3, r0
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	2b00      	cmp	r3, #0
 800073a:	d009      	beq.n	8000750 <tcp_http_mt+0xe0>
         {
            setSn_IR(sn,Sn_IR_CON);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	3301      	adds	r3, #1
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f001 ff3e 	bl	80025cc <WIZCHIP_WRITE>
         }

         if((size = getSn_RX_RSR(sn)) > 0)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4618      	mov	r0, r3
 8000754:	f002 f847 	bl	80027e6 <getSn_RX_RSR>
 8000758:	4603      	mov	r3, r0
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	2b00      	cmp	r3, #0
 8000760:	f000 87b3 	beq.w	80016ca <tcp_http_mt+0x105a>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800076a:	d902      	bls.n	8000772 <tcp_http_mt+0x102>
 800076c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000770:	61fb      	str	r3, [r7, #28]
            ret = recv(sn,buf,size);
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	b29a      	uxth	r2, r3
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	6839      	ldr	r1, [r7, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fe40 	bl	8002400 <recv>
 8000780:	6178      	str	r0, [r7, #20]

            HTTP_reset(sn);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff5b 	bl	8000640 <HTTP_reset>

            if(ret <= 0)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dc02      	bgt.n	8000796 <tcp_http_mt+0x126>
            return ret;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	f000 bfa2 	b.w	80016da <tcp_http_mt+0x106a>

            url =(char*) buf + 4;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	3304      	adds	r3, #4
 800079a:	613b      	str	r3, [r7, #16]

            if((http_state[sn]==HTTP_IDLE)&&(memcmp(buf, "GET ", 4)==0)&&((p = strchr(url, ' '))))// extract URL from request header
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4aa1      	ldr	r2, [pc, #644]	; (8000a24 <tcp_http_mt+0x3b4>)
 80007a0:	5cd3      	ldrb	r3, [r2, r3]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f040 8791 	bne.w	80016ca <tcp_http_mt+0x105a>
 80007a8:	2204      	movs	r2, #4
 80007aa:	499f      	ldr	r1, [pc, #636]	; (8000a28 <tcp_http_mt+0x3b8>)
 80007ac:	6838      	ldr	r0, [r7, #0]
 80007ae:	f007 f9b1 	bl	8007b14 <memcmp>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	f040 8788 	bne.w	80016ca <tcp_http_mt+0x105a>
 80007ba:	2120      	movs	r1, #32
 80007bc:	6938      	ldr	r0, [r7, #16]
 80007be:	f007 f9cb 	bl	8007b58 <strchr>
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f000 877f 	beq.w	80016ca <tcp_http_mt+0x105a>
            {
              *(p++) = 0;//making zeroed url string
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	60fa      	str	r2, [r7, #12]
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]

				if ((url != NULL)&&(strncmp("/favicon.ico",url,12) != 0))
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 8737 	beq.w	800164c <tcp_http_mt+0xfdc>
 80007de:	220c      	movs	r2, #12
 80007e0:	6939      	ldr	r1, [r7, #16]
 80007e2:	4892      	ldr	r0, [pc, #584]	; (8000a2c <tcp_http_mt+0x3bc>)
 80007e4:	f007 f9cd 	bl	8007b82 <strncmp>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f000 872e 	beq.w	800164c <tcp_http_mt+0xfdc>
				{
					flagHtmlGen = 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	76fb      	strb	r3, [r7, #27]

					//Gera��o da HTML
					if(flagHtmlGen == 1)
 80007f4:	7efb      	ldrb	r3, [r7, #27]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	f040 8731 	bne.w	800165e <tcp_http_mt+0xfee>
					{
						if(strncmp("/rede", url, 6) == 0)
 80007fc:	2206      	movs	r2, #6
 80007fe:	6939      	ldr	r1, [r7, #16]
 8000800:	488b      	ldr	r0, [pc, #556]	; (8000a30 <tcp_http_mt+0x3c0>)
 8000802:	f007 f9be 	bl	8007b82 <strncmp>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	f040 8131 	bne.w	8000a70 <tcp_http_mt+0x400>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	4a88      	ldr	r2, [pc, #544]	; (8000a34 <tcp_http_mt+0x3c4>)
 8000812:	4614      	mov	r4, r2
 8000814:	469c      	mov	ip, r3
 8000816:	f104 0e20 	add.w	lr, r4, #32
 800081a:	4665      	mov	r5, ip
 800081c:	4626      	mov	r6, r4
 800081e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000820:	6028      	str	r0, [r5, #0]
 8000822:	6069      	str	r1, [r5, #4]
 8000824:	60aa      	str	r2, [r5, #8]
 8000826:	60eb      	str	r3, [r5, #12]
 8000828:	3410      	adds	r4, #16
 800082a:	f10c 0c10 	add.w	ip, ip, #16
 800082e:	4574      	cmp	r4, lr
 8000830:	d1f3      	bne.n	800081a <tcp_http_mt+0x1aa>
 8000832:	4665      	mov	r5, ip
 8000834:	4623      	mov	r3, r4
 8000836:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000838:	6028      	str	r0, [r5, #0]
 800083a:	6069      	str	r1, [r5, #4]
 800083c:	60aa      	str	r2, [r5, #8]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 8000842:	6838      	ldr	r0, [r7, #0]
 8000844:	f7ff fc84 	bl	8000150 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a79      	ldr	r2, [pc, #484]	; (8000a38 <tcp_http_mt+0x3c8>)
 8000852:	461c      	mov	r4, r3
 8000854:	4613      	mov	r3, r2
 8000856:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000858:	6020      	str	r0, [r4, #0]
 800085a:	6061      	str	r1, [r4, #4]
 800085c:	60a2      	str	r2, [r4, #8]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Mestre Config</title>");
 8000862:	6838      	ldr	r0, [r7, #0]
 8000864:	f7ff fc74 	bl	8000150 <strlen>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a72      	ldr	r2, [pc, #456]	; (8000a3c <tcp_http_mt+0x3cc>)
 8000872:	461d      	mov	r5, r3
 8000874:	4614      	mov	r4, r2
 8000876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000878:	6028      	str	r0, [r5, #0]
 800087a:	6069      	str	r1, [r5, #4]
 800087c:	60aa      	str	r2, [r5, #8]
 800087e:	60eb      	str	r3, [r5, #12]
 8000880:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000882:	6128      	str	r0, [r5, #16]
 8000884:	6169      	str	r1, [r5, #20]
 8000886:	61aa      	str	r2, [r5, #24]
 8000888:	7823      	ldrb	r3, [r4, #0]
 800088a:	772b      	strb	r3, [r5, #28]
							strcat((char*)buf, "</head>");
 800088c:	6838      	ldr	r0, [r7, #0]
 800088e:	f7ff fc5f 	bl	8000150 <strlen>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	4413      	add	r3, r2
 800089a:	4969      	ldr	r1, [pc, #420]	; (8000a40 <tcp_http_mt+0x3d0>)
 800089c:	461a      	mov	r2, r3
 800089e:	460b      	mov	r3, r1
 80008a0:	cb03      	ldmia	r3!, {r0, r1}
 80008a2:	6010      	str	r0, [r2, #0]
 80008a4:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 80008a6:	6838      	ldr	r0, [r7, #0]
 80008a8:	f7ff fc52 	bl	8000150 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a63      	ldr	r2, [pc, #396]	; (8000a44 <tcp_http_mt+0x3d4>)
 80008b6:	6810      	ldr	r0, [r2, #0]
 80008b8:	6018      	str	r0, [r3, #0]
 80008ba:	8891      	ldrh	r1, [r2, #4]
 80008bc:	7992      	ldrb	r2, [r2, #6]
 80008be:	8099      	strh	r1, [r3, #4]
 80008c0:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<b><center>Configuracao da Placa de rede</b></center><br>");
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f7ff fc44 	bl	8000150 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a5d      	ldr	r2, [pc, #372]	; (8000a48 <tcp_http_mt+0x3d8>)
 80008d2:	4614      	mov	r4, r2
 80008d4:	469c      	mov	ip, r3
 80008d6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80008da:	4665      	mov	r5, ip
 80008dc:	4626      	mov	r6, r4
 80008de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008e0:	6028      	str	r0, [r5, #0]
 80008e2:	6069      	str	r1, [r5, #4]
 80008e4:	60aa      	str	r2, [r5, #8]
 80008e6:	60eb      	str	r3, [r5, #12]
 80008e8:	3410      	adds	r4, #16
 80008ea:	f10c 0c10 	add.w	ip, ip, #16
 80008ee:	4574      	cmp	r4, lr
 80008f0:	d1f3      	bne.n	80008da <tcp_http_mt+0x26a>
 80008f2:	4662      	mov	r2, ip
 80008f4:	4623      	mov	r3, r4
 80008f6:	cb03      	ldmia	r3!, {r0, r1}
 80008f8:	6010      	str	r0, [r2, #0]
 80008fa:	6051      	str	r1, [r2, #4]
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "<center><form action=''>");
 8000900:	6838      	ldr	r0, [r7, #0]
 8000902:	f7ff fc25 	bl	8000150 <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	4413      	add	r3, r2
 800090e:	4a4f      	ldr	r2, [pc, #316]	; (8000a4c <tcp_http_mt+0x3dc>)
 8000910:	461d      	mov	r5, r3
 8000912:	4614      	mov	r4, r2
 8000914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000916:	6028      	str	r0, [r5, #0]
 8000918:	6069      	str	r1, [r5, #4]
 800091a:	60aa      	str	r2, [r5, #8]
 800091c:	60eb      	str	r3, [r5, #12]
 800091e:	cc03      	ldmia	r4!, {r0, r1}
 8000920:	6128      	str	r0, [r5, #16]
 8000922:	6169      	str	r1, [r5, #20]
 8000924:	7823      	ldrb	r3, [r4, #0]
 8000926:	762b      	strb	r3, [r5, #24]
							strcat((char*)buf, "IP: <input type='text' name='ip'>		Mascara: <input type='text' name='mascara'><br><br>");
 8000928:	6838      	ldr	r0, [r7, #0]
 800092a:	f7ff fc11 	bl	8000150 <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	4413      	add	r3, r2
 8000936:	4a46      	ldr	r2, [pc, #280]	; (8000a50 <tcp_http_mt+0x3e0>)
 8000938:	4618      	mov	r0, r3
 800093a:	4611      	mov	r1, r2
 800093c:	2357      	movs	r3, #87	; 0x57
 800093e:	461a      	mov	r2, r3
 8000940:	f007 f8f7 	bl	8007b32 <memcpy>
							strcat((char*)buf, "Porta: <input type='text' name='porta'>		Gateway: <input type='text' name='gateway'><br><br>");
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	f7ff fc03 	bl	8000150 <strlen>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <tcp_http_mt+0x3e4>)
 8000954:	4618      	mov	r0, r3
 8000956:	4611      	mov	r1, r2
 8000958:	235d      	movs	r3, #93	; 0x5d
 800095a:	461a      	mov	r2, r3
 800095c:	f007 f8e9 	bl	8007b32 <memcpy>
							strcat((char*)buf, "DNS 1: <input type='text' name='dns1'>		DNS 2: <input type='text' name='dns2'><br><br>");
 8000960:	6838      	ldr	r0, [r7, #0]
 8000962:	f7ff fbf5 	bl	8000150 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	4a3a      	ldr	r2, [pc, #232]	; (8000a58 <tcp_http_mt+0x3e8>)
 8000970:	4618      	mov	r0, r3
 8000972:	4611      	mov	r1, r2
 8000974:	2357      	movs	r3, #87	; 0x57
 8000976:	461a      	mov	r2, r3
 8000978:	f007 f8db 	bl	8007b32 <memcpy>
							strcat((char*)buf, "DHCP: <button>On</button>  <button>Off</button>");
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f7ff fbe7 	bl	8000150 <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	4413      	add	r3, r2
 800098a:	4a34      	ldr	r2, [pc, #208]	; (8000a5c <tcp_http_mt+0x3ec>)
 800098c:	4614      	mov	r4, r2
 800098e:	469c      	mov	ip, r3
 8000990:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000994:	4665      	mov	r5, ip
 8000996:	4626      	mov	r6, r4
 8000998:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800099a:	6028      	str	r0, [r5, #0]
 800099c:	6069      	str	r1, [r5, #4]
 800099e:	60aa      	str	r2, [r5, #8]
 80009a0:	60eb      	str	r3, [r5, #12]
 80009a2:	3410      	adds	r4, #16
 80009a4:	f10c 0c10 	add.w	ip, ip, #16
 80009a8:	4574      	cmp	r4, lr
 80009aa:	d1f3      	bne.n	8000994 <tcp_http_mt+0x324>
							strcat((char*)buf, "</center></form>");
 80009ac:	6838      	ldr	r0, [r7, #0]
 80009ae:	f7ff fbcf 	bl	8000150 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <tcp_http_mt+0x3f0>)
 80009bc:	461d      	mov	r5, r3
 80009be:	4614      	mov	r4, r2
 80009c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c2:	6028      	str	r0, [r5, #0]
 80009c4:	6069      	str	r1, [r5, #4]
 80009c6:	60aa      	str	r2, [r5, #8]
 80009c8:	60eb      	str	r3, [r5, #12]
 80009ca:	7823      	ldrb	r3, [r4, #0]
 80009cc:	742b      	strb	r3, [r5, #16]
							strcat((char*)buf, "<center><button>Salvar</button><br><br><a href='http://192.168.0.231'>Voltar</a><br></center>");
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f7ff fbbe 	bl	8000150 <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <tcp_http_mt+0x3f4>)
 80009de:	4618      	mov	r0, r3
 80009e0:	4611      	mov	r1, r2
 80009e2:	235e      	movs	r3, #94	; 0x5e
 80009e4:	461a      	mov	r2, r3
 80009e6:	f007 f8a4 	bl	8007b32 <memcpy>

							strcat((char*)buf, "</body>");
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	f7ff fbb0 	bl	8000150 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	491b      	ldr	r1, [pc, #108]	; (8000a68 <tcp_http_mt+0x3f8>)
 80009fa:	461a      	mov	r2, r3
 80009fc:	460b      	mov	r3, r1
 80009fe:	cb03      	ldmia	r3!, {r0, r1}
 8000a00:	6010      	str	r0, [r2, #0]
 8000a02:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f7ff fba3 	bl	8000150 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	4413      	add	r3, r2
 8000a12:	4916      	ldr	r1, [pc, #88]	; (8000a6c <tcp_http_mt+0x3fc>)
 8000a14:	461a      	mov	r2, r3
 8000a16:	460b      	mov	r3, r1
 8000a18:	cb03      	ldmia	r3!, {r0, r1}
 8000a1a:	6010      	str	r0, [r2, #0]
 8000a1c:	6051      	str	r1, [r2, #4]
 8000a1e:	f000 bdf7 	b.w	8001610 <tcp_http_mt+0xfa0>
 8000a22:	bf00      	nop
 8000a24:	20001c28 	.word	0x20001c28
 8000a28:	08007c30 	.word	0x08007c30
 8000a2c:	08007c38 	.word	0x08007c38
 8000a30:	08007c48 	.word	0x08007c48
 8000a34:	08007c50 	.word	0x08007c50
 8000a38:	08007c80 	.word	0x08007c80
 8000a3c:	08007c90 	.word	0x08007c90
 8000a40:	08007cb0 	.word	0x08007cb0
 8000a44:	08007cb8 	.word	0x08007cb8
 8000a48:	08007cc0 	.word	0x08007cc0
 8000a4c:	08007cfc 	.word	0x08007cfc
 8000a50:	08007d18 	.word	0x08007d18
 8000a54:	08007d70 	.word	0x08007d70
 8000a58:	08007dd0 	.word	0x08007dd0
 8000a5c:	08007e28 	.word	0x08007e28
 8000a60:	08007e58 	.word	0x08007e58
 8000a64:	08007e6c 	.word	0x08007e6c
 8000a68:	08007ecc 	.word	0x08007ecc
 8000a6c:	08007ed4 	.word	0x08007ed4
						}
						else if(strncmp("/interfaces", url, 6) == 0)
 8000a70:	2206      	movs	r2, #6
 8000a72:	6939      	ldr	r1, [r7, #16]
 8000a74:	48ce      	ldr	r0, [pc, #824]	; (8000db0 <tcp_http_mt+0x740>)
 8000a76:	f007 f884 	bl	8007b82 <strncmp>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f040 84e9 	bne.w	8001454 <tcp_http_mt+0xde4>
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	4acb      	ldr	r2, [pc, #812]	; (8000db4 <tcp_http_mt+0x744>)
 8000a86:	4614      	mov	r4, r2
 8000a88:	469c      	mov	ip, r3
 8000a8a:	f104 0e20 	add.w	lr, r4, #32
 8000a8e:	4665      	mov	r5, ip
 8000a90:	4626      	mov	r6, r4
 8000a92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a94:	6028      	str	r0, [r5, #0]
 8000a96:	6069      	str	r1, [r5, #4]
 8000a98:	60aa      	str	r2, [r5, #8]
 8000a9a:	60eb      	str	r3, [r5, #12]
 8000a9c:	3410      	adds	r4, #16
 8000a9e:	f10c 0c10 	add.w	ip, ip, #16
 8000aa2:	4574      	cmp	r4, lr
 8000aa4:	d1f3      	bne.n	8000a8e <tcp_http_mt+0x41e>
 8000aa6:	4665      	mov	r5, ip
 8000aa8:	4623      	mov	r3, r4
 8000aaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000aac:	6028      	str	r0, [r5, #0]
 8000aae:	6069      	str	r1, [r5, #4]
 8000ab0:	60aa      	str	r2, [r5, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head><title>Escrava Config</title>");
 8000ab6:	6838      	ldr	r0, [r7, #0]
 8000ab8:	f7ff fb4a 	bl	8000150 <strlen>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4abc      	ldr	r2, [pc, #752]	; (8000db8 <tcp_http_mt+0x748>)
 8000ac6:	4614      	mov	r4, r2
 8000ac8:	469c      	mov	ip, r3
 8000aca:	f104 0e20 	add.w	lr, r4, #32
 8000ace:	4665      	mov	r5, ip
 8000ad0:	4626      	mov	r6, r4
 8000ad2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ad4:	6028      	str	r0, [r5, #0]
 8000ad6:	6069      	str	r1, [r5, #4]
 8000ad8:	60aa      	str	r2, [r5, #8]
 8000ada:	60eb      	str	r3, [r5, #12]
 8000adc:	3410      	adds	r4, #16
 8000ade:	f10c 0c10 	add.w	ip, ip, #16
 8000ae2:	4574      	cmp	r4, lr
 8000ae4:	d1f3      	bne.n	8000ace <tcp_http_mt+0x45e>
 8000ae6:	4662      	mov	r2, ip
 8000ae8:	4623      	mov	r3, r4
 8000aea:	cb03      	ldmia	r3!, {r0, r1}
 8000aec:	6010      	str	r0, [r2, #0]
 8000aee:	6051      	str	r1, [r2, #4]
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	8113      	strh	r3, [r2, #8]
							strcat((char*)buf, "<center><table border='1'><tr>");
 8000af4:	6838      	ldr	r0, [r7, #0]
 8000af6:	f7ff fb2b 	bl	8000150 <strlen>
 8000afa:	4603      	mov	r3, r0
 8000afc:	461a      	mov	r2, r3
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	4aae      	ldr	r2, [pc, #696]	; (8000dbc <tcp_http_mt+0x74c>)
 8000b04:	461d      	mov	r5, r3
 8000b06:	4614      	mov	r4, r2
 8000b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0a:	6028      	str	r0, [r5, #0]
 8000b0c:	6069      	str	r1, [r5, #4]
 8000b0e:	60aa      	str	r2, [r5, #8]
 8000b10:	60eb      	str	r3, [r5, #12]
 8000b12:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000b14:	6128      	str	r0, [r5, #16]
 8000b16:	6169      	str	r1, [r5, #20]
 8000b18:	61aa      	str	r2, [r5, #24]
 8000b1a:	8823      	ldrh	r3, [r4, #0]
 8000b1c:	78a2      	ldrb	r2, [r4, #2]
 8000b1e:	83ab      	strh	r3, [r5, #28]
 8000b20:	4613      	mov	r3, r2
 8000b22:	77ab      	strb	r3, [r5, #30]
							strcat((char*)buf, "<td><b>Entrada / IP da placa destino</b></td>");
 8000b24:	6838      	ldr	r0, [r7, #0]
 8000b26:	f7ff fb13 	bl	8000150 <strlen>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	4aa3      	ldr	r2, [pc, #652]	; (8000dc0 <tcp_http_mt+0x750>)
 8000b34:	4614      	mov	r4, r2
 8000b36:	469c      	mov	ip, r3
 8000b38:	f104 0e20 	add.w	lr, r4, #32
 8000b3c:	4665      	mov	r5, ip
 8000b3e:	4626      	mov	r6, r4
 8000b40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b42:	6028      	str	r0, [r5, #0]
 8000b44:	6069      	str	r1, [r5, #4]
 8000b46:	60aa      	str	r2, [r5, #8]
 8000b48:	60eb      	str	r3, [r5, #12]
 8000b4a:	3410      	adds	r4, #16
 8000b4c:	f10c 0c10 	add.w	ip, ip, #16
 8000b50:	4574      	cmp	r4, lr
 8000b52:	d1f3      	bne.n	8000b3c <tcp_http_mt+0x4cc>
 8000b54:	4665      	mov	r5, ip
 8000b56:	4623      	mov	r3, r4
 8000b58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b5a:	6028      	str	r0, [r5, #0]
 8000b5c:	6069      	str	r1, [r5, #4]
 8000b5e:	60aa      	str	r2, [r5, #8]
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	81ab      	strh	r3, [r5, #12]
							strcat((char*)buf, "<td><b>Rele da placa destino</b></td></tr>");
 8000b64:	6838      	ldr	r0, [r7, #0]
 8000b66:	f7ff faf3 	bl	8000150 <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a94      	ldr	r2, [pc, #592]	; (8000dc4 <tcp_http_mt+0x754>)
 8000b74:	4614      	mov	r4, r2
 8000b76:	469c      	mov	ip, r3
 8000b78:	f104 0e20 	add.w	lr, r4, #32
 8000b7c:	4665      	mov	r5, ip
 8000b7e:	4626      	mov	r6, r4
 8000b80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b82:	6028      	str	r0, [r5, #0]
 8000b84:	6069      	str	r1, [r5, #4]
 8000b86:	60aa      	str	r2, [r5, #8]
 8000b88:	60eb      	str	r3, [r5, #12]
 8000b8a:	3410      	adds	r4, #16
 8000b8c:	f10c 0c10 	add.w	ip, ip, #16
 8000b90:	4574      	cmp	r4, lr
 8000b92:	d1f3      	bne.n	8000b7c <tcp_http_mt+0x50c>
 8000b94:	4662      	mov	r2, ip
 8000b96:	4623      	mov	r3, r4
 8000b98:	cb03      	ldmia	r3!, {r0, r1}
 8000b9a:	6010      	str	r0, [r2, #0]
 8000b9c:	6051      	str	r1, [r2, #4]
 8000b9e:	8819      	ldrh	r1, [r3, #0]
 8000ba0:	789b      	ldrb	r3, [r3, #2]
 8000ba2:	8111      	strh	r1, [r2, #8]
 8000ba4:	7293      	strb	r3, [r2, #10]

							strcat((char*)buf, "<tr><td>1:  <input type='text' name='ipDestino1'></td>");
 8000ba6:	6838      	ldr	r0, [r7, #0]
 8000ba8:	f7ff fad2 	bl	8000150 <strlen>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a84      	ldr	r2, [pc, #528]	; (8000dc8 <tcp_http_mt+0x758>)
 8000bb6:	4614      	mov	r4, r2
 8000bb8:	469c      	mov	ip, r3
 8000bba:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000bbe:	4665      	mov	r5, ip
 8000bc0:	4626      	mov	r6, r4
 8000bc2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bc4:	6028      	str	r0, [r5, #0]
 8000bc6:	6069      	str	r1, [r5, #4]
 8000bc8:	60aa      	str	r2, [r5, #8]
 8000bca:	60eb      	str	r3, [r5, #12]
 8000bcc:	3410      	adds	r4, #16
 8000bce:	f10c 0c10 	add.w	ip, ip, #16
 8000bd2:	4574      	cmp	r4, lr
 8000bd4:	d1f3      	bne.n	8000bbe <tcp_http_mt+0x54e>
 8000bd6:	4663      	mov	r3, ip
 8000bd8:	4622      	mov	r2, r4
 8000bda:	6810      	ldr	r0, [r2, #0]
 8000bdc:	6018      	str	r0, [r3, #0]
 8000bde:	8891      	ldrh	r1, [r2, #4]
 8000be0:	7992      	ldrb	r2, [r2, #6]
 8000be2:	8099      	strh	r1, [r3, #4]
 8000be4:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino1'></td></tr>");
 8000be6:	6838      	ldr	r0, [r7, #0]
 8000be8:	f7ff fab2 	bl	8000150 <strlen>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a75      	ldr	r2, [pc, #468]	; (8000dcc <tcp_http_mt+0x75c>)
 8000bf6:	4614      	mov	r4, r2
 8000bf8:	469c      	mov	ip, r3
 8000bfa:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000bfe:	4665      	mov	r5, ip
 8000c00:	4626      	mov	r6, r4
 8000c02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c04:	6028      	str	r0, [r5, #0]
 8000c06:	6069      	str	r1, [r5, #4]
 8000c08:	60aa      	str	r2, [r5, #8]
 8000c0a:	60eb      	str	r3, [r5, #12]
 8000c0c:	3410      	adds	r4, #16
 8000c0e:	f10c 0c10 	add.w	ip, ip, #16
 8000c12:	4574      	cmp	r4, lr
 8000c14:	d1f3      	bne.n	8000bfe <tcp_http_mt+0x58e>
 8000c16:	4663      	mov	r3, ip
 8000c18:	4622      	mov	r2, r4
 8000c1a:	6810      	ldr	r0, [r2, #0]
 8000c1c:	6018      	str	r0, [r3, #0]
 8000c1e:	8892      	ldrh	r2, [r2, #4]
 8000c20:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>2:  <input type='text' name='ipDestino2'></td>");
 8000c22:	6838      	ldr	r0, [r7, #0]
 8000c24:	f7ff fa94 	bl	8000150 <strlen>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a67      	ldr	r2, [pc, #412]	; (8000dd0 <tcp_http_mt+0x760>)
 8000c32:	4614      	mov	r4, r2
 8000c34:	469c      	mov	ip, r3
 8000c36:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c3a:	4665      	mov	r5, ip
 8000c3c:	4626      	mov	r6, r4
 8000c3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c40:	6028      	str	r0, [r5, #0]
 8000c42:	6069      	str	r1, [r5, #4]
 8000c44:	60aa      	str	r2, [r5, #8]
 8000c46:	60eb      	str	r3, [r5, #12]
 8000c48:	3410      	adds	r4, #16
 8000c4a:	f10c 0c10 	add.w	ip, ip, #16
 8000c4e:	4574      	cmp	r4, lr
 8000c50:	d1f3      	bne.n	8000c3a <tcp_http_mt+0x5ca>
 8000c52:	4663      	mov	r3, ip
 8000c54:	4622      	mov	r2, r4
 8000c56:	6810      	ldr	r0, [r2, #0]
 8000c58:	6018      	str	r0, [r3, #0]
 8000c5a:	8891      	ldrh	r1, [r2, #4]
 8000c5c:	7992      	ldrb	r2, [r2, #6]
 8000c5e:	8099      	strh	r1, [r3, #4]
 8000c60:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino2'></td></tr>");
 8000c62:	6838      	ldr	r0, [r7, #0]
 8000c64:	f7ff fa74 	bl	8000150 <strlen>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a58      	ldr	r2, [pc, #352]	; (8000dd4 <tcp_http_mt+0x764>)
 8000c72:	4614      	mov	r4, r2
 8000c74:	469c      	mov	ip, r3
 8000c76:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c7a:	4665      	mov	r5, ip
 8000c7c:	4626      	mov	r6, r4
 8000c7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c80:	6028      	str	r0, [r5, #0]
 8000c82:	6069      	str	r1, [r5, #4]
 8000c84:	60aa      	str	r2, [r5, #8]
 8000c86:	60eb      	str	r3, [r5, #12]
 8000c88:	3410      	adds	r4, #16
 8000c8a:	f10c 0c10 	add.w	ip, ip, #16
 8000c8e:	4574      	cmp	r4, lr
 8000c90:	d1f3      	bne.n	8000c7a <tcp_http_mt+0x60a>
 8000c92:	4663      	mov	r3, ip
 8000c94:	4622      	mov	r2, r4
 8000c96:	6810      	ldr	r0, [r2, #0]
 8000c98:	6018      	str	r0, [r3, #0]
 8000c9a:	8892      	ldrh	r2, [r2, #4]
 8000c9c:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>3:  <input type='text' name='ipDestino3'></td>");
 8000c9e:	6838      	ldr	r0, [r7, #0]
 8000ca0:	f7ff fa56 	bl	8000150 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a4a      	ldr	r2, [pc, #296]	; (8000dd8 <tcp_http_mt+0x768>)
 8000cae:	4614      	mov	r4, r2
 8000cb0:	469c      	mov	ip, r3
 8000cb2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000cb6:	4665      	mov	r5, ip
 8000cb8:	4626      	mov	r6, r4
 8000cba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cbc:	6028      	str	r0, [r5, #0]
 8000cbe:	6069      	str	r1, [r5, #4]
 8000cc0:	60aa      	str	r2, [r5, #8]
 8000cc2:	60eb      	str	r3, [r5, #12]
 8000cc4:	3410      	adds	r4, #16
 8000cc6:	f10c 0c10 	add.w	ip, ip, #16
 8000cca:	4574      	cmp	r4, lr
 8000ccc:	d1f3      	bne.n	8000cb6 <tcp_http_mt+0x646>
 8000cce:	4663      	mov	r3, ip
 8000cd0:	4622      	mov	r2, r4
 8000cd2:	6810      	ldr	r0, [r2, #0]
 8000cd4:	6018      	str	r0, [r3, #0]
 8000cd6:	8891      	ldrh	r1, [r2, #4]
 8000cd8:	7992      	ldrb	r2, [r2, #6]
 8000cda:	8099      	strh	r1, [r3, #4]
 8000cdc:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino3'></td></tr>");
 8000cde:	6838      	ldr	r0, [r7, #0]
 8000ce0:	f7ff fa36 	bl	8000150 <strlen>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a3b      	ldr	r2, [pc, #236]	; (8000ddc <tcp_http_mt+0x76c>)
 8000cee:	4614      	mov	r4, r2
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000cf6:	4665      	mov	r5, ip
 8000cf8:	4626      	mov	r6, r4
 8000cfa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cfc:	6028      	str	r0, [r5, #0]
 8000cfe:	6069      	str	r1, [r5, #4]
 8000d00:	60aa      	str	r2, [r5, #8]
 8000d02:	60eb      	str	r3, [r5, #12]
 8000d04:	3410      	adds	r4, #16
 8000d06:	f10c 0c10 	add.w	ip, ip, #16
 8000d0a:	4574      	cmp	r4, lr
 8000d0c:	d1f3      	bne.n	8000cf6 <tcp_http_mt+0x686>
 8000d0e:	4663      	mov	r3, ip
 8000d10:	4622      	mov	r2, r4
 8000d12:	6810      	ldr	r0, [r2, #0]
 8000d14:	6018      	str	r0, [r3, #0]
 8000d16:	8892      	ldrh	r2, [r2, #4]
 8000d18:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>4:  <input type='text' name='ipDestino4'></td>");
 8000d1a:	6838      	ldr	r0, [r7, #0]
 8000d1c:	f7ff fa18 	bl	8000150 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <tcp_http_mt+0x770>)
 8000d2a:	4614      	mov	r4, r2
 8000d2c:	469c      	mov	ip, r3
 8000d2e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d32:	4665      	mov	r5, ip
 8000d34:	4626      	mov	r6, r4
 8000d36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d38:	6028      	str	r0, [r5, #0]
 8000d3a:	6069      	str	r1, [r5, #4]
 8000d3c:	60aa      	str	r2, [r5, #8]
 8000d3e:	60eb      	str	r3, [r5, #12]
 8000d40:	3410      	adds	r4, #16
 8000d42:	f10c 0c10 	add.w	ip, ip, #16
 8000d46:	4574      	cmp	r4, lr
 8000d48:	d1f3      	bne.n	8000d32 <tcp_http_mt+0x6c2>
 8000d4a:	4663      	mov	r3, ip
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	6810      	ldr	r0, [r2, #0]
 8000d50:	6018      	str	r0, [r3, #0]
 8000d52:	8891      	ldrh	r1, [r2, #4]
 8000d54:	7992      	ldrb	r2, [r2, #6]
 8000d56:	8099      	strh	r1, [r3, #4]
 8000d58:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino4'></td></tr>");
 8000d5a:	6838      	ldr	r0, [r7, #0]
 8000d5c:	f7ff f9f8 	bl	8000150 <strlen>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <tcp_http_mt+0x774>)
 8000d6a:	4614      	mov	r4, r2
 8000d6c:	469c      	mov	ip, r3
 8000d6e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d72:	4665      	mov	r5, ip
 8000d74:	4626      	mov	r6, r4
 8000d76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d78:	6028      	str	r0, [r5, #0]
 8000d7a:	6069      	str	r1, [r5, #4]
 8000d7c:	60aa      	str	r2, [r5, #8]
 8000d7e:	60eb      	str	r3, [r5, #12]
 8000d80:	3410      	adds	r4, #16
 8000d82:	f10c 0c10 	add.w	ip, ip, #16
 8000d86:	4574      	cmp	r4, lr
 8000d88:	d1f3      	bne.n	8000d72 <tcp_http_mt+0x702>
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	6810      	ldr	r0, [r2, #0]
 8000d90:	6018      	str	r0, [r3, #0]
 8000d92:	8892      	ldrh	r2, [r2, #4]
 8000d94:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>5:  <input type='text' name='ipDestino5'></td>");
 8000d96:	6838      	ldr	r0, [r7, #0]
 8000d98:	f7ff f9da 	bl	8000150 <strlen>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <tcp_http_mt+0x778>)
 8000da6:	4614      	mov	r4, r2
 8000da8:	469c      	mov	ip, r3
 8000daa:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000dae:	e01d      	b.n	8000dec <tcp_http_mt+0x77c>
 8000db0:	08007edc 	.word	0x08007edc
 8000db4:	08007c50 	.word	0x08007c50
 8000db8:	08007ee8 	.word	0x08007ee8
 8000dbc:	08007f14 	.word	0x08007f14
 8000dc0:	08007f34 	.word	0x08007f34
 8000dc4:	08007f64 	.word	0x08007f64
 8000dc8:	08007f90 	.word	0x08007f90
 8000dcc:	08007fc8 	.word	0x08007fc8
 8000dd0:	08008000 	.word	0x08008000
 8000dd4:	08008038 	.word	0x08008038
 8000dd8:	08008070 	.word	0x08008070
 8000ddc:	080080a8 	.word	0x080080a8
 8000de0:	080080e0 	.word	0x080080e0
 8000de4:	08008118 	.word	0x08008118
 8000de8:	08008150 	.word	0x08008150
 8000dec:	4665      	mov	r5, ip
 8000dee:	4626      	mov	r6, r4
 8000df0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000df2:	6028      	str	r0, [r5, #0]
 8000df4:	6069      	str	r1, [r5, #4]
 8000df6:	60aa      	str	r2, [r5, #8]
 8000df8:	60eb      	str	r3, [r5, #12]
 8000dfa:	3410      	adds	r4, #16
 8000dfc:	f10c 0c10 	add.w	ip, ip, #16
 8000e00:	4574      	cmp	r4, lr
 8000e02:	d1f3      	bne.n	8000dec <tcp_http_mt+0x77c>
 8000e04:	4663      	mov	r3, ip
 8000e06:	4622      	mov	r2, r4
 8000e08:	6810      	ldr	r0, [r2, #0]
 8000e0a:	6018      	str	r0, [r3, #0]
 8000e0c:	8891      	ldrh	r1, [r2, #4]
 8000e0e:	7992      	ldrb	r2, [r2, #6]
 8000e10:	8099      	strh	r1, [r3, #4]
 8000e12:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino5'></td></tr>");
 8000e14:	6838      	ldr	r0, [r7, #0]
 8000e16:	f7ff f99b 	bl	8000150 <strlen>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	4413      	add	r3, r2
 8000e22:	4acb      	ldr	r2, [pc, #812]	; (8001150 <tcp_http_mt+0xae0>)
 8000e24:	4614      	mov	r4, r2
 8000e26:	469c      	mov	ip, r3
 8000e28:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e2c:	4665      	mov	r5, ip
 8000e2e:	4626      	mov	r6, r4
 8000e30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e32:	6028      	str	r0, [r5, #0]
 8000e34:	6069      	str	r1, [r5, #4]
 8000e36:	60aa      	str	r2, [r5, #8]
 8000e38:	60eb      	str	r3, [r5, #12]
 8000e3a:	3410      	adds	r4, #16
 8000e3c:	f10c 0c10 	add.w	ip, ip, #16
 8000e40:	4574      	cmp	r4, lr
 8000e42:	d1f3      	bne.n	8000e2c <tcp_http_mt+0x7bc>
 8000e44:	4663      	mov	r3, ip
 8000e46:	4622      	mov	r2, r4
 8000e48:	6810      	ldr	r0, [r2, #0]
 8000e4a:	6018      	str	r0, [r3, #0]
 8000e4c:	8892      	ldrh	r2, [r2, #4]
 8000e4e:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>6:  <input type='text' name='ipDestino6'></td>");
 8000e50:	6838      	ldr	r0, [r7, #0]
 8000e52:	f7ff f97d 	bl	8000150 <strlen>
 8000e56:	4603      	mov	r3, r0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4abd      	ldr	r2, [pc, #756]	; (8001154 <tcp_http_mt+0xae4>)
 8000e60:	4614      	mov	r4, r2
 8000e62:	469c      	mov	ip, r3
 8000e64:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e68:	4665      	mov	r5, ip
 8000e6a:	4626      	mov	r6, r4
 8000e6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e6e:	6028      	str	r0, [r5, #0]
 8000e70:	6069      	str	r1, [r5, #4]
 8000e72:	60aa      	str	r2, [r5, #8]
 8000e74:	60eb      	str	r3, [r5, #12]
 8000e76:	3410      	adds	r4, #16
 8000e78:	f10c 0c10 	add.w	ip, ip, #16
 8000e7c:	4574      	cmp	r4, lr
 8000e7e:	d1f3      	bne.n	8000e68 <tcp_http_mt+0x7f8>
 8000e80:	4663      	mov	r3, ip
 8000e82:	4622      	mov	r2, r4
 8000e84:	6810      	ldr	r0, [r2, #0]
 8000e86:	6018      	str	r0, [r3, #0]
 8000e88:	8891      	ldrh	r1, [r2, #4]
 8000e8a:	7992      	ldrb	r2, [r2, #6]
 8000e8c:	8099      	strh	r1, [r3, #4]
 8000e8e:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino6'></td></tr>");
 8000e90:	6838      	ldr	r0, [r7, #0]
 8000e92:	f7ff f95d 	bl	8000150 <strlen>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4aae      	ldr	r2, [pc, #696]	; (8001158 <tcp_http_mt+0xae8>)
 8000ea0:	4614      	mov	r4, r2
 8000ea2:	469c      	mov	ip, r3
 8000ea4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000ea8:	4665      	mov	r5, ip
 8000eaa:	4626      	mov	r6, r4
 8000eac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000eae:	6028      	str	r0, [r5, #0]
 8000eb0:	6069      	str	r1, [r5, #4]
 8000eb2:	60aa      	str	r2, [r5, #8]
 8000eb4:	60eb      	str	r3, [r5, #12]
 8000eb6:	3410      	adds	r4, #16
 8000eb8:	f10c 0c10 	add.w	ip, ip, #16
 8000ebc:	4574      	cmp	r4, lr
 8000ebe:	d1f3      	bne.n	8000ea8 <tcp_http_mt+0x838>
 8000ec0:	4663      	mov	r3, ip
 8000ec2:	4622      	mov	r2, r4
 8000ec4:	6810      	ldr	r0, [r2, #0]
 8000ec6:	6018      	str	r0, [r3, #0]
 8000ec8:	8892      	ldrh	r2, [r2, #4]
 8000eca:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>7:  <input type='text' name='ipDestino7'></td>");
 8000ecc:	6838      	ldr	r0, [r7, #0]
 8000ece:	f7ff f93f 	bl	8000150 <strlen>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4aa0      	ldr	r2, [pc, #640]	; (800115c <tcp_http_mt+0xaec>)
 8000edc:	4614      	mov	r4, r2
 8000ede:	469c      	mov	ip, r3
 8000ee0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000ee4:	4665      	mov	r5, ip
 8000ee6:	4626      	mov	r6, r4
 8000ee8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000eea:	6028      	str	r0, [r5, #0]
 8000eec:	6069      	str	r1, [r5, #4]
 8000eee:	60aa      	str	r2, [r5, #8]
 8000ef0:	60eb      	str	r3, [r5, #12]
 8000ef2:	3410      	adds	r4, #16
 8000ef4:	f10c 0c10 	add.w	ip, ip, #16
 8000ef8:	4574      	cmp	r4, lr
 8000efa:	d1f3      	bne.n	8000ee4 <tcp_http_mt+0x874>
 8000efc:	4663      	mov	r3, ip
 8000efe:	4622      	mov	r2, r4
 8000f00:	6810      	ldr	r0, [r2, #0]
 8000f02:	6018      	str	r0, [r3, #0]
 8000f04:	8891      	ldrh	r1, [r2, #4]
 8000f06:	7992      	ldrb	r2, [r2, #6]
 8000f08:	8099      	strh	r1, [r3, #4]
 8000f0a:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino7'></td></tr>");
 8000f0c:	6838      	ldr	r0, [r7, #0]
 8000f0e:	f7ff f91f 	bl	8000150 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a91      	ldr	r2, [pc, #580]	; (8001160 <tcp_http_mt+0xaf0>)
 8000f1c:	4614      	mov	r4, r2
 8000f1e:	469c      	mov	ip, r3
 8000f20:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f24:	4665      	mov	r5, ip
 8000f26:	4626      	mov	r6, r4
 8000f28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f2a:	6028      	str	r0, [r5, #0]
 8000f2c:	6069      	str	r1, [r5, #4]
 8000f2e:	60aa      	str	r2, [r5, #8]
 8000f30:	60eb      	str	r3, [r5, #12]
 8000f32:	3410      	adds	r4, #16
 8000f34:	f10c 0c10 	add.w	ip, ip, #16
 8000f38:	4574      	cmp	r4, lr
 8000f3a:	d1f3      	bne.n	8000f24 <tcp_http_mt+0x8b4>
 8000f3c:	4663      	mov	r3, ip
 8000f3e:	4622      	mov	r2, r4
 8000f40:	6810      	ldr	r0, [r2, #0]
 8000f42:	6018      	str	r0, [r3, #0]
 8000f44:	8892      	ldrh	r2, [r2, #4]
 8000f46:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>8:  <input type='text' name='ipDestino8'></td>");
 8000f48:	6838      	ldr	r0, [r7, #0]
 8000f4a:	f7ff f901 	bl	8000150 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a83      	ldr	r2, [pc, #524]	; (8001164 <tcp_http_mt+0xaf4>)
 8000f58:	4614      	mov	r4, r2
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000f60:	4665      	mov	r5, ip
 8000f62:	4626      	mov	r6, r4
 8000f64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f66:	6028      	str	r0, [r5, #0]
 8000f68:	6069      	str	r1, [r5, #4]
 8000f6a:	60aa      	str	r2, [r5, #8]
 8000f6c:	60eb      	str	r3, [r5, #12]
 8000f6e:	3410      	adds	r4, #16
 8000f70:	f10c 0c10 	add.w	ip, ip, #16
 8000f74:	4574      	cmp	r4, lr
 8000f76:	d1f3      	bne.n	8000f60 <tcp_http_mt+0x8f0>
 8000f78:	4663      	mov	r3, ip
 8000f7a:	4622      	mov	r2, r4
 8000f7c:	6810      	ldr	r0, [r2, #0]
 8000f7e:	6018      	str	r0, [r3, #0]
 8000f80:	8891      	ldrh	r1, [r2, #4]
 8000f82:	7992      	ldrb	r2, [r2, #6]
 8000f84:	8099      	strh	r1, [r3, #4]
 8000f86:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino8'></td></tr>");
 8000f88:	6838      	ldr	r0, [r7, #0]
 8000f8a:	f7ff f8e1 	bl	8000150 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a74      	ldr	r2, [pc, #464]	; (8001168 <tcp_http_mt+0xaf8>)
 8000f98:	4614      	mov	r4, r2
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000fa0:	4665      	mov	r5, ip
 8000fa2:	4626      	mov	r6, r4
 8000fa4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fa6:	6028      	str	r0, [r5, #0]
 8000fa8:	6069      	str	r1, [r5, #4]
 8000faa:	60aa      	str	r2, [r5, #8]
 8000fac:	60eb      	str	r3, [r5, #12]
 8000fae:	3410      	adds	r4, #16
 8000fb0:	f10c 0c10 	add.w	ip, ip, #16
 8000fb4:	4574      	cmp	r4, lr
 8000fb6:	d1f3      	bne.n	8000fa0 <tcp_http_mt+0x930>
 8000fb8:	4663      	mov	r3, ip
 8000fba:	4622      	mov	r2, r4
 8000fbc:	6810      	ldr	r0, [r2, #0]
 8000fbe:	6018      	str	r0, [r3, #0]
 8000fc0:	8892      	ldrh	r2, [r2, #4]
 8000fc2:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>9:  <input type='text' name='ipDestino9'></td>");
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f7ff f8c3 	bl	8000150 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a66      	ldr	r2, [pc, #408]	; (800116c <tcp_http_mt+0xafc>)
 8000fd4:	4614      	mov	r4, r2
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000fdc:	4665      	mov	r5, ip
 8000fde:	4626      	mov	r6, r4
 8000fe0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fe2:	6028      	str	r0, [r5, #0]
 8000fe4:	6069      	str	r1, [r5, #4]
 8000fe6:	60aa      	str	r2, [r5, #8]
 8000fe8:	60eb      	str	r3, [r5, #12]
 8000fea:	3410      	adds	r4, #16
 8000fec:	f10c 0c10 	add.w	ip, ip, #16
 8000ff0:	4574      	cmp	r4, lr
 8000ff2:	d1f3      	bne.n	8000fdc <tcp_http_mt+0x96c>
 8000ff4:	4663      	mov	r3, ip
 8000ff6:	4622      	mov	r2, r4
 8000ff8:	6810      	ldr	r0, [r2, #0]
 8000ffa:	6018      	str	r0, [r3, #0]
 8000ffc:	8891      	ldrh	r1, [r2, #4]
 8000ffe:	7992      	ldrb	r2, [r2, #6]
 8001000:	8099      	strh	r1, [r3, #4]
 8001002:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<td><input type='text' name='releDestino9'></td></tr>");
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f7ff f8a3 	bl	8000150 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	4a57      	ldr	r2, [pc, #348]	; (8001170 <tcp_http_mt+0xb00>)
 8001014:	4614      	mov	r4, r2
 8001016:	469c      	mov	ip, r3
 8001018:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800101c:	4665      	mov	r5, ip
 800101e:	4626      	mov	r6, r4
 8001020:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001022:	6028      	str	r0, [r5, #0]
 8001024:	6069      	str	r1, [r5, #4]
 8001026:	60aa      	str	r2, [r5, #8]
 8001028:	60eb      	str	r3, [r5, #12]
 800102a:	3410      	adds	r4, #16
 800102c:	f10c 0c10 	add.w	ip, ip, #16
 8001030:	4574      	cmp	r4, lr
 8001032:	d1f3      	bne.n	800101c <tcp_http_mt+0x9ac>
 8001034:	4663      	mov	r3, ip
 8001036:	4622      	mov	r2, r4
 8001038:	6810      	ldr	r0, [r2, #0]
 800103a:	6018      	str	r0, [r3, #0]
 800103c:	8892      	ldrh	r2, [r2, #4]
 800103e:	809a      	strh	r2, [r3, #4]

							strcat((char*)buf, "<tr><td>10: <input type='text' name='ipDestino10'></td>");
 8001040:	6838      	ldr	r0, [r7, #0]
 8001042:	f7ff f885 	bl	8000150 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	4413      	add	r3, r2
 800104e:	4a49      	ldr	r2, [pc, #292]	; (8001174 <tcp_http_mt+0xb04>)
 8001050:	4614      	mov	r4, r2
 8001052:	469c      	mov	ip, r3
 8001054:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001058:	4665      	mov	r5, ip
 800105a:	4626      	mov	r6, r4
 800105c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800105e:	6028      	str	r0, [r5, #0]
 8001060:	6069      	str	r1, [r5, #4]
 8001062:	60aa      	str	r2, [r5, #8]
 8001064:	60eb      	str	r3, [r5, #12]
 8001066:	3410      	adds	r4, #16
 8001068:	f10c 0c10 	add.w	ip, ip, #16
 800106c:	4574      	cmp	r4, lr
 800106e:	d1f3      	bne.n	8001058 <tcp_http_mt+0x9e8>
 8001070:	4662      	mov	r2, ip
 8001072:	4623      	mov	r3, r4
 8001074:	cb03      	ldmia	r3!, {r0, r1}
 8001076:	6010      	str	r0, [r2, #0]
 8001078:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino10'></td></tr>");
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f7ff f868 	bl	8000150 <strlen>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a3b      	ldr	r2, [pc, #236]	; (8001178 <tcp_http_mt+0xb08>)
 800108a:	4614      	mov	r4, r2
 800108c:	469c      	mov	ip, r3
 800108e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001092:	4665      	mov	r5, ip
 8001094:	4626      	mov	r6, r4
 8001096:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001098:	6028      	str	r0, [r5, #0]
 800109a:	6069      	str	r1, [r5, #4]
 800109c:	60aa      	str	r2, [r5, #8]
 800109e:	60eb      	str	r3, [r5, #12]
 80010a0:	3410      	adds	r4, #16
 80010a2:	f10c 0c10 	add.w	ip, ip, #16
 80010a6:	4574      	cmp	r4, lr
 80010a8:	d1f3      	bne.n	8001092 <tcp_http_mt+0xa22>
 80010aa:	4663      	mov	r3, ip
 80010ac:	4622      	mov	r2, r4
 80010ae:	6810      	ldr	r0, [r2, #0]
 80010b0:	6018      	str	r0, [r3, #0]
 80010b2:	8891      	ldrh	r1, [r2, #4]
 80010b4:	7992      	ldrb	r2, [r2, #6]
 80010b6:	8099      	strh	r1, [r3, #4]
 80010b8:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>11: <input type='text' name='ipDestino11'></td>");
 80010ba:	6838      	ldr	r0, [r7, #0]
 80010bc:	f7ff f848 	bl	8000150 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a2c      	ldr	r2, [pc, #176]	; (800117c <tcp_http_mt+0xb0c>)
 80010ca:	4614      	mov	r4, r2
 80010cc:	469c      	mov	ip, r3
 80010ce:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010d2:	4665      	mov	r5, ip
 80010d4:	4626      	mov	r6, r4
 80010d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010d8:	6028      	str	r0, [r5, #0]
 80010da:	6069      	str	r1, [r5, #4]
 80010dc:	60aa      	str	r2, [r5, #8]
 80010de:	60eb      	str	r3, [r5, #12]
 80010e0:	3410      	adds	r4, #16
 80010e2:	f10c 0c10 	add.w	ip, ip, #16
 80010e6:	4574      	cmp	r4, lr
 80010e8:	d1f3      	bne.n	80010d2 <tcp_http_mt+0xa62>
 80010ea:	4662      	mov	r2, ip
 80010ec:	4623      	mov	r3, r4
 80010ee:	cb03      	ldmia	r3!, {r0, r1}
 80010f0:	6010      	str	r0, [r2, #0]
 80010f2:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino11'></td></tr>");
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f7ff f82b 	bl	8000150 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <tcp_http_mt+0xb10>)
 8001104:	4614      	mov	r4, r2
 8001106:	469c      	mov	ip, r3
 8001108:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800110c:	4665      	mov	r5, ip
 800110e:	4626      	mov	r6, r4
 8001110:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001112:	6028      	str	r0, [r5, #0]
 8001114:	6069      	str	r1, [r5, #4]
 8001116:	60aa      	str	r2, [r5, #8]
 8001118:	60eb      	str	r3, [r5, #12]
 800111a:	3410      	adds	r4, #16
 800111c:	f10c 0c10 	add.w	ip, ip, #16
 8001120:	4574      	cmp	r4, lr
 8001122:	d1f3      	bne.n	800110c <tcp_http_mt+0xa9c>
 8001124:	4663      	mov	r3, ip
 8001126:	4622      	mov	r2, r4
 8001128:	6810      	ldr	r0, [r2, #0]
 800112a:	6018      	str	r0, [r3, #0]
 800112c:	8891      	ldrh	r1, [r2, #4]
 800112e:	7992      	ldrb	r2, [r2, #6]
 8001130:	8099      	strh	r1, [r3, #4]
 8001132:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>12: <input type='text' name='ipDestino12'></td>");
 8001134:	6838      	ldr	r0, [r7, #0]
 8001136:	f7ff f80b 	bl	8000150 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	4413      	add	r3, r2
 8001142:	4a10      	ldr	r2, [pc, #64]	; (8001184 <tcp_http_mt+0xb14>)
 8001144:	4614      	mov	r4, r2
 8001146:	469c      	mov	ip, r3
 8001148:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800114c:	e01c      	b.n	8001188 <tcp_http_mt+0xb18>
 800114e:	bf00      	nop
 8001150:	08008188 	.word	0x08008188
 8001154:	080081c0 	.word	0x080081c0
 8001158:	080081f8 	.word	0x080081f8
 800115c:	08008230 	.word	0x08008230
 8001160:	08008268 	.word	0x08008268
 8001164:	080082a0 	.word	0x080082a0
 8001168:	080082d8 	.word	0x080082d8
 800116c:	08008310 	.word	0x08008310
 8001170:	08008348 	.word	0x08008348
 8001174:	08008380 	.word	0x08008380
 8001178:	080083b8 	.word	0x080083b8
 800117c:	080083f0 	.word	0x080083f0
 8001180:	08008428 	.word	0x08008428
 8001184:	08008460 	.word	0x08008460
 8001188:	4665      	mov	r5, ip
 800118a:	4626      	mov	r6, r4
 800118c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800118e:	6028      	str	r0, [r5, #0]
 8001190:	6069      	str	r1, [r5, #4]
 8001192:	60aa      	str	r2, [r5, #8]
 8001194:	60eb      	str	r3, [r5, #12]
 8001196:	3410      	adds	r4, #16
 8001198:	f10c 0c10 	add.w	ip, ip, #16
 800119c:	4574      	cmp	r4, lr
 800119e:	d1f3      	bne.n	8001188 <tcp_http_mt+0xb18>
 80011a0:	4662      	mov	r2, ip
 80011a2:	4623      	mov	r3, r4
 80011a4:	cb03      	ldmia	r3!, {r0, r1}
 80011a6:	6010      	str	r0, [r2, #0]
 80011a8:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino12'></td></tr>");
 80011aa:	6838      	ldr	r0, [r7, #0]
 80011ac:	f7fe ffd0 	bl	8000150 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a9a      	ldr	r2, [pc, #616]	; (8001424 <tcp_http_mt+0xdb4>)
 80011ba:	4614      	mov	r4, r2
 80011bc:	469c      	mov	ip, r3
 80011be:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011c2:	4665      	mov	r5, ip
 80011c4:	4626      	mov	r6, r4
 80011c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011c8:	6028      	str	r0, [r5, #0]
 80011ca:	6069      	str	r1, [r5, #4]
 80011cc:	60aa      	str	r2, [r5, #8]
 80011ce:	60eb      	str	r3, [r5, #12]
 80011d0:	3410      	adds	r4, #16
 80011d2:	f10c 0c10 	add.w	ip, ip, #16
 80011d6:	4574      	cmp	r4, lr
 80011d8:	d1f3      	bne.n	80011c2 <tcp_http_mt+0xb52>
 80011da:	4663      	mov	r3, ip
 80011dc:	4622      	mov	r2, r4
 80011de:	6810      	ldr	r0, [r2, #0]
 80011e0:	6018      	str	r0, [r3, #0]
 80011e2:	8891      	ldrh	r1, [r2, #4]
 80011e4:	7992      	ldrb	r2, [r2, #6]
 80011e6:	8099      	strh	r1, [r3, #4]
 80011e8:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>13: <input type='text' name='ipDestino13'></td>");
 80011ea:	6838      	ldr	r0, [r7, #0]
 80011ec:	f7fe ffb0 	bl	8000150 <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a8b      	ldr	r2, [pc, #556]	; (8001428 <tcp_http_mt+0xdb8>)
 80011fa:	4614      	mov	r4, r2
 80011fc:	469c      	mov	ip, r3
 80011fe:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001202:	4665      	mov	r5, ip
 8001204:	4626      	mov	r6, r4
 8001206:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001208:	6028      	str	r0, [r5, #0]
 800120a:	6069      	str	r1, [r5, #4]
 800120c:	60aa      	str	r2, [r5, #8]
 800120e:	60eb      	str	r3, [r5, #12]
 8001210:	3410      	adds	r4, #16
 8001212:	f10c 0c10 	add.w	ip, ip, #16
 8001216:	4574      	cmp	r4, lr
 8001218:	d1f3      	bne.n	8001202 <tcp_http_mt+0xb92>
 800121a:	4662      	mov	r2, ip
 800121c:	4623      	mov	r3, r4
 800121e:	cb03      	ldmia	r3!, {r0, r1}
 8001220:	6010      	str	r0, [r2, #0]
 8001222:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino13'></td></tr>");
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7fe ff93 	bl	8000150 <strlen>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	4a7e      	ldr	r2, [pc, #504]	; (800142c <tcp_http_mt+0xdbc>)
 8001234:	4614      	mov	r4, r2
 8001236:	469c      	mov	ip, r3
 8001238:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800123c:	4665      	mov	r5, ip
 800123e:	4626      	mov	r6, r4
 8001240:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001242:	6028      	str	r0, [r5, #0]
 8001244:	6069      	str	r1, [r5, #4]
 8001246:	60aa      	str	r2, [r5, #8]
 8001248:	60eb      	str	r3, [r5, #12]
 800124a:	3410      	adds	r4, #16
 800124c:	f10c 0c10 	add.w	ip, ip, #16
 8001250:	4574      	cmp	r4, lr
 8001252:	d1f3      	bne.n	800123c <tcp_http_mt+0xbcc>
 8001254:	4663      	mov	r3, ip
 8001256:	4622      	mov	r2, r4
 8001258:	6810      	ldr	r0, [r2, #0]
 800125a:	6018      	str	r0, [r3, #0]
 800125c:	8891      	ldrh	r1, [r2, #4]
 800125e:	7992      	ldrb	r2, [r2, #6]
 8001260:	8099      	strh	r1, [r3, #4]
 8001262:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>14: <input type='text' name='ipDestino14'></td>");
 8001264:	6838      	ldr	r0, [r7, #0]
 8001266:	f7fe ff73 	bl	8000150 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	4a6f      	ldr	r2, [pc, #444]	; (8001430 <tcp_http_mt+0xdc0>)
 8001274:	4614      	mov	r4, r2
 8001276:	469c      	mov	ip, r3
 8001278:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800127c:	4665      	mov	r5, ip
 800127e:	4626      	mov	r6, r4
 8001280:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001282:	6028      	str	r0, [r5, #0]
 8001284:	6069      	str	r1, [r5, #4]
 8001286:	60aa      	str	r2, [r5, #8]
 8001288:	60eb      	str	r3, [r5, #12]
 800128a:	3410      	adds	r4, #16
 800128c:	f10c 0c10 	add.w	ip, ip, #16
 8001290:	4574      	cmp	r4, lr
 8001292:	d1f3      	bne.n	800127c <tcp_http_mt+0xc0c>
 8001294:	4662      	mov	r2, ip
 8001296:	4623      	mov	r3, r4
 8001298:	cb03      	ldmia	r3!, {r0, r1}
 800129a:	6010      	str	r0, [r2, #0]
 800129c:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino14'></td></tr>");
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f7fe ff56 	bl	8000150 <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a61      	ldr	r2, [pc, #388]	; (8001434 <tcp_http_mt+0xdc4>)
 80012ae:	4614      	mov	r4, r2
 80012b0:	469c      	mov	ip, r3
 80012b2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80012b6:	4665      	mov	r5, ip
 80012b8:	4626      	mov	r6, r4
 80012ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012bc:	6028      	str	r0, [r5, #0]
 80012be:	6069      	str	r1, [r5, #4]
 80012c0:	60aa      	str	r2, [r5, #8]
 80012c2:	60eb      	str	r3, [r5, #12]
 80012c4:	3410      	adds	r4, #16
 80012c6:	f10c 0c10 	add.w	ip, ip, #16
 80012ca:	4574      	cmp	r4, lr
 80012cc:	d1f3      	bne.n	80012b6 <tcp_http_mt+0xc46>
 80012ce:	4663      	mov	r3, ip
 80012d0:	4622      	mov	r2, r4
 80012d2:	6810      	ldr	r0, [r2, #0]
 80012d4:	6018      	str	r0, [r3, #0]
 80012d6:	8891      	ldrh	r1, [r2, #4]
 80012d8:	7992      	ldrb	r2, [r2, #6]
 80012da:	8099      	strh	r1, [r3, #4]
 80012dc:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>15: <input type='text' name='ipDestino15'></td>");
 80012de:	6838      	ldr	r0, [r7, #0]
 80012e0:	f7fe ff36 	bl	8000150 <strlen>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a52      	ldr	r2, [pc, #328]	; (8001438 <tcp_http_mt+0xdc8>)
 80012ee:	4614      	mov	r4, r2
 80012f0:	469c      	mov	ip, r3
 80012f2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80012f6:	4665      	mov	r5, ip
 80012f8:	4626      	mov	r6, r4
 80012fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012fc:	6028      	str	r0, [r5, #0]
 80012fe:	6069      	str	r1, [r5, #4]
 8001300:	60aa      	str	r2, [r5, #8]
 8001302:	60eb      	str	r3, [r5, #12]
 8001304:	3410      	adds	r4, #16
 8001306:	f10c 0c10 	add.w	ip, ip, #16
 800130a:	4574      	cmp	r4, lr
 800130c:	d1f3      	bne.n	80012f6 <tcp_http_mt+0xc86>
 800130e:	4662      	mov	r2, ip
 8001310:	4623      	mov	r3, r4
 8001312:	cb03      	ldmia	r3!, {r0, r1}
 8001314:	6010      	str	r0, [r2, #0]
 8001316:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino15'></td></tr>");
 8001318:	6838      	ldr	r0, [r7, #0]
 800131a:	f7fe ff19 	bl	8000150 <strlen>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	4413      	add	r3, r2
 8001326:	4a45      	ldr	r2, [pc, #276]	; (800143c <tcp_http_mt+0xdcc>)
 8001328:	4614      	mov	r4, r2
 800132a:	469c      	mov	ip, r3
 800132c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001330:	4665      	mov	r5, ip
 8001332:	4626      	mov	r6, r4
 8001334:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001336:	6028      	str	r0, [r5, #0]
 8001338:	6069      	str	r1, [r5, #4]
 800133a:	60aa      	str	r2, [r5, #8]
 800133c:	60eb      	str	r3, [r5, #12]
 800133e:	3410      	adds	r4, #16
 8001340:	f10c 0c10 	add.w	ip, ip, #16
 8001344:	4574      	cmp	r4, lr
 8001346:	d1f3      	bne.n	8001330 <tcp_http_mt+0xcc0>
 8001348:	4663      	mov	r3, ip
 800134a:	4622      	mov	r2, r4
 800134c:	6810      	ldr	r0, [r2, #0]
 800134e:	6018      	str	r0, [r3, #0]
 8001350:	8891      	ldrh	r1, [r2, #4]
 8001352:	7992      	ldrb	r2, [r2, #6]
 8001354:	8099      	strh	r1, [r3, #4]
 8001356:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "<tr><td>16: <input type='text' name='ipDestino16'></td>");
 8001358:	6838      	ldr	r0, [r7, #0]
 800135a:	f7fe fef9 	bl	8000150 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	4413      	add	r3, r2
 8001366:	4a36      	ldr	r2, [pc, #216]	; (8001440 <tcp_http_mt+0xdd0>)
 8001368:	4614      	mov	r4, r2
 800136a:	469c      	mov	ip, r3
 800136c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001370:	4665      	mov	r5, ip
 8001372:	4626      	mov	r6, r4
 8001374:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001376:	6028      	str	r0, [r5, #0]
 8001378:	6069      	str	r1, [r5, #4]
 800137a:	60aa      	str	r2, [r5, #8]
 800137c:	60eb      	str	r3, [r5, #12]
 800137e:	3410      	adds	r4, #16
 8001380:	f10c 0c10 	add.w	ip, ip, #16
 8001384:	4574      	cmp	r4, lr
 8001386:	d1f3      	bne.n	8001370 <tcp_http_mt+0xd00>
 8001388:	4662      	mov	r2, ip
 800138a:	4623      	mov	r3, r4
 800138c:	cb03      	ldmia	r3!, {r0, r1}
 800138e:	6010      	str	r0, [r2, #0]
 8001390:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<td><input type='text' name='releDestino16'></td></tr>");
 8001392:	6838      	ldr	r0, [r7, #0]
 8001394:	f7fe fedc 	bl	8000150 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a28      	ldr	r2, [pc, #160]	; (8001444 <tcp_http_mt+0xdd4>)
 80013a2:	4614      	mov	r4, r2
 80013a4:	469c      	mov	ip, r3
 80013a6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80013aa:	4665      	mov	r5, ip
 80013ac:	4626      	mov	r6, r4
 80013ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013b0:	6028      	str	r0, [r5, #0]
 80013b2:	6069      	str	r1, [r5, #4]
 80013b4:	60aa      	str	r2, [r5, #8]
 80013b6:	60eb      	str	r3, [r5, #12]
 80013b8:	3410      	adds	r4, #16
 80013ba:	f10c 0c10 	add.w	ip, ip, #16
 80013be:	4574      	cmp	r4, lr
 80013c0:	d1f3      	bne.n	80013aa <tcp_http_mt+0xd3a>
 80013c2:	4663      	mov	r3, ip
 80013c4:	4622      	mov	r2, r4
 80013c6:	6810      	ldr	r0, [r2, #0]
 80013c8:	6018      	str	r0, [r3, #0]
 80013ca:	8891      	ldrh	r1, [r2, #4]
 80013cc:	7992      	ldrb	r2, [r2, #6]
 80013ce:	8099      	strh	r1, [r3, #4]
 80013d0:	719a      	strb	r2, [r3, #6]

							strcat((char*)buf, "</table><br><button>Salvar</button><br><br><a href='http://192.168.0.231'>Voltar</a><br></center>");
 80013d2:	6838      	ldr	r0, [r7, #0]
 80013d4:	f7fe febc 	bl	8000150 <strlen>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a19      	ldr	r2, [pc, #100]	; (8001448 <tcp_http_mt+0xdd8>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	4611      	mov	r1, r2
 80013e6:	2362      	movs	r3, #98	; 0x62
 80013e8:	461a      	mov	r2, r3
 80013ea:	f006 fba2 	bl	8007b32 <memcpy>

							strcat((char*)buf, "</body>");
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f7fe feae 	bl	8000150 <strlen>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4913      	ldr	r1, [pc, #76]	; (800144c <tcp_http_mt+0xddc>)
 80013fe:	461a      	mov	r2, r3
 8001400:	460b      	mov	r3, r1
 8001402:	cb03      	ldmia	r3!, {r0, r1}
 8001404:	6010      	str	r0, [r2, #0]
 8001406:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 8001408:	6838      	ldr	r0, [r7, #0]
 800140a:	f7fe fea1 	bl	8000150 <strlen>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	4413      	add	r3, r2
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <tcp_http_mt+0xde0>)
 8001418:	461a      	mov	r2, r3
 800141a:	460b      	mov	r3, r1
 800141c:	cb03      	ldmia	r3!, {r0, r1}
 800141e:	6010      	str	r0, [r2, #0]
 8001420:	6051      	str	r1, [r2, #4]
 8001422:	e0f5      	b.n	8001610 <tcp_http_mt+0xfa0>
 8001424:	08008498 	.word	0x08008498
 8001428:	080084d0 	.word	0x080084d0
 800142c:	08008508 	.word	0x08008508
 8001430:	08008540 	.word	0x08008540
 8001434:	08008578 	.word	0x08008578
 8001438:	080085b0 	.word	0x080085b0
 800143c:	080085e8 	.word	0x080085e8
 8001440:	08008620 	.word	0x08008620
 8001444:	08008658 	.word	0x08008658
 8001448:	08008690 	.word	0x08008690
 800144c:	08007ecc 	.word	0x08007ecc
 8001450:	08007ed4 	.word	0x08007ed4
						}
						else
						{
							strcpy((char*)buf,"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\n\r\n");
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4aa3      	ldr	r2, [pc, #652]	; (80016e4 <tcp_http_mt+0x1074>)
 8001458:	4614      	mov	r4, r2
 800145a:	469c      	mov	ip, r3
 800145c:	f104 0e20 	add.w	lr, r4, #32
 8001460:	4665      	mov	r5, ip
 8001462:	4626      	mov	r6, r4
 8001464:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001466:	6028      	str	r0, [r5, #0]
 8001468:	6069      	str	r1, [r5, #4]
 800146a:	60aa      	str	r2, [r5, #8]
 800146c:	60eb      	str	r3, [r5, #12]
 800146e:	3410      	adds	r4, #16
 8001470:	f10c 0c10 	add.w	ip, ip, #16
 8001474:	4574      	cmp	r4, lr
 8001476:	d1f3      	bne.n	8001460 <tcp_http_mt+0xdf0>
 8001478:	4665      	mov	r5, ip
 800147a:	4623      	mov	r3, r4
 800147c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800147e:	6028      	str	r0, [r5, #0]
 8001480:	6069      	str	r1, [r5, #4]
 8001482:	60aa      	str	r2, [r5, #8]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	732b      	strb	r3, [r5, #12]
							strcat((char*)buf, "<html><head>");
 8001488:	6838      	ldr	r0, [r7, #0]
 800148a:	f7fe fe61 	bl	8000150 <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	4a94      	ldr	r2, [pc, #592]	; (80016e8 <tcp_http_mt+0x1078>)
 8001498:	461c      	mov	r4, r3
 800149a:	4613      	mov	r3, r2
 800149c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800149e:	6020      	str	r0, [r4, #0]
 80014a0:	6061      	str	r1, [r4, #4]
 80014a2:	60a2      	str	r2, [r4, #8]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	7323      	strb	r3, [r4, #12]
							strcat((char*)buf, "<title>Escrava Config</title>");
 80014a8:	6838      	ldr	r0, [r7, #0]
 80014aa:	f7fe fe51 	bl	8000150 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a8d      	ldr	r2, [pc, #564]	; (80016ec <tcp_http_mt+0x107c>)
 80014b8:	461d      	mov	r5, r3
 80014ba:	4614      	mov	r4, r2
 80014bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014be:	6028      	str	r0, [r5, #0]
 80014c0:	6069      	str	r1, [r5, #4]
 80014c2:	60aa      	str	r2, [r5, #8]
 80014c4:	60eb      	str	r3, [r5, #12]
 80014c6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80014c8:	6128      	str	r0, [r5, #16]
 80014ca:	6169      	str	r1, [r5, #20]
 80014cc:	61aa      	str	r2, [r5, #24]
 80014ce:	8823      	ldrh	r3, [r4, #0]
 80014d0:	83ab      	strh	r3, [r5, #28]
							strcat((char*)buf, "</head>");
 80014d2:	6838      	ldr	r0, [r7, #0]
 80014d4:	f7fe fe3c 	bl	8000150 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4983      	ldr	r1, [pc, #524]	; (80016f0 <tcp_http_mt+0x1080>)
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	cb03      	ldmia	r3!, {r0, r1}
 80014e8:	6010      	str	r0, [r2, #0]
 80014ea:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "<body>");
 80014ec:	6838      	ldr	r0, [r7, #0]
 80014ee:	f7fe fe2f 	bl	8000150 <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a7e      	ldr	r2, [pc, #504]	; (80016f4 <tcp_http_mt+0x1084>)
 80014fc:	6810      	ldr	r0, [r2, #0]
 80014fe:	6018      	str	r0, [r3, #0]
 8001500:	8891      	ldrh	r1, [r2, #4]
 8001502:	7992      	ldrb	r2, [r2, #6]
 8001504:	8099      	strh	r1, [r3, #4]
 8001506:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "<div class = 'entradas'>");
 8001508:	6838      	ldr	r0, [r7, #0]
 800150a:	f7fe fe21 	bl	8000150 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	4a78      	ldr	r2, [pc, #480]	; (80016f8 <tcp_http_mt+0x1088>)
 8001518:	461d      	mov	r5, r3
 800151a:	4614      	mov	r4, r2
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	6028      	str	r0, [r5, #0]
 8001520:	6069      	str	r1, [r5, #4]
 8001522:	60aa      	str	r2, [r5, #8]
 8001524:	60eb      	str	r3, [r5, #12]
 8001526:	cc03      	ldmia	r4!, {r0, r1}
 8001528:	6128      	str	r0, [r5, #16]
 800152a:	6169      	str	r1, [r5, #20]
 800152c:	7823      	ldrb	r3, [r4, #0]
 800152e:	762b      	strb	r3, [r5, #24]

							strcat((char*)buf, "<b><center>Menus para configuracao</b><br><br>");
 8001530:	6838      	ldr	r0, [r7, #0]
 8001532:	f7fe fe0d 	bl	8000150 <strlen>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	4413      	add	r3, r2
 800153e:	4a6f      	ldr	r2, [pc, #444]	; (80016fc <tcp_http_mt+0x108c>)
 8001540:	4615      	mov	r5, r2
 8001542:	469c      	mov	ip, r3
 8001544:	f105 0e20 	add.w	lr, r5, #32
 8001548:	4664      	mov	r4, ip
 800154a:	462e      	mov	r6, r5
 800154c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800154e:	6020      	str	r0, [r4, #0]
 8001550:	6061      	str	r1, [r4, #4]
 8001552:	60a2      	str	r2, [r4, #8]
 8001554:	60e3      	str	r3, [r4, #12]
 8001556:	3510      	adds	r5, #16
 8001558:	f10c 0c10 	add.w	ip, ip, #16
 800155c:	4575      	cmp	r5, lr
 800155e:	d1f3      	bne.n	8001548 <tcp_http_mt+0xed8>
 8001560:	4664      	mov	r4, ip
 8001562:	462b      	mov	r3, r5
 8001564:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001566:	6020      	str	r0, [r4, #0]
 8001568:	6061      	str	r1, [r4, #4]
 800156a:	60a2      	str	r2, [r4, #8]
 800156c:	881a      	ldrh	r2, [r3, #0]
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	81a2      	strh	r2, [r4, #12]
 8001572:	73a3      	strb	r3, [r4, #14]
							strcat((char*)buf, "<a href='http://192.168.0.231/rede'>Configurar rede</a><br><br>");
 8001574:	6838      	ldr	r0, [r7, #0]
 8001576:	f7fe fdeb 	bl	8000150 <strlen>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	4a5f      	ldr	r2, [pc, #380]	; (8001700 <tcp_http_mt+0x1090>)
 8001584:	4614      	mov	r4, r2
 8001586:	469c      	mov	ip, r3
 8001588:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 800158c:	4665      	mov	r5, ip
 800158e:	4626      	mov	r6, r4
 8001590:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001592:	6028      	str	r0, [r5, #0]
 8001594:	6069      	str	r1, [r5, #4]
 8001596:	60aa      	str	r2, [r5, #8]
 8001598:	60eb      	str	r3, [r5, #12]
 800159a:	3410      	adds	r4, #16
 800159c:	f10c 0c10 	add.w	ip, ip, #16
 80015a0:	4574      	cmp	r4, lr
 80015a2:	d1f3      	bne.n	800158c <tcp_http_mt+0xf1c>
							strcat((char*)buf, "<a href='http://192.168.0.231/interfaces'>Configurar interfaces\n</a><br>");
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7fe fdd3 	bl	8000150 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a54      	ldr	r2, [pc, #336]	; (8001704 <tcp_http_mt+0x1094>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	4611      	mov	r1, r2
 80015b8:	2349      	movs	r3, #73	; 0x49
 80015ba:	461a      	mov	r2, r3
 80015bc:	f006 fab9 	bl	8007b32 <memcpy>

							strcat((char*)buf, "</div>");
 80015c0:	6838      	ldr	r0, [r7, #0]
 80015c2:	f7fe fdc5 	bl	8000150 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a4e      	ldr	r2, [pc, #312]	; (8001708 <tcp_http_mt+0x1098>)
 80015d0:	6810      	ldr	r0, [r2, #0]
 80015d2:	6018      	str	r0, [r3, #0]
 80015d4:	8891      	ldrh	r1, [r2, #4]
 80015d6:	7992      	ldrb	r2, [r2, #6]
 80015d8:	8099      	strh	r1, [r3, #4]
 80015da:	719a      	strb	r2, [r3, #6]
							strcat((char*)buf, "</body>");
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f7fe fdb7 	bl	8000150 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	4948      	ldr	r1, [pc, #288]	; (800170c <tcp_http_mt+0x109c>)
 80015ec:	461a      	mov	r2, r3
 80015ee:	460b      	mov	r3, r1
 80015f0:	cb03      	ldmia	r3!, {r0, r1}
 80015f2:	6010      	str	r0, [r2, #0]
 80015f4:	6051      	str	r1, [r2, #4]
							strcat((char*)buf, "</html>");
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f7fe fdaa 	bl	8000150 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4942      	ldr	r1, [pc, #264]	; (8001710 <tcp_http_mt+0x10a0>)
 8001606:	461a      	mov	r2, r3
 8001608:	460b      	mov	r3, r1
 800160a:	cb03      	ldmia	r3!, {r0, r1}
 800160c:	6010      	str	r0, [r2, #0]
 800160e:	6051      	str	r1, [r2, #4]
						}

						blocklen = strlen((char*)buf);
 8001610:	6838      	ldr	r0, [r7, #0]
 8001612:	f7fe fd9d 	bl	8000150 <strlen>
 8001616:	4603      	mov	r3, r0
 8001618:	833b      	strh	r3, [r7, #24]

						ret = send(sn,buf,blocklen);
 800161a:	8b3a      	ldrh	r2, [r7, #24]
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fdf3 	bl	800220c <send>
 8001626:	6178      	str	r0, [r7, #20]
						if(ret < 0)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	da05      	bge.n	800163a <tcp_http_mt+0xfca>
						{
							close(sn);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fcb3 	bl	8001f9c <close>
							return ret;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	e04f      	b.n	80016da <tcp_http_mt+0x106a>
						}
						else
						{
							HTTP_reset(sn);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ffff 	bl	8000640 <HTTP_reset>
							disconnect(sn);
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fd6b 	bl	8002120 <disconnect>
					if(flagHtmlGen == 1)
 800164a:	e008      	b.n	800165e <tcp_http_mt+0xfee>
						}
					}
				}
				else
				{
					HTTP_reset(sn);
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fff6 	bl	8000640 <HTTP_reset>
					disconnect(sn);
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fd62 	bl	8002120 <disconnect>
				}

        	  }
         }
         break;
 800165c:	e035      	b.n	80016ca <tcp_http_mt+0x105a>
 800165e:	e034      	b.n	80016ca <tcp_http_mt+0x105a>
      case SOCK_CLOSE_WAIT :

    	  HTTP_reset(sn);
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ffec 	bl	8000640 <HTTP_reset>

         if((ret=disconnect(sn)) != SOCK_OK)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fd58 	bl	8002120 <disconnect>
 8001670:	4603      	mov	r3, r0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d029      	beq.n	80016ce <tcp_http_mt+0x105e>
         return ret;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	e02d      	b.n	80016da <tcp_http_mt+0x106a>

         break;
      case SOCK_INIT :

    	  HTTP_reset(sn);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ffdd 	bl	8000640 <HTTP_reset>

         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fce3 	bl	8002054 <listen>
 800168e:	4603      	mov	r3, r0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d01c      	beq.n	80016d2 <tcp_http_mt+0x1062>
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	e01e      	b.n	80016da <tcp_http_mt+0x106a>
         break;
      case SOCK_CLOSED:

    	  HTTP_reset(sn);
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ffce 	bl	8000640 <HTTP_reset>

         if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)
 80016a4:	88ba      	ldrh	r2, [r7, #4]
 80016a6:	79f8      	ldrb	r0, [r7, #7]
 80016a8:	2300      	movs	r3, #0
 80016aa:	2101      	movs	r1, #1
 80016ac:	f000 fb7e 	bl	8001dac <socket>
 80016b0:	4603      	mov	r3, r0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d00c      	beq.n	80016d6 <tcp_http_mt+0x1066>
         return ret;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	e00c      	b.n	80016da <tcp_http_mt+0x106a>

         break;

      default:
    	  HTTP_reset(sn);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ffbc 	bl	8000640 <HTTP_reset>
         break;
 80016c8:	e006      	b.n	80016d8 <tcp_http_mt+0x1068>
         break;
 80016ca:	bf00      	nop
 80016cc:	e004      	b.n	80016d8 <tcp_http_mt+0x1068>
         break;
 80016ce:	bf00      	nop
 80016d0:	e002      	b.n	80016d8 <tcp_http_mt+0x1068>
         break;
 80016d2:	bf00      	nop
 80016d4:	e000      	b.n	80016d8 <tcp_http_mt+0x1068>
         break;
 80016d6:	bf00      	nop
   }
   return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e2:	bf00      	nop
 80016e4:	08007c50 	.word	0x08007c50
 80016e8:	08007c80 	.word	0x08007c80
 80016ec:	080086f4 	.word	0x080086f4
 80016f0:	08007cb0 	.word	0x08007cb0
 80016f4:	08007cb8 	.word	0x08007cb8
 80016f8:	08008714 	.word	0x08008714
 80016fc:	08008730 	.word	0x08008730
 8001700:	08008760 	.word	0x08008760
 8001704:	080087a0 	.word	0x080087a0
 8001708:	080087ec 	.word	0x080087ec
 800170c:	08007ecc 	.word	0x08007ecc
 8001710:	08007ed4 	.word	0x08007ed4

08001714 <save_to_flash>:

void save_to_flash(uint8_t *data)
{
 8001714:	b5b0      	push	{r4, r5, r7, lr}
 8001716:	b08e      	sub	sp, #56	; 0x38
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	466b      	mov	r3, sp
 800171e:	461d      	mov	r5, r3
	volatile uint32_t data_to_FLASH[(strlen((char*)data)/4)	+ (int)((strlen((char*)data) % 4) != 0)];
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7fe fd15 	bl	8000150 <strlen>
 8001726:	4603      	mov	r3, r0
 8001728:	089c      	lsrs	r4, r3, #2
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7fe fd10 	bl	8000150 <strlen>
 8001730:	4603      	mov	r3, r0
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	18e0      	adds	r0, r4, r3
 8001742:	4603      	mov	r3, r0
 8001744:	3b01      	subs	r3, #1
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
 8001748:	4601      	mov	r1, r0
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	f04f 0400 	mov.w	r4, #0
 8001756:	0154      	lsls	r4, r2, #5
 8001758:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800175c:	014b      	lsls	r3, r1, #5
 800175e:	4601      	mov	r1, r0
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	f04f 0400 	mov.w	r4, #0
 800176c:	0154      	lsls	r4, r2, #5
 800176e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001772:	014b      	lsls	r3, r1, #5
 8001774:	0083      	lsls	r3, r0, #2
 8001776:	3303      	adds	r3, #3
 8001778:	3307      	adds	r3, #7
 800177a:	08db      	lsrs	r3, r3, #3
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	ebad 0d03 	sub.w	sp, sp, r3
 8001782:	466b      	mov	r3, sp
 8001784:	3303      	adds	r3, #3
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
	memset((uint8_t*)data_to_FLASH, 0, strlen((char*)data_to_FLASH));
 800178c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800178e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fcdd 	bl	8000150 <strlen>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	2100      	movs	r1, #0
 800179c:	4620      	mov	r0, r4
 800179e:	f006 f9d3 	bl	8007b48 <memset>
	strcpy((char*)data_to_FLASH, (char*)data);
 80017a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f006 f9e3 	bl	8007b72 <strcpy>

	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 80017ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fcce 	bl	8000150 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	089c      	lsrs	r4, r3, #2
									+ (int)((strlen((char*)data_to_FLASH) % 4) != 0);
 80017b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fcc8 	bl	8000150 <strlen>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf14      	ite	ne
 80017ca:	2301      	movne	r3, #1
 80017cc:	2300      	moveq	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4423      	add	r3, r4
	volatile uint32_t data_length = (strlen((char*)data_to_FLASH) / 4)
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7fe fcbb 	bl	8000150 <strlen>
 80017da:	4603      	mov	r3, r0
 80017dc:	0adb      	lsrs	r3, r3, #11
									+ (int)((strlen((char*)data)%page_size) != 0);
 80017de:	b29c      	uxth	r4, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7fe fcb5 	bl	8000150 <strlen>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf14      	ite	ne
 80017f0:	2301      	movne	r3, #1
 80017f2:	2300      	moveq	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4423      	add	r3, r4
 80017fa:	b29b      	uxth	r3, r3
	volatile uint16_t pages = (strlen((char*)data)/page_size)
 80017fc:	857b      	strh	r3, [r7, #42]	; 0x2a
	  /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80017fe:	f001 ff99 	bl	8003734 <HAL_FLASH_Unlock>

	  /* Allow Access to option bytes sector */
	  HAL_FLASH_OB_Unlock();
 8001802:	f001 ffcd 	bl	80037a0 <HAL_FLASH_OB_Unlock>

	  /* Fill EraseInit structure*/
	  FLASH_EraseInitTypeDef EraseInitStruct;
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
	  EraseInitStruct.PageAddress = FLASH_STORAGE;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <save_to_flash+0x164>)
 800180c:	623b      	str	r3, [r7, #32]
	  EraseInitStruct.NbPages = pages;
 800180e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
	  uint32_t PageError;

	  volatile uint32_t write_cnt=0, index=0;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]

	  volatile HAL_StatusTypeDef status;
	  //status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
	  while(index < data_length)
 800181c:	e01f      	b.n	800185e <save_to_flash+0x14a>
	  {
		  if (status == HAL_OK)
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11b      	bne.n	800185e <save_to_flash+0x14a>
		  {
			  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_STORAGE+write_cnt, data_to_FLASH[index]);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800182c:	f501 41a4 	add.w	r1, r1, #20992	; 0x5200
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	f04f 0400 	mov.w	r4, #0
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	2002      	movs	r0, #2
 8001842:	f001 ff07 	bl	8003654 <HAL_FLASH_Program>
 8001846:	4603      	mov	r3, r0
 8001848:	73fb      	strb	r3, [r7, #15]
			  if(status == HAL_OK)
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <save_to_flash+0x14a>
			  {
				  write_cnt += 4;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3304      	adds	r3, #4
 8001856:	617b      	str	r3, [r7, #20]
				  index++;
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	3301      	adds	r3, #1
 800185c:	613b      	str	r3, [r7, #16]
	  while(index < data_length)
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001862:	429a      	cmp	r2, r3
 8001864:	d3db      	bcc.n	800181e <save_to_flash+0x10a>
			  }
		  }
	  }

	  HAL_FLASH_OB_Lock();
 8001866:	f001 ffb7 	bl	80037d8 <HAL_FLASH_OB_Lock>
	  HAL_FLASH_Lock();
 800186a:	f001 ff89 	bl	8003780 <HAL_FLASH_Lock>
 800186e:	46ad      	mov	sp, r5
}
 8001870:	bf00      	nop
 8001872:	3738      	adds	r7, #56	; 0x38
 8001874:	46bd      	mov	sp, r7
 8001876:	bdb0      	pop	{r4, r5, r7, pc}
 8001878:	08005200 	.word	0x08005200

0800187c <read_flash>:

void read_flash(uint8_t* data)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	volatile uint32_t read_data;
	volatile uint32_t read_cnt=0;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
	do
	{
		read_data = *(uint32_t*)(FLASH_STORAGE + read_cnt);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800188e:	f503 43a4 	add.w	r3, r3, #20992	; 0x5200
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
		if(read_data != 0xFFFFFFFF)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d020      	beq.n	80018e0 <read_flash+0x64>
		{
			data[read_cnt] = (uint8_t)read_data;
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	b2ca      	uxtb	r2, r1
 80018a8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 1] = (uint8_t)(read_data >> 8);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	0a19      	lsrs	r1, r3, #8
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	b2ca      	uxtb	r2, r1
 80018b8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 2] = (uint8_t)(read_data >> 16);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	0c19      	lsrs	r1, r3, #16
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3302      	adds	r3, #2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	b2ca      	uxtb	r2, r1
 80018c8:	701a      	strb	r2, [r3, #0]
			data[read_cnt + 3] = (uint8_t)(read_data >> 24);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	0e19      	lsrs	r1, r3, #24
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3303      	adds	r3, #3
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
			read_cnt += 4;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3304      	adds	r3, #4
 80018de:	60bb      	str	r3, [r7, #8]
		}
	}while(read_data != 0xFFFFFFFF);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e6:	d1cf      	bne.n	8001888 <read_flash+0xc>
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
	...

080018f4 <StartEthernet>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEthernet */
void StartEthernet(void *argument)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t i;
  /* Infinite loop */
  for(;;)
  {
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 80018fc:	2304      	movs	r3, #4
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e008      	b.n	8001914 <StartEthernet+0x20>
	  {
	  	tcp_http_mt(i, gDATABUF, 80);
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	2250      	movs	r2, #80	; 0x50
 8001906:	490d      	ldr	r1, [pc, #52]	; (800193c <StartEthernet+0x48>)
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe feb1 	bl	8000670 <tcp_http_mt>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	3301      	adds	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	2b07      	cmp	r3, #7
 8001918:	d9f3      	bls.n	8001902 <StartEthernet+0xe>
	  }
	  //4 sockets para modbus TCP
	  for(i=0;i<4;i++)
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e009      	b.n	8001934 <StartEthernet+0x40>
	  {
	  	tcp_http_mt(i, gDATABUF, 502);
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8001926:	4905      	ldr	r1, [pc, #20]	; (800193c <StartEthernet+0x48>)
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fea1 	bl	8000670 <tcp_http_mt>
	  for(i=0;i<4;i++)
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	3301      	adds	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d9f2      	bls.n	8001920 <StartEthernet+0x2c>
	  for(i=4;i<_WIZCHIP_SOCK_NUM_;i++)
 800193a:	e7df      	b.n	80018fc <StartEthernet+0x8>
 800193c:	20001c30 	.word	0x20001c30

08001940 <StartReadInput1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput1 */
void StartReadInput1(void *argument)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput1 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[0] = HAL_GPIO_ReadPin(OUT1_OP1_GPIO_Port, OUT1_OP1_Pin);
 8001948:	2108      	movs	r1, #8
 800194a:	4811      	ldr	r0, [pc, #68]	; (8001990 <StartReadInput1+0x50>)
 800194c:	f002 f960 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <StartReadInput1+0x54>)
 8001956:	701a      	strb	r2, [r3, #0]
	  inputs[1] = HAL_GPIO_ReadPin(OUT1_OP2_GPIO_Port, OUT1_OP2_Pin);
 8001958:	2104      	movs	r1, #4
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <StartReadInput1+0x50>)
 800195c:	f002 f958 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <StartReadInput1+0x54>)
 8001966:	705a      	strb	r2, [r3, #1]
	  inputs[2] = HAL_GPIO_ReadPin(OUT1_OP3_GPIO_Port, OUT1_OP3_Pin);
 8001968:	2102      	movs	r1, #2
 800196a:	4809      	ldr	r0, [pc, #36]	; (8001990 <StartReadInput1+0x50>)
 800196c:	f002 f950 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <StartReadInput1+0x54>)
 8001976:	709a      	strb	r2, [r3, #2]
	  inputs[3] = HAL_GPIO_ReadPin(OUT1_OP4_GPIO_Port, OUT1_OP4_Pin);
 8001978:	2101      	movs	r1, #1
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <StartReadInput1+0x50>)
 800197c:	f002 f948 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <StartReadInput1+0x54>)
 8001986:	70da      	strb	r2, [r3, #3]
    osDelay(1);
 8001988:	2001      	movs	r0, #1
 800198a:	f003 fd1b 	bl	80053c4 <osDelay>
	  inputs[0] = HAL_GPIO_ReadPin(OUT1_OP1_GPIO_Port, OUT1_OP1_Pin);
 800198e:	e7db      	b.n	8001948 <StartReadInput1+0x8>
 8001990:	40010800 	.word	0x40010800
 8001994:	2000006c 	.word	0x2000006c

08001998 <StartReadInput2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput2 */
void StartReadInput2(void *argument)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput2 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[4] = HAL_GPIO_ReadPin(OUT1_OP5_GPIO_Port, OUT1_OP5_Pin);
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	4811      	ldr	r0, [pc, #68]	; (80019e8 <StartReadInput2+0x50>)
 80019a4:	f002 f934 	bl	8003c10 <HAL_GPIO_ReadPin>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <StartReadInput2+0x54>)
 80019ae:	711a      	strb	r2, [r3, #4]
	  inputs[5] = HAL_GPIO_ReadPin(OUT1_OP6_GPIO_Port, OUT1_OP6_Pin);
 80019b0:	2140      	movs	r1, #64	; 0x40
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <StartReadInput2+0x50>)
 80019b4:	f002 f92c 	bl	8003c10 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <StartReadInput2+0x54>)
 80019be:	715a      	strb	r2, [r3, #5]
	  inputs[6] = HAL_GPIO_ReadPin(OUT1_OP7_GPIO_Port, OUT1_OP7_Pin);
 80019c0:	2120      	movs	r1, #32
 80019c2:	4809      	ldr	r0, [pc, #36]	; (80019e8 <StartReadInput2+0x50>)
 80019c4:	f002 f924 	bl	8003c10 <HAL_GPIO_ReadPin>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <StartReadInput2+0x54>)
 80019ce:	719a      	strb	r2, [r3, #6]
	  inputs[7] = HAL_GPIO_ReadPin(OUT1_OP8_GPIO_Port, OUT1_OP8_Pin);
 80019d0:	2110      	movs	r1, #16
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <StartReadInput2+0x50>)
 80019d4:	f002 f91c 	bl	8003c10 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <StartReadInput2+0x54>)
 80019de:	71da      	strb	r2, [r3, #7]
    osDelay(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f003 fcef 	bl	80053c4 <osDelay>
	  inputs[4] = HAL_GPIO_ReadPin(OUT1_OP5_GPIO_Port, OUT1_OP5_Pin);
 80019e6:	e7db      	b.n	80019a0 <StartReadInput2+0x8>
 80019e8:	40010800 	.word	0x40010800
 80019ec:	2000006c 	.word	0x2000006c

080019f0 <StartReadInput3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput3 */
void StartReadInput3(void *argument)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput3 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[8] = HAL_GPIO_ReadPin(OUT1_OP8_GPIO_Port, OUT1_OP9_Pin);
 80019f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019fc:	4811      	ldr	r0, [pc, #68]	; (8001a44 <StartReadInput3+0x54>)
 80019fe:	f002 f907 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <StartReadInput3+0x58>)
 8001a08:	721a      	strb	r2, [r3, #8]
	  inputs[9] = HAL_GPIO_ReadPin(OUT1_OP9_GPIO_Port, OUT1_OP10_Pin);
 8001a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a0e:	480f      	ldr	r0, [pc, #60]	; (8001a4c <StartReadInput3+0x5c>)
 8001a10:	f002 f8fe 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <StartReadInput3+0x58>)
 8001a1a:	725a      	strb	r2, [r3, #9]
	  inputs[10] = HAL_GPIO_ReadPin(OUT1_OP10_GPIO_Port, OUT1_OP11_Pin);
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	480b      	ldr	r0, [pc, #44]	; (8001a4c <StartReadInput3+0x5c>)
 8001a20:	f002 f8f6 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <StartReadInput3+0x58>)
 8001a2a:	729a      	strb	r2, [r3, #10]
	  inputs[11] = HAL_GPIO_ReadPin(OUT1_OP11_GPIO_Port, OUT1_OP12_Pin);
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4808      	ldr	r0, [pc, #32]	; (8001a50 <StartReadInput3+0x60>)
 8001a30:	f002 f8ee 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <StartReadInput3+0x58>)
 8001a3a:	72da      	strb	r2, [r3, #11]
    osDelay(1);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f003 fcc1 	bl	80053c4 <osDelay>
	  inputs[8] = HAL_GPIO_ReadPin(OUT1_OP8_GPIO_Port, OUT1_OP9_Pin);
 8001a42:	e7d9      	b.n	80019f8 <StartReadInput3+0x8>
 8001a44:	40010800 	.word	0x40010800
 8001a48:	2000006c 	.word	0x2000006c
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40010c00 	.word	0x40010c00

08001a54 <StartReadInput4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadInput4 */
void StartReadInput4(void *argument)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadInput4 */
  /* Infinite loop */
  for(;;)
  {
	  inputs[12] = HAL_GPIO_ReadPin(OUT1_OP13_GPIO_Port, OUT1_OP13_Pin);
 8001a5c:	2140      	movs	r1, #64	; 0x40
 8001a5e:	4811      	ldr	r0, [pc, #68]	; (8001aa4 <StartReadInput4+0x50>)
 8001a60:	f002 f8d6 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <StartReadInput4+0x54>)
 8001a6a:	731a      	strb	r2, [r3, #12]
	  inputs[13] = HAL_GPIO_ReadPin(OUT1_OP14_GPIO_Port, OUT1_OP14_Pin);
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <StartReadInput4+0x50>)
 8001a70:	f002 f8ce 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <StartReadInput4+0x54>)
 8001a7a:	735a      	strb	r2, [r3, #13]
	  inputs[14] = HAL_GPIO_ReadPin(OUT1_OP15_GPIO_Port, OUT1_OP15_Pin);
 8001a7c:	2108      	movs	r1, #8
 8001a7e:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <StartReadInput4+0x50>)
 8001a80:	f002 f8c6 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <StartReadInput4+0x54>)
 8001a8a:	739a      	strb	r2, [r3, #14]
	  inputs[15] = HAL_GPIO_ReadPin(OUT1_OP16_GPIO_Port, OUT1_OP16_Pin);
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <StartReadInput4+0x50>)
 8001a90:	f002 f8be 	bl	8003c10 <HAL_GPIO_ReadPin>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <StartReadInput4+0x54>)
 8001a9a:	73da      	strb	r2, [r3, #15]
    osDelay(1);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f003 fc91 	bl	80053c4 <osDelay>
	  inputs[12] = HAL_GPIO_ReadPin(OUT1_OP13_GPIO_Port, OUT1_OP13_Pin);
 8001aa2:	e7db      	b.n	8001a5c <StartReadInput4+0x8>
 8001aa4:	40010c00 	.word	0x40010c00
 8001aa8:	2000006c 	.word	0x2000006c

08001aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001abe:	f001 fccd 	bl	800345c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40012c00 	.word	0x40012c00

08001ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_MspInit+0x68>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4a17      	ldr	r2, [pc, #92]	; (8001b44 <HAL_MspInit+0x68>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6193      	str	r3, [r2, #24]
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_MspInit+0x68>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_MspInit+0x68>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <HAL_MspInit+0x68>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_MspInit+0x68>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	210f      	movs	r1, #15
 8001b16:	f06f 0001 	mvn.w	r0, #1
 8001b1a:	f001 fd70 	bl	80035fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_MspInit+0x6c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <HAL_MspInit+0x6c>)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000

08001b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <HAL_I2C_MspInit+0x74>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d124      	bne.n	8001bb6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_I2C_MspInit+0x78>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <HAL_I2C_MspInit+0x78>)
 8001b72:	f043 0308 	orr.w	r3, r3, #8
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_I2C_MspInit+0x78>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8a:	2312      	movs	r3, #18
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	4619      	mov	r1, r3
 8001b98:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <HAL_I2C_MspInit+0x7c>)
 8001b9a:	f001 fedf 	bl	800395c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_I2C_MspInit+0x78>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_I2C_MspInit+0x78>)
 8001ba4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_I2C_MspInit+0x78>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40005800 	.word	0x40005800
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010c00 	.word	0x40010c00

08001bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_SPI_MspInit+0x8c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d131      	bne.n	8001c50 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_SPI_MspInit+0x90>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_SPI_MspInit+0x90>)
 8001bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf6:	61d3      	str	r3, [r2, #28]
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_SPI_MspInit+0x90>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_SPI_MspInit+0x90>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <HAL_SPI_MspInit+0x90>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_SPI_MspInit+0x90>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8001c1c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001c20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480b      	ldr	r0, [pc, #44]	; (8001c60 <HAL_SPI_MspInit+0x94>)
 8001c32:	f001 fe93 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8001c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <HAL_SPI_MspInit+0x94>)
 8001c4c:	f001 fe86 	bl	800395c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40003800 	.word	0x40003800
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010c00 	.word	0x40010c00

08001c64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08c      	sub	sp, #48	; 0x30
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	2019      	movs	r0, #25
 8001c7a:	f001 fcc0 	bl	80035fe <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c7e:	2019      	movs	r0, #25
 8001c80:	f001 fcd9 	bl	8003636 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c84:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <HAL_InitTick+0x9c>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_InitTick+0x9c>)
 8001c8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_InitTick+0x9c>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c9c:	f107 0210 	add.w	r2, r7, #16
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 fd18 	bl	80046dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cac:	f002 fd02 	bl	80046b4 <HAL_RCC_GetPCLK2Freq>
 8001cb0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb4:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <HAL_InitTick+0xa0>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0c9b      	lsrs	r3, r3, #18
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_InitTick+0xa4>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <HAL_InitTick+0xa8>)
 8001cc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_InitTick+0xa4>)
 8001cc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ccc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cce:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <HAL_InitTick+0xa4>)
 8001cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_InitTick+0xa4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_InitTick+0xa4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ce0:	4809      	ldr	r0, [pc, #36]	; (8001d08 <HAL_InitTick+0xa4>)
 8001ce2:	f003 f815 	bl	8004d10 <HAL_TIM_Base_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d104      	bne.n	8001cf6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001cec:	4806      	ldr	r0, [pc, #24]	; (8001d08 <HAL_InitTick+0xa4>)
 8001cee:	f003 f867 	bl	8004dc0 <HAL_TIM_Base_Start_IT>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	e000      	b.n	8001cf8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3730      	adds	r7, #48	; 0x30
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	431bde83 	.word	0x431bde83
 8001d08:	20002c5c 	.word	0x20002c5c
 8001d0c:	40012c00 	.word	0x40012c00

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <HardFault_Handler+0x4>

08001d22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <MemManage_Handler+0x4>

08001d28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <BusFault_Handler+0x4>

08001d2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <UsageFault_Handler+0x4>

08001d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <TIM1_UP_IRQHandler+0x10>)
 8001d46:	f003 f88d 	bl	8004e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20002c5c 	.word	0x20002c5c

08001d54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d62:	e003      	b.n	8001d6c <LoopCopyDataInit>

08001d64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d6a:	3104      	adds	r1, #4

08001d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d6c:	480a      	ldr	r0, [pc, #40]	; (8001d98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d74:	d3f6      	bcc.n	8001d64 <CopyDataInit>
  ldr r2, =_sbss
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d78:	e002      	b.n	8001d80 <LoopFillZerobss>

08001d7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d7c:	f842 3b04 	str.w	r3, [r2], #4

08001d80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d84:	d3f9      	bcc.n	8001d7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d86:	f7ff ffe5 	bl	8001d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8a:	f005 fe9f 	bl	8007acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d8e:	f7fe f9e7 	bl	8000160 <main>
  bx lr
 8001d92:	4770      	bx	lr
  ldr r3, =_sidata
 8001d94:	080088f4 	.word	0x080088f4
  ldr r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d9c:	2000004c 	.word	0x2000004c
  ldr r2, =_sbss
 8001da0:	20000050 	.word	0x20000050
  ldr r3, = _ebss
 8001da4:	20002d08 	.word	0x20002d08

08001da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC1_2_IRQHandler>
	...

08001dac <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4604      	mov	r4, r0
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71bb      	strb	r3, [r7, #6]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	80bb      	strh	r3, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d902      	bls.n	8001dd6 <socket+0x2a>
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	e0d3      	b.n	8001f7e <socket+0x1d2>
	switch(protocol)
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	db03      	blt.n	8001de4 <socket+0x38>
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	dd04      	ble.n	8001dea <socket+0x3e>
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d002      	beq.n	8001dea <socket+0x3e>
      case Sn_MR_IPRAW :
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001de4:	f06f 0304 	mvn.w	r3, #4
 8001de8:	e0c9      	b.n	8001f7e <socket+0x1d2>
         break;
 8001dea:	bf00      	nop
	}
	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 0306 	and.w	r3, r3, #6
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <socket+0x50>
 8001df6:	f06f 0305 	mvn.w	r3, #5
 8001dfa:	e0c0      	b.n	8001f7e <socket+0x1d2>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif

	if(flag != 0)
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d025      	beq.n	8001e4e <socket+0xa2>
	{
   	switch(protocol)
 8001e02:	79bb      	ldrb	r3, [r7, #6]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d002      	beq.n	8001e0e <socket+0x62>
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d008      	beq.n	8001e1e <socket+0x72>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001e0c:	e024      	b.n	8001e58 <socket+0xac>
   	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d11c      	bne.n	8001e52 <socket+0xa6>
 8001e18:	f06f 0305 	mvn.w	r3, #5
 8001e1c:	e0af      	b.n	8001f7e <socket+0x1d2>
   	      if(flag & SF_IGMP_VER2)
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <socket+0x8a>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db02      	blt.n	8001e36 <socket+0x8a>
 8001e30:	f06f 0305 	mvn.w	r3, #5
 8001e34:	e0a3      	b.n	8001f7e <socket+0x1d2>
      	      if(flag & SF_UNI_BLOCK)
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00a      	beq.n	8001e56 <socket+0xaa>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db06      	blt.n	8001e56 <socket+0xaa>
 8001e48:	f06f 0305 	mvn.w	r3, #5
 8001e4c:	e097      	b.n	8001f7e <socket+0x1d2>
   	}
   }
 8001e4e:	bf00      	nop
 8001e50:	e002      	b.n	8001e58 <socket+0xac>
   	      break;
 8001e52:	bf00      	nop
 8001e54:	e000      	b.n	8001e58 <socket+0xac>
   	      break;
 8001e56:	bf00      	nop
	close(sn);
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f89e 	bl	8001f9c <close>
	setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	3301      	adds	r3, #1
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6e:	f023 030f 	bic.w	r3, r3, #15
 8001e72:	b25a      	sxtb	r2, r3
 8001e74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f000 fba4 	bl	80025cc <WIZCHIP_WRITE>
	if(!port)
 8001e84:	88bb      	ldrh	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d110      	bne.n	8001eac <socket+0x100>
	{
	   port = sock_any_port++;
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <socket+0x1dc>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	b291      	uxth	r1, r2
 8001e92:	4a3d      	ldr	r2, [pc, #244]	; (8001f88 <socket+0x1dc>)
 8001e94:	8011      	strh	r1, [r2, #0]
 8001e96:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001e98:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <socket+0x1dc>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d103      	bne.n	8001eac <socket+0x100>
 8001ea4:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <socket+0x1dc>)
 8001ea6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001eaa:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb8:	461a      	mov	r2, r3
 8001eba:	88bb      	ldrh	r3, [r7, #4]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f000 fb81 	bl	80025cc <WIZCHIP_WRITE>
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	3301      	adds	r3, #1
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	88bb      	ldrh	r3, [r7, #4]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 fb74 	bl	80025cc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3301      	adds	r3, #1
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fb6a 	bl	80025cc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001ef8:	bf00      	nop
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	3301      	adds	r3, #1
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fb30 	bl	800256c <WIZCHIP_READ>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f3      	bne.n	8001efa <socket+0x14e>
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 0201 	and.w	r2, r3, #1
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	b21a      	sxth	r2, r3
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <socket+0x1e0>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <socket+0x1e0>)
 8001f2e:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	2201      	movs	r2, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <socket+0x1e4>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	4013      	ands	r3, r2
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <socket+0x1e4>)
 8001f4c:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <socket+0x1e8>)
 8001f52:	2100      	movs	r1, #0
 8001f54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = 0;
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <socket+0x1ec>)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001f60:	bf00      	nop
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	3301      	adds	r3, #1
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fafc 	bl	800256c <WIZCHIP_READ>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f3      	beq.n	8001f62 <socket+0x1b6>
   return (int8_t)sn;
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000001c 	.word	0x2000001c
 8001f8c:	2000007c 	.word	0x2000007c
 8001f90:	2000007e 	.word	0x2000007e
 8001f94:	20000080 	.word	0x20000080
 8001f98:	20000090 	.word	0x20000090

08001f9c <close>:

int8_t close(uint8_t sn)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d902      	bls.n	8001fb2 <close+0x16>
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb0:	e046      	b.n	8002040 <close+0xa4>

	setSn_CR(sn,Sn_CR_CLOSE);
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fb03 	bl	80025cc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001fc6:	bf00      	nop
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	3301      	adds	r3, #1
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fac9 	bl	800256c <WIZCHIP_READ>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f3      	bne.n	8001fc8 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001fec:	211f      	movs	r1, #31
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 faec 	bl	80025cc <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	b21a      	sxth	r2, r3
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <close+0xac>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b21b      	sxth	r3, r3
 8002008:	4013      	ands	r3, r2
 800200a:	b21b      	sxth	r3, r3
 800200c:	b29a      	uxth	r2, r3
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <close+0xac>)
 8002010:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	4a0d      	ldr	r2, [pc, #52]	; (800204c <close+0xb0>)
 8002016:	2100      	movs	r1, #0
 8002018:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <close+0xb4>)
 8002020:	2100      	movs	r1, #0
 8002022:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002024:	bf00      	nop
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	3301      	adds	r3, #1
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fa9a 	bl	800256c <WIZCHIP_READ>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f3      	bne.n	8002026 <close+0x8a>
	return SOCK_OK;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	2000007e 	.word	0x2000007e
 800204c:	20000080 	.word	0x20000080
 8002050:	20000090 	.word	0x20000090

08002054 <listen>:

int8_t listen(uint8_t sn)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	2b08      	cmp	r3, #8
 8002062:	d902      	bls.n	800206a <listen+0x16>
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	e055      	b.n	8002116 <listen+0xc2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3301      	adds	r3, #1
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fa7a 	bl	800256c <WIZCHIP_READ>
 8002078:	4603      	mov	r3, r0
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	2b01      	cmp	r3, #1
 8002080:	d002      	beq.n	8002088 <listen+0x34>
 8002082:	f06f 0304 	mvn.w	r3, #4
 8002086:	e046      	b.n	8002116 <listen+0xc2>
	CHECK_SOCKINIT();
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	3301      	adds	r3, #1
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fa69 	bl	800256c <WIZCHIP_READ>
 800209a:	4603      	mov	r3, r0
 800209c:	2b13      	cmp	r3, #19
 800209e:	d002      	beq.n	80020a6 <listen+0x52>
 80020a0:	f06f 0302 	mvn.w	r3, #2
 80020a4:	e037      	b.n	8002116 <listen+0xc2>
	setSn_CR(sn,Sn_CR_LISTEN);
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	3301      	adds	r3, #1
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020b2:	2102      	movs	r1, #2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fa89 	bl	80025cc <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80020ba:	bf00      	nop
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	3301      	adds	r3, #1
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fa4f 	bl	800256c <WIZCHIP_READ>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f3      	bne.n	80020bc <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80020d4:	e012      	b.n	80020fc <listen+0xa8>
   {
      if(getSn_CR(sn) == SOCK_CLOSED)
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	3301      	adds	r3, #1
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fa42 	bl	800256c <WIZCHIP_READ>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <listen+0xa8>
      {
         close(sn);
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff53 	bl	8001f9c <close>
         return SOCKERR_SOCKCLOSED;
 80020f6:	f06f 0303 	mvn.w	r3, #3
 80020fa:	e00c      	b.n	8002116 <listen+0xc2>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	3301      	adds	r3, #1
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fa2f 	bl	800256c <WIZCHIP_READ>
 800210e:	4603      	mov	r3, r0
 8002110:	2b14      	cmp	r3, #20
 8002112:	d1e0      	bne.n	80020d6 <listen+0x82>
      }
   }
   return SOCK_OK;
 8002114:	2301      	movs	r3, #1
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <disconnect>:

   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2b08      	cmp	r3, #8
 800212e:	d902      	bls.n	8002136 <disconnect+0x16>
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
 8002134:	e062      	b.n	80021fc <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	3301      	adds	r3, #1
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fa14 	bl	800256c <WIZCHIP_READ>
 8002144:	4603      	mov	r3, r0
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	2b01      	cmp	r3, #1
 800214c:	d002      	beq.n	8002154 <disconnect+0x34>
 800214e:	f06f 0304 	mvn.w	r3, #4
 8002152:	e053      	b.n	80021fc <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	3301      	adds	r3, #1
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002160:	2108      	movs	r1, #8
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fa32 	bl	80025cc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002168:	bf00      	nop
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3301      	adds	r3, #1
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f9f8 	bl	800256c <WIZCHIP_READ>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f3      	bne.n	800216a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2201      	movs	r2, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	b21b      	sxth	r3, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	b21a      	sxth	r2, r3
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <disconnect+0xe4>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b21b      	sxth	r3, r3
 8002196:	4013      	ands	r3, r2
 8002198:	b21b      	sxth	r3, r3
 800219a:	b29a      	uxth	r2, r3
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <disconnect+0xe4>)
 800219e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <disconnect+0xe8>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	fa42 f303 	asr.w	r3, r2, r3
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d016      	beq.n	80021e2 <disconnect+0xc2>
 80021b4:	2300      	movs	r3, #0
 80021b6:	e021      	b.n	80021fc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	3301      	adds	r3, #1
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 f9d1 	bl	800256c <WIZCHIP_READ>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <disconnect+0xc2>
	   {
	      close(sn);
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fee0 	bl	8001f9c <close>
	      return SOCKERR_TIMEOUT;
 80021dc:	f06f 030c 	mvn.w	r3, #12
 80021e0:	e00c      	b.n	80021fc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	3301      	adds	r3, #1
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f9bc 	bl	800256c <WIZCHIP_READ>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1de      	bne.n	80021b8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	2000007e 	.word	0x2000007e
 8002208:	2000007c 	.word	0x2000007c

0800220c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002220:	2300      	movs	r3, #0
 8002222:	81bb      	strh	r3, [r7, #12]

   CHECK_SOCKNUM();
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	2b08      	cmp	r3, #8
 8002228:	d902      	bls.n	8002230 <send+0x24>
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
 800222e:	e0de      	b.n	80023ee <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	3301      	adds	r3, #1
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4618      	mov	r0, r3
 800223a:	f000 f997 	bl	800256c <WIZCHIP_READ>
 800223e:	4603      	mov	r3, r0
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	2b01      	cmp	r3, #1
 8002246:	d002      	beq.n	800224e <send+0x42>
 8002248:	f06f 0304 	mvn.w	r3, #4
 800224c:	e0cf      	b.n	80023ee <send+0x1e2>
   CHECK_SOCKDATA();
 800224e:	88bb      	ldrh	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <send+0x4e>
 8002254:	f06f 030d 	mvn.w	r3, #13
 8002258:	e0c9      	b.n	80023ee <send+0x1e2>
   tmp = getSn_SR(sn);
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	3301      	adds	r3, #1
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f980 	bl	800256c <WIZCHIP_READ>
 800226c:	4603      	mov	r3, r0
 800226e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	2b17      	cmp	r3, #23
 8002274:	d005      	beq.n	8002282 <send+0x76>
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b1c      	cmp	r3, #28
 800227a:	d002      	beq.n	8002282 <send+0x76>
 800227c:	f06f 0306 	mvn.w	r3, #6
 8002280:	e0b5      	b.n	80023ee <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8002282:	4b5d      	ldr	r3, [pc, #372]	; (80023f8 <send+0x1ec>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	fa42 f303 	asr.w	r3, r2, r3
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d039      	beq.n	800230a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	3301      	adds	r3, #1
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f962 	bl	800256c <WIZCHIP_READ>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d019      	beq.n	80022ee <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	3301      	adds	r3, #1
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022c6:	2110      	movs	r1, #16
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f97f 	bl	80025cc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2201      	movs	r2, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	b21a      	sxth	r2, r3
 80022dc:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <send+0x1ec>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4013      	ands	r3, r2
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <send+0x1ec>)
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	e00d      	b.n	800230a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <send+0xfa>
      {
         close(sn);
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fe4e 	bl	8001f9c <close>
         return SOCKERR_TIMEOUT;
 8002300:	f06f 030c 	mvn.w	r3, #12
 8002304:	e073      	b.n	80023ee <send+0x1e2>
      }
      else return SOCK_BUSY;
 8002306:	2300      	movs	r3, #0
 8002308:	e071      	b.n	80023ee <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	3301      	adds	r3, #1
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f928 	bl	800256c <WIZCHIP_READ>
 800231c:	4603      	mov	r3, r0
 800231e:	b29b      	uxth	r3, r3
 8002320:	029b      	lsls	r3, r3, #10
 8002322:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002324:	88ba      	ldrh	r2, [r7, #4]
 8002326:	89bb      	ldrh	r3, [r7, #12]
 8002328:	429a      	cmp	r2, r3
 800232a:	d901      	bls.n	8002330 <send+0x124>
 800232c:	89bb      	ldrh	r3, [r7, #12]
 800232e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fa0c 	bl	8002750 <getSn_TX_FSR>
 8002338:	4603      	mov	r3, r0
 800233a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3301      	adds	r3, #1
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f90f 	bl	800256c <WIZCHIP_READ>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b17      	cmp	r3, #23
 8002356:	d009      	beq.n	800236c <send+0x160>
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b1c      	cmp	r3, #28
 800235c:	d006      	beq.n	800236c <send+0x160>
      {
         close(sn);
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fe1b 	bl	8001f9c <close>
         return SOCKERR_SOCKSTATUS;
 8002366:	f06f 0306 	mvn.w	r3, #6
 800236a:	e040      	b.n	80023ee <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <send+0x1f0>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	fa42 f303 	asr.w	r3, r2, r3
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <send+0x180>
 8002380:	88ba      	ldrh	r2, [r7, #4]
 8002382:	89bb      	ldrh	r3, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d901      	bls.n	800238c <send+0x180>
 8002388:	2300      	movs	r3, #0
 800238a:	e030      	b.n	80023ee <send+0x1e2>
      if(len <= freesize) break;
 800238c:	88ba      	ldrh	r2, [r7, #4]
 800238e:	89bb      	ldrh	r3, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d900      	bls.n	8002396 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8002394:	e7cc      	b.n	8002330 <send+0x124>
      if(len <= freesize) break;
 8002396:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002398:	88ba      	ldrh	r2, [r7, #4]
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	6839      	ldr	r1, [r7, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fa6c 	bl	800287c <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	3301      	adds	r3, #1
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023b0:	2120      	movs	r1, #32
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f90a 	bl	80025cc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80023b8:	bf00      	nop
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	3301      	adds	r3, #1
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f8d0 	bl	800256c <WIZCHIP_READ>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f3      	bne.n	80023ba <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	2201      	movs	r2, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	b21a      	sxth	r2, r3
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <send+0x1ec>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <send+0x1ec>)
 80023ea:	801a      	strh	r2, [r3, #0]
   return len;
 80023ec:	88bb      	ldrh	r3, [r7, #4]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000007e 	.word	0x2000007e
 80023fc:	2000007c 	.word	0x2000007c

08002400 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
 800240c:	4613      	mov	r3, r2
 800240e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	81bb      	strh	r3, [r7, #12]
   CHECK_SOCKNUM();
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	2b08      	cmp	r3, #8
 800241c:	d902      	bls.n	8002424 <recv+0x24>
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e09c      	b.n	800255e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	3301      	adds	r3, #1
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f89d 	bl	800256c <WIZCHIP_READ>
 8002432:	4603      	mov	r3, r0
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	2b01      	cmp	r3, #1
 800243a:	d002      	beq.n	8002442 <recv+0x42>
 800243c:	f06f 0304 	mvn.w	r3, #4
 8002440:	e08d      	b.n	800255e <recv+0x15e>
   CHECK_SOCKDATA();
 8002442:	88bb      	ldrh	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <recv+0x4e>
 8002448:	f06f 030d 	mvn.w	r3, #13
 800244c:	e087      	b.n	800255e <recv+0x15e>

   recvsize = getSn_RxMAX(sn);
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	3301      	adds	r3, #1
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f886 	bl	800256c <WIZCHIP_READ>
 8002460:	4603      	mov	r3, r0
 8002462:	b29b      	uxth	r3, r3
 8002464:	029b      	lsls	r3, r3, #10
 8002466:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002468:	89ba      	ldrh	r2, [r7, #12]
 800246a:	88bb      	ldrh	r3, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	d201      	bcs.n	8002474 <recv+0x74>
 8002470:	89bb      	ldrh	r3, [r7, #12]
 8002472:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f9b5 	bl	80027e6 <getSn_RX_RSR>
 800247c:	4603      	mov	r3, r0
 800247e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	3301      	adds	r3, #1
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f86d 	bl	800256c <WIZCHIP_READ>
 8002492:	4603      	mov	r3, r0
 8002494:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	2b17      	cmp	r3, #23
 800249a:	d026      	beq.n	80024ea <recv+0xea>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b1c      	cmp	r3, #28
 80024a0:	d11c      	bne.n	80024dc <recv+0xdc>
         {
            if(recvsize != 0) break;
 80024a2:	89bb      	ldrh	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d133      	bne.n	8002510 <recv+0x110>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f950 	bl	8002750 <getSn_TX_FSR>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461c      	mov	r4, r3
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	3301      	adds	r3, #1
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f853 	bl	800256c <WIZCHIP_READ>
 80024c6:	4603      	mov	r3, r0
 80024c8:	029b      	lsls	r3, r3, #10
 80024ca:	429c      	cmp	r4, r3
 80024cc:	d10d      	bne.n	80024ea <recv+0xea>
            {
               close(sn);
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fd63 	bl	8001f9c <close>
               return SOCKERR_SOCKSTATUS;
 80024d6:	f06f 0306 	mvn.w	r3, #6
 80024da:	e040      	b.n	800255e <recv+0x15e>
            }
         }
         else
         {
            close(sn);
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fd5c 	bl	8001f9c <close>
            return SOCKERR_SOCKSTATUS;
 80024e4:	f06f 0306 	mvn.w	r3, #6
 80024e8:	e039      	b.n	800255e <recv+0x15e>
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <recv+0x168>)
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	fa42 f303 	asr.w	r3, r2, r3
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d004      	beq.n	8002508 <recv+0x108>
 80024fe:	89bb      	ldrh	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <recv+0x108>
 8002504:	2300      	movs	r3, #0
 8002506:	e02a      	b.n	800255e <recv+0x15e>
      if(recvsize != 0) break;
 8002508:	89bb      	ldrh	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <recv+0x114>
      recvsize = getSn_RX_RSR(sn);
 800250e:	e7b1      	b.n	8002474 <recv+0x74>
            if(recvsize != 0) break;
 8002510:	bf00      	nop
 8002512:	e000      	b.n	8002516 <recv+0x116>
      if(recvsize != 0) break;
 8002514:	bf00      	nop
   };
   if(recvsize < len) len = recvsize;
 8002516:	89ba      	ldrh	r2, [r7, #12]
 8002518:	88bb      	ldrh	r3, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	d201      	bcs.n	8002522 <recv+0x122>
 800251e:	89bb      	ldrh	r3, [r7, #12]
 8002520:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002522:	88ba      	ldrh	r2, [r7, #4]
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	6839      	ldr	r1, [r7, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fa03 	bl	8002934 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	3301      	adds	r3, #1
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800253a:	2140      	movs	r1, #64	; 0x40
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f845 	bl	80025cc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002542:	bf00      	nop
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	3301      	adds	r3, #1
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002550:	4618      	mov	r0, r3
 8002552:	f000 f80b 	bl	800256c <WIZCHIP_READ>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f3      	bne.n	8002544 <recv+0x144>
   return len;
 800255c:	88bb      	ldrh	r3, [r7, #4]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	bd90      	pop	{r4, r7, pc}
 8002566:	bf00      	nop
 8002568:	2000007c 	.word	0x2000007c

0800256c <WIZCHIP_READ>:
#define _W5500_SPI_FDM_OP_LEN4_     0x03

////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <WIZCHIP_READ+0x5c>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4798      	blx	r3
   WIZCHIP.CS._select();
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <WIZCHIP_READ+0x5c>)
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	4798      	blx	r3
   	   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <WIZCHIP_READ+0x5c>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	0c12      	lsrs	r2, r2, #16
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	4610      	mov	r0, r2
 800258c:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <WIZCHIP_READ+0x5c>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	0a12      	lsrs	r2, r2, #8
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	4610      	mov	r0, r2
 800259a:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <WIZCHIP_READ+0x5c>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	4610      	mov	r0, r2
 80025a6:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte();
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <WIZCHIP_READ+0x5c>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4798      	blx	r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	73fb      	strb	r3, [r7, #15]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5000. !!!"
#endif

   WIZCHIP.CS._deselect();
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <WIZCHIP_READ+0x5c>)
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <WIZCHIP_READ+0x5c>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4798      	blx	r3
   return ret;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000020 	.word	0x20000020

080025cc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
    WIZCHIP_CRITICAL_ENTER();
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <WIZCHIP_WRITE+0x68>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4798      	blx	r3
    WIZCHIP.CS._select();
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <WIZCHIP_WRITE+0x68>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	607b      	str	r3, [r7, #4]
   	   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_FDM_OP_LEN1_);
   #else
      #error "Unsupported _WIZCHIP_IO_SPI_ in W5500 !!!"
   #endif

   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <WIZCHIP_WRITE+0x68>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	0c12      	lsrs	r2, r2, #16
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	4610      	mov	r0, r2
 80025f8:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <WIZCHIP_WRITE+0x68>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	0a12      	lsrs	r2, r2, #8
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	4610      	mov	r0, r2
 8002606:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <WIZCHIP_WRITE+0x68>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	4610      	mov	r0, r2
 8002612:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <WIZCHIP_WRITE+0x68>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	4610      	mov	r0, r2
 800261c:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!"
#endif

   WIZCHIP.CS._deselect();
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <WIZCHIP_WRITE+0x68>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <WIZCHIP_WRITE+0x68>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4798      	blx	r3
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000020 	.word	0x20000020

08002638 <WIZCHIP_READ_BUF>:

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <WIZCHIP_READ_BUF+0x84>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <WIZCHIP_READ_BUF+0x84>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <WIZCHIP_READ_BUF+0x84>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	0c12      	lsrs	r2, r2, #16
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	4610      	mov	r0, r2
 8002666:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <WIZCHIP_READ_BUF+0x84>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	0a12      	lsrs	r2, r2, #8
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	4610      	mov	r0, r2
 8002674:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <WIZCHIP_READ_BUF+0x84>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	4610      	mov	r0, r2
 8002680:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8002682:	2300      	movs	r3, #0
 8002684:	82fb      	strh	r3, [r7, #22]
 8002686:	e00a      	b.n	800269e <WIZCHIP_READ_BUF+0x66>
        pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <WIZCHIP_READ_BUF+0x84>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	8afa      	ldrh	r2, [r7, #22]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	188c      	adds	r4, r1, r2
 8002692:	4798      	blx	r3
 8002694:	4603      	mov	r3, r0
 8002696:	7023      	strb	r3, [r4, #0]
      for(i = 0; i < len; i++,j)
 8002698:	8afb      	ldrh	r3, [r7, #22]
 800269a:	3301      	adds	r3, #1
 800269c:	82fb      	strh	r3, [r7, #22]
 800269e:	8afa      	ldrh	r2, [r7, #22]
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d3f0      	bcc.n	8002688 <WIZCHIP_READ_BUF+0x50>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <WIZCHIP_READ_BUF+0x84>)
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <WIZCHIP_READ_BUF+0x84>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4798      	blx	r3
}
 80026b2:	bf00      	nop
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd90      	pop	{r4, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000020 	.word	0x20000020

080026c0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	82fb      	strh	r3, [r7, #22]
   uint16_t j = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	82bb      	strh	r3, [r7, #20]
   WIZCHIP_CRITICAL_ENTER();
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <WIZCHIP_WRITE_BUF+0x8c>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4798      	blx	r3
   WIZCHIP.CS._select();
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <WIZCHIP_WRITE_BUF+0x8c>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))

   #if  ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_ )
      AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	60fb      	str	r3, [r7, #12]
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <WIZCHIP_WRITE_BUF+0x8c>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	0c12      	lsrs	r2, r2, #16
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	4610      	mov	r0, r2
 80026f6:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <WIZCHIP_WRITE_BUF+0x8c>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	0a12      	lsrs	r2, r2, #8
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	4610      	mov	r0, r2
 8002704:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <WIZCHIP_WRITE_BUF+0x8c>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	4610      	mov	r0, r2
 8002710:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8002712:	2300      	movs	r3, #0
 8002714:	82fb      	strh	r3, [r7, #22]
 8002716:	e00a      	b.n	800272e <WIZCHIP_WRITE_BUF+0x6e>
         WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <WIZCHIP_WRITE_BUF+0x8c>)
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	8afa      	ldrh	r2, [r7, #22]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	440a      	add	r2, r1
 8002722:	7812      	ldrb	r2, [r2, #0]
 8002724:	4610      	mov	r0, r2
 8002726:	4798      	blx	r3
      for(i = 0; i < len; i++,j)
 8002728:	8afb      	ldrh	r3, [r7, #22]
 800272a:	3301      	adds	r3, #1
 800272c:	82fb      	strh	r3, [r7, #22]
 800272e:	8afa      	ldrh	r2, [r7, #22]
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	429a      	cmp	r2, r3
 8002734:	d3f0      	bcc.n	8002718 <WIZCHIP_WRITE_BUF+0x58>
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5500. !!!!"
#endif

   WIZCHIP.CS._deselect();
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <WIZCHIP_WRITE_BUF+0x8c>)
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <WIZCHIP_WRITE_BUF+0x8c>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4798      	blx	r3
}
 8002742:	bf00      	nop
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000020 	.word	0x20000020

08002750 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800275a:	2300      	movs	r3, #0
 800275c:	81fb      	strh	r3, [r7, #14]
 800275e:	2300      	movs	r3, #0
 8002760:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	3301      	adds	r3, #1
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fefc 	bl	800256c <WIZCHIP_READ>
 8002774:	4603      	mov	r3, r0
 8002776:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002778:	89bb      	ldrh	r3, [r7, #12]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	b29c      	uxth	r4, r3
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	3301      	adds	r3, #1
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff feee 	bl	800256c <WIZCHIP_READ>
 8002790:	4603      	mov	r3, r0
 8002792:	b29b      	uxth	r3, r3
 8002794:	4423      	add	r3, r4
 8002796:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002798:	89bb      	ldrh	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01a      	beq.n	80027d4 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	3301      	adds	r3, #1
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fede 	bl	800256c <WIZCHIP_READ>
 80027b0:	4603      	mov	r3, r0
 80027b2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80027b4:	89fb      	ldrh	r3, [r7, #14]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	b29c      	uxth	r4, r3
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	3301      	adds	r3, #1
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fed0 	bl	800256c <WIZCHIP_READ>
 80027cc:	4603      	mov	r3, r0
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4423      	add	r3, r4
 80027d2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80027d4:	89fa      	ldrh	r2, [r7, #14]
 80027d6:	89bb      	ldrh	r3, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1c2      	bne.n	8002762 <getSn_TX_FSR+0x12>
   return val;
 80027dc:	89fb      	ldrh	r3, [r7, #14]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}

080027e6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80027e6:	b590      	push	{r4, r7, lr}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	81fb      	strh	r3, [r7, #14]
 80027f4:	2300      	movs	r3, #0
 80027f6:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	3301      	adds	r3, #1
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff feb1 	bl	800256c <WIZCHIP_READ>
 800280a:	4603      	mov	r3, r0
 800280c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800280e:	89bb      	ldrh	r3, [r7, #12]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	b29c      	uxth	r4, r3
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	3301      	adds	r3, #1
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fea3 	bl	800256c <WIZCHIP_READ>
 8002826:	4603      	mov	r3, r0
 8002828:	b29b      	uxth	r3, r3
 800282a:	4423      	add	r3, r4
 800282c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800282e:	89bb      	ldrh	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01a      	beq.n	800286a <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	3301      	adds	r3, #1
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fe93 	bl	800256c <WIZCHIP_READ>
 8002846:	4603      	mov	r3, r0
 8002848:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800284a:	89fb      	ldrh	r3, [r7, #14]
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	b29c      	uxth	r4, r3
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	3301      	adds	r3, #1
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fe85 	bl	800256c <WIZCHIP_READ>
 8002862:	4603      	mov	r3, r0
 8002864:	b29b      	uxth	r3, r3
 8002866:	4423      	add	r3, r4
 8002868:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800286a:	89fa      	ldrh	r2, [r7, #14]
 800286c:	89bb      	ldrh	r3, [r7, #12]
 800286e:	429a      	cmp	r2, r3
 8002870:	d1c2      	bne.n	80027f8 <getSn_RX_RSR+0x12>
   return val;
 8002872:	89fb      	ldrh	r3, [r7, #14]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}

0800287c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]
 8002888:	4613      	mov	r3, r2
 800288a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
   if(len == 0)  return;
 8002894:	88bb      	ldrh	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d048      	beq.n	800292c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	3301      	adds	r3, #1
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fe60 	bl	800256c <WIZCHIP_READ>
 80028ac:	4603      	mov	r3, r0
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	b29c      	uxth	r4, r3
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	3301      	adds	r3, #1
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fe53 	bl	800256c <WIZCHIP_READ>
 80028c6:	4603      	mov	r3, r0
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	4423      	add	r3, r4
 80028cc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80028ce:	89fb      	ldrh	r3, [r7, #14]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	79fa      	ldrb	r2, [r7, #7]
 80028d4:	0092      	lsls	r2, r2, #2
 80028d6:	3202      	adds	r2, #2
 80028d8:	00d2      	lsls	r2, r2, #3
 80028da:	4413      	add	r3, r2
 80028dc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80028de:	88bb      	ldrh	r3, [r7, #4]
 80028e0:	461a      	mov	r2, r3
 80028e2:	6839      	ldr	r1, [r7, #0]
 80028e4:	68b8      	ldr	r0, [r7, #8]
 80028e6:	f7ff feeb 	bl	80026c0 <WIZCHIP_WRITE_BUF>

   ptr += len;
 80028ea:	89fa      	ldrh	r2, [r7, #14]
 80028ec:	88bb      	ldrh	r3, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	3301      	adds	r3, #1
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80028fe:	461a      	mov	r2, r3
 8002900:	89fb      	ldrh	r3, [r7, #14]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	b29b      	uxth	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f7ff fe5e 	bl	80025cc <WIZCHIP_WRITE>
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	3301      	adds	r3, #1
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800291c:	461a      	mov	r2, r3
 800291e:	89fb      	ldrh	r3, [r7, #14]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f7ff fe51 	bl	80025cc <WIZCHIP_WRITE>
 800292a:	e000      	b.n	800292e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800292c:	bf00      	nop
}
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bd90      	pop	{r4, r7, pc}

08002934 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
 8002940:	4613      	mov	r3, r2
 8002942:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]

   if(len == 0) return;
 800294c:	88bb      	ldrh	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d048      	beq.n	80029e4 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	3301      	adds	r3, #1
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fe04 	bl	800256c <WIZCHIP_READ>
 8002964:	4603      	mov	r3, r0
 8002966:	b29b      	uxth	r3, r3
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	b29c      	uxth	r4, r3
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	3301      	adds	r3, #1
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fdf7 	bl	800256c <WIZCHIP_READ>
 800297e:	4603      	mov	r3, r0
 8002980:	b29b      	uxth	r3, r3
 8002982:	4423      	add	r3, r4
 8002984:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002986:	89fb      	ldrh	r3, [r7, #14]
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	79fa      	ldrb	r2, [r7, #7]
 800298c:	0092      	lsls	r2, r2, #2
 800298e:	3203      	adds	r2, #3
 8002990:	00d2      	lsls	r2, r2, #3
 8002992:	4413      	add	r3, r2
 8002994:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002996:	88bb      	ldrh	r3, [r7, #4]
 8002998:	461a      	mov	r2, r3
 800299a:	6839      	ldr	r1, [r7, #0]
 800299c:	68b8      	ldr	r0, [r7, #8]
 800299e:	f7ff fe4b 	bl	8002638 <WIZCHIP_READ_BUF>
   ptr += len;
 80029a2:	89fa      	ldrh	r2, [r7, #14]
 80029a4:	88bb      	ldrh	r3, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	81fb      	strh	r3, [r7, #14]

   setSn_RX_RD(sn,ptr);
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	3301      	adds	r3, #1
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80029b6:	461a      	mov	r2, r3
 80029b8:	89fb      	ldrh	r3, [r7, #14]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f7ff fe02 	bl	80025cc <WIZCHIP_WRITE>
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	3301      	adds	r3, #1
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80029d4:	461a      	mov	r2, r3
 80029d6:	89fb      	ldrh	r3, [r7, #14]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f7ff fdf5 	bl	80025cc <WIZCHIP_WRITE>
 80029e2:	e000      	b.n	80029e6 <wiz_recv_data+0xb2>
   if(len == 0) return;
 80029e4:	bf00      	nop
}
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd90      	pop	{r4, r7, pc}

080029ec <wizchip_cris_enter>:
/**
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_enter(void)           {};
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <wizchip_cris_exit>:
/**
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	  wizchip_cris_exit(void)          {};
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <wizchip_cs_select>:
/**
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_select(void)            {};
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <wizchip_cs_deselect>:
/**
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_cs_deselect(void)          {};
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <wizchip_bus_readbyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20140501 : Explict pointer type casting
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *) AddrSel); };
uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); };
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <wizchip_bus_writebyte>:
 * null function is called.
 */

//M20140501 : Explict pointer type casting
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*) AddrSel) = wb; };
void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; };
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <wizchip_spi_readbyte>:
/**
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
uint8_t wizchip_spi_readbyte(void)        {return 0;};
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	2300      	movs	r3, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <wizchip_spi_writebyte>:
/**
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
void 	wizchip_spi_writebyte(uint8_t wb) {};
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
	...

08002a74 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <reg_wizchip_cs_cbfunc+0x16>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <reg_wizchip_cs_cbfunc+0x3c>)
 8002a8c:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <reg_wizchip_cs_cbfunc+0x40>)
 8002a8e:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <reg_wizchip_cs_cbfunc+0x3c>)
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <reg_wizchip_cs_cbfunc+0x44>)
 8002a94:	615a      	str	r2, [r3, #20]
 8002a96:	e005      	b.n	8002aa4 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002a98:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <reg_wizchip_cs_cbfunc+0x3c>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <reg_wizchip_cs_cbfunc+0x3c>)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6153      	str	r3, [r2, #20]
   }
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000020 	.word	0x20000020
 8002ab4:	08002a05 	.word	0x08002a05
 8002ab8:	08002a11 	.word	0x08002a11

08002abc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002ac6:	bf00      	nop
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <reg_wizchip_spi_cbfunc+0x48>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f9      	beq.n	8002ac8 <reg_wizchip_spi_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <reg_wizchip_spi_cbfunc+0x24>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <reg_wizchip_spi_cbfunc+0x48>)
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <reg_wizchip_spi_cbfunc+0x4c>)
 8002ae4:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <reg_wizchip_spi_cbfunc+0x48>)
 8002ae8:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <reg_wizchip_spi_cbfunc+0x50>)
 8002aea:	61da      	str	r2, [r3, #28]
 8002aec:	e005      	b.n	8002afa <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002aee:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <reg_wizchip_spi_cbfunc+0x48>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002af4:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <reg_wizchip_spi_cbfunc+0x48>)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	61d3      	str	r3, [r2, #28]
   }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	20000020 	.word	0x20000020
 8002b08:	08002a51 	.word	0x08002a51
 8002b0c:	08002a5f 	.word	0x08002a5f

08002b10 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	75fb      	strb	r3, [r7, #23]
   uint8_t* ptmp[2] = {0,0};
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	f200 80c2 	bhi.w	8002cb4 <ctlwizchip+0x1a4>
 8002b30:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <ctlwizchip+0x28>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b79 	.word	0x08002b79
 8002b3c:	08002b7f 	.word	0x08002b7f
 8002b40:	08002bab 	.word	0x08002bab
 8002b44:	08002b9f 	.word	0x08002b9f
 8002b48:	08002bb9 	.word	0x08002bb9
 8002b4c:	08002bc5 	.word	0x08002bc5
 8002b50:	08002bd3 	.word	0x08002bd3
 8002b54:	08002bf9 	.word	0x08002bf9
 8002b58:	08002c1f 	.word	0x08002c1f
 8002b5c:	08002c59 	.word	0x08002c59
 8002b60:	08002c5f 	.word	0x08002c5f
 8002b64:	08002c67 	.word	0x08002c67
 8002b68:	08002cbb 	.word	0x08002cbb
 8002b6c:	08002c6f 	.word	0x08002c6f
 8002b70:	08002c7d 	.word	0x08002c7d
 8002b74:	08002c99 	.word	0x08002c99
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002b78:	f000 f8e6 	bl	8002d48 <wizchip_sw_reset>
         break;
 8002b7c:	e09e      	b.n	8002cbc <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3308      	adds	r3, #8
 8002b8c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f923 	bl	8002de0 <wizchip_init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	e08f      	b.n	8002cbe <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f9a8 	bl	8002ef8 <wizchip_clrinterrupt>
         break;
 8002ba8:	e088      	b.n	8002cbc <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002baa:	f000 f9c3 	bl	8002f34 <wizchip_getinterrupt>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	801a      	strh	r2, [r3, #0]
         break;
 8002bb6:	e081      	b.n	8002cbc <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 f9de 	bl	8002f7e <wizchip_setinterruptmask>
         break;
 8002bc2:	e07b      	b.n	8002cbc <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002bc4:	f000 f9f6 	bl	8002fb4 <wizchip_getinterruptmask>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461a      	mov	r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	801a      	strh	r2, [r3, #0]
         break;
 8002bd0:	e074      	b.n	8002cbc <ctlwizchip+0x1ac>
   #if _WIZCHIP_ > 5100
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002be2:	f7ff fcf3 	bl	80025cc <WIZCHIP_WRITE>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	4619      	mov	r1, r3
 8002bee:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002bf2:	f7ff fceb 	bl	80025cc <WIZCHIP_WRITE>
         break;
 8002bf6:	e061      	b.n	8002cbc <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8002bf8:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002bfc:	f7ff fcb6 	bl	800256c <WIZCHIP_READ>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	b29c      	uxth	r4, r3
 8002c08:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002c0c:	f7ff fcae 	bl	800256c <WIZCHIP_READ>
 8002c10:	4603      	mov	r3, r0
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4423      	add	r3, r4
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	801a      	strh	r2, [r3, #0]
         break;
 8002c1c:	e04e      	b.n	8002cbc <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002c1e:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <ctlwizchip+0x1b8>)
 8002c20:	789a      	ldrb	r2, [r3, #2]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	4a27      	ldr	r2, [pc, #156]	; (8002cc8 <ctlwizchip+0x1b8>)
 8002c2c:	78d2      	ldrb	r2, [r2, #3]
 8002c2e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	3302      	adds	r3, #2
 8002c34:	4a24      	ldr	r2, [pc, #144]	; (8002cc8 <ctlwizchip+0x1b8>)
 8002c36:	7912      	ldrb	r2, [r2, #4]
 8002c38:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	3303      	adds	r3, #3
 8002c3e:	4a22      	ldr	r2, [pc, #136]	; (8002cc8 <ctlwizchip+0x1b8>)
 8002c40:	7952      	ldrb	r2, [r2, #5]
 8002c42:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <ctlwizchip+0x1b8>)
 8002c4a:	7992      	ldrb	r2, [r2, #6]
 8002c4c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3305      	adds	r3, #5
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
         break;
 8002c56:	e031      	b.n	8002cbc <ctlwizchip+0x1ac>
   #if _WIZCHIP_ ==  5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002c58:	f000 f9ff 	bl	800305a <wizphy_reset>
         break;
 8002c5c:	e02e      	b.n	8002cbc <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002c5e:	6838      	ldr	r0, [r7, #0]
 8002c60:	f000 fa22 	bl	80030a8 <wizphy_setphyconf>
         break;
 8002c64:	e02a      	b.n	8002cbc <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002c66:	6838      	ldr	r0, [r7, #0]
 8002c68:	f000 fa60 	bl	800312c <wizphy_getphyconf>
         break;
 8002c6c:	e026      	b.n	8002cbc <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 faa3 	bl	80031be <wizphy_setphypmode>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	e020      	b.n	8002cbe <ctlwizchip+0x1ae>
   #endif
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8002c7c:	f000 f9d4 	bl	8003028 <wizphy_getphypmode>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2bff      	cmp	r3, #255	; 0xff
 8002c88:	d102      	bne.n	8002c90 <ctlwizchip+0x180>
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	e016      	b.n	8002cbe <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	7dfa      	ldrb	r2, [r7, #23]
 8002c94:	701a      	strb	r2, [r3, #0]
         break;
 8002c96:	e011      	b.n	8002cbc <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8002c98:	f000 f9af 	bl	8002ffa <wizphy_getphylink>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2bff      	cmp	r3, #255	; 0xff
 8002ca4:	d102      	bne.n	8002cac <ctlwizchip+0x19c>
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	e008      	b.n	8002cbe <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	7dfa      	ldrb	r2, [r7, #23]
 8002cb0:	701a      	strb	r2, [r3, #0]
         break;
 8002cb2:	e003      	b.n	8002cbc <ctlwizchip+0x1ac>
      default:
         return -1;
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb8:	e001      	b.n	8002cbe <ctlwizchip+0x1ae>
         break;
 8002cba:	bf00      	nop
   }
   return 0;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd90      	pop	{r4, r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000020 	.word	0x20000020

08002ccc <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]

   switch(cntype)
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d82c      	bhi.n	8002d38 <ctlnetwork+0x6c>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <ctlnetwork+0x18>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002cfd 	.word	0x08002cfd
 8002ce8:	08002d05 	.word	0x08002d05
 8002cec:	08002d0d 	.word	0x08002d0d
 8002cf0:	08002d1b 	.word	0x08002d1b
 8002cf4:	08002d29 	.word	0x08002d29
 8002cf8:	08002d31 	.word	0x08002d31
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8002cfc:	6838      	ldr	r0, [r7, #0]
 8002cfe:	f000 faa9 	bl	8003254 <wizchip_setnetinfo>
         break;
 8002d02:	e01c      	b.n	8002d3e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002d04:	6838      	ldr	r0, [r7, #0]
 8002d06:	f000 fae5 	bl	80032d4 <wizchip_getnetinfo>
         break;
 8002d0a:	e018      	b.n	8002d3e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fb1f 	bl	8003354 <wizchip_setnetmode>
 8002d16:	4603      	mov	r3, r0
 8002d18:	e012      	b.n	8002d40 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8002d1a:	f000 fb3d 	bl	8003398 <wizchip_getnetmode>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	701a      	strb	r2, [r3, #0]
         break;
 8002d26:	e00a      	b.n	8002d3e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8002d28:	6838      	ldr	r0, [r7, #0]
 8002d2a:	f000 fb3d 	bl	80033a8 <wizchip_settimeout>
         break;
 8002d2e:	e006      	b.n	8002d3e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002d30:	6838      	ldr	r0, [r7, #0]
 8002d32:	f000 fb5a 	bl	80033ea <wizchip_gettimeout>
         break;
 8002d36:	e002      	b.n	8002d3e <ctlnetwork+0x72>
      default:
         return -1;
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3c:	e000      	b.n	8002d40 <ctlnetwork+0x74>
   }
   return 0;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4];
   uint8_t mac[6];
   getSHAR(mac);
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	2206      	movs	r2, #6
 8002d52:	4619      	mov	r1, r3
 8002d54:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002d58:	f7ff fc6e 	bl	8002638 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	2204      	movs	r2, #4
 8002d62:	4619      	mov	r1, r3
 8002d64:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d68:	f7ff fc66 	bl	8002638 <WIZCHIP_READ_BUF>
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	2204      	movs	r2, #4
 8002d72:	4619      	mov	r1, r3
 8002d74:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002d78:	f7ff fc5e 	bl	8002638 <WIZCHIP_READ_BUF>
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	2204      	movs	r2, #4
 8002d82:	4619      	mov	r1, r3
 8002d84:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002d88:	f7ff fc56 	bl	8002638 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f7ff fc1c 	bl	80025cc <WIZCHIP_WRITE>
   getMR(); // for delay
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff fbe9 	bl	800256c <WIZCHIP_READ>
   setSHAR(mac);
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	2206      	movs	r2, #6
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002da4:	f7ff fc8c 	bl	80026c0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	2204      	movs	r2, #4
 8002dae:	4619      	mov	r1, r3
 8002db0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002db4:	f7ff fc84 	bl	80026c0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002dc4:	f7ff fc7c 	bl	80026c0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002dc8:	f107 030c 	add.w	r3, r7, #12
 8002dcc:	2204      	movs	r2, #4
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002dd4:	f7ff fc74 	bl	80026c0 <WIZCHIP_WRITE_BUF>
}
 8002dd8:	bf00      	nop
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002dee:	f7ff ffab 	bl	8002d48 <wizchip_sw_reset>
   if(txsize)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d03b      	beq.n	8002e70 <wizchip_init+0x90>
   {
      tmp = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e00e      	b.n	8002e20 <wizchip_init+0x40>
         tmp += txsize[i];
 8002e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	7bbb      	ldrb	r3, [r7, #14]
 8002e0e:	4413      	add	r3, r2
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	73fb      	strb	r3, [r7, #15]
 8002e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e24:	2b07      	cmp	r3, #7
 8002e26:	ddec      	ble.n	8002e02 <wizchip_init+0x22>
      if(tmp > 16) return -1;
 8002e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	dd02      	ble.n	8002e36 <wizchip_init+0x56>
 8002e30:	f04f 33ff 	mov.w	r3, #4294967295
 8002e34:	e05c      	b.n	8002ef0 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e015      	b.n	8002e68 <wizchip_init+0x88>
         setSn_TXBUF_SIZE(i, txsize[i]);
 8002e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	3301      	adds	r3, #1
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	4619      	mov	r1, r3
 8002e58:	f7ff fbb8 	bl	80025cc <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6c:	2b07      	cmp	r3, #7
 8002e6e:	dde5      	ble.n	8002e3c <wizchip_init+0x5c>
   }
   if(rxsize)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d03b      	beq.n	8002eee <wizchip_init+0x10e>
   {
      tmp = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
 8002e7e:	e00e      	b.n	8002e9e <wizchip_init+0xbe>
         tmp += rxsize[i];
 8002e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	4413      	add	r3, r2
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	7bbb      	ldrb	r3, [r7, #14]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	73fb      	strb	r3, [r7, #15]
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	2b07      	cmp	r3, #7
 8002ea4:	ddec      	ble.n	8002e80 <wizchip_init+0xa0>
      if(tmp > 16) return -1;
 8002ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	dd02      	ble.n	8002eb4 <wizchip_init+0xd4>
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb2:	e01d      	b.n	8002ef0 <wizchip_init+0x110>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]
 8002eb8:	e015      	b.n	8002ee6 <wizchip_init+0x106>
         setSn_RXBUF_SIZE(i, rxsize[i]);
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f7ff fb79 	bl	80025cc <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	2b07      	cmp	r3, #7
 8002eec:	dde5      	ble.n	8002eba <wizchip_init+0xda>
   }
   return 0;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   ir |= sir;
   setIR(ir);
#else
   setIR(ir);
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	f023 030f 	bic.w	r3, r3, #15
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	4619      	mov	r1, r3
 8002f18:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002f1c:	f7ff fb56 	bl	80025cc <WIZCHIP_WRITE>
   setSIR(sir);
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	4619      	mov	r1, r3
 8002f24:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002f28:	f7ff fb50 	bl	80025cc <WIZCHIP_WRITE>
#endif
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   ir = getIR();
   sir = ir 0x0F;
#else
   ir  = getIR();
 8002f46:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002f4a:	f7ff fb0f 	bl	800256c <WIZCHIP_READ>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f023 030f 	bic.w	r3, r3, #15
 8002f54:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002f56:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002f5a:	f7ff fb07 	bl	800256c <WIZCHIP_READ>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002f62:	79bb      	ldrb	r3, [r7, #6]
 8002f64:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002f66:	88bb      	ldrh	r3, [r7, #4]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002f74:	88bb      	ldrh	r3, [r7, #4]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ == 5100
   imr |= simr;
   setIMR(imr);
#else
   setIMR(imr);
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	4619      	mov	r1, r3
 8002f98:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002f9c:	f7ff fb16 	bl	80025cc <WIZCHIP_WRITE>
   setSIMR(simr);
 8002fa0:	7bbb      	ldrb	r3, [r7, #14]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002fa8:	f7ff fb10 	bl	80025cc <WIZCHIP_WRITE>
#endif
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ == 5100
   imr  = getIMR();
   simr = imr 0x0F;
#else
   imr  = getIMR();
 8002fc6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002fca:	f7ff facf 	bl	800256c <WIZCHIP_READ>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002fd2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002fd6:	f7ff fac9 	bl	800256c <WIZCHIP_READ>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == 5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002fde:	79bb      	ldrb	r3, [r7, #6]
 8002fe0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002ff0:	88bb      	ldrh	r3, [r7, #4]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
   else
      tmp = PHY_LINK_OFF;
#elif _WIZCHIP_ == 5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003000:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003004:	f7ff fab2 	bl	800256c <WIZCHIP_READ>
 8003008:	4603      	mov	r3, r0
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <wizphy_getphylink+0x1e>
      tmp = PHY_LINK_ON;
 8003012:	2301      	movs	r3, #1
 8003014:	71fb      	strb	r3, [r7, #7]
 8003016:	e001      	b.n	800301c <wizphy_getphylink+0x22>
   else
      tmp = PHY_LINK_OFF;
 8003018:	2300      	movs	r3, #0
 800301a:	71fb      	strb	r3, [r7, #7]
#else
   tmp = -1;
#endif
   return tmp;
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <wizphy_getphypmode>:

#if _WIZCHIP_ > 5100

int8_t wizphy_getphypmode(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if(getPHYCFGR() & PHYCFGR_OPMDC_PDOWN)
 8003032:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003036:	f7ff fa99 	bl	800256c <WIZCHIP_READ>
 800303a:	4603      	mov	r3, r0
 800303c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003044:	2301      	movs	r3, #1
 8003046:	71fb      	strb	r3, [r7, #7]
 8003048:	e001      	b.n	800304e <wizphy_getphypmode+0x26>
      else
         tmp = PHY_POWER_NORM;
 800304a:	2300      	movs	r3, #0
 800304c:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <wizphy_reset>:
#endif

#if _WIZCHIP_ == 5500
void wizphy_reset(void)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003060:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003064:	f7ff fa82 	bl	800256c <WIZCHIP_READ>
 8003068:	4603      	mov	r3, r0
 800306a:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003072:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	4619      	mov	r1, r3
 8003078:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800307c:	f7ff faa6 	bl	80025cc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003080:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003084:	f7ff fa72 	bl	800256c <WIZCHIP_READ>
 8003088:	4603      	mov	r3, r0
 800308a:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003092:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	4619      	mov	r1, r3
 8003098:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800309c:	f7ff fa96 	bl	80025cc <WIZCHIP_WRITE>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d104      	bne.n	80030c6 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	e003      	b.n	80030ce <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030cc:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d104      	bne.n	80030e0 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	e019      	b.n	8003114 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	78db      	ldrb	r3, [r3, #3]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10d      	bne.n	8003104 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	789b      	ldrb	r3, [r3, #2]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d104      	bne.n	80030fa <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	f043 0318 	orr.w	r3, r3, #24
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	e00c      	b.n	8003114 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e007      	b.n	8003114 <wizphy_setphyconf+0x6c>
      }
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	789b      	ldrb	r3, [r3, #2]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d103      	bne.n	8003114 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	f043 0310 	orr.w	r3, r3, #16
 8003112:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	4619      	mov	r1, r3
 8003118:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800311c:	f7ff fa56 	bl	80025cc <WIZCHIP_WRITE>
   wizphy_reset();
 8003120:	f7ff ff9b 	bl	800305a <wizphy_reset>
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003138:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800313c:	f7ff fa16 	bl	800256c <WIZCHIP_READ>
 8003140:	4603      	mov	r3, r0
 8003142:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	119b      	asrs	r3, r3, #6
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	b2da      	uxtb	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800315a:	2b20      	cmp	r3, #32
 800315c:	d001      	beq.n	8003162 <wizphy_getphyconf+0x36>
 800315e:	2b38      	cmp	r3, #56	; 0x38
 8003160:	d103      	bne.n	800316a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA:
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	705a      	strb	r2, [r3, #1]
         break;
 8003168:	e003      	b.n	8003172 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	705a      	strb	r2, [r3, #1]
         break;
 8003170:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003178:	2b18      	cmp	r3, #24
 800317a:	d003      	beq.n	8003184 <wizphy_getphyconf+0x58>
 800317c:	2b20      	cmp	r3, #32
 800317e:	d001      	beq.n	8003184 <wizphy_getphyconf+0x58>
 8003180:	2b10      	cmp	r3, #16
 8003182:	d103      	bne.n	800318c <wizphy_getphyconf+0x60>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	709a      	strb	r2, [r3, #2]
         break;
 800318a:	e003      	b.n	8003194 <wizphy_getphyconf+0x68>
      default:
         phyconf->speed = PHY_SPEED_10;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	709a      	strb	r2, [r3, #2]
         break;
 8003192:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800319a:	2b18      	cmp	r3, #24
 800319c:	d003      	beq.n	80031a6 <wizphy_getphyconf+0x7a>
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d001      	beq.n	80031a6 <wizphy_getphyconf+0x7a>
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d103      	bne.n	80031ae <wizphy_getphyconf+0x82>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	70da      	strb	r2, [r3, #3]
         break;
 80031ac:	e003      	b.n	80031b6 <wizphy_getphyconf+0x8a>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	70da      	strb	r2, [r3, #3]
         break;
 80031b4:	bf00      	nop
   }
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80031cc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80031d0:	f7ff f9cc 	bl	800256c <WIZCHIP_READ>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <wizphy_setphypmode+0x2a>
 80031e2:	f04f 33ff 	mov.w	r3, #4294967295
 80031e6:	e030      	b.n	800324a <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80031ee:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d104      	bne.n	8003200 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	e003      	b.n	8003208 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003206:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	4619      	mov	r1, r3
 800320c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003210:	f7ff f9dc 	bl	80025cc <WIZCHIP_WRITE>
   wizphy_reset();
 8003214:	f7ff ff21 	bl	800305a <wizphy_reset>
   tmp = getPHYCFGR();
 8003218:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800321c:	f7ff f9a6 	bl	800256c <WIZCHIP_READ>
 8003220:	4603      	mov	r3, r0
 8003222:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d106      	bne.n	8003238 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <wizphy_setphypmode+0x88>
 8003234:	2300      	movs	r3, #0
 8003236:	e008      	b.n	800324a <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <wizphy_setphypmode+0x88>
 8003242:	2300      	movs	r3, #0
 8003244:	e001      	b.n	800324a <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2206      	movs	r2, #6
 8003260:	4619      	mov	r1, r3
 8003262:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003266:	f7ff fa2b 	bl	80026c0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	330e      	adds	r3, #14
 800326e:	2204      	movs	r2, #4
 8003270:	4619      	mov	r1, r3
 8003272:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003276:	f7ff fa23 	bl	80026c0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	330a      	adds	r3, #10
 800327e:	2204      	movs	r2, #4
 8003280:	4619      	mov	r1, r3
 8003282:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003286:	f7ff fa1b 	bl	80026c0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3306      	adds	r3, #6
 800328e:	2204      	movs	r2, #4
 8003290:	4619      	mov	r1, r3
 8003292:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003296:	f7ff fa13 	bl	80026c0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7c9a      	ldrb	r2, [r3, #18]
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <wizchip_setnetinfo+0x78>)
 80032a0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	7cda      	ldrb	r2, [r3, #19]
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <wizchip_setnetinfo+0x78>)
 80032a8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7d1a      	ldrb	r2, [r3, #20]
 80032ae:	4b07      	ldr	r3, [pc, #28]	; (80032cc <wizchip_setnetinfo+0x78>)
 80032b0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7d5a      	ldrb	r2, [r3, #21]
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <wizchip_setnetinfo+0x78>)
 80032b8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7d9a      	ldrb	r2, [r3, #22]
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <wizchip_setnetinfo+0x7c>)
 80032c0:	701a      	strb	r2, [r3, #0]
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000098 	.word	0x20000098
 80032d0:	2000009c 	.word	0x2000009c

080032d4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2206      	movs	r2, #6
 80032e0:	4619      	mov	r1, r3
 80032e2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80032e6:	f7ff f9a7 	bl	8002638 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	330e      	adds	r3, #14
 80032ee:	2204      	movs	r2, #4
 80032f0:	4619      	mov	r1, r3
 80032f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80032f6:	f7ff f99f 	bl	8002638 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	330a      	adds	r3, #10
 80032fe:	2204      	movs	r2, #4
 8003300:	4619      	mov	r1, r3
 8003302:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003306:	f7ff f997 	bl	8002638 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3306      	adds	r3, #6
 800330e:	2204      	movs	r2, #4
 8003310:	4619      	mov	r1, r3
 8003312:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003316:	f7ff f98f 	bl	8002638 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <wizchip_getnetinfo+0x78>)
 800331c:	781a      	ldrb	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <wizchip_getnetinfo+0x78>)
 8003324:	785a      	ldrb	r2, [r3, #1]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <wizchip_getnetinfo+0x78>)
 800332c:	789a      	ldrb	r2, [r3, #2]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <wizchip_getnetinfo+0x78>)
 8003334:	78da      	ldrb	r2, [r3, #3]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <wizchip_getnetinfo+0x7c>)
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	759a      	strb	r2, [r3, #22]
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000098 	.word	0x20000098
 8003350:	2000009c 	.word	0x2000009c

08003354 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != 5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <wizchip_setnetmode+0x1e>
 800336c:	f04f 33ff 	mov.w	r3, #4294967295
 8003370:	e00e      	b.n	8003390 <wizchip_setnetmode+0x3c>
#endif
   tmp = getMR();
 8003372:	2000      	movs	r0, #0
 8003374:	f7ff f8fa 	bl	800256c <WIZCHIP_READ>
 8003378:	4603      	mov	r3, r0
 800337a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	4313      	orrs	r3, r2
 8003382:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	4619      	mov	r1, r3
 8003388:	2000      	movs	r0, #0
 800338a:	f7ff f91f 	bl	80025cc <WIZCHIP_WRITE>
   return 0;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800339c:	2000      	movs	r0, #0
 800339e:	f7ff f8e5 	bl	800256c <WIZCHIP_READ>
 80033a2:	4603      	mov	r3, r0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	4619      	mov	r1, r3
 80033b6:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80033ba:	f7ff f907 	bl	80025cc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	885b      	ldrh	r3, [r3, #2]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	4619      	mov	r1, r3
 80033ca:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80033ce:	f7ff f8fd 	bl	80025cc <WIZCHIP_WRITE>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	885b      	ldrh	r3, [r3, #2]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4619      	mov	r1, r3
 80033da:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80033de:	f7ff f8f5 	bl	80025cc <WIZCHIP_WRITE>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80033ea:	b590      	push	{r4, r7, lr}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80033f2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80033f6:	f7ff f8b9 	bl	800256c <WIZCHIP_READ>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8003402:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003406:	f7ff f8b1 	bl	800256c <WIZCHIP_READ>
 800340a:	4603      	mov	r3, r0
 800340c:	b29b      	uxth	r3, r3
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	b29c      	uxth	r4, r3
 8003412:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8003416:	f7ff f8a9 	bl	800256c <WIZCHIP_READ>
 800341a:	4603      	mov	r3, r0
 800341c:	b29b      	uxth	r3, r3
 800341e:	4423      	add	r3, r4
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	805a      	strh	r2, [r3, #2]
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bd90      	pop	{r4, r7, pc}
	...

08003430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_Init+0x28>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a07      	ldr	r2, [pc, #28]	; (8003458 <HAL_Init+0x28>)
 800343a:	f043 0310 	orr.w	r3, r3, #16
 800343e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003440:	2003      	movs	r0, #3
 8003442:	f000 f8d1 	bl	80035e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003446:	2000      	movs	r0, #0
 8003448:	f7fe fc0c 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800344c:	f7fe fb46 	bl	8001adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40022000 	.word	0x40022000

0800345c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_IncTick+0x1c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_IncTick+0x20>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4413      	add	r3, r2
 800346c:	4a03      	ldr	r2, [pc, #12]	; (800347c <HAL_IncTick+0x20>)
 800346e:	6013      	str	r3, [r2, #0]
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	20000044 	.word	0x20000044
 800347c:	20002ca4 	.word	0x20002ca4

08003480 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return uwTick;
 8003484:	4b02      	ldr	r3, [pc, #8]	; (8003490 <HAL_GetTick+0x10>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	20002ca4 	.word	0x20002ca4

08003494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c6:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	60d3      	str	r3, [r2, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <__NVIC_GetPriorityGrouping+0x18>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 0307 	and.w	r3, r3, #7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db0b      	blt.n	8003522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	4906      	ldr	r1, [pc, #24]	; (800352c <__NVIC_EnableIRQ+0x34>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2001      	movs	r0, #1
 800351a:	fa00 f202 	lsl.w	r2, r0, r2
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0a      	blt.n	800355a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	490c      	ldr	r1, [pc, #48]	; (800357c <__NVIC_SetPriority+0x4c>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003558:	e00a      	b.n	8003570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <__NVIC_SetPriority+0x50>)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	3b04      	subs	r3, #4
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	440b      	add	r3, r1
 800356e:	761a      	strb	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f1c3 0307 	rsb	r3, r3, #7
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf28      	it	cs
 80035a2:	2304      	movcs	r3, #4
 80035a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d902      	bls.n	80035b4 <NVIC_EncodePriority+0x30>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3b03      	subs	r3, #3
 80035b2:	e000      	b.n	80035b6 <NVIC_EncodePriority+0x32>
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	401a      	ands	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035cc:	f04f 31ff 	mov.w	r1, #4294967295
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43d9      	mvns	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	4313      	orrs	r3, r2
         );
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	; 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ff4f 	bl	8003494 <__NVIC_SetPriorityGrouping>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035fe:	b580      	push	{r7, lr}
 8003600:	b086      	sub	sp, #24
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003610:	f7ff ff64 	bl	80034dc <__NVIC_GetPriorityGrouping>
 8003614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	6978      	ldr	r0, [r7, #20]
 800361c:	f7ff ffb2 	bl	8003584 <NVIC_EncodePriority>
 8003620:	4602      	mov	r2, r0
 8003622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff81 	bl	8003530 <__NVIC_SetPriority>
}
 800362e:	bf00      	nop
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	4603      	mov	r3, r0
 800363e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff57 	bl	80034f8 <__NVIC_EnableIRQ>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_FLASH_Program+0xd8>)
 8003670:	7e1b      	ldrb	r3, [r3, #24]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_FLASH_Program+0x26>
 8003676:	2302      	movs	r3, #2
 8003678:	e054      	b.n	8003724 <HAL_FLASH_Program+0xd0>
 800367a:	4b2c      	ldr	r3, [pc, #176]	; (800372c <HAL_FLASH_Program+0xd8>)
 800367c:	2201      	movs	r2, #1
 800367e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003680:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003684:	f000 f8d4 	bl	8003830 <FLASH_WaitForLastOperation>
 8003688:	4603      	mov	r3, r0
 800368a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d144      	bne.n	800371c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d102      	bne.n	800369e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003698:	2301      	movs	r3, #1
 800369a:	757b      	strb	r3, [r7, #21]
 800369c:	e007      	b.n	80036ae <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d102      	bne.n	80036aa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80036a4:	2302      	movs	r3, #2
 80036a6:	757b      	strb	r3, [r7, #21]
 80036a8:	e001      	b.n	80036ae <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80036aa:	2304      	movs	r3, #4
 80036ac:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	75bb      	strb	r3, [r7, #22]
 80036b2:	e02d      	b.n	8003710 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80036b4:	7dbb      	ldrb	r3, [r7, #22]
 80036b6:	005a      	lsls	r2, r3, #1
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	eb02 0c03 	add.w	ip, r2, r3
 80036be:	7dbb      	ldrb	r3, [r7, #22]
 80036c0:	0119      	lsls	r1, r3, #4
 80036c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036c6:	f1c1 0620 	rsb	r6, r1, #32
 80036ca:	f1a1 0020 	sub.w	r0, r1, #32
 80036ce:	fa22 f401 	lsr.w	r4, r2, r1
 80036d2:	fa03 f606 	lsl.w	r6, r3, r6
 80036d6:	4334      	orrs	r4, r6
 80036d8:	fa23 f000 	lsr.w	r0, r3, r0
 80036dc:	4304      	orrs	r4, r0
 80036de:	fa23 f501 	lsr.w	r5, r3, r1
 80036e2:	b2a3      	uxth	r3, r4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4660      	mov	r0, ip
 80036e8:	f000 f886 	bl	80037f8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80036ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036f0:	f000 f89e 	bl	8003830 <FLASH_WaitForLastOperation>
 80036f4:	4603      	mov	r3, r0
 80036f6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <HAL_FLASH_Program+0xdc>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <HAL_FLASH_Program+0xdc>)
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d107      	bne.n	800371a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800370a:	7dbb      	ldrb	r3, [r7, #22]
 800370c:	3301      	adds	r3, #1
 800370e:	75bb      	strb	r3, [r7, #22]
 8003710:	7dba      	ldrb	r2, [r7, #22]
 8003712:	7d7b      	ldrb	r3, [r7, #21]
 8003714:	429a      	cmp	r2, r3
 8003716:	d3cd      	bcc.n	80036b4 <HAL_FLASH_Program+0x60>
 8003718:	e000      	b.n	800371c <HAL_FLASH_Program+0xc8>
      {
        break;
 800371a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_FLASH_Program+0xd8>)
 800371e:	2200      	movs	r2, #0
 8003720:	761a      	strb	r2, [r3, #24]

  return status;
 8003722:	7dfb      	ldrb	r3, [r7, #23]
}
 8003724:	4618      	mov	r0, r3
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800372c:	20002ca8 	.word	0x20002ca8
 8003730:	40022000 	.word	0x40022000

08003734 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <HAL_FLASH_Unlock+0x40>)
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_FLASH_Unlock+0x40>)
 800374c:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <HAL_FLASH_Unlock+0x44>)
 800374e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_FLASH_Unlock+0x40>)
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <HAL_FLASH_Unlock+0x48>)
 8003754:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_FLASH_Unlock+0x40>)
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003766:	79fb      	ldrb	r3, [r7, #7]
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40022000 	.word	0x40022000
 8003778:	45670123 	.word	0x45670123
 800377c:	cdef89ab 	.word	0xcdef89ab

08003780 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_FLASH_Lock+0x1c>)
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <HAL_FLASH_Lock+0x1c>)
 800378a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40022000 	.word	0x40022000

080037a0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_FLASH_OB_Unlock+0x2c>)
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d107      	bne.n	80037c0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_FLASH_OB_Unlock+0x2c>)
 80037b2:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <HAL_FLASH_OB_Unlock+0x30>)
 80037b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <HAL_FLASH_OB_Unlock+0x2c>)
 80037b8:	4a06      	ldr	r2, [pc, #24]	; (80037d4 <HAL_FLASH_OB_Unlock+0x34>)
 80037ba:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40022000 	.word	0x40022000
 80037d0:	45670123 	.word	0x45670123
 80037d4:	cdef89ab 	.word	0xcdef89ab

080037d8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_FLASH_OB_Lock+0x1c>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	4a04      	ldr	r2, [pc, #16]	; (80037f4 <HAL_FLASH_OB_Lock+0x1c>)
 80037e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037e6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40022000 	.word	0x40022000

080037f8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003804:	4b08      	ldr	r3, [pc, #32]	; (8003828 <FLASH_Program_HalfWord+0x30>)
 8003806:	2200      	movs	r2, #0
 8003808:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <FLASH_Program_HalfWord+0x34>)
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	4a07      	ldr	r2, [pc, #28]	; (800382c <FLASH_Program_HalfWord+0x34>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	887a      	ldrh	r2, [r7, #2]
 800381a:	801a      	strh	r2, [r3, #0]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20002ca8 	.word	0x20002ca8
 800382c:	40022000 	.word	0x40022000

08003830 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003838:	f7ff fe22 	bl	8003480 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800383e:	e010      	b.n	8003862 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d00c      	beq.n	8003862 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <FLASH_WaitForLastOperation+0x2e>
 800384e:	f7ff fe17 	bl	8003480 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	429a      	cmp	r2, r3
 800385c:	d201      	bcs.n	8003862 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e025      	b.n	80038ae <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <FLASH_WaitForLastOperation+0x88>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e8      	bne.n	8003840 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <FLASH_WaitForLastOperation+0x88>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <FLASH_WaitForLastOperation+0x88>)
 800387c:	2220      	movs	r2, #32
 800387e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <FLASH_WaitForLastOperation+0x88>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <FLASH_WaitForLastOperation+0x88>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003894:	2b00      	cmp	r3, #0
 8003896:	d105      	bne.n	80038a4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003898:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <FLASH_WaitForLastOperation+0x88>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80038a4:	f000 f80a 	bl	80038bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40022000 	.word	0x40022000

080038bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80038c6:	4b23      	ldr	r3, [pc, #140]	; (8003954 <FLASH_SetErrorCode+0x98>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <FLASH_SetErrorCode+0x9c>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <FLASH_SetErrorCode+0x9c>)
 80038dc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f043 0310 	orr.w	r3, r3, #16
 80038e4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <FLASH_SetErrorCode+0x98>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80038f2:	4b19      	ldr	r3, [pc, #100]	; (8003958 <FLASH_SetErrorCode+0x9c>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	4a17      	ldr	r2, [pc, #92]	; (8003958 <FLASH_SetErrorCode+0x9c>)
 80038fc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f043 0304 	orr.w	r3, r3, #4
 8003904:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <FLASH_SetErrorCode+0x98>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <FLASH_SetErrorCode+0x9c>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f043 0304 	orr.w	r3, r3, #4
 800391a:	4a0f      	ldr	r2, [pc, #60]	; (8003958 <FLASH_SetErrorCode+0x9c>)
 800391c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800391e:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <FLASH_SetErrorCode+0x98>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <FLASH_SetErrorCode+0x98>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f240 1201 	movw	r2, #257	; 0x101
 8003930:	4293      	cmp	r3, r2
 8003932:	d106      	bne.n	8003942 <FLASH_SetErrorCode+0x86>
 8003934:	4b07      	ldr	r3, [pc, #28]	; (8003954 <FLASH_SetErrorCode+0x98>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	4a06      	ldr	r2, [pc, #24]	; (8003954 <FLASH_SetErrorCode+0x98>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	61d3      	str	r3, [r2, #28]
}  
 8003940:	e002      	b.n	8003948 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003942:	4a04      	ldr	r2, [pc, #16]	; (8003954 <FLASH_SetErrorCode+0x98>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	60d3      	str	r3, [r2, #12]
}  
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40022000 	.word	0x40022000
 8003958:	20002ca8 	.word	0x20002ca8

0800395c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800395c:	b480      	push	{r7}
 800395e:	b08b      	sub	sp, #44	; 0x2c
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800396e:	e127      	b.n	8003bc0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003970:	2201      	movs	r2, #1
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	429a      	cmp	r2, r3
 800398a:	f040 8116 	bne.w	8003bba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b12      	cmp	r3, #18
 8003994:	d034      	beq.n	8003a00 <HAL_GPIO_Init+0xa4>
 8003996:	2b12      	cmp	r3, #18
 8003998:	d80d      	bhi.n	80039b6 <HAL_GPIO_Init+0x5a>
 800399a:	2b02      	cmp	r3, #2
 800399c:	d02b      	beq.n	80039f6 <HAL_GPIO_Init+0x9a>
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d804      	bhi.n	80039ac <HAL_GPIO_Init+0x50>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d031      	beq.n	8003a0a <HAL_GPIO_Init+0xae>
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d01c      	beq.n	80039e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039aa:	e048      	b.n	8003a3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d043      	beq.n	8003a38 <HAL_GPIO_Init+0xdc>
 80039b0:	2b11      	cmp	r3, #17
 80039b2:	d01b      	beq.n	80039ec <HAL_GPIO_Init+0x90>
          break;
 80039b4:	e043      	b.n	8003a3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80039b6:	4a89      	ldr	r2, [pc, #548]	; (8003bdc <HAL_GPIO_Init+0x280>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d026      	beq.n	8003a0a <HAL_GPIO_Init+0xae>
 80039bc:	4a87      	ldr	r2, [pc, #540]	; (8003bdc <HAL_GPIO_Init+0x280>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d806      	bhi.n	80039d0 <HAL_GPIO_Init+0x74>
 80039c2:	4a87      	ldr	r2, [pc, #540]	; (8003be0 <HAL_GPIO_Init+0x284>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d020      	beq.n	8003a0a <HAL_GPIO_Init+0xae>
 80039c8:	4a86      	ldr	r2, [pc, #536]	; (8003be4 <HAL_GPIO_Init+0x288>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d01d      	beq.n	8003a0a <HAL_GPIO_Init+0xae>
          break;
 80039ce:	e036      	b.n	8003a3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80039d0:	4a85      	ldr	r2, [pc, #532]	; (8003be8 <HAL_GPIO_Init+0x28c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d019      	beq.n	8003a0a <HAL_GPIO_Init+0xae>
 80039d6:	4a85      	ldr	r2, [pc, #532]	; (8003bec <HAL_GPIO_Init+0x290>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d016      	beq.n	8003a0a <HAL_GPIO_Init+0xae>
 80039dc:	4a84      	ldr	r2, [pc, #528]	; (8003bf0 <HAL_GPIO_Init+0x294>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <HAL_GPIO_Init+0xae>
          break;
 80039e2:	e02c      	b.n	8003a3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	623b      	str	r3, [r7, #32]
          break;
 80039ea:	e028      	b.n	8003a3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	3304      	adds	r3, #4
 80039f2:	623b      	str	r3, [r7, #32]
          break;
 80039f4:	e023      	b.n	8003a3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	3308      	adds	r3, #8
 80039fc:	623b      	str	r3, [r7, #32]
          break;
 80039fe:	e01e      	b.n	8003a3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	330c      	adds	r3, #12
 8003a06:	623b      	str	r3, [r7, #32]
          break;
 8003a08:	e019      	b.n	8003a3e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a12:	2304      	movs	r3, #4
 8003a14:	623b      	str	r3, [r7, #32]
          break;
 8003a16:	e012      	b.n	8003a3e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a20:	2308      	movs	r3, #8
 8003a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	611a      	str	r2, [r3, #16]
          break;
 8003a2a:	e008      	b.n	8003a3e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	615a      	str	r2, [r3, #20]
          break;
 8003a36:	e002      	b.n	8003a3e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	623b      	str	r3, [r7, #32]
          break;
 8003a3c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2bff      	cmp	r3, #255	; 0xff
 8003a42:	d801      	bhi.n	8003a48 <HAL_GPIO_Init+0xec>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	e001      	b.n	8003a4c <HAL_GPIO_Init+0xf0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2bff      	cmp	r3, #255	; 0xff
 8003a52:	d802      	bhi.n	8003a5a <HAL_GPIO_Init+0xfe>
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	e002      	b.n	8003a60 <HAL_GPIO_Init+0x104>
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	3b08      	subs	r3, #8
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	210f      	movs	r1, #15
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	401a      	ands	r2, r3
 8003a72:	6a39      	ldr	r1, [r7, #32]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8096 	beq.w	8003bba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_GPIO_Init+0x298>)
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	4a58      	ldr	r2, [pc, #352]	; (8003bf4 <HAL_GPIO_Init+0x298>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6193      	str	r3, [r2, #24]
 8003a9a:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <HAL_GPIO_Init+0x298>)
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003aa6:	4a54      	ldr	r2, [pc, #336]	; (8003bf8 <HAL_GPIO_Init+0x29c>)
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	3302      	adds	r3, #2
 8003aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	220f      	movs	r2, #15
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4b      	ldr	r2, [pc, #300]	; (8003bfc <HAL_GPIO_Init+0x2a0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_GPIO_Init+0x19e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4a      	ldr	r2, [pc, #296]	; (8003c00 <HAL_GPIO_Init+0x2a4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00d      	beq.n	8003af6 <HAL_GPIO_Init+0x19a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a49      	ldr	r2, [pc, #292]	; (8003c04 <HAL_GPIO_Init+0x2a8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <HAL_GPIO_Init+0x196>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a48      	ldr	r2, [pc, #288]	; (8003c08 <HAL_GPIO_Init+0x2ac>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <HAL_GPIO_Init+0x192>
 8003aea:	2303      	movs	r3, #3
 8003aec:	e006      	b.n	8003afc <HAL_GPIO_Init+0x1a0>
 8003aee:	2304      	movs	r3, #4
 8003af0:	e004      	b.n	8003afc <HAL_GPIO_Init+0x1a0>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e002      	b.n	8003afc <HAL_GPIO_Init+0x1a0>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_GPIO_Init+0x1a0>
 8003afa:	2300      	movs	r3, #0
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	f002 0203 	and.w	r2, r2, #3
 8003b02:	0092      	lsls	r2, r2, #2
 8003b04:	4093      	lsls	r3, r2
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b0c:	493a      	ldr	r1, [pc, #232]	; (8003bf8 <HAL_GPIO_Init+0x29c>)
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	089b      	lsrs	r3, r3, #2
 8003b12:	3302      	adds	r3, #2
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d006      	beq.n	8003b34 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b26:	4b39      	ldr	r3, [pc, #228]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4938      	ldr	r1, [pc, #224]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]
 8003b32:	e006      	b.n	8003b42 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b34:	4b35      	ldr	r3, [pc, #212]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	4933      	ldr	r1, [pc, #204]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	492e      	ldr	r1, [pc, #184]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
 8003b5a:	e006      	b.n	8003b6a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	4929      	ldr	r1, [pc, #164]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b76:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	4924      	ldr	r1, [pc, #144]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
 8003b82:	e006      	b.n	8003b92 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	491f      	ldr	r1, [pc, #124]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d006      	beq.n	8003bac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	491a      	ldr	r1, [pc, #104]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60cb      	str	r3, [r1, #12]
 8003baa:	e006      	b.n	8003bba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bac:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	4915      	ldr	r1, [pc, #84]	; (8003c0c <HAL_GPIO_Init+0x2b0>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f47f aed0 	bne.w	8003970 <HAL_GPIO_Init+0x14>
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	372c      	adds	r7, #44	; 0x2c
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	10210000 	.word	0x10210000
 8003be0:	10110000 	.word	0x10110000
 8003be4:	10120000 	.word	0x10120000
 8003be8:	10310000 	.word	0x10310000
 8003bec:	10320000 	.word	0x10320000
 8003bf0:	10220000 	.word	0x10220000
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40010800 	.word	0x40010800
 8003c00:	40010c00 	.word	0x40010c00
 8003c04:	40011000 	.word	0x40011000
 8003c08:	40011400 	.word	0x40011400
 8003c0c:	40010400 	.word	0x40010400

08003c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	887b      	ldrh	r3, [r7, #2]
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
 8003c2c:	e001      	b.n	8003c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	807b      	strh	r3, [r7, #2]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c4e:	787b      	ldrb	r3, [r7, #1]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c54:	887a      	ldrh	r2, [r7, #2]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c5a:	e003      	b.n	8003c64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c5c:	887b      	ldrh	r3, [r7, #2]
 8003c5e:	041a      	lsls	r2, r3, #16
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	611a      	str	r2, [r3, #16]
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e11f      	b.n	8003ec2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd ff58 	bl	8001b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2224      	movs	r2, #36	; 0x24
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cd4:	f000 fcda 	bl	800468c <HAL_RCC_GetPCLK1Freq>
 8003cd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4a7b      	ldr	r2, [pc, #492]	; (8003ecc <HAL_I2C_Init+0x25c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d807      	bhi.n	8003cf4 <HAL_I2C_Init+0x84>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a7a      	ldr	r2, [pc, #488]	; (8003ed0 <HAL_I2C_Init+0x260>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	bf94      	ite	ls
 8003cec:	2301      	movls	r3, #1
 8003cee:	2300      	movhi	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e006      	b.n	8003d02 <HAL_I2C_Init+0x92>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a77      	ldr	r2, [pc, #476]	; (8003ed4 <HAL_I2C_Init+0x264>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	bf94      	ite	ls
 8003cfc:	2301      	movls	r3, #1
 8003cfe:	2300      	movhi	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e0db      	b.n	8003ec2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a72      	ldr	r2, [pc, #456]	; (8003ed8 <HAL_I2C_Init+0x268>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	0c9b      	lsrs	r3, r3, #18
 8003d14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4a64      	ldr	r2, [pc, #400]	; (8003ecc <HAL_I2C_Init+0x25c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d802      	bhi.n	8003d44 <HAL_I2C_Init+0xd4>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	3301      	adds	r3, #1
 8003d42:	e009      	b.n	8003d58 <HAL_I2C_Init+0xe8>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	4a63      	ldr	r2, [pc, #396]	; (8003edc <HAL_I2C_Init+0x26c>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	3301      	adds	r3, #1
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4956      	ldr	r1, [pc, #344]	; (8003ecc <HAL_I2C_Init+0x25c>)
 8003d74:	428b      	cmp	r3, r1
 8003d76:	d80d      	bhi.n	8003d94 <HAL_I2C_Init+0x124>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1e59      	subs	r1, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	bf38      	it	cc
 8003d90:	2304      	movcc	r3, #4
 8003d92:	e04f      	b.n	8003e34 <HAL_I2C_Init+0x1c4>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d111      	bne.n	8003dc0 <HAL_I2C_Init+0x150>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1e58      	subs	r0, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	440b      	add	r3, r1
 8003daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dae:	3301      	adds	r3, #1
 8003db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e012      	b.n	8003de6 <HAL_I2C_Init+0x176>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	1e58      	subs	r0, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	0099      	lsls	r1, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_Init+0x17e>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e022      	b.n	8003e34 <HAL_I2C_Init+0x1c4>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10e      	bne.n	8003e14 <HAL_I2C_Init+0x1a4>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1e58      	subs	r0, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6859      	ldr	r1, [r3, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	440b      	add	r3, r1
 8003e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e08:	3301      	adds	r3, #1
 8003e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e12:	e00f      	b.n	8003e34 <HAL_I2C_Init+0x1c4>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1e58      	subs	r0, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	0099      	lsls	r1, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	6809      	ldr	r1, [r1, #0]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69da      	ldr	r2, [r3, #28]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6911      	ldr	r1, [r2, #16]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68d2      	ldr	r2, [r2, #12]
 8003e6e:	4311      	orrs	r1, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	000186a0 	.word	0x000186a0
 8003ed0:	001e847f 	.word	0x001e847f
 8003ed4:	003d08ff 	.word	0x003d08ff
 8003ed8:	431bde83 	.word	0x431bde83
 8003edc:	10624dd3 	.word	0x10624dd3

08003ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e26c      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8087 	beq.w	800400e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f00:	4b92      	ldr	r3, [pc, #584]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d00c      	beq.n	8003f26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f0c:	4b8f      	ldr	r3, [pc, #572]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d112      	bne.n	8003f3e <HAL_RCC_OscConfig+0x5e>
 8003f18:	4b8c      	ldr	r3, [pc, #560]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f24:	d10b      	bne.n	8003f3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f26:	4b89      	ldr	r3, [pc, #548]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d06c      	beq.n	800400c <HAL_RCC_OscConfig+0x12c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d168      	bne.n	800400c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e246      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f46:	d106      	bne.n	8003f56 <HAL_RCC_OscConfig+0x76>
 8003f48:	4b80      	ldr	r3, [pc, #512]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a7f      	ldr	r2, [pc, #508]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	e02e      	b.n	8003fb4 <HAL_RCC_OscConfig+0xd4>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x98>
 8003f5e:	4b7b      	ldr	r3, [pc, #492]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a7a      	ldr	r2, [pc, #488]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b78      	ldr	r3, [pc, #480]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a77      	ldr	r2, [pc, #476]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e01d      	b.n	8003fb4 <HAL_RCC_OscConfig+0xd4>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0xbc>
 8003f82:	4b72      	ldr	r3, [pc, #456]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a71      	ldr	r2, [pc, #452]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	4b6f      	ldr	r3, [pc, #444]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a6e      	ldr	r2, [pc, #440]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCC_OscConfig+0xd4>
 8003f9c:	4b6b      	ldr	r3, [pc, #428]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a6a      	ldr	r2, [pc, #424]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b68      	ldr	r3, [pc, #416]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a67      	ldr	r2, [pc, #412]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d013      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7ff fa60 	bl	8003480 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7ff fa5c 	bl	8003480 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e1fa      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	4b5d      	ldr	r3, [pc, #372]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0xe4>
 8003fe2:	e014      	b.n	800400e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7ff fa4c 	bl	8003480 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fec:	f7ff fa48 	bl	8003480 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e1e6      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffe:	4b53      	ldr	r3, [pc, #332]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x10c>
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d063      	beq.n	80040e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800401a:	4b4c      	ldr	r3, [pc, #304]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004026:	4b49      	ldr	r3, [pc, #292]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b08      	cmp	r3, #8
 8004030:	d11c      	bne.n	800406c <HAL_RCC_OscConfig+0x18c>
 8004032:	4b46      	ldr	r3, [pc, #280]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d116      	bne.n	800406c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403e:	4b43      	ldr	r3, [pc, #268]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_RCC_OscConfig+0x176>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d001      	beq.n	8004056 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e1ba      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004056:	4b3d      	ldr	r3, [pc, #244]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4939      	ldr	r1, [pc, #228]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406a:	e03a      	b.n	80040e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004074:	4b36      	ldr	r3, [pc, #216]	; (8004150 <HAL_RCC_OscConfig+0x270>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7ff fa01 	bl	8003480 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004082:	f7ff f9fd 	bl	8003480 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e19b      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004094:	4b2d      	ldr	r3, [pc, #180]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a0:	4b2a      	ldr	r3, [pc, #168]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4927      	ldr	r1, [pc, #156]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]
 80040b4:	e015      	b.n	80040e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b6:	4b26      	ldr	r3, [pc, #152]	; (8004150 <HAL_RCC_OscConfig+0x270>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7ff f9e0 	bl	8003480 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c4:	f7ff f9dc 	bl	8003480 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e17a      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d6:	4b1d      	ldr	r3, [pc, #116]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d03a      	beq.n	8004164 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d019      	beq.n	800412a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f6:	4b17      	ldr	r3, [pc, #92]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fc:	f7ff f9c0 	bl	8003480 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004104:	f7ff f9bc 	bl	8003480 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e15a      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <HAL_RCC_OscConfig+0x26c>)
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004122:	2001      	movs	r0, #1
 8004124:	f000 fb0a 	bl	800473c <RCC_Delay>
 8004128:	e01c      	b.n	8004164 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412a:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <HAL_RCC_OscConfig+0x274>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004130:	f7ff f9a6 	bl	8003480 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004136:	e00f      	b.n	8004158 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004138:	f7ff f9a2 	bl	8003480 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d908      	bls.n	8004158 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e140      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000
 8004150:	42420000 	.word	0x42420000
 8004154:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004158:	4b9e      	ldr	r3, [pc, #632]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e9      	bne.n	8004138 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80a6 	beq.w	80042be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004172:	2300      	movs	r3, #0
 8004174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004176:	4b97      	ldr	r3, [pc, #604]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10d      	bne.n	800419e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004182:	4b94      	ldr	r3, [pc, #592]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	4a93      	ldr	r2, [pc, #588]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418c:	61d3      	str	r3, [r2, #28]
 800418e:	4b91      	ldr	r3, [pc, #580]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b8e      	ldr	r3, [pc, #568]	; (80043d8 <HAL_RCC_OscConfig+0x4f8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d118      	bne.n	80041dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041aa:	4b8b      	ldr	r3, [pc, #556]	; (80043d8 <HAL_RCC_OscConfig+0x4f8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a8a      	ldr	r2, [pc, #552]	; (80043d8 <HAL_RCC_OscConfig+0x4f8>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b6:	f7ff f963 	bl	8003480 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7ff f95f 	bl	8003480 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b64      	cmp	r3, #100	; 0x64
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e0fd      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d0:	4b81      	ldr	r3, [pc, #516]	; (80043d8 <HAL_RCC_OscConfig+0x4f8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_OscConfig+0x312>
 80041e4:	4b7b      	ldr	r3, [pc, #492]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4a7a      	ldr	r2, [pc, #488]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6213      	str	r3, [r2, #32]
 80041f0:	e02d      	b.n	800424e <HAL_RCC_OscConfig+0x36e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10c      	bne.n	8004214 <HAL_RCC_OscConfig+0x334>
 80041fa:	4b76      	ldr	r3, [pc, #472]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	4a75      	ldr	r2, [pc, #468]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	6213      	str	r3, [r2, #32]
 8004206:	4b73      	ldr	r3, [pc, #460]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	4a72      	ldr	r2, [pc, #456]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 800420c:	f023 0304 	bic.w	r3, r3, #4
 8004210:	6213      	str	r3, [r2, #32]
 8004212:	e01c      	b.n	800424e <HAL_RCC_OscConfig+0x36e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b05      	cmp	r3, #5
 800421a:	d10c      	bne.n	8004236 <HAL_RCC_OscConfig+0x356>
 800421c:	4b6d      	ldr	r3, [pc, #436]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	4a6c      	ldr	r2, [pc, #432]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004222:	f043 0304 	orr.w	r3, r3, #4
 8004226:	6213      	str	r3, [r2, #32]
 8004228:	4b6a      	ldr	r3, [pc, #424]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4a69      	ldr	r2, [pc, #420]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6213      	str	r3, [r2, #32]
 8004234:	e00b      	b.n	800424e <HAL_RCC_OscConfig+0x36e>
 8004236:	4b67      	ldr	r3, [pc, #412]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	4a66      	ldr	r2, [pc, #408]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	6213      	str	r3, [r2, #32]
 8004242:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	4a63      	ldr	r2, [pc, #396]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004248:	f023 0304 	bic.w	r3, r3, #4
 800424c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d015      	beq.n	8004282 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004256:	f7ff f913 	bl	8003480 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425c:	e00a      	b.n	8004274 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425e:	f7ff f90f 	bl	8003480 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f241 3288 	movw	r2, #5000	; 0x1388
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e0ab      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004274:	4b57      	ldr	r3, [pc, #348]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0ee      	beq.n	800425e <HAL_RCC_OscConfig+0x37e>
 8004280:	e014      	b.n	80042ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004282:	f7ff f8fd 	bl	8003480 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004288:	e00a      	b.n	80042a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428a:	f7ff f8f9 	bl	8003480 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f241 3288 	movw	r2, #5000	; 0x1388
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e095      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a0:	4b4c      	ldr	r3, [pc, #304]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1ee      	bne.n	800428a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d105      	bne.n	80042be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b2:	4b48      	ldr	r3, [pc, #288]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	4a47      	ldr	r2, [pc, #284]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 80042b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8081 	beq.w	80043ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c8:	4b42      	ldr	r3, [pc, #264]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d061      	beq.n	8004398 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d146      	bne.n	800436a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042dc:	4b3f      	ldr	r3, [pc, #252]	; (80043dc <HAL_RCC_OscConfig+0x4fc>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7ff f8cd 	bl	8003480 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ea:	f7ff f8c9 	bl	8003480 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e067      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042fc:	4b35      	ldr	r3, [pc, #212]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f0      	bne.n	80042ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004310:	d108      	bne.n	8004324 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004312:	4b30      	ldr	r3, [pc, #192]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	492d      	ldr	r1, [pc, #180]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004324:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a19      	ldr	r1, [r3, #32]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	430b      	orrs	r3, r1
 8004336:	4927      	ldr	r1, [pc, #156]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800433c:	4b27      	ldr	r3, [pc, #156]	; (80043dc <HAL_RCC_OscConfig+0x4fc>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7ff f89d 	bl	8003480 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434a:	f7ff f899 	bl	8003480 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e037      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800435c:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x46a>
 8004368:	e02f      	b.n	80043ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <HAL_RCC_OscConfig+0x4fc>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7ff f886 	bl	8003480 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7ff f882 	bl	8003480 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e020      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x498>
 8004396:	e018      	b.n	80043ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e013      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_OscConfig+0x4f4>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d106      	bne.n	80043c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d001      	beq.n	80043ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40007000 	.word	0x40007000
 80043dc:	42420060 	.word	0x42420060

080043e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0d0      	b.n	8004596 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043f4:	4b6a      	ldr	r3, [pc, #424]	; (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d910      	bls.n	8004424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b67      	ldr	r3, [pc, #412]	; (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 0207 	bic.w	r2, r3, #7
 800440a:	4965      	ldr	r1, [pc, #404]	; (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004412:	4b63      	ldr	r3, [pc, #396]	; (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d001      	beq.n	8004424 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0b8      	b.n	8004596 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800443c:	4b59      	ldr	r3, [pc, #356]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4a58      	ldr	r2, [pc, #352]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004446:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004454:	4b53      	ldr	r3, [pc, #332]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4a52      	ldr	r2, [pc, #328]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 800445a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800445e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004460:	4b50      	ldr	r3, [pc, #320]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	494d      	ldr	r1, [pc, #308]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d040      	beq.n	8004500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d107      	bne.n	8004496 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004486:	4b47      	ldr	r3, [pc, #284]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d115      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e07f      	b.n	8004596 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d107      	bne.n	80044ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449e:	4b41      	ldr	r3, [pc, #260]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e073      	b.n	8004596 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ae:	4b3d      	ldr	r3, [pc, #244]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e06b      	b.n	8004596 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044be:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f023 0203 	bic.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4936      	ldr	r1, [pc, #216]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d0:	f7fe ffd6 	bl	8003480 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d8:	f7fe ffd2 	bl	8003480 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e053      	b.n	8004596 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	4b2d      	ldr	r3, [pc, #180]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 020c 	and.w	r2, r3, #12
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1eb      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004500:	4b27      	ldr	r3, [pc, #156]	; (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d210      	bcs.n	8004530 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 0207 	bic.w	r2, r3, #7
 8004516:	4922      	ldr	r1, [pc, #136]	; (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b20      	ldr	r3, [pc, #128]	; (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e032      	b.n	8004596 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800453c:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4916      	ldr	r1, [pc, #88]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 800454a:	4313      	orrs	r3, r2
 800454c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	490e      	ldr	r1, [pc, #56]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800456e:	f000 f821 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 8004572:	4601      	mov	r1, r0
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004580:	5cd3      	ldrb	r3, [r2, r3]
 8004582:	fa21 f303 	lsr.w	r3, r1, r3
 8004586:	4a09      	ldr	r2, [pc, #36]	; (80045ac <HAL_RCC_ClockConfig+0x1cc>)
 8004588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <HAL_RCC_ClockConfig+0x1d0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd fb68 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40022000 	.word	0x40022000
 80045a4:	40021000 	.word	0x40021000
 80045a8:	080088d4 	.word	0x080088d4
 80045ac:	20000018 	.word	0x20000018
 80045b0:	20000040 	.word	0x20000040

080045b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b4:	b490      	push	{r4, r7}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045ba:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045bc:	1d3c      	adds	r4, r7, #4
 80045be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045c4:	4b28      	ldr	r3, [pc, #160]	; (8004668 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	2300      	movs	r3, #0
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045de:	4b23      	ldr	r3, [pc, #140]	; (800466c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d002      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0x40>
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d003      	beq.n	80045fa <HAL_RCC_GetSysClockFreq+0x46>
 80045f2:	e02d      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045f4:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045f6:	623b      	str	r3, [r7, #32]
      break;
 80045f8:	e02d      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	0c9b      	lsrs	r3, r3, #18
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004606:	4413      	add	r3, r2
 8004608:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800460c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d013      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <HAL_RCC_GetSysClockFreq+0xb8>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	0c5b      	lsrs	r3, r3, #17
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004626:	4413      	add	r3, r2
 8004628:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800462c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004632:	fb02 f203 	mul.w	r2, r2, r3
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
 800463e:	e004      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	4a0c      	ldr	r2, [pc, #48]	; (8004674 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004644:	fb02 f303 	mul.w	r3, r2, r3
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	623b      	str	r3, [r7, #32]
      break;
 800464e:	e002      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004652:	623b      	str	r3, [r7, #32]
      break;
 8004654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004656:	6a3b      	ldr	r3, [r7, #32]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3728      	adds	r7, #40	; 0x28
 800465c:	46bd      	mov	sp, r7
 800465e:	bc90      	pop	{r4, r7}
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	080087f4 	.word	0x080087f4
 8004668:	08008804 	.word	0x08008804
 800466c:	40021000 	.word	0x40021000
 8004670:	007a1200 	.word	0x007a1200
 8004674:	003d0900 	.word	0x003d0900

08004678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b02      	ldr	r3, [pc, #8]	; (8004688 <HAL_RCC_GetHCLKFreq+0x10>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	20000018 	.word	0x20000018

0800468c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004690:	f7ff fff2 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 8004694:	4601      	mov	r1, r0
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	4a03      	ldr	r2, [pc, #12]	; (80046b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a2:	5cd3      	ldrb	r3, [r2, r3]
 80046a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	080088e4 	.word	0x080088e4

080046b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046b8:	f7ff ffde 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80046bc:	4601      	mov	r1, r0
 80046be:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	0adb      	lsrs	r3, r3, #11
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	4a03      	ldr	r2, [pc, #12]	; (80046d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ca:	5cd3      	ldrb	r3, [r2, r3]
 80046cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	080088e4 	.word	0x080088e4

080046dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	220f      	movs	r2, #15
 80046ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046ec:	4b11      	ldr	r3, [pc, #68]	; (8004734 <HAL_RCC_GetClockConfig+0x58>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0203 	and.w	r2, r3, #3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <HAL_RCC_GetClockConfig+0x58>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_RCC_GetClockConfig+0x58>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004710:	4b08      	ldr	r3, [pc, #32]	; (8004734 <HAL_RCC_GetClockConfig+0x58>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	08db      	lsrs	r3, r3, #3
 8004716:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <HAL_RCC_GetClockConfig+0x5c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0207 	and.w	r2, r3, #7
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	40021000 	.word	0x40021000
 8004738:	40022000 	.word	0x40022000

0800473c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <RCC_Delay+0x34>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <RCC_Delay+0x38>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0a5b      	lsrs	r3, r3, #9
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004758:	bf00      	nop
  }
  while (Delay --);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1e5a      	subs	r2, r3, #1
 800475e:	60fa      	str	r2, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f9      	bne.n	8004758 <RCC_Delay+0x1c>
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	20000018 	.word	0x20000018
 8004774:	10624dd3 	.word	0x10624dd3

08004778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e076      	b.n	8004878 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	2b00      	cmp	r3, #0
 8004790:	d108      	bne.n	80047a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479a:	d009      	beq.n	80047b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	61da      	str	r2, [r3, #28]
 80047a2:	e005      	b.n	80047b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fd f9fe 	bl	8001bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	ea42 0103 	orr.w	r1, r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	0c1a      	lsrs	r2, r3, #16
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f002 0204 	and.w	r2, r2, #4
 8004856:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69da      	ldr	r2, [r3, #28]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004866:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08c      	sub	sp, #48	; 0x30
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800488e:	2301      	movs	r3, #1
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_SPI_TransmitReceive+0x26>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e18a      	b.n	8004bbc <HAL_SPI_TransmitReceive+0x33c>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ae:	f7fe fde7 	bl	8003480 <HAL_GetTick>
 80048b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80048c4:	887b      	ldrh	r3, [r7, #2]
 80048c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d00f      	beq.n	80048f0 <HAL_SPI_TransmitReceive+0x70>
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048d6:	d107      	bne.n	80048e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d103      	bne.n	80048e8 <HAL_SPI_TransmitReceive+0x68>
 80048e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d003      	beq.n	80048f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048e8:	2302      	movs	r3, #2
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048ee:	e15b      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_SPI_TransmitReceive+0x82>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_SPI_TransmitReceive+0x82>
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d103      	bne.n	800490a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004908:	e14e      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b04      	cmp	r3, #4
 8004914:	d003      	beq.n	800491e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2205      	movs	r2, #5
 800491a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	887a      	ldrh	r2, [r7, #2]
 800492e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	887a      	ldrh	r2, [r7, #2]
 8004940:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	887a      	ldrh	r2, [r7, #2]
 8004946:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d007      	beq.n	8004972 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800497a:	d178      	bne.n	8004a6e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_SPI_TransmitReceive+0x10a>
 8004984:	8b7b      	ldrh	r3, [r7, #26]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d166      	bne.n	8004a58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	881a      	ldrh	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	1c9a      	adds	r2, r3, #2
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ae:	e053      	b.n	8004a58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d11b      	bne.n	80049f6 <HAL_SPI_TransmitReceive+0x176>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d016      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x176>
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d113      	bne.n	80049f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	881a      	ldrh	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	1c9a      	adds	r2, r3, #2
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d119      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x1b8>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d014      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	b292      	uxth	r2, r2
 8004a1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	1c9a      	adds	r2, r3, #2
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a34:	2301      	movs	r3, #1
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a38:	f7fe fd22 	bl	8003480 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d807      	bhi.n	8004a58 <HAL_SPI_TransmitReceive+0x1d8>
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d003      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a56:	e0a7      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1a6      	bne.n	80049b0 <HAL_SPI_TransmitReceive+0x130>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1a1      	bne.n	80049b0 <HAL_SPI_TransmitReceive+0x130>
 8004a6c:	e07c      	b.n	8004b68 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_TransmitReceive+0x1fc>
 8004a76:	8b7b      	ldrh	r3, [r7, #26]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d16b      	bne.n	8004b54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	7812      	ldrb	r2, [r2, #0]
 8004a88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa2:	e057      	b.n	8004b54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d11c      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x26c>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d017      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x26c>
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d114      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	330c      	adds	r3, #12
 8004acc:	7812      	ldrb	r2, [r2, #0]
 8004ace:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d119      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x2ae>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d014      	beq.n	8004b2e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b2e:	f7fe fca7 	bl	8003480 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d803      	bhi.n	8004b46 <HAL_SPI_TransmitReceive+0x2c6>
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d102      	bne.n	8004b4c <HAL_SPI_TransmitReceive+0x2cc>
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b52:	e029      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1a2      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x224>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d19d      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f8b1 	bl	8004cd4 <SPI_EndRxTxTransaction>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d006      	beq.n	8004b86 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b84:	e010      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10b      	bne.n	8004ba6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	e000      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ba6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3730      	adds	r7, #48	; 0x30
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bd4:	f7fe fc54 	bl	8003480 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	4413      	add	r3, r2
 8004be2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004be4:	f7fe fc4c 	bl	8003480 <HAL_GetTick>
 8004be8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bea:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	015b      	lsls	r3, r3, #5
 8004bf0:	0d1b      	lsrs	r3, r3, #20
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	fb02 f303 	mul.w	r3, r2, r3
 8004bf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bfa:	e054      	b.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d050      	beq.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c04:	f7fe fc3c 	bl	8003480 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d902      	bls.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d13d      	bne.n	8004c96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c32:	d111      	bne.n	8004c58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c3c:	d004      	beq.n	8004c48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c46:	d107      	bne.n	8004c58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c60:	d10f      	bne.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e017      	b.n	8004cc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	bf0c      	ite	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	2300      	movne	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d19b      	bne.n	8004bfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000018 	.word	0x20000018

08004cd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2180      	movs	r1, #128	; 0x80
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff ff6a 	bl	8004bc4 <SPI_WaitFlagStateUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e000      	b.n	8004d08 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e041      	b.n	8004da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f839 	bl	8004dae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f000 f9b4 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d001      	beq.n	8004dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e03a      	b.n	8004e4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a18      	ldr	r2, [pc, #96]	; (8004e58 <HAL_TIM_Base_Start_IT+0x98>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00e      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x58>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e02:	d009      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x58>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <HAL_TIM_Base_Start_IT+0x9c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x58>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d111      	bne.n	8004e3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b06      	cmp	r3, #6
 8004e28:	d010      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0201 	orr.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3a:	e007      	b.n	8004e4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800

08004e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d122      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d11b      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0202 	mvn.w	r2, #2
 8004e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f8ed 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f8e0 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f8ef 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d122      	bne.n	8004f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d11b      	bne.n	8004f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0204 	mvn.w	r2, #4
 8004ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f8c3 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8b6 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f8c5 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d122      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d11b      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0208 	mvn.w	r2, #8
 8004f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f899 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004f54:	e005      	b.n	8004f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f88c 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f89b 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d122      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d11b      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0210 	mvn.w	r2, #16
 8004f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2208      	movs	r2, #8
 8004f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f86f 	bl	8005086 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f862 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f871 	bl	8005098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d107      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0201 	mvn.w	r2, #1
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc fd62 	bl	8001aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff2:	2b80      	cmp	r3, #128	; 0x80
 8004ff4:	d10e      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005000:	2b80      	cmp	r3, #128	; 0x80
 8005002:	d107      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800500c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8bf 	bl	8005192 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d10e      	bne.n	8005040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d107      	bne.n	8005040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f835 	bl	80050aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b20      	cmp	r3, #32
 800504c:	d10e      	bne.n	800506c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b20      	cmp	r3, #32
 800505a:	d107      	bne.n	800506c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0220 	mvn.w	r2, #32
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f88a 	bl	8005180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr

08005086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a29      	ldr	r2, [pc, #164]	; (8005174 <TIM_Base_SetConfig+0xb8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_Base_SetConfig+0x30>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d007      	beq.n	80050ec <TIM_Base_SetConfig+0x30>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a26      	ldr	r2, [pc, #152]	; (8005178 <TIM_Base_SetConfig+0xbc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0x30>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a25      	ldr	r2, [pc, #148]	; (800517c <TIM_Base_SetConfig+0xc0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d108      	bne.n	80050fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <TIM_Base_SetConfig+0xb8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00b      	beq.n	800511e <TIM_Base_SetConfig+0x62>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510c:	d007      	beq.n	800511e <TIM_Base_SetConfig+0x62>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a19      	ldr	r2, [pc, #100]	; (8005178 <TIM_Base_SetConfig+0xbc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <TIM_Base_SetConfig+0x62>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a18      	ldr	r2, [pc, #96]	; (800517c <TIM_Base_SetConfig+0xc0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d108      	bne.n	8005130 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a07      	ldr	r2, [pc, #28]	; (8005174 <TIM_Base_SetConfig+0xb8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d103      	bne.n	8005164 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	615a      	str	r2, [r3, #20]
}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800

08005180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051aa:	f3ef 8305 	mrs	r3, IPSR
 80051ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80051b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10f      	bne.n	80051d6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b6:	f3ef 8310 	mrs	r3, PRIMASK
 80051ba:	607b      	str	r3, [r7, #4]
  return(result);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <osKernelInitialize+0x32>
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <osKernelInitialize+0x60>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d109      	bne.n	80051de <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051ca:	f3ef 8311 	mrs	r3, BASEPRI
 80051ce:	603b      	str	r3, [r7, #0]
  return(result);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80051d6:	f06f 0305 	mvn.w	r3, #5
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e00c      	b.n	80051f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <osKernelInitialize+0x60>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d105      	bne.n	80051f2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80051e6:	4b07      	ldr	r3, [pc, #28]	; (8005204 <osKernelInitialize+0x60>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e002      	b.n	80051f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295
 80051f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80051f8:	68fb      	ldr	r3, [r7, #12]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	200000a0 	.word	0x200000a0

08005208 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800520e:	f3ef 8305 	mrs	r3, IPSR
 8005212:	60bb      	str	r3, [r7, #8]
  return(result);
 8005214:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10f      	bne.n	800523a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521a:	f3ef 8310 	mrs	r3, PRIMASK
 800521e:	607b      	str	r3, [r7, #4]
  return(result);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <osKernelStart+0x32>
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <osKernelStart+0x64>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d109      	bne.n	8005242 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800522e:	f3ef 8311 	mrs	r3, BASEPRI
 8005232:	603b      	str	r3, [r7, #0]
  return(result);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <osKernelStart+0x3a>
    stat = osErrorISR;
 800523a:	f06f 0305 	mvn.w	r3, #5
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	e00e      	b.n	8005260 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005242:	4b0a      	ldr	r3, [pc, #40]	; (800526c <osKernelStart+0x64>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d107      	bne.n	800525a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <osKernelStart+0x64>)
 800524c:	2202      	movs	r2, #2
 800524e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005250:	f001 f864 	bl	800631c <vTaskStartScheduler>
      stat = osOK;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e002      	b.n	8005260 <osKernelStart+0x58>
    } else {
      stat = osError;
 800525a:	f04f 33ff 	mov.w	r3, #4294967295
 800525e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005260:	68fb      	ldr	r3, [r7, #12]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	200000a0 	.word	0x200000a0

08005270 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b092      	sub	sp, #72	; 0x48
 8005274:	af04      	add	r7, sp, #16
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005280:	f3ef 8305 	mrs	r3, IPSR
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005288:	2b00      	cmp	r3, #0
 800528a:	f040 8094 	bne.w	80053b6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528e:	f3ef 8310 	mrs	r3, PRIMASK
 8005292:	623b      	str	r3, [r7, #32]
  return(result);
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f040 808d 	bne.w	80053b6 <osThreadNew+0x146>
 800529c:	4b48      	ldr	r3, [pc, #288]	; (80053c0 <osThreadNew+0x150>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d106      	bne.n	80052b2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052a4:	f3ef 8311 	mrs	r3, BASEPRI
 80052a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 8082 	bne.w	80053b6 <osThreadNew+0x146>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d07e      	beq.n	80053b6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80052bc:	2318      	movs	r3, #24
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80052c0:	2300      	movs	r3, #0
 80052c2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80052c4:	f107 031b 	add.w	r3, r7, #27
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80052ca:	f04f 33ff 	mov.w	r3, #4294967295
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d045      	beq.n	8005362 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <osThreadNew+0x74>
        name = attr->name;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <osThreadNew+0x9a>
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	2b38      	cmp	r3, #56	; 0x38
 80052fc:	d805      	bhi.n	800530a <osThreadNew+0x9a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <osThreadNew+0x9e>
        return (NULL);
 800530a:	2300      	movs	r3, #0
 800530c:	e054      	b.n	80053b8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	089b      	lsrs	r3, r3, #2
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00e      	beq.n	8005344 <osThreadNew+0xd4>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b5b      	cmp	r3, #91	; 0x5b
 800532c:	d90a      	bls.n	8005344 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005332:	2b00      	cmp	r3, #0
 8005334:	d006      	beq.n	8005344 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <osThreadNew+0xd4>
        mem = 1;
 800533e:	2301      	movs	r3, #1
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
 8005342:	e010      	b.n	8005366 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10c      	bne.n	8005366 <osThreadNew+0xf6>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d108      	bne.n	8005366 <osThreadNew+0xf6>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d104      	bne.n	8005366 <osThreadNew+0xf6>
          mem = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005360:	e001      	b.n	8005366 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	2b01      	cmp	r3, #1
 800536a:	d110      	bne.n	800538e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005374:	9202      	str	r2, [sp, #8]
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005380:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fe02 	bl	8005f8c <xTaskCreateStatic>
 8005388:	4603      	mov	r3, r0
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e013      	b.n	80053b6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d110      	bne.n	80053b6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	b29a      	uxth	r2, r3
 8005398:	f107 0314 	add.w	r3, r7, #20
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fe49 	bl	800603e <xTaskCreate>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d001      	beq.n	80053b6 <osThreadNew+0x146>
          hTask = NULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80053b6:	697b      	ldr	r3, [r7, #20]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3738      	adds	r7, #56	; 0x38
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	200000a0 	.word	0x200000a0

080053c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053cc:	f3ef 8305 	mrs	r3, IPSR
 80053d0:	613b      	str	r3, [r7, #16]
  return(result);
 80053d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10f      	bne.n	80053f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d8:	f3ef 8310 	mrs	r3, PRIMASK
 80053dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <osDelay+0x34>
 80053e4:	4b0d      	ldr	r3, [pc, #52]	; (800541c <osDelay+0x58>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d109      	bne.n	8005400 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053ec:	f3ef 8311 	mrs	r3, BASEPRI
 80053f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <osDelay+0x3c>
    stat = osErrorISR;
 80053f8:	f06f 0305 	mvn.w	r3, #5
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e007      	b.n	8005410 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <osDelay+0x4c>
      vTaskDelay(ticks);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 ff52 	bl	80062b4 <vTaskDelay>
    }
  }

  return (stat);
 8005410:	697b      	ldr	r3, [r7, #20]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	200000a0 	.word	0x200000a0

08005420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a06      	ldr	r2, [pc, #24]	; (8005448 <vApplicationGetIdleTaskMemory+0x28>)
 8005430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a05      	ldr	r2, [pc, #20]	; (800544c <vApplicationGetIdleTaskMemory+0x2c>)
 8005436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2280      	movs	r2, #128	; 0x80
 800543c:	601a      	str	r2, [r3, #0]
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	200000a4 	.word	0x200000a4
 800544c:	20000100 	.word	0x20000100

08005450 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4a07      	ldr	r2, [pc, #28]	; (800547c <vApplicationGetTimerTaskMemory+0x2c>)
 8005460:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4a06      	ldr	r2, [pc, #24]	; (8005480 <vApplicationGetTimerTaskMemory+0x30>)
 8005466:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800546e:	601a      	str	r2, [r3, #0]
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000300 	.word	0x20000300
 8005480:	2000035c 	.word	0x2000035c

08005484 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f103 0208 	add.w	r2, r3, #8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f04f 32ff 	mov.w	r2, #4294967295
 800549c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f103 0208 	add.w	r2, r3, #8
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f103 0208 	add.w	r2, r3, #8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr

080054c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bc80      	pop	{r7}
 80054d8:	4770      	bx	lr

080054da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	601a      	str	r2, [r3, #0]
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d103      	bne.n	8005540 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	e00c      	b.n	800555a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3308      	adds	r3, #8
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	e002      	b.n	800554e <vListInsert+0x2e>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	429a      	cmp	r2, r3
 8005558:	d2f6      	bcs.n	8005548 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6892      	ldr	r2, [r2, #8]
 80055a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6852      	ldr	r2, [r2, #4]
 80055b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d103      	bne.n	80055c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	1e5a      	subs	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
	...

080055e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	e7fe      	b.n	800560a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800560c:	f001 ff94 	bl	8007538 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005618:	68f9      	ldr	r1, [r7, #12]
 800561a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	441a      	add	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	3b01      	subs	r3, #1
 800563e:	68f9      	ldr	r1, [r7, #12]
 8005640:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005642:	fb01 f303 	mul.w	r3, r1, r3
 8005646:	441a      	add	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	22ff      	movs	r2, #255	; 0xff
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	22ff      	movs	r2, #255	; 0xff
 8005658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d114      	bne.n	800568c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01a      	beq.n	80056a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3310      	adds	r3, #16
 800566e:	4618      	mov	r0, r3
 8005670:	f001 f8d8 	bl	8006824 <xTaskRemoveFromEventList>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d012      	beq.n	80056a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <xQueueGenericReset+0xcc>)
 800567c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	e009      	b.n	80056a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3310      	adds	r3, #16
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff fef7 	bl	8005484 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3324      	adds	r3, #36	; 0x24
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fef2 	bl	8005484 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80056a0:	f001 ff78 	bl	8007594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056a4:	2301      	movs	r3, #1
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08e      	sub	sp, #56	; 0x38
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <xQueueGenericCreateStatic+0x28>
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056da:	e7fe      	b.n	80056da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <xQueueGenericCreateStatic+0x42>
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	e7fe      	b.n	80056f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <xQueueGenericCreateStatic+0x4e>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <xQueueGenericCreateStatic+0x52>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <xQueueGenericCreateStatic+0x54>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <xQueueGenericCreateStatic+0x6c>
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	e7fe      	b.n	800571e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d102      	bne.n	800572c <xQueueGenericCreateStatic+0x78>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <xQueueGenericCreateStatic+0x7c>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <xQueueGenericCreateStatic+0x7e>
 8005730:	2300      	movs	r3, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <xQueueGenericCreateStatic+0x96>
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	e7fe      	b.n	8005748 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800574a:	2350      	movs	r3, #80	; 0x50
 800574c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b50      	cmp	r3, #80	; 0x50
 8005752:	d009      	beq.n	8005768 <xQueueGenericCreateStatic+0xb4>
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e7fe      	b.n	8005766 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00d      	beq.n	800578e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800577a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f805 	bl	8005798 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005790:	4618      	mov	r0, r3
 8005792:	3730      	adds	r7, #48	; 0x30
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d103      	bne.n	80057b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e002      	b.n	80057ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057c6:	2101      	movs	r1, #1
 80057c8:	69b8      	ldr	r0, [r7, #24]
 80057ca:	f7ff ff0b 	bl	80055e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08e      	sub	sp, #56	; 0x38
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057ee:	2300      	movs	r3, #0
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <xQueueGenericSend+0x30>
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
 800580e:	e7fe      	b.n	800580e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <xQueueGenericSend+0x3e>
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <xQueueGenericSend+0x42>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <xQueueGenericSend+0x44>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <xQueueGenericSend+0x5c>
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	e7fe      	b.n	800583a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d103      	bne.n	800584a <xQueueGenericSend+0x6a>
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <xQueueGenericSend+0x6e>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <xQueueGenericSend+0x70>
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d109      	bne.n	8005868 <xQueueGenericSend+0x88>
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	623b      	str	r3, [r7, #32]
 8005866:	e7fe      	b.n	8005866 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005868:	f001 f996 	bl	8006b98 <xTaskGetSchedulerState>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d102      	bne.n	8005878 <xQueueGenericSend+0x98>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <xQueueGenericSend+0x9c>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <xQueueGenericSend+0x9e>
 800587c:	2300      	movs	r3, #0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <xQueueGenericSend+0xb6>
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e7fe      	b.n	8005894 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005896:	f001 fe4f 	bl	8007538 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d302      	bcc.n	80058ac <xQueueGenericSend+0xcc>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d129      	bne.n	8005900 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b2:	f000 f9ff 	bl	8005cb4 <prvCopyDataToQueue>
 80058b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d010      	beq.n	80058e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	3324      	adds	r3, #36	; 0x24
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 ffad 	bl	8006824 <xTaskRemoveFromEventList>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d013      	beq.n	80058f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058d0:	4b3f      	ldr	r3, [pc, #252]	; (80059d0 <xQueueGenericSend+0x1f0>)
 80058d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	e00a      	b.n	80058f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058e8:	4b39      	ldr	r3, [pc, #228]	; (80059d0 <xQueueGenericSend+0x1f0>)
 80058ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058f8:	f001 fe4c 	bl	8007594 <vPortExitCritical>
				return pdPASS;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e063      	b.n	80059c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005906:	f001 fe45 	bl	8007594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800590a:	2300      	movs	r3, #0
 800590c:	e05c      	b.n	80059c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800590e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005914:	f107 0314 	add.w	r3, r7, #20
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ffe5 	bl	80068e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800591e:	2301      	movs	r3, #1
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005922:	f001 fe37 	bl	8007594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005926:	f000 fd5d 	bl	80063e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800592a:	f001 fe05 	bl	8007538 <vPortEnterCritical>
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005934:	b25b      	sxtb	r3, r3
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d103      	bne.n	8005944 <xQueueGenericSend+0x164>
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800594a:	b25b      	sxtb	r3, r3
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d103      	bne.n	800595a <xQueueGenericSend+0x17a>
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800595a:	f001 fe1b 	bl	8007594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800595e:	1d3a      	adds	r2, r7, #4
 8005960:	f107 0314 	add.w	r3, r7, #20
 8005964:	4611      	mov	r1, r2
 8005966:	4618      	mov	r0, r3
 8005968:	f000 ffd4 	bl	8006914 <xTaskCheckForTimeOut>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d124      	bne.n	80059bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005974:	f000 fa96 	bl	8005ea4 <prvIsQueueFull>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d018      	beq.n	80059b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	3310      	adds	r3, #16
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	4611      	mov	r1, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fefe 	bl	8006788 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800598c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800598e:	f000 fa21 	bl	8005dd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005992:	f000 fd35 	bl	8006400 <xTaskResumeAll>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	f47f af7c 	bne.w	8005896 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800599e:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <xQueueGenericSend+0x1f0>)
 80059a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	e772      	b.n	8005896 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b2:	f000 fa0f 	bl	8005dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059b6:	f000 fd23 	bl	8006400 <xTaskResumeAll>
 80059ba:	e76c      	b.n	8005896 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059be:	f000 fa09 	bl	8005dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059c2:	f000 fd1d 	bl	8006400 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059c6:	2300      	movs	r3, #0
		}
	}
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3738      	adds	r7, #56	; 0x38
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08e      	sub	sp, #56	; 0x38
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d109      	bne.n	8005a00 <xQueueGenericSendFromISR+0x2c>
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
 80059fe:	e7fe      	b.n	80059fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <xQueueGenericSendFromISR+0x3a>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <xQueueGenericSendFromISR+0x3e>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <xQueueGenericSendFromISR+0x40>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d109      	bne.n	8005a2c <xQueueGenericSendFromISR+0x58>
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	e7fe      	b.n	8005a2a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d103      	bne.n	8005a3a <xQueueGenericSendFromISR+0x66>
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <xQueueGenericSendFromISR+0x6a>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <xQueueGenericSendFromISR+0x6c>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d109      	bne.n	8005a58 <xQueueGenericSendFromISR+0x84>
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	e7fe      	b.n	8005a56 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a58:	f001 fe28 	bl	80076ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a5c:	f3ef 8211 	mrs	r2, BASEPRI
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	61ba      	str	r2, [r7, #24]
 8005a72:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d302      	bcc.n	8005a8a <xQueueGenericSendFromISR+0xb6>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d12c      	bne.n	8005ae4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a9a:	f000 f90b 	bl	8005cb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d112      	bne.n	8005ace <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d016      	beq.n	8005ade <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	3324      	adds	r3, #36	; 0x24
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 feb5 	bl	8006824 <xTaskRemoveFromEventList>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00e      	beq.n	8005ade <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e007      	b.n	8005ade <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ace:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	b25a      	sxtb	r2, r3
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005ae2:	e001      	b.n	8005ae8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3738      	adds	r7, #56	; 0x38
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	; 0x30
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <xQueueReceive+0x2e>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	623b      	str	r3, [r7, #32]
 8005b28:	e7fe      	b.n	8005b28 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <xQueueReceive+0x3c>
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <xQueueReceive+0x40>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e000      	b.n	8005b3e <xQueueReceive+0x42>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <xQueueReceive+0x5a>
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e7fe      	b.n	8005b54 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b56:	f001 f81f 	bl	8006b98 <xTaskGetSchedulerState>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <xQueueReceive+0x6a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <xQueueReceive+0x6e>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <xQueueReceive+0x70>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d109      	bne.n	8005b84 <xQueueReceive+0x88>
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	e7fe      	b.n	8005b82 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b84:	f001 fcd8 	bl	8007538 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01f      	beq.n	8005bd4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b98:	f000 f8f6 	bl	8005d88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	1e5a      	subs	r2, r3, #1
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00f      	beq.n	8005bcc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	3310      	adds	r3, #16
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fe37 	bl	8006824 <xTaskRemoveFromEventList>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bbc:	4b3c      	ldr	r3, [pc, #240]	; (8005cb0 <xQueueReceive+0x1b4>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bcc:	f001 fce2 	bl	8007594 <vPortExitCritical>
				return pdPASS;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e069      	b.n	8005ca8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d103      	bne.n	8005be2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bda:	f001 fcdb 	bl	8007594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e062      	b.n	8005ca8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d106      	bne.n	8005bf6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005be8:	f107 0310 	add.w	r3, r7, #16
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fe7b 	bl	80068e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bf6:	f001 fccd 	bl	8007594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bfa:	f000 fbf3 	bl	80063e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bfe:	f001 fc9b 	bl	8007538 <vPortEnterCritical>
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c08:	b25b      	sxtb	r3, r3
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d103      	bne.n	8005c18 <xQueueReceive+0x11c>
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c1e:	b25b      	sxtb	r3, r3
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d103      	bne.n	8005c2e <xQueueReceive+0x132>
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c2e:	f001 fcb1 	bl	8007594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c32:	1d3a      	adds	r2, r7, #4
 8005c34:	f107 0310 	add.w	r3, r7, #16
 8005c38:	4611      	mov	r1, r2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fe6a 	bl	8006914 <xTaskCheckForTimeOut>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d123      	bne.n	8005c8e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c48:	f000 f916 	bl	8005e78 <prvIsQueueEmpty>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d017      	beq.n	8005c82 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	3324      	adds	r3, #36	; 0x24
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fd94 	bl	8006788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c62:	f000 f8b7 	bl	8005dd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c66:	f000 fbcb 	bl	8006400 <xTaskResumeAll>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d189      	bne.n	8005b84 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <xQueueReceive+0x1b4>)
 8005c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	e780      	b.n	8005b84 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c84:	f000 f8a6 	bl	8005dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c88:	f000 fbba 	bl	8006400 <xTaskResumeAll>
 8005c8c:	e77a      	b.n	8005b84 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c90:	f000 f8a0 	bl	8005dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c94:	f000 fbb4 	bl	8006400 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9a:	f000 f8ed 	bl	8005e78 <prvIsQueueEmpty>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f43f af6f 	beq.w	8005b84 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ca6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3730      	adds	r7, #48	; 0x30
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	e000ed04 	.word	0xe000ed04

08005cb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10d      	bne.n	8005cee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d14d      	bne.n	8005d76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 ff78 	bl	8006bd4 <xTaskPriorityDisinherit>
 8005ce4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	605a      	str	r2, [r3, #4]
 8005cec:	e043      	b.n	8005d76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d119      	bne.n	8005d28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6898      	ldr	r0, [r3, #8]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	f001 ff17 	bl	8007b32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	441a      	add	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d32b      	bcc.n	8005d76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	609a      	str	r2, [r3, #8]
 8005d26:	e026      	b.n	8005d76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	68d8      	ldr	r0, [r3, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	461a      	mov	r2, r3
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	f001 fefd 	bl	8007b32 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	425b      	negs	r3, r3
 8005d42:	441a      	add	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d207      	bcs.n	8005d64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	425b      	negs	r3, r3
 8005d5e:	441a      	add	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d105      	bne.n	8005d76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d7e:	697b      	ldr	r3, [r7, #20]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d018      	beq.n	8005dcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	441a      	add	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d303      	bcc.n	8005dbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68d9      	ldr	r1, [r3, #12]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6838      	ldr	r0, [r7, #0]
 8005dc8:	f001 feb3 	bl	8007b32 <memcpy>
	}
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ddc:	f001 fbac 	bl	8007538 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005de6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005de8:	e011      	b.n	8005e0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d012      	beq.n	8005e18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3324      	adds	r3, #36	; 0x24
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fd14 	bl	8006824 <xTaskRemoveFromEventList>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e02:	f000 fde7 	bl	80069d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dce9      	bgt.n	8005dea <prvUnlockQueue+0x16>
 8005e16:	e000      	b.n	8005e1a <prvUnlockQueue+0x46>
					break;
 8005e18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	22ff      	movs	r2, #255	; 0xff
 8005e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e22:	f001 fbb7 	bl	8007594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e26:	f001 fb87 	bl	8007538 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e32:	e011      	b.n	8005e58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d012      	beq.n	8005e62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3310      	adds	r3, #16
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fcef 	bl	8006824 <xTaskRemoveFromEventList>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e4c:	f000 fdc2 	bl	80069d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dce9      	bgt.n	8005e34 <prvUnlockQueue+0x60>
 8005e60:	e000      	b.n	8005e64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	22ff      	movs	r2, #255	; 0xff
 8005e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e6c:	f001 fb92 	bl	8007594 <vPortExitCritical>
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e80:	f001 fb5a 	bl	8007538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e001      	b.n	8005e96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e96:	f001 fb7d 	bl	8007594 <vPortExitCritical>

	return xReturn;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005eac:	f001 fb44 	bl	8007538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d102      	bne.n	8005ec2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e001      	b.n	8005ec6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ec6:	f001 fb65 	bl	8007594 <vPortExitCritical>

	return xReturn;
 8005eca:	68fb      	ldr	r3, [r7, #12]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	e014      	b.n	8005f0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ee4:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <vQueueAddToRegistry+0x4c>)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10b      	bne.n	8005f08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ef0:	490b      	ldr	r1, [pc, #44]	; (8005f20 <vQueueAddToRegistry+0x4c>)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005efa:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <vQueueAddToRegistry+0x4c>)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	4413      	add	r3, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f06:	e005      	b.n	8005f14 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b07      	cmp	r3, #7
 8005f12:	d9e7      	bls.n	8005ee4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20002cc8 	.word	0x20002cc8

08005f24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f34:	f001 fb00 	bl	8007538 <vPortEnterCritical>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f3e:	b25b      	sxtb	r3, r3
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d103      	bne.n	8005f4e <vQueueWaitForMessageRestricted+0x2a>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f54:	b25b      	sxtb	r3, r3
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5a:	d103      	bne.n	8005f64 <vQueueWaitForMessageRestricted+0x40>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f64:	f001 fb16 	bl	8007594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d106      	bne.n	8005f7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	3324      	adds	r3, #36	; 0x24
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fc29 	bl	80067d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f7e:	6978      	ldr	r0, [r7, #20]
 8005f80:	f7ff ff28 	bl	8005dd4 <prvUnlockQueue>
	}
 8005f84:	bf00      	nop
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08e      	sub	sp, #56	; 0x38
 8005f90:	af04      	add	r7, sp, #16
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d109      	bne.n	8005fb4 <xTaskCreateStatic+0x28>
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	623b      	str	r3, [r7, #32]
 8005fb2:	e7fe      	b.n	8005fb2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <xTaskCreateStatic+0x42>
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	e7fe      	b.n	8005fcc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fce:	235c      	movs	r3, #92	; 0x5c
 8005fd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b5c      	cmp	r3, #92	; 0x5c
 8005fd6:	d009      	beq.n	8005fec <xTaskCreateStatic+0x60>
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	e7fe      	b.n	8005fea <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01e      	beq.n	8006030 <xTaskCreateStatic+0xa4>
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01b      	beq.n	8006030 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006000:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	2202      	movs	r2, #2
 8006006:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800600a:	2300      	movs	r3, #0
 800600c:	9303      	str	r3, [sp, #12]
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	9302      	str	r3, [sp, #8]
 8006012:	f107 0314 	add.w	r3, r7, #20
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 f850 	bl	80060c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800602a:	f000 f8d3 	bl	80061d4 <prvAddNewTaskToReadyList>
 800602e:	e001      	b.n	8006034 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006030:	2300      	movs	r3, #0
 8006032:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006034:	697b      	ldr	r3, [r7, #20]
	}
 8006036:	4618      	mov	r0, r3
 8006038:	3728      	adds	r7, #40	; 0x28
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800603e:	b580      	push	{r7, lr}
 8006040:	b08c      	sub	sp, #48	; 0x30
 8006042:	af04      	add	r7, sp, #16
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4618      	mov	r0, r3
 8006054:	f001 fb66 	bl	8007724 <pvPortMalloc>
 8006058:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00e      	beq.n	800607e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006060:	205c      	movs	r0, #92	; 0x5c
 8006062:	f001 fb5f 	bl	8007724 <pvPortMalloc>
 8006066:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
 8006074:	e005      	b.n	8006082 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006076:	6978      	ldr	r0, [r7, #20]
 8006078:	f001 fc16 	bl	80078a8 <vPortFree>
 800607c:	e001      	b.n	8006082 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d017      	beq.n	80060b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	2300      	movs	r3, #0
 8006094:	9303      	str	r3, [sp, #12]
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	9302      	str	r3, [sp, #8]
 800609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68b9      	ldr	r1, [r7, #8]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f80e 	bl	80060c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060ac:	69f8      	ldr	r0, [r7, #28]
 80060ae:	f000 f891 	bl	80061d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060b2:	2301      	movs	r3, #1
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	e002      	b.n	80060be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060b8:	f04f 33ff 	mov.w	r3, #4294967295
 80060bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060be:	69bb      	ldr	r3, [r7, #24]
	}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	461a      	mov	r2, r3
 80060e0:	21a5      	movs	r1, #165	; 0xa5
 80060e2:	f001 fd31 	bl	8007b48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060f0:	3b01      	subs	r3, #1
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f023 0307 	bic.w	r3, r3, #7
 80060fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <prvInitialiseNewTask+0x56>
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	e7fe      	b.n	800611c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800611e:	2300      	movs	r3, #0
 8006120:	61fb      	str	r3, [r7, #28]
 8006122:	e012      	b.n	800614a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	7819      	ldrb	r1, [r3, #0]
 800612c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	4413      	add	r3, r2
 8006132:	3334      	adds	r3, #52	; 0x34
 8006134:	460a      	mov	r2, r1
 8006136:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d006      	beq.n	8006152 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	3301      	adds	r3, #1
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	2b0f      	cmp	r3, #15
 800614e:	d9e9      	bls.n	8006124 <prvInitialiseNewTask+0x5c>
 8006150:	e000      	b.n	8006154 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006152:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	2b37      	cmp	r3, #55	; 0x37
 8006160:	d901      	bls.n	8006166 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006162:	2337      	movs	r3, #55	; 0x37
 8006164:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800616a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006170:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	2200      	movs	r2, #0
 8006176:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	3304      	adds	r3, #4
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff f9a0 	bl	80054c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	3318      	adds	r3, #24
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff f99b 	bl	80054c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006190:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	2200      	movs	r2, #0
 80061a6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	69b8      	ldr	r0, [r7, #24]
 80061b6:	f001 f8d7 	bl	8007368 <pxPortInitialiseStack>
 80061ba:	4602      	mov	r2, r0
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061cc:	bf00      	nop
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061dc:	f001 f9ac 	bl	8007538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061e0:	4b2d      	ldr	r3, [pc, #180]	; (8006298 <prvAddNewTaskToReadyList+0xc4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3301      	adds	r3, #1
 80061e6:	4a2c      	ldr	r2, [pc, #176]	; (8006298 <prvAddNewTaskToReadyList+0xc4>)
 80061e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061ea:	4b2c      	ldr	r3, [pc, #176]	; (800629c <prvAddNewTaskToReadyList+0xc8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061f2:	4a2a      	ldr	r2, [pc, #168]	; (800629c <prvAddNewTaskToReadyList+0xc8>)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061f8:	4b27      	ldr	r3, [pc, #156]	; (8006298 <prvAddNewTaskToReadyList+0xc4>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d110      	bne.n	8006222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006200:	f000 fc0c 	bl	8006a1c <prvInitialiseTaskLists>
 8006204:	e00d      	b.n	8006222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006206:	4b26      	ldr	r3, [pc, #152]	; (80062a0 <prvAddNewTaskToReadyList+0xcc>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d109      	bne.n	8006222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800620e:	4b23      	ldr	r3, [pc, #140]	; (800629c <prvAddNewTaskToReadyList+0xc8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	429a      	cmp	r2, r3
 800621a:	d802      	bhi.n	8006222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800621c:	4a1f      	ldr	r2, [pc, #124]	; (800629c <prvAddNewTaskToReadyList+0xc8>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006222:	4b20      	ldr	r3, [pc, #128]	; (80062a4 <prvAddNewTaskToReadyList+0xd0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3301      	adds	r3, #1
 8006228:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <prvAddNewTaskToReadyList+0xd0>)
 800622a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800622c:	4b1d      	ldr	r3, [pc, #116]	; (80062a4 <prvAddNewTaskToReadyList+0xd0>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006238:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <prvAddNewTaskToReadyList+0xd4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d903      	bls.n	8006248 <prvAddNewTaskToReadyList+0x74>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <prvAddNewTaskToReadyList+0xd4>)
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4a15      	ldr	r2, [pc, #84]	; (80062ac <prvAddNewTaskToReadyList+0xd8>)
 8006256:	441a      	add	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3304      	adds	r3, #4
 800625c:	4619      	mov	r1, r3
 800625e:	4610      	mov	r0, r2
 8006260:	f7ff f93b 	bl	80054da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006264:	f001 f996 	bl	8007594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006268:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <prvAddNewTaskToReadyList+0xcc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00e      	beq.n	800628e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006270:	4b0a      	ldr	r3, [pc, #40]	; (800629c <prvAddNewTaskToReadyList+0xc8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	429a      	cmp	r2, r3
 800627c:	d207      	bcs.n	800628e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800627e:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <prvAddNewTaskToReadyList+0xdc>)
 8006280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800628e:	bf00      	nop
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20000c30 	.word	0x20000c30
 800629c:	2000075c 	.word	0x2000075c
 80062a0:	20000c3c 	.word	0x20000c3c
 80062a4:	20000c4c 	.word	0x20000c4c
 80062a8:	20000c38 	.word	0x20000c38
 80062ac:	20000760 	.word	0x20000760
 80062b0:	e000ed04 	.word	0xe000ed04

080062b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d016      	beq.n	80062f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062c6:	4b13      	ldr	r3, [pc, #76]	; (8006314 <vTaskDelay+0x60>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <vTaskDelay+0x2e>
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	60bb      	str	r3, [r7, #8]
 80062e0:	e7fe      	b.n	80062e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80062e2:	f000 f87f 	bl	80063e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062e6:	2100      	movs	r1, #0
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fcdf 	bl	8006cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062ee:	f000 f887 	bl	8006400 <xTaskResumeAll>
 80062f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d107      	bne.n	800630a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80062fa:	4b07      	ldr	r3, [pc, #28]	; (8006318 <vTaskDelay+0x64>)
 80062fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800630a:	bf00      	nop
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20000c58 	.word	0x20000c58
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08a      	sub	sp, #40	; 0x28
 8006320:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800632a:	463a      	mov	r2, r7
 800632c:	1d39      	adds	r1, r7, #4
 800632e:	f107 0308 	add.w	r3, r7, #8
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff f874 	bl	8005420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	9202      	str	r2, [sp, #8]
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	2300      	movs	r3, #0
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	2300      	movs	r3, #0
 8006348:	460a      	mov	r2, r1
 800634a:	4920      	ldr	r1, [pc, #128]	; (80063cc <vTaskStartScheduler+0xb0>)
 800634c:	4820      	ldr	r0, [pc, #128]	; (80063d0 <vTaskStartScheduler+0xb4>)
 800634e:	f7ff fe1d 	bl	8005f8c <xTaskCreateStatic>
 8006352:	4602      	mov	r2, r0
 8006354:	4b1f      	ldr	r3, [pc, #124]	; (80063d4 <vTaskStartScheduler+0xb8>)
 8006356:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006358:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <vTaskStartScheduler+0xb8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006360:	2301      	movs	r3, #1
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	e001      	b.n	800636a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d102      	bne.n	8006376 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006370:	f000 fcf0 	bl	8006d54 <xTimerCreateTimerTask>
 8006374:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d115      	bne.n	80063a8 <vTaskStartScheduler+0x8c>
 800637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800638e:	4b12      	ldr	r3, [pc, #72]	; (80063d8 <vTaskStartScheduler+0xbc>)
 8006390:	f04f 32ff 	mov.w	r2, #4294967295
 8006394:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006396:	4b11      	ldr	r3, [pc, #68]	; (80063dc <vTaskStartScheduler+0xc0>)
 8006398:	2201      	movs	r2, #1
 800639a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800639c:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <vTaskStartScheduler+0xc4>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063a2:	f001 f859 	bl	8007458 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063a6:	e00d      	b.n	80063c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d109      	bne.n	80063c4 <vTaskStartScheduler+0xa8>
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e7fe      	b.n	80063c2 <vTaskStartScheduler+0xa6>
}
 80063c4:	bf00      	nop
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	08008808 	.word	0x08008808
 80063d0:	080069ed 	.word	0x080069ed
 80063d4:	20000c54 	.word	0x20000c54
 80063d8:	20000c50 	.word	0x20000c50
 80063dc:	20000c3c 	.word	0x20000c3c
 80063e0:	20000c34 	.word	0x20000c34

080063e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80063e8:	4b04      	ldr	r3, [pc, #16]	; (80063fc <vTaskSuspendAll+0x18>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3301      	adds	r3, #1
 80063ee:	4a03      	ldr	r2, [pc, #12]	; (80063fc <vTaskSuspendAll+0x18>)
 80063f0:	6013      	str	r3, [r2, #0]
}
 80063f2:	bf00      	nop
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000c58 	.word	0x20000c58

08006400 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800640a:	2300      	movs	r3, #0
 800640c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800640e:	4b41      	ldr	r3, [pc, #260]	; (8006514 <xTaskResumeAll+0x114>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <xTaskResumeAll+0x2a>
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	e7fe      	b.n	8006428 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800642a:	f001 f885 	bl	8007538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800642e:	4b39      	ldr	r3, [pc, #228]	; (8006514 <xTaskResumeAll+0x114>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3b01      	subs	r3, #1
 8006434:	4a37      	ldr	r2, [pc, #220]	; (8006514 <xTaskResumeAll+0x114>)
 8006436:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006438:	4b36      	ldr	r3, [pc, #216]	; (8006514 <xTaskResumeAll+0x114>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d162      	bne.n	8006506 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006440:	4b35      	ldr	r3, [pc, #212]	; (8006518 <xTaskResumeAll+0x118>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d05e      	beq.n	8006506 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006448:	e02f      	b.n	80064aa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800644a:	4b34      	ldr	r3, [pc, #208]	; (800651c <xTaskResumeAll+0x11c>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3318      	adds	r3, #24
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff f89a 	bl	8005590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3304      	adds	r3, #4
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff f895 	bl	8005590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646a:	4b2d      	ldr	r3, [pc, #180]	; (8006520 <xTaskResumeAll+0x120>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d903      	bls.n	800647a <xTaskResumeAll+0x7a>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	4a2a      	ldr	r2, [pc, #168]	; (8006520 <xTaskResumeAll+0x120>)
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4a27      	ldr	r2, [pc, #156]	; (8006524 <xTaskResumeAll+0x124>)
 8006488:	441a      	add	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3304      	adds	r3, #4
 800648e:	4619      	mov	r1, r3
 8006490:	4610      	mov	r0, r2
 8006492:	f7ff f822 	bl	80054da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	4b23      	ldr	r3, [pc, #140]	; (8006528 <xTaskResumeAll+0x128>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d302      	bcc.n	80064aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80064a4:	4b21      	ldr	r3, [pc, #132]	; (800652c <xTaskResumeAll+0x12c>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064aa:	4b1c      	ldr	r3, [pc, #112]	; (800651c <xTaskResumeAll+0x11c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1cb      	bne.n	800644a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064b8:	f000 fb4a 	bl	8006b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064bc:	4b1c      	ldr	r3, [pc, #112]	; (8006530 <xTaskResumeAll+0x130>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d010      	beq.n	80064ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064c8:	f000 f844 	bl	8006554 <xTaskIncrementTick>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80064d2:	4b16      	ldr	r3, [pc, #88]	; (800652c <xTaskResumeAll+0x12c>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3b01      	subs	r3, #1
 80064dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1f1      	bne.n	80064c8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80064e4:	4b12      	ldr	r3, [pc, #72]	; (8006530 <xTaskResumeAll+0x130>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064ea:	4b10      	ldr	r3, [pc, #64]	; (800652c <xTaskResumeAll+0x12c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064f2:	2301      	movs	r3, #1
 80064f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064f6:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <xTaskResumeAll+0x134>)
 80064f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006506:	f001 f845 	bl	8007594 <vPortExitCritical>

	return xAlreadyYielded;
 800650a:	68bb      	ldr	r3, [r7, #8]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20000c58 	.word	0x20000c58
 8006518:	20000c30 	.word	0x20000c30
 800651c:	20000bf0 	.word	0x20000bf0
 8006520:	20000c38 	.word	0x20000c38
 8006524:	20000760 	.word	0x20000760
 8006528:	2000075c 	.word	0x2000075c
 800652c:	20000c44 	.word	0x20000c44
 8006530:	20000c40 	.word	0x20000c40
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800653e:	4b04      	ldr	r3, [pc, #16]	; (8006550 <xTaskGetTickCount+0x18>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006544:	687b      	ldr	r3, [r7, #4]
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	bc80      	pop	{r7}
 800654e:	4770      	bx	lr
 8006550:	20000c34 	.word	0x20000c34

08006554 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800655e:	4b51      	ldr	r3, [pc, #324]	; (80066a4 <xTaskIncrementTick+0x150>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 808d 	bne.w	8006682 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006568:	4b4f      	ldr	r3, [pc, #316]	; (80066a8 <xTaskIncrementTick+0x154>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3301      	adds	r3, #1
 800656e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006570:	4a4d      	ldr	r2, [pc, #308]	; (80066a8 <xTaskIncrementTick+0x154>)
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11f      	bne.n	80065bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800657c:	4b4b      	ldr	r3, [pc, #300]	; (80066ac <xTaskIncrementTick+0x158>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <xTaskIncrementTick+0x46>
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	e7fe      	b.n	8006598 <xTaskIncrementTick+0x44>
 800659a:	4b44      	ldr	r3, [pc, #272]	; (80066ac <xTaskIncrementTick+0x158>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	4b43      	ldr	r3, [pc, #268]	; (80066b0 <xTaskIncrementTick+0x15c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a41      	ldr	r2, [pc, #260]	; (80066ac <xTaskIncrementTick+0x158>)
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	4a41      	ldr	r2, [pc, #260]	; (80066b0 <xTaskIncrementTick+0x15c>)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	4b41      	ldr	r3, [pc, #260]	; (80066b4 <xTaskIncrementTick+0x160>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	4a3f      	ldr	r2, [pc, #252]	; (80066b4 <xTaskIncrementTick+0x160>)
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	f000 faca 	bl	8006b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065bc:	4b3e      	ldr	r3, [pc, #248]	; (80066b8 <xTaskIncrementTick+0x164>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d34e      	bcc.n	8006664 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065c6:	4b39      	ldr	r3, [pc, #228]	; (80066ac <xTaskIncrementTick+0x158>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <xTaskIncrementTick+0x80>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <xTaskIncrementTick+0x82>
 80065d4:	2300      	movs	r3, #0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065da:	4b37      	ldr	r3, [pc, #220]	; (80066b8 <xTaskIncrementTick+0x164>)
 80065dc:	f04f 32ff 	mov.w	r2, #4294967295
 80065e0:	601a      	str	r2, [r3, #0]
					break;
 80065e2:	e03f      	b.n	8006664 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065e4:	4b31      	ldr	r3, [pc, #196]	; (80066ac <xTaskIncrementTick+0x158>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d203      	bcs.n	8006604 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065fc:	4a2e      	ldr	r2, [pc, #184]	; (80066b8 <xTaskIncrementTick+0x164>)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6013      	str	r3, [r2, #0]
						break;
 8006602:	e02f      	b.n	8006664 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	3304      	adds	r3, #4
 8006608:	4618      	mov	r0, r3
 800660a:	f7fe ffc1 	bl	8005590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	2b00      	cmp	r3, #0
 8006614:	d004      	beq.n	8006620 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	3318      	adds	r3, #24
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe ffb8 	bl	8005590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	4b25      	ldr	r3, [pc, #148]	; (80066bc <xTaskIncrementTick+0x168>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d903      	bls.n	8006634 <xTaskIncrementTick+0xe0>
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	4a22      	ldr	r2, [pc, #136]	; (80066bc <xTaskIncrementTick+0x168>)
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <xTaskIncrementTick+0x16c>)
 8006642:	441a      	add	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	3304      	adds	r3, #4
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f7fe ff45 	bl	80054da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006654:	4b1b      	ldr	r3, [pc, #108]	; (80066c4 <xTaskIncrementTick+0x170>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	429a      	cmp	r2, r3
 800665c:	d3b3      	bcc.n	80065c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800665e:	2301      	movs	r3, #1
 8006660:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006662:	e7b0      	b.n	80065c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006664:	4b17      	ldr	r3, [pc, #92]	; (80066c4 <xTaskIncrementTick+0x170>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666a:	4915      	ldr	r1, [pc, #84]	; (80066c0 <xTaskIncrementTick+0x16c>)
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d907      	bls.n	800668c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800667c:	2301      	movs	r3, #1
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	e004      	b.n	800668c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006682:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <xTaskIncrementTick+0x174>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3301      	adds	r3, #1
 8006688:	4a0f      	ldr	r2, [pc, #60]	; (80066c8 <xTaskIncrementTick+0x174>)
 800668a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <xTaskIncrementTick+0x178>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006694:	2301      	movs	r3, #1
 8006696:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006698:	697b      	ldr	r3, [r7, #20]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000c58 	.word	0x20000c58
 80066a8:	20000c34 	.word	0x20000c34
 80066ac:	20000be8 	.word	0x20000be8
 80066b0:	20000bec 	.word	0x20000bec
 80066b4:	20000c48 	.word	0x20000c48
 80066b8:	20000c50 	.word	0x20000c50
 80066bc:	20000c38 	.word	0x20000c38
 80066c0:	20000760 	.word	0x20000760
 80066c4:	2000075c 	.word	0x2000075c
 80066c8:	20000c40 	.word	0x20000c40
 80066cc:	20000c44 	.word	0x20000c44

080066d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066d6:	4b27      	ldr	r3, [pc, #156]	; (8006774 <vTaskSwitchContext+0xa4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066de:	4b26      	ldr	r3, [pc, #152]	; (8006778 <vTaskSwitchContext+0xa8>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066e4:	e040      	b.n	8006768 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80066e6:	4b24      	ldr	r3, [pc, #144]	; (8006778 <vTaskSwitchContext+0xa8>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80066ec:	4b23      	ldr	r3, [pc, #140]	; (800677c <vTaskSwitchContext+0xac>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	e00f      	b.n	8006714 <vTaskSwitchContext+0x44>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <vTaskSwitchContext+0x3e>
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	607b      	str	r3, [r7, #4]
 800670c:	e7fe      	b.n	800670c <vTaskSwitchContext+0x3c>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3b01      	subs	r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	491a      	ldr	r1, [pc, #104]	; (8006780 <vTaskSwitchContext+0xb0>)
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0e5      	beq.n	80066f4 <vTaskSwitchContext+0x24>
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4a13      	ldr	r2, [pc, #76]	; (8006780 <vTaskSwitchContext+0xb0>)
 8006734:	4413      	add	r3, r2
 8006736:	60bb      	str	r3, [r7, #8]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	605a      	str	r2, [r3, #4]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	3308      	adds	r3, #8
 800674a:	429a      	cmp	r2, r3
 800674c:	d104      	bne.n	8006758 <vTaskSwitchContext+0x88>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	605a      	str	r2, [r3, #4]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	4a09      	ldr	r2, [pc, #36]	; (8006784 <vTaskSwitchContext+0xb4>)
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	4a06      	ldr	r2, [pc, #24]	; (800677c <vTaskSwitchContext+0xac>)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6013      	str	r3, [r2, #0]
}
 8006768:	bf00      	nop
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	bc80      	pop	{r7}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20000c58 	.word	0x20000c58
 8006778:	20000c44 	.word	0x20000c44
 800677c:	20000c38 	.word	0x20000c38
 8006780:	20000760 	.word	0x20000760
 8006784:	2000075c 	.word	0x2000075c

08006788 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <vTaskPlaceOnEventList+0x24>
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	e7fe      	b.n	80067aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067ac:	4b07      	ldr	r3, [pc, #28]	; (80067cc <vTaskPlaceOnEventList+0x44>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3318      	adds	r3, #24
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7fe feb3 	bl	8005520 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067ba:	2101      	movs	r1, #1
 80067bc:	6838      	ldr	r0, [r7, #0]
 80067be:	f000 fa75 	bl	8006cac <prvAddCurrentTaskToDelayedList>
}
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	2000075c 	.word	0x2000075c

080067d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d109      	bne.n	80067f6 <vTaskPlaceOnEventListRestricted+0x26>
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	e7fe      	b.n	80067f4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067f6:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <vTaskPlaceOnEventListRestricted+0x50>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3318      	adds	r3, #24
 80067fc:	4619      	mov	r1, r3
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f7fe fe6b 	bl	80054da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800680a:	f04f 33ff 	mov.w	r3, #4294967295
 800680e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	68b8      	ldr	r0, [r7, #8]
 8006814:	f000 fa4a 	bl	8006cac <prvAddCurrentTaskToDelayedList>
	}
 8006818:	bf00      	nop
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	2000075c 	.word	0x2000075c

08006824 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <xTaskRemoveFromEventList+0x2a>
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e7fe      	b.n	800684c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3318      	adds	r3, #24
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fe9c 	bl	8005590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006858:	4b1d      	ldr	r3, [pc, #116]	; (80068d0 <xTaskRemoveFromEventList+0xac>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d11d      	bne.n	800689c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	3304      	adds	r3, #4
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe fe93 	bl	8005590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686e:	4b19      	ldr	r3, [pc, #100]	; (80068d4 <xTaskRemoveFromEventList+0xb0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d903      	bls.n	800687e <xTaskRemoveFromEventList+0x5a>
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	4a16      	ldr	r2, [pc, #88]	; (80068d4 <xTaskRemoveFromEventList+0xb0>)
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4a13      	ldr	r2, [pc, #76]	; (80068d8 <xTaskRemoveFromEventList+0xb4>)
 800688c:	441a      	add	r2, r3
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	3304      	adds	r3, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f7fe fe20 	bl	80054da <vListInsertEnd>
 800689a:	e005      	b.n	80068a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	3318      	adds	r3, #24
 80068a0:	4619      	mov	r1, r3
 80068a2:	480e      	ldr	r0, [pc, #56]	; (80068dc <xTaskRemoveFromEventList+0xb8>)
 80068a4:	f7fe fe19 	bl	80054da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ac:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <xTaskRemoveFromEventList+0xbc>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d905      	bls.n	80068c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068b6:	2301      	movs	r3, #1
 80068b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068ba:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <xTaskRemoveFromEventList+0xc0>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	e001      	b.n	80068c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80068c6:	697b      	ldr	r3, [r7, #20]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	20000c58 	.word	0x20000c58
 80068d4:	20000c38 	.word	0x20000c38
 80068d8:	20000760 	.word	0x20000760
 80068dc:	20000bf0 	.word	0x20000bf0
 80068e0:	2000075c 	.word	0x2000075c
 80068e4:	20000c44 	.word	0x20000c44

080068e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <vTaskInternalSetTimeOutState+0x24>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068f8:	4b05      	ldr	r3, [pc, #20]	; (8006910 <vTaskInternalSetTimeOutState+0x28>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	605a      	str	r2, [r3, #4]
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20000c48 	.word	0x20000c48
 8006910:	20000c34 	.word	0x20000c34

08006914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d109      	bne.n	8006938 <xTaskCheckForTimeOut+0x24>
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	e7fe      	b.n	8006936 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <xTaskCheckForTimeOut+0x3e>
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e7fe      	b.n	8006950 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006952:	f000 fdf1 	bl	8007538 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006956:	4b1d      	ldr	r3, [pc, #116]	; (80069cc <xTaskCheckForTimeOut+0xb8>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d102      	bne.n	8006976 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006970:	2300      	movs	r3, #0
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	e023      	b.n	80069be <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <xTaskCheckForTimeOut+0xbc>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d007      	beq.n	8006992 <xTaskCheckForTimeOut+0x7e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	429a      	cmp	r2, r3
 800698a:	d302      	bcc.n	8006992 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800698c:	2301      	movs	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	e015      	b.n	80069be <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	429a      	cmp	r2, r3
 800699a:	d20b      	bcs.n	80069b4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	1ad2      	subs	r2, r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff ff9d 	bl	80068e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	e004      	b.n	80069be <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069ba:	2301      	movs	r3, #1
 80069bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069be:	f000 fde9 	bl	8007594 <vPortExitCritical>

	return xReturn;
 80069c2:	69fb      	ldr	r3, [r7, #28]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3720      	adds	r7, #32
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20000c34 	.word	0x20000c34
 80069d0:	20000c48 	.word	0x20000c48

080069d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069d8:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <vTaskMissedYield+0x14>)
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
}
 80069de:	bf00      	nop
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	20000c44 	.word	0x20000c44

080069ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069f4:	f000 f852 	bl	8006a9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069f8:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <prvIdleTask+0x28>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d9f9      	bls.n	80069f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <prvIdleTask+0x2c>)
 8006a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a10:	e7f0      	b.n	80069f4 <prvIdleTask+0x8>
 8006a12:	bf00      	nop
 8006a14:	20000760 	.word	0x20000760
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]
 8006a26:	e00c      	b.n	8006a42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4a12      	ldr	r2, [pc, #72]	; (8006a7c <prvInitialiseTaskLists+0x60>)
 8006a34:	4413      	add	r3, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe fd24 	bl	8005484 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b37      	cmp	r3, #55	; 0x37
 8006a46:	d9ef      	bls.n	8006a28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a48:	480d      	ldr	r0, [pc, #52]	; (8006a80 <prvInitialiseTaskLists+0x64>)
 8006a4a:	f7fe fd1b 	bl	8005484 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a4e:	480d      	ldr	r0, [pc, #52]	; (8006a84 <prvInitialiseTaskLists+0x68>)
 8006a50:	f7fe fd18 	bl	8005484 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a54:	480c      	ldr	r0, [pc, #48]	; (8006a88 <prvInitialiseTaskLists+0x6c>)
 8006a56:	f7fe fd15 	bl	8005484 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a5a:	480c      	ldr	r0, [pc, #48]	; (8006a8c <prvInitialiseTaskLists+0x70>)
 8006a5c:	f7fe fd12 	bl	8005484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a60:	480b      	ldr	r0, [pc, #44]	; (8006a90 <prvInitialiseTaskLists+0x74>)
 8006a62:	f7fe fd0f 	bl	8005484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a66:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <prvInitialiseTaskLists+0x78>)
 8006a68:	4a05      	ldr	r2, [pc, #20]	; (8006a80 <prvInitialiseTaskLists+0x64>)
 8006a6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a6c:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <prvInitialiseTaskLists+0x7c>)
 8006a6e:	4a05      	ldr	r2, [pc, #20]	; (8006a84 <prvInitialiseTaskLists+0x68>)
 8006a70:	601a      	str	r2, [r3, #0]
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000760 	.word	0x20000760
 8006a80:	20000bc0 	.word	0x20000bc0
 8006a84:	20000bd4 	.word	0x20000bd4
 8006a88:	20000bf0 	.word	0x20000bf0
 8006a8c:	20000c04 	.word	0x20000c04
 8006a90:	20000c1c 	.word	0x20000c1c
 8006a94:	20000be8 	.word	0x20000be8
 8006a98:	20000bec 	.word	0x20000bec

08006a9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aa2:	e019      	b.n	8006ad8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006aa4:	f000 fd48 	bl	8007538 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006aa8:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <prvCheckTasksWaitingTermination+0x4c>)
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fe fd6b 	bl	8005590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006aba:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <prvCheckTasksWaitingTermination+0x50>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <prvCheckTasksWaitingTermination+0x50>)
 8006ac2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <prvCheckTasksWaitingTermination+0x54>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	4a09      	ldr	r2, [pc, #36]	; (8006af0 <prvCheckTasksWaitingTermination+0x54>)
 8006acc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ace:	f000 fd61 	bl	8007594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f80e 	bl	8006af4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <prvCheckTasksWaitingTermination+0x54>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e1      	bne.n	8006aa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	20000c04 	.word	0x20000c04
 8006aec:	20000c30 	.word	0x20000c30
 8006af0:	20000c18 	.word	0x20000c18

08006af4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d108      	bne.n	8006b18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fecc 	bl	80078a8 <vPortFree>
				vPortFree( pxTCB );
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fec9 	bl	80078a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b16:	e017      	b.n	8006b48 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d103      	bne.n	8006b2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fec0 	bl	80078a8 <vPortFree>
	}
 8006b28:	e00e      	b.n	8006b48 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d009      	beq.n	8006b48 <prvDeleteTCB+0x54>
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	e7fe      	b.n	8006b46 <prvDeleteTCB+0x52>
	}
 8006b48:	bf00      	nop
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b56:	4b0e      	ldr	r3, [pc, #56]	; (8006b90 <prvResetNextTaskUnblockTime+0x40>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <prvResetNextTaskUnblockTime+0x14>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <prvResetNextTaskUnblockTime+0x16>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b6a:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <prvResetNextTaskUnblockTime+0x44>)
 8006b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b72:	e008      	b.n	8006b86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <prvResetNextTaskUnblockTime+0x40>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	4a04      	ldr	r2, [pc, #16]	; (8006b94 <prvResetNextTaskUnblockTime+0x44>)
 8006b84:	6013      	str	r3, [r2, #0]
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr
 8006b90:	20000be8 	.word	0x20000be8
 8006b94:	20000c50 	.word	0x20000c50

08006b98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b9e:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <xTaskGetSchedulerState+0x34>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	607b      	str	r3, [r7, #4]
 8006baa:	e008      	b.n	8006bbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bac:	4b08      	ldr	r3, [pc, #32]	; (8006bd0 <xTaskGetSchedulerState+0x38>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	607b      	str	r3, [r7, #4]
 8006bb8:	e001      	b.n	8006bbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bbe:	687b      	ldr	r3, [r7, #4]
	}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20000c3c 	.word	0x20000c3c
 8006bd0:	20000c58 	.word	0x20000c58

08006bd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d054      	beq.n	8006c94 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bea:	4b2d      	ldr	r3, [pc, #180]	; (8006ca0 <xTaskPriorityDisinherit+0xcc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d009      	beq.n	8006c08 <xTaskPriorityDisinherit+0x34>
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	e7fe      	b.n	8006c06 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <xTaskPriorityDisinherit+0x50>
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	60bb      	str	r3, [r7, #8]
 8006c22:	e7fe      	b.n	8006c22 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c28:	1e5a      	subs	r2, r3, #1
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d02c      	beq.n	8006c94 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d128      	bne.n	8006c94 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	3304      	adds	r3, #4
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe fca2 	bl	8005590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c64:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <xTaskPriorityDisinherit+0xd0>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d903      	bls.n	8006c74 <xTaskPriorityDisinherit+0xa0>
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	4a0c      	ldr	r2, [pc, #48]	; (8006ca4 <xTaskPriorityDisinherit+0xd0>)
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4a09      	ldr	r2, [pc, #36]	; (8006ca8 <xTaskPriorityDisinherit+0xd4>)
 8006c82:	441a      	add	r2, r3
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fe fc25 	bl	80054da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c90:	2301      	movs	r3, #1
 8006c92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c94:	697b      	ldr	r3, [r7, #20]
	}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	2000075c 	.word	0x2000075c
 8006ca4:	20000c38 	.word	0x20000c38
 8006ca8:	20000760 	.word	0x20000760

08006cac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cb6:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <prvAddCurrentTaskToDelayedList+0x90>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cbc:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fc64 	bl	8005590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d10a      	bne.n	8006ce6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d007      	beq.n	8006ce6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cd6:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4819      	ldr	r0, [pc, #100]	; (8006d44 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ce0:	f7fe fbfb 	bl	80054da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ce4:	e026      	b.n	8006d34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4413      	add	r3, r2
 8006cec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cee:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d209      	bcs.n	8006d12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cfe:	4b12      	ldr	r3, [pc, #72]	; (8006d48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b0f      	ldr	r3, [pc, #60]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	f7fe fc08 	bl	8005520 <vListInsert>
}
 8006d10:	e010      	b.n	8006d34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d12:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f7fe fbfe 	bl	8005520 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d24:	4b0a      	ldr	r3, [pc, #40]	; (8006d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d202      	bcs.n	8006d34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d2e:	4a08      	ldr	r2, [pc, #32]	; (8006d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6013      	str	r3, [r2, #0]
}
 8006d34:	bf00      	nop
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20000c34 	.word	0x20000c34
 8006d40:	2000075c 	.word	0x2000075c
 8006d44:	20000c1c 	.word	0x20000c1c
 8006d48:	20000bec 	.word	0x20000bec
 8006d4c:	20000be8 	.word	0x20000be8
 8006d50:	20000c50 	.word	0x20000c50

08006d54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	; 0x28
 8006d58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d5e:	f000 fac3 	bl	80072e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d62:	4b1c      	ldr	r3, [pc, #112]	; (8006dd4 <xTimerCreateTimerTask+0x80>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d021      	beq.n	8006dae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d72:	1d3a      	adds	r2, r7, #4
 8006d74:	f107 0108 	add.w	r1, r7, #8
 8006d78:	f107 030c 	add.w	r3, r7, #12
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fe fb67 	bl	8005450 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	9202      	str	r2, [sp, #8]
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	2300      	movs	r3, #0
 8006d92:	460a      	mov	r2, r1
 8006d94:	4910      	ldr	r1, [pc, #64]	; (8006dd8 <xTimerCreateTimerTask+0x84>)
 8006d96:	4811      	ldr	r0, [pc, #68]	; (8006ddc <xTimerCreateTimerTask+0x88>)
 8006d98:	f7ff f8f8 	bl	8005f8c <xTaskCreateStatic>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <xTimerCreateTimerTask+0x8c>)
 8006da0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006da2:	4b0f      	ldr	r3, [pc, #60]	; (8006de0 <xTimerCreateTimerTask+0x8c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006daa:	2301      	movs	r3, #1
 8006dac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <xTimerCreateTimerTask+0x74>
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	e7fe      	b.n	8006dc6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006dc8:	697b      	ldr	r3, [r7, #20]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000c8c 	.word	0x20000c8c
 8006dd8:	08008810 	.word	0x08008810
 8006ddc:	08006efd 	.word	0x08006efd
 8006de0:	20000c90 	.word	0x20000c90

08006de4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	; 0x28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d109      	bne.n	8006e10 <xTimerGenericCommand+0x2c>
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	623b      	str	r3, [r7, #32]
 8006e0e:	e7fe      	b.n	8006e0e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e10:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <xTimerGenericCommand+0x94>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d02a      	beq.n	8006e6e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b05      	cmp	r3, #5
 8006e28:	dc18      	bgt.n	8006e5c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e2a:	f7ff feb5 	bl	8006b98 <xTaskGetSchedulerState>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d109      	bne.n	8006e48 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e34:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <xTimerGenericCommand+0x94>)
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	f107 0110 	add.w	r1, r7, #16
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e40:	f7fe fcce 	bl	80057e0 <xQueueGenericSend>
 8006e44:	6278      	str	r0, [r7, #36]	; 0x24
 8006e46:	e012      	b.n	8006e6e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e48:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <xTimerGenericCommand+0x94>)
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	f107 0110 	add.w	r1, r7, #16
 8006e50:	2300      	movs	r3, #0
 8006e52:	2200      	movs	r2, #0
 8006e54:	f7fe fcc4 	bl	80057e0 <xQueueGenericSend>
 8006e58:	6278      	str	r0, [r7, #36]	; 0x24
 8006e5a:	e008      	b.n	8006e6e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e5c:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <xTimerGenericCommand+0x94>)
 8006e5e:	6818      	ldr	r0, [r3, #0]
 8006e60:	f107 0110 	add.w	r1, r7, #16
 8006e64:	2300      	movs	r3, #0
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	f7fe fdb4 	bl	80059d4 <xQueueGenericSendFromISR>
 8006e6c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3728      	adds	r7, #40	; 0x28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000c8c 	.word	0x20000c8c

08006e7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b088      	sub	sp, #32
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e86:	4b1c      	ldr	r3, [pc, #112]	; (8006ef8 <prvProcessExpiredTimer+0x7c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fb7b 	bl	8005590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d121      	bne.n	8006ee6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	18d1      	adds	r1, r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	6978      	ldr	r0, [r7, #20]
 8006eb0:	f000 f8c8 	bl	8007044 <prvInsertTimerInActiveList>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d015      	beq.n	8006ee6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	6978      	ldr	r0, [r7, #20]
 8006ec6:	f7ff ff8d 	bl	8006de4 <xTimerGenericCommand>
 8006eca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <prvProcessExpiredTimer+0x6a>
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e7fe      	b.n	8006ee4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	6978      	ldr	r0, [r7, #20]
 8006eec:	4798      	blx	r3
}
 8006eee:	bf00      	nop
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000c84 	.word	0x20000c84

08006efc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f04:	f107 0308 	add.w	r3, r7, #8
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 f857 	bl	8006fbc <prvGetNextExpireTime>
 8006f0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4619      	mov	r1, r3
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f803 	bl	8006f20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f1a:	f000 f8d5 	bl	80070c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f1e:	e7f1      	b.n	8006f04 <prvTimerTask+0x8>

08006f20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f2a:	f7ff fa5b 	bl	80063e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f2e:	f107 0308 	add.w	r3, r7, #8
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f866 	bl	8007004 <prvSampleTimeNow>
 8006f38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d130      	bne.n	8006fa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <prvProcessTimerOrBlockTask+0x3c>
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d806      	bhi.n	8006f5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f4e:	f7ff fa57 	bl	8006400 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff ff91 	bl	8006e7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f5a:	e024      	b.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d008      	beq.n	8006f74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f62:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <prvProcessTimerOrBlockTask+0x90>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf0c      	ite	eq
 8006f6c:	2301      	moveq	r3, #1
 8006f6e:	2300      	movne	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f74:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <prvProcessTimerOrBlockTask+0x94>)
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4619      	mov	r1, r3
 8006f82:	f7fe ffcf 	bl	8005f24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f86:	f7ff fa3b 	bl	8006400 <xTaskResumeAll>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f90:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <prvProcessTimerOrBlockTask+0x98>)
 8006f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	f3bf 8f6f 	isb	sy
}
 8006fa0:	e001      	b.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fa2:	f7ff fa2d 	bl	8006400 <xTaskResumeAll>
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000c88 	.word	0x20000c88
 8006fb4:	20000c8c 	.word	0x20000c8c
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fc4:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <prvGetNextExpireTime+0x44>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bf0c      	ite	eq
 8006fce:	2301      	moveq	r3, #1
 8006fd0:	2300      	movne	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d105      	bne.n	8006fee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fe2:	4b07      	ldr	r3, [pc, #28]	; (8007000 <prvGetNextExpireTime+0x44>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e001      	b.n	8006ff2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	20000c84 	.word	0x20000c84

08007004 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800700c:	f7ff fa94 	bl	8006538 <xTaskGetTickCount>
 8007010:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007012:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <prvSampleTimeNow+0x3c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	429a      	cmp	r2, r3
 800701a:	d205      	bcs.n	8007028 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800701c:	f000 f904 	bl	8007228 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	e002      	b.n	800702e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800702e:	4a04      	ldr	r2, [pc, #16]	; (8007040 <prvSampleTimeNow+0x3c>)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007034:	68fb      	ldr	r3, [r7, #12]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000c94 	.word	0x20000c94

08007044 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d812      	bhi.n	8007090 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	429a      	cmp	r2, r3
 8007076:	d302      	bcc.n	800707e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e01b      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800707e:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <prvInsertTimerInActiveList+0x7c>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fe fa49 	bl	8005520 <vListInsert>
 800708e:	e012      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d206      	bcs.n	80070a6 <prvInsertTimerInActiveList+0x62>
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d302      	bcc.n	80070a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070a0:	2301      	movs	r3, #1
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e007      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070a6:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <prvInsertTimerInActiveList+0x80>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f7fe fa35 	bl	8005520 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070b6:	697b      	ldr	r3, [r7, #20]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20000c88 	.word	0x20000c88
 80070c4:	20000c84 	.word	0x20000c84

080070c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	; 0x38
 80070cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ce:	e099      	b.n	8007204 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da17      	bge.n	8007106 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070d6:	1d3b      	adds	r3, r7, #4
 80070d8:	3304      	adds	r3, #4
 80070da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <prvProcessReceivedCommands+0x2e>
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	61fb      	str	r3, [r7, #28]
 80070f4:	e7fe      	b.n	80070f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070fc:	6850      	ldr	r0, [r2, #4]
 80070fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007100:	6892      	ldr	r2, [r2, #8]
 8007102:	4611      	mov	r1, r2
 8007104:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	db7a      	blt.n	8007202 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	3304      	adds	r3, #4
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe fa37 	bl	8005590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007122:	463b      	mov	r3, r7
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff ff6d 	bl	8007004 <prvSampleTimeNow>
 800712a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b09      	cmp	r3, #9
 8007130:	d868      	bhi.n	8007204 <prvProcessReceivedCommands+0x13c>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <prvProcessReceivedCommands+0x70>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007161 	.word	0x08007161
 800713c:	08007161 	.word	0x08007161
 8007140:	08007161 	.word	0x08007161
 8007144:	08007205 	.word	0x08007205
 8007148:	080071bb 	.word	0x080071bb
 800714c:	080071f1 	.word	0x080071f1
 8007150:	08007161 	.word	0x08007161
 8007154:	08007161 	.word	0x08007161
 8007158:	08007205 	.word	0x08007205
 800715c:	080071bb 	.word	0x080071bb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	18d1      	adds	r1, r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800716c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800716e:	f7ff ff69 	bl	8007044 <prvInsertTimerInActiveList>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d045      	beq.n	8007204 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800717e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d13d      	bne.n	8007204 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	441a      	add	r2, r3
 8007190:	2300      	movs	r3, #0
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	2300      	movs	r3, #0
 8007196:	2100      	movs	r1, #0
 8007198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800719a:	f7ff fe23 	bl	8006de4 <xTimerGenericCommand>
 800719e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d12e      	bne.n	8007204 <prvProcessReceivedCommands+0x13c>
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	e7fe      	b.n	80071b8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d109      	bne.n	80071dc <prvProcessReceivedCommands+0x114>
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	e7fe      	b.n	80071da <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	699a      	ldr	r2, [r3, #24]
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	18d1      	adds	r1, r2, r3
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ea:	f7ff ff2b 	bl	8007044 <prvInsertTimerInActiveList>
					break;
 80071ee:	e009      	b.n	8007204 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80071fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071fc:	f000 fb54 	bl	80078a8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007200:	e000      	b.n	8007204 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007202:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007204:	4b07      	ldr	r3, [pc, #28]	; (8007224 <prvProcessReceivedCommands+0x15c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	1d39      	adds	r1, r7, #4
 800720a:	2200      	movs	r2, #0
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe fc75 	bl	8005afc <xQueueReceive>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	f47f af5b 	bne.w	80070d0 <prvProcessReceivedCommands+0x8>
	}
}
 800721a:	bf00      	nop
 800721c:	3730      	adds	r7, #48	; 0x30
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000c8c 	.word	0x20000c8c

08007228 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800722e:	e044      	b.n	80072ba <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007230:	4b2b      	ldr	r3, [pc, #172]	; (80072e0 <prvSwitchTimerLists+0xb8>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800723a:	4b29      	ldr	r3, [pc, #164]	; (80072e0 <prvSwitchTimerLists+0xb8>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3304      	adds	r3, #4
 8007248:	4618      	mov	r0, r3
 800724a:	f7fe f9a1 	bl	8005590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d12d      	bne.n	80072ba <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4413      	add	r3, r2
 8007266:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	429a      	cmp	r2, r3
 800726e:	d90e      	bls.n	800728e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800727c:	4b18      	ldr	r3, [pc, #96]	; (80072e0 <prvSwitchTimerLists+0xb8>)
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3304      	adds	r3, #4
 8007284:	4619      	mov	r1, r3
 8007286:	4610      	mov	r0, r2
 8007288:	f7fe f94a 	bl	8005520 <vListInsert>
 800728c:	e015      	b.n	80072ba <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800728e:	2300      	movs	r3, #0
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	2300      	movs	r3, #0
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	2100      	movs	r1, #0
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff fda3 	bl	8006de4 <xTimerGenericCommand>
 800729e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <prvSwitchTimerLists+0x92>
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	e7fe      	b.n	80072b8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072ba:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <prvSwitchTimerLists+0xb8>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1b5      	bne.n	8007230 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072c4:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <prvSwitchTimerLists+0xb8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072ca:	4b06      	ldr	r3, [pc, #24]	; (80072e4 <prvSwitchTimerLists+0xbc>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <prvSwitchTimerLists+0xb8>)
 80072d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072d2:	4a04      	ldr	r2, [pc, #16]	; (80072e4 <prvSwitchTimerLists+0xbc>)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	6013      	str	r3, [r2, #0]
}
 80072d8:	bf00      	nop
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20000c84 	.word	0x20000c84
 80072e4:	20000c88 	.word	0x20000c88

080072e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072ee:	f000 f923 	bl	8007538 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072f2:	4b15      	ldr	r3, [pc, #84]	; (8007348 <prvCheckForValidListAndQueue+0x60>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d120      	bne.n	800733c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072fa:	4814      	ldr	r0, [pc, #80]	; (800734c <prvCheckForValidListAndQueue+0x64>)
 80072fc:	f7fe f8c2 	bl	8005484 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007300:	4813      	ldr	r0, [pc, #76]	; (8007350 <prvCheckForValidListAndQueue+0x68>)
 8007302:	f7fe f8bf 	bl	8005484 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007306:	4b13      	ldr	r3, [pc, #76]	; (8007354 <prvCheckForValidListAndQueue+0x6c>)
 8007308:	4a10      	ldr	r2, [pc, #64]	; (800734c <prvCheckForValidListAndQueue+0x64>)
 800730a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800730c:	4b12      	ldr	r3, [pc, #72]	; (8007358 <prvCheckForValidListAndQueue+0x70>)
 800730e:	4a10      	ldr	r2, [pc, #64]	; (8007350 <prvCheckForValidListAndQueue+0x68>)
 8007310:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007312:	2300      	movs	r3, #0
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	4b11      	ldr	r3, [pc, #68]	; (800735c <prvCheckForValidListAndQueue+0x74>)
 8007318:	4a11      	ldr	r2, [pc, #68]	; (8007360 <prvCheckForValidListAndQueue+0x78>)
 800731a:	2110      	movs	r1, #16
 800731c:	200a      	movs	r0, #10
 800731e:	f7fe f9c9 	bl	80056b4 <xQueueGenericCreateStatic>
 8007322:	4602      	mov	r2, r0
 8007324:	4b08      	ldr	r3, [pc, #32]	; (8007348 <prvCheckForValidListAndQueue+0x60>)
 8007326:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <prvCheckForValidListAndQueue+0x60>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <prvCheckForValidListAndQueue+0x60>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	490b      	ldr	r1, [pc, #44]	; (8007364 <prvCheckForValidListAndQueue+0x7c>)
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe fdcc 	bl	8005ed4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800733c:	f000 f92a 	bl	8007594 <vPortExitCritical>
}
 8007340:	bf00      	nop
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000c8c 	.word	0x20000c8c
 800734c:	20000c5c 	.word	0x20000c5c
 8007350:	20000c70 	.word	0x20000c70
 8007354:	20000c84 	.word	0x20000c84
 8007358:	20000c88 	.word	0x20000c88
 800735c:	20000d38 	.word	0x20000d38
 8007360:	20000c98 	.word	0x20000c98
 8007364:	08008818 	.word	0x08008818

08007368 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3b04      	subs	r3, #4
 8007378:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3b04      	subs	r3, #4
 8007386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f023 0201 	bic.w	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3b04      	subs	r3, #4
 8007396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007398:	4a08      	ldr	r2, [pc, #32]	; (80073bc <pxPortInitialiseStack+0x54>)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3b14      	subs	r3, #20
 80073a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3b20      	subs	r3, #32
 80073ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073b0:	68fb      	ldr	r3, [r7, #12]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr
 80073bc:	080073c1 	.word	0x080073c1

080073c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073ca:	4b10      	ldr	r3, [pc, #64]	; (800740c <prvTaskExitError+0x4c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d2:	d009      	beq.n	80073e8 <prvTaskExitError+0x28>
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e7fe      	b.n	80073e6 <prvTaskExitError+0x26>
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073fa:	bf00      	nop
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0fc      	beq.n	80073fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007402:	bf00      	nop
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr
 800740c:	20000048 	.word	0x20000048

08007410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <pxCurrentTCBConst2>)
 8007412:	6819      	ldr	r1, [r3, #0]
 8007414:	6808      	ldr	r0, [r1, #0]
 8007416:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800741a:	f380 8809 	msr	PSP, r0
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f380 8811 	msr	BASEPRI, r0
 800742a:	f04e 0e0d 	orr.w	lr, lr, #13
 800742e:	4770      	bx	lr

08007430 <pxCurrentTCBConst2>:
 8007430:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop

08007438 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007438:	4806      	ldr	r0, [pc, #24]	; (8007454 <prvPortStartFirstTask+0x1c>)
 800743a:	6800      	ldr	r0, [r0, #0]
 800743c:	6800      	ldr	r0, [r0, #0]
 800743e:	f380 8808 	msr	MSP, r0
 8007442:	b662      	cpsie	i
 8007444:	b661      	cpsie	f
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	df00      	svc	0
 8007450:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007452:	bf00      	nop
 8007454:	e000ed08 	.word	0xe000ed08

08007458 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800745e:	4b31      	ldr	r3, [pc, #196]	; (8007524 <xPortStartScheduler+0xcc>)
 8007460:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	22ff      	movs	r2, #255	; 0xff
 800746e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007480:	b2da      	uxtb	r2, r3
 8007482:	4b29      	ldr	r3, [pc, #164]	; (8007528 <xPortStartScheduler+0xd0>)
 8007484:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007486:	4b29      	ldr	r3, [pc, #164]	; (800752c <xPortStartScheduler+0xd4>)
 8007488:	2207      	movs	r2, #7
 800748a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800748c:	e009      	b.n	80074a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800748e:	4b27      	ldr	r3, [pc, #156]	; (800752c <xPortStartScheduler+0xd4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3b01      	subs	r3, #1
 8007494:	4a25      	ldr	r2, [pc, #148]	; (800752c <xPortStartScheduler+0xd4>)
 8007496:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b80      	cmp	r3, #128	; 0x80
 80074ac:	d0ef      	beq.n	800748e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074ae:	4b1f      	ldr	r3, [pc, #124]	; (800752c <xPortStartScheduler+0xd4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f1c3 0307 	rsb	r3, r3, #7
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d009      	beq.n	80074ce <xPortStartScheduler+0x76>
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	60bb      	str	r3, [r7, #8]
 80074cc:	e7fe      	b.n	80074cc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074ce:	4b17      	ldr	r3, [pc, #92]	; (800752c <xPortStartScheduler+0xd4>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	4a15      	ldr	r2, [pc, #84]	; (800752c <xPortStartScheduler+0xd4>)
 80074d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074d8:	4b14      	ldr	r3, [pc, #80]	; (800752c <xPortStartScheduler+0xd4>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074e0:	4a12      	ldr	r2, [pc, #72]	; (800752c <xPortStartScheduler+0xd4>)
 80074e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074ec:	4b10      	ldr	r3, [pc, #64]	; (8007530 <xPortStartScheduler+0xd8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a0f      	ldr	r2, [pc, #60]	; (8007530 <xPortStartScheduler+0xd8>)
 80074f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074f8:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <xPortStartScheduler+0xd8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a0c      	ldr	r2, [pc, #48]	; (8007530 <xPortStartScheduler+0xd8>)
 80074fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007504:	f000 f8b0 	bl	8007668 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <xPortStartScheduler+0xdc>)
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800750e:	f7ff ff93 	bl	8007438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007512:	f7ff f8dd 	bl	80066d0 <vTaskSwitchContext>
	prvTaskExitError();
 8007516:	f7ff ff53 	bl	80073c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	e000e400 	.word	0xe000e400
 8007528:	20000d88 	.word	0x20000d88
 800752c:	20000d8c 	.word	0x20000d8c
 8007530:	e000ed20 	.word	0xe000ed20
 8007534:	20000048 	.word	0x20000048

08007538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007550:	4b0e      	ldr	r3, [pc, #56]	; (800758c <vPortEnterCritical+0x54>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3301      	adds	r3, #1
 8007556:	4a0d      	ldr	r2, [pc, #52]	; (800758c <vPortEnterCritical+0x54>)
 8007558:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <vPortEnterCritical+0x54>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d10e      	bne.n	8007580 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007562:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <vPortEnterCritical+0x58>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d009      	beq.n	8007580 <vPortEnterCritical+0x48>
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	e7fe      	b.n	800757e <vPortEnterCritical+0x46>
	}
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	bc80      	pop	{r7}
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	20000048 	.word	0x20000048
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800759a:	4b10      	ldr	r3, [pc, #64]	; (80075dc <vPortExitCritical+0x48>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <vPortExitCritical+0x22>
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	607b      	str	r3, [r7, #4]
 80075b4:	e7fe      	b.n	80075b4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80075b6:	4b09      	ldr	r3, [pc, #36]	; (80075dc <vPortExitCritical+0x48>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	4a07      	ldr	r2, [pc, #28]	; (80075dc <vPortExitCritical+0x48>)
 80075be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <vPortExitCritical+0x48>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d104      	bne.n	80075d2 <vPortExitCritical+0x3e>
 80075c8:	2300      	movs	r3, #0
 80075ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr
 80075dc:	20000048 	.word	0x20000048

080075e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075e0:	f3ef 8009 	mrs	r0, PSP
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	4b0d      	ldr	r3, [pc, #52]	; (8007620 <pxCurrentTCBConst>)
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075f0:	6010      	str	r0, [r2, #0]
 80075f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80075f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075fa:	f380 8811 	msr	BASEPRI, r0
 80075fe:	f7ff f867 	bl	80066d0 <vTaskSwitchContext>
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f380 8811 	msr	BASEPRI, r0
 800760a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800760e:	6819      	ldr	r1, [r3, #0]
 8007610:	6808      	ldr	r0, [r1, #0]
 8007612:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007616:	f380 8809 	msr	PSP, r0
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	4770      	bx	lr

08007620 <pxCurrentTCBConst>:
 8007620:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop

08007628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007640:	f7fe ff88 	bl	8006554 <xTaskIncrementTick>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800764a:	4b06      	ldr	r3, [pc, #24]	; (8007664 <SysTick_Handler+0x3c>)
 800764c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	2300      	movs	r3, #0
 8007654:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	e000ed04 	.word	0xe000ed04

08007668 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800766c:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <vPortSetupTimerInterrupt+0x30>)
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007672:	4b0a      	ldr	r3, [pc, #40]	; (800769c <vPortSetupTimerInterrupt+0x34>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <vPortSetupTimerInterrupt+0x38>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a09      	ldr	r2, [pc, #36]	; (80076a4 <vPortSetupTimerInterrupt+0x3c>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	099b      	lsrs	r3, r3, #6
 8007684:	4a08      	ldr	r2, [pc, #32]	; (80076a8 <vPortSetupTimerInterrupt+0x40>)
 8007686:	3b01      	subs	r3, #1
 8007688:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800768a:	4b03      	ldr	r3, [pc, #12]	; (8007698 <vPortSetupTimerInterrupt+0x30>)
 800768c:	2207      	movs	r2, #7
 800768e:	601a      	str	r2, [r3, #0]
}
 8007690:	bf00      	nop
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr
 8007698:	e000e010 	.word	0xe000e010
 800769c:	e000e018 	.word	0xe000e018
 80076a0:	20000018 	.word	0x20000018
 80076a4:	10624dd3 	.word	0x10624dd3
 80076a8:	e000e014 	.word	0xe000e014

080076ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076b2:	f3ef 8305 	mrs	r3, IPSR
 80076b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b0f      	cmp	r3, #15
 80076bc:	d913      	bls.n	80076e6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076be:	4a15      	ldr	r2, [pc, #84]	; (8007714 <vPortValidateInterruptPriority+0x68>)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076c8:	4b13      	ldr	r3, [pc, #76]	; (8007718 <vPortValidateInterruptPriority+0x6c>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	7afa      	ldrb	r2, [r7, #11]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d209      	bcs.n	80076e6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	607b      	str	r3, [r7, #4]
 80076e4:	e7fe      	b.n	80076e4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076e6:	4b0d      	ldr	r3, [pc, #52]	; (800771c <vPortValidateInterruptPriority+0x70>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076ee:	4b0c      	ldr	r3, [pc, #48]	; (8007720 <vPortValidateInterruptPriority+0x74>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d909      	bls.n	800770a <vPortValidateInterruptPriority+0x5e>
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	603b      	str	r3, [r7, #0]
 8007708:	e7fe      	b.n	8007708 <vPortValidateInterruptPriority+0x5c>
	}
 800770a:	bf00      	nop
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	bc80      	pop	{r7}
 8007712:	4770      	bx	lr
 8007714:	e000e3f0 	.word	0xe000e3f0
 8007718:	20000d88 	.word	0x20000d88
 800771c:	e000ed0c 	.word	0xe000ed0c
 8007720:	20000d8c 	.word	0x20000d8c

08007724 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08a      	sub	sp, #40	; 0x28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007730:	f7fe fe58 	bl	80063e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007734:	4b57      	ldr	r3, [pc, #348]	; (8007894 <pvPortMalloc+0x170>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800773c:	f000 f90c 	bl	8007958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007740:	4b55      	ldr	r3, [pc, #340]	; (8007898 <pvPortMalloc+0x174>)
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4013      	ands	r3, r2
 8007748:	2b00      	cmp	r3, #0
 800774a:	f040 808c 	bne.w	8007866 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d01c      	beq.n	800778e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007754:	2208      	movs	r2, #8
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4413      	add	r3, r2
 800775a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	2b00      	cmp	r3, #0
 8007764:	d013      	beq.n	800778e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f023 0307 	bic.w	r3, r3, #7
 800776c:	3308      	adds	r3, #8
 800776e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <pvPortMalloc+0x6a>
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	e7fe      	b.n	800778c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d068      	beq.n	8007866 <pvPortMalloc+0x142>
 8007794:	4b41      	ldr	r3, [pc, #260]	; (800789c <pvPortMalloc+0x178>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	429a      	cmp	r2, r3
 800779c:	d863      	bhi.n	8007866 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800779e:	4b40      	ldr	r3, [pc, #256]	; (80078a0 <pvPortMalloc+0x17c>)
 80077a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077a2:	4b3f      	ldr	r3, [pc, #252]	; (80078a0 <pvPortMalloc+0x17c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077a8:	e004      	b.n	80077b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d903      	bls.n	80077c6 <pvPortMalloc+0xa2>
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1f1      	bne.n	80077aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077c6:	4b33      	ldr	r3, [pc, #204]	; (8007894 <pvPortMalloc+0x170>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d04a      	beq.n	8007866 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2208      	movs	r2, #8
 80077d6:	4413      	add	r3, r2
 80077d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	1ad2      	subs	r2, r2, r3
 80077ea:	2308      	movs	r3, #8
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d91e      	bls.n	8007830 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4413      	add	r3, r2
 80077f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	2b00      	cmp	r3, #0
 8007802:	d009      	beq.n	8007818 <pvPortMalloc+0xf4>
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	613b      	str	r3, [r7, #16]
 8007816:	e7fe      	b.n	8007816 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	1ad2      	subs	r2, r2, r3
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800782a:	69b8      	ldr	r0, [r7, #24]
 800782c:	f000 f8f6 	bl	8007a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007830:	4b1a      	ldr	r3, [pc, #104]	; (800789c <pvPortMalloc+0x178>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	4a18      	ldr	r2, [pc, #96]	; (800789c <pvPortMalloc+0x178>)
 800783c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800783e:	4b17      	ldr	r3, [pc, #92]	; (800789c <pvPortMalloc+0x178>)
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	4b18      	ldr	r3, [pc, #96]	; (80078a4 <pvPortMalloc+0x180>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d203      	bcs.n	8007852 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800784a:	4b14      	ldr	r3, [pc, #80]	; (800789c <pvPortMalloc+0x178>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a15      	ldr	r2, [pc, #84]	; (80078a4 <pvPortMalloc+0x180>)
 8007850:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	4b10      	ldr	r3, [pc, #64]	; (8007898 <pvPortMalloc+0x174>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	431a      	orrs	r2, r3
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007866:	f7fe fdcb 	bl	8006400 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	2b00      	cmp	r3, #0
 8007872:	d009      	beq.n	8007888 <pvPortMalloc+0x164>
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	e7fe      	b.n	8007886 <pvPortMalloc+0x162>
	return pvReturn;
 8007888:	69fb      	ldr	r3, [r7, #28]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3728      	adds	r7, #40	; 0x28
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20001b44 	.word	0x20001b44
 8007898:	20001b50 	.word	0x20001b50
 800789c:	20001b48 	.word	0x20001b48
 80078a0:	20001b3c 	.word	0x20001b3c
 80078a4:	20001b4c 	.word	0x20001b4c

080078a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d046      	beq.n	8007948 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078ba:	2308      	movs	r3, #8
 80078bc:	425b      	negs	r3, r3
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	4413      	add	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	4b20      	ldr	r3, [pc, #128]	; (8007950 <vPortFree+0xa8>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4013      	ands	r3, r2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d109      	bne.n	80078ea <vPortFree+0x42>
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	e7fe      	b.n	80078e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d009      	beq.n	8007906 <vPortFree+0x5e>
 80078f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	60bb      	str	r3, [r7, #8]
 8007904:	e7fe      	b.n	8007904 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	4b11      	ldr	r3, [pc, #68]	; (8007950 <vPortFree+0xa8>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4013      	ands	r3, r2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d019      	beq.n	8007948 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d115      	bne.n	8007948 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <vPortFree+0xa8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	43db      	mvns	r3, r3
 8007926:	401a      	ands	r2, r3
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800792c:	f7fe fd5a 	bl	80063e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	4b07      	ldr	r3, [pc, #28]	; (8007954 <vPortFree+0xac>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4413      	add	r3, r2
 800793a:	4a06      	ldr	r2, [pc, #24]	; (8007954 <vPortFree+0xac>)
 800793c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800793e:	6938      	ldr	r0, [r7, #16]
 8007940:	f000 f86c 	bl	8007a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007944:	f7fe fd5c 	bl	8006400 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007948:	bf00      	nop
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20001b50 	.word	0x20001b50
 8007954:	20001b48 	.word	0x20001b48

08007958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800795e:	f640 53ac 	movw	r3, #3500	; 0xdac
 8007962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007964:	4b27      	ldr	r3, [pc, #156]	; (8007a04 <prvHeapInit+0xac>)
 8007966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00c      	beq.n	800798c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3307      	adds	r3, #7
 8007976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0307 	bic.w	r3, r3, #7
 800797e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	4a1f      	ldr	r2, [pc, #124]	; (8007a04 <prvHeapInit+0xac>)
 8007988:	4413      	add	r3, r2
 800798a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007990:	4a1d      	ldr	r2, [pc, #116]	; (8007a08 <prvHeapInit+0xb0>)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007996:	4b1c      	ldr	r3, [pc, #112]	; (8007a08 <prvHeapInit+0xb0>)
 8007998:	2200      	movs	r2, #0
 800799a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079a4:	2208      	movs	r2, #8
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	1a9b      	subs	r3, r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 0307 	bic.w	r3, r3, #7
 80079b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4a15      	ldr	r2, [pc, #84]	; (8007a0c <prvHeapInit+0xb4>)
 80079b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079ba:	4b14      	ldr	r3, [pc, #80]	; (8007a0c <prvHeapInit+0xb4>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2200      	movs	r2, #0
 80079c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079c2:	4b12      	ldr	r3, [pc, #72]	; (8007a0c <prvHeapInit+0xb4>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	1ad2      	subs	r2, r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079d8:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <prvHeapInit+0xb4>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	4a0a      	ldr	r2, [pc, #40]	; (8007a10 <prvHeapInit+0xb8>)
 80079e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <prvHeapInit+0xbc>)
 80079ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079f0:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <prvHeapInit+0xc0>)
 80079f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079f6:	601a      	str	r2, [r3, #0]
}
 80079f8:	bf00      	nop
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bc80      	pop	{r7}
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000d90 	.word	0x20000d90
 8007a08:	20001b3c 	.word	0x20001b3c
 8007a0c:	20001b44 	.word	0x20001b44
 8007a10:	20001b4c 	.word	0x20001b4c
 8007a14:	20001b48 	.word	0x20001b48
 8007a18:	20001b50 	.word	0x20001b50

08007a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a24:	4b27      	ldr	r3, [pc, #156]	; (8007ac4 <prvInsertBlockIntoFreeList+0xa8>)
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	e002      	b.n	8007a30 <prvInsertBlockIntoFreeList+0x14>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d8f7      	bhi.n	8007a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	4413      	add	r3, r2
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d108      	bne.n	8007a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	441a      	add	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	441a      	add	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d118      	bne.n	8007aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	4b14      	ldr	r3, [pc, #80]	; (8007ac8 <prvInsertBlockIntoFreeList+0xac>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d00d      	beq.n	8007a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	441a      	add	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	e008      	b.n	8007aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <prvInsertBlockIntoFreeList+0xac>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	e003      	b.n	8007aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d002      	beq.n	8007aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aba:	bf00      	nop
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr
 8007ac4:	20001b3c 	.word	0x20001b3c
 8007ac8:	20001b44 	.word	0x20001b44

08007acc <__libc_init_array>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	2500      	movs	r5, #0
 8007ad0:	4e0c      	ldr	r6, [pc, #48]	; (8007b04 <__libc_init_array+0x38>)
 8007ad2:	4c0d      	ldr	r4, [pc, #52]	; (8007b08 <__libc_init_array+0x3c>)
 8007ad4:	1ba4      	subs	r4, r4, r6
 8007ad6:	10a4      	asrs	r4, r4, #2
 8007ad8:	42a5      	cmp	r5, r4
 8007ada:	d109      	bne.n	8007af0 <__libc_init_array+0x24>
 8007adc:	f000 f864 	bl	8007ba8 <_init>
 8007ae0:	2500      	movs	r5, #0
 8007ae2:	4e0a      	ldr	r6, [pc, #40]	; (8007b0c <__libc_init_array+0x40>)
 8007ae4:	4c0a      	ldr	r4, [pc, #40]	; (8007b10 <__libc_init_array+0x44>)
 8007ae6:	1ba4      	subs	r4, r4, r6
 8007ae8:	10a4      	asrs	r4, r4, #2
 8007aea:	42a5      	cmp	r5, r4
 8007aec:	d105      	bne.n	8007afa <__libc_init_array+0x2e>
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007af4:	4798      	blx	r3
 8007af6:	3501      	adds	r5, #1
 8007af8:	e7ee      	b.n	8007ad8 <__libc_init_array+0xc>
 8007afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007afe:	4798      	blx	r3
 8007b00:	3501      	adds	r5, #1
 8007b02:	e7f2      	b.n	8007aea <__libc_init_array+0x1e>
 8007b04:	080088ec 	.word	0x080088ec
 8007b08:	080088ec 	.word	0x080088ec
 8007b0c:	080088ec 	.word	0x080088ec
 8007b10:	080088f0 	.word	0x080088f0

08007b14 <memcmp>:
 8007b14:	b530      	push	{r4, r5, lr}
 8007b16:	2400      	movs	r4, #0
 8007b18:	42a2      	cmp	r2, r4
 8007b1a:	d101      	bne.n	8007b20 <memcmp+0xc>
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	e007      	b.n	8007b30 <memcmp+0x1c>
 8007b20:	5d03      	ldrb	r3, [r0, r4]
 8007b22:	3401      	adds	r4, #1
 8007b24:	190d      	adds	r5, r1, r4
 8007b26:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8007b2a:	42ab      	cmp	r3, r5
 8007b2c:	d0f4      	beq.n	8007b18 <memcmp+0x4>
 8007b2e:	1b58      	subs	r0, r3, r5
 8007b30:	bd30      	pop	{r4, r5, pc}

08007b32 <memcpy>:
 8007b32:	b510      	push	{r4, lr}
 8007b34:	1e43      	subs	r3, r0, #1
 8007b36:	440a      	add	r2, r1
 8007b38:	4291      	cmp	r1, r2
 8007b3a:	d100      	bne.n	8007b3e <memcpy+0xc>
 8007b3c:	bd10      	pop	{r4, pc}
 8007b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b46:	e7f7      	b.n	8007b38 <memcpy+0x6>

08007b48 <memset>:
 8007b48:	4603      	mov	r3, r0
 8007b4a:	4402      	add	r2, r0
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d100      	bne.n	8007b52 <memset+0xa>
 8007b50:	4770      	bx	lr
 8007b52:	f803 1b01 	strb.w	r1, [r3], #1
 8007b56:	e7f9      	b.n	8007b4c <memset+0x4>

08007b58 <strchr>:
 8007b58:	b2c9      	uxtb	r1, r1
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b60:	b11a      	cbz	r2, 8007b6a <strchr+0x12>
 8007b62:	428a      	cmp	r2, r1
 8007b64:	d1f9      	bne.n	8007b5a <strchr+0x2>
 8007b66:	4618      	mov	r0, r3
 8007b68:	4770      	bx	lr
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	bf18      	it	ne
 8007b6e:	2300      	movne	r3, #0
 8007b70:	e7f9      	b.n	8007b66 <strchr+0xe>

08007b72 <strcpy>:
 8007b72:	4603      	mov	r3, r0
 8007b74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b78:	f803 2b01 	strb.w	r2, [r3], #1
 8007b7c:	2a00      	cmp	r2, #0
 8007b7e:	d1f9      	bne.n	8007b74 <strcpy+0x2>
 8007b80:	4770      	bx	lr

08007b82 <strncmp>:
 8007b82:	b510      	push	{r4, lr}
 8007b84:	b16a      	cbz	r2, 8007ba2 <strncmp+0x20>
 8007b86:	3901      	subs	r1, #1
 8007b88:	1884      	adds	r4, r0, r2
 8007b8a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007b8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d103      	bne.n	8007b9e <strncmp+0x1c>
 8007b96:	42a0      	cmp	r0, r4
 8007b98:	d001      	beq.n	8007b9e <strncmp+0x1c>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1f5      	bne.n	8007b8a <strncmp+0x8>
 8007b9e:	1a98      	subs	r0, r3, r2
 8007ba0:	bd10      	pop	{r4, pc}
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	e7fc      	b.n	8007ba0 <strncmp+0x1e>
	...

08007ba8 <_init>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	bf00      	nop
 8007bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bae:	bc08      	pop	{r3}
 8007bb0:	469e      	mov	lr, r3
 8007bb2:	4770      	bx	lr

08007bb4 <_fini>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	bf00      	nop
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr
