
libertyMestre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c74  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de0  08002de0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002de0  08002de0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de0  08002de0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de0  08002de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001064  20000010  08002df8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001074  08002df8  00021074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010024  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000257f  00000000  00000000  0003005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  000325e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  000335a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184e2  00000000  00000000  00034448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c438  00000000  00000000  0004c92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000909d1  00000000  00000000  00058d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004124  00000000  00000000  000e97b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002d6c 	.word	0x08002d6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002d6c 	.word	0x08002d6c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa7f 	bl	8000688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f81d 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f893 	bl	80002b8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000192:	f000 f85b 	bl	800024c <MX_SPI2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000196:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <main+0x40>)
 8000198:	1d3c      	adds	r4, r7, #4
 800019a:	461d      	mov	r5, r3
 800019c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2100      	movs	r1, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f001 fc13 	bl	80019d8 <osThreadCreate>
 80001b2:	4602      	mov	r2, r0
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <main+0x44>)
 80001b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001b8:	f001 fc07 	bl	80019ca <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001bc:	e7fe      	b.n	80001bc <main+0x3c>
 80001be:	bf00      	nop
 80001c0:	08002d90 	.word	0x08002d90
 80001c4:	20000fcc 	.word	0x20000fcc

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 fdc0 	bl	8002d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f2:	2310      	movs	r3, #16
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f6:	2302      	movs	r3, #2
 80001f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001fa:	2300      	movs	r3, #0
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001fe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000202:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fcc1 	bl	8000b90 <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000214:	f000 f90a 	bl	800042c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f000 ff2c 	bl	8001090 <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800023e:	f000 f8f5 	bl	800042c <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	; 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <MX_SPI2_Init+0x64>)
 8000252:	4a18      	ldr	r2, [pc, #96]	; (80002b4 <MX_SPI2_Init+0x68>)
 8000254:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000256:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <MX_SPI2_Init+0x64>)
 8000258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800025c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800025e:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <MX_SPI2_Init+0x64>)
 8000260:	2200      	movs	r2, #0
 8000262:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <MX_SPI2_Init+0x64>)
 8000266:	2200      	movs	r2, #0
 8000268:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_SPI2_Init+0x64>)
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <MX_SPI2_Init+0x64>)
 8000272:	2200      	movs	r2, #0
 8000274:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_SPI2_Init+0x64>)
 8000278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800027c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_SPI2_Init+0x64>)
 8000280:	2218      	movs	r2, #24
 8000282:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <MX_SPI2_Init+0x64>)
 8000286:	2200      	movs	r2, #0
 8000288:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_SPI2_Init+0x64>)
 800028c:	2200      	movs	r2, #0
 800028e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <MX_SPI2_Init+0x64>)
 8000292:	2200      	movs	r2, #0
 8000294:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_SPI2_Init+0x64>)
 8000298:	220a      	movs	r2, #10
 800029a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <MX_SPI2_Init+0x64>)
 800029e:	f001 f8af 	bl	8001400 <HAL_SPI_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80002a8:	f000 f8c0 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000fd0 	.word	0x20000fd0
 80002b4:	40003800 	.word	0x40003800

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	f107 030c 	add.w	r3, r7, #12
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002cc:	4b45      	ldr	r3, [pc, #276]	; (80003e4 <MX_GPIO_Init+0x12c>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a44      	ldr	r2, [pc, #272]	; (80003e4 <MX_GPIO_Init+0x12c>)
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b42      	ldr	r3, [pc, #264]	; (80003e4 <MX_GPIO_Init+0x12c>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0320 	and.w	r3, r3, #32
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <MX_GPIO_Init+0x12c>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a3e      	ldr	r2, [pc, #248]	; (80003e4 <MX_GPIO_Init+0x12c>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b3c      	ldr	r3, [pc, #240]	; (80003e4 <MX_GPIO_Init+0x12c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b39      	ldr	r3, [pc, #228]	; (80003e4 <MX_GPIO_Init+0x12c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a38      	ldr	r2, [pc, #224]	; (80003e4 <MX_GPIO_Init+0x12c>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b36      	ldr	r3, [pc, #216]	; (80003e4 <MX_GPIO_Init+0x12c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	603b      	str	r3, [r7, #0]
 8000312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2102      	movs	r1, #2
 8000318:	4833      	ldr	r0, [pc, #204]	; (80003e8 <MX_GPIO_Init+0x130>)
 800031a:	f000 fc21 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	f241 0101 	movw	r1, #4097	; 0x1001
 8000324:	4831      	ldr	r0, [pc, #196]	; (80003ec <MX_GPIO_Init+0x134>)
 8000326:	f000 fc1b 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rst_GPIO_Port, Rst_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000330:	482f      	ldr	r0, [pc, #188]	; (80003f0 <MX_GPIO_Init+0x138>)
 8000332:	f000 fc15 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000336:	2302      	movs	r3, #2
 8000338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2302      	movs	r3, #2
 8000344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000346:	f107 030c 	add.w	r3, r7, #12
 800034a:	4619      	mov	r1, r3
 800034c:	4826      	ldr	r0, [pc, #152]	; (80003e8 <MX_GPIO_Init+0x130>)
 800034e:	f000 faad 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000352:	23ff      	movs	r3, #255	; 0xff
 8000354:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035e:	f107 030c 	add.w	r3, r7, #12
 8000362:	4619      	mov	r1, r3
 8000364:	4822      	ldr	r0, [pc, #136]	; (80003f0 <MX_GPIO_Init+0x138>)
 8000366:	f000 faa1 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_W5500_CS_Pin;
 800036a:	f241 0301 	movw	r3, #4097	; 0x1001
 800036e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2302      	movs	r3, #2
 800037a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037c:	f107 030c 	add.w	r3, r7, #12
 8000380:	4619      	mov	r1, r3
 8000382:	481a      	ldr	r0, [pc, #104]	; (80003ec <MX_GPIO_Init+0x134>)
 8000384:	f000 fa92 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000388:	237e      	movs	r3, #126	; 0x7e
 800038a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800038c:	2300      	movs	r3, #0
 800038e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000394:	f107 030c 	add.w	r3, r7, #12
 8000398:	4619      	mov	r1, r3
 800039a:	4814      	ldr	r0, [pc, #80]	; (80003ec <MX_GPIO_Init+0x134>)
 800039c:	f000 fa86 	bl	80008ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Rst_Pin */
  GPIO_InitStruct.Pin = Rst_Pin;
 80003a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Rst_GPIO_Port, &GPIO_InitStruct);
 80003b2:	f107 030c 	add.w	r3, r7, #12
 80003b6:	4619      	mov	r1, r3
 80003b8:	480d      	ldr	r0, [pc, #52]	; (80003f0 <MX_GPIO_Init+0x138>)
 80003ba:	f000 fa77 	bl	80008ac <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <MX_GPIO_Init+0x13c>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	61fb      	str	r3, [r7, #28]
 80003c4:	69fb      	ldr	r3, [r7, #28]
 80003c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80003ca:	61fb      	str	r3, [r7, #28]
 80003cc:	69fb      	ldr	r3, [r7, #28]
 80003ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003d2:	61fb      	str	r3, [r7, #28]
 80003d4:	4a07      	ldr	r2, [pc, #28]	; (80003f4 <MX_GPIO_Init+0x13c>)
 80003d6:	69fb      	ldr	r3, [r7, #28]
 80003d8:	6053      	str	r3, [r2, #4]

}
 80003da:	bf00      	nop
 80003dc:	3720      	adds	r7, #32
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40011400 	.word	0x40011400
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	40010800 	.word	0x40010800
 80003f4:	40010000 	.word	0x40010000

080003f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000400:	2001      	movs	r0, #1
 8000402:	f001 fb35 	bl	8001a70 <osDelay>
 8000406:	e7fb      	b.n	8000400 <StartDefaultTask+0x8>

08000408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d101      	bne.n	800041e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800041a:	f000 f94b 	bl	80006b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40012c00 	.word	0x40012c00

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <HAL_MspInit+0x68>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <HAL_MspInit+0x68>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <HAL_MspInit+0x68>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <HAL_MspInit+0x68>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a11      	ldr	r2, [pc, #68]	; (80004a0 <HAL_MspInit+0x68>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x68>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800046e:	2200      	movs	r2, #0
 8000470:	210f      	movs	r1, #15
 8000472:	f06f 0001 	mvn.w	r0, #1
 8000476:	f000 f9ee 	bl	8000856 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <HAL_MspInit+0x6c>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <HAL_MspInit+0x6c>)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010000 	.word	0x40010000

080004a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a1c      	ldr	r2, [pc, #112]	; (8000534 <HAL_SPI_MspInit+0x8c>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d131      	bne.n	800052c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <HAL_SPI_MspInit+0x90>)
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	4a1a      	ldr	r2, [pc, #104]	; (8000538 <HAL_SPI_MspInit+0x90>)
 80004ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d2:	61d3      	str	r3, [r2, #28]
 80004d4:	4b18      	ldr	r3, [pc, #96]	; (8000538 <HAL_SPI_MspInit+0x90>)
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b15      	ldr	r3, [pc, #84]	; (8000538 <HAL_SPI_MspInit+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a14      	ldr	r2, [pc, #80]	; (8000538 <HAL_SPI_MspInit+0x90>)
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_SPI_MspInit+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0308 	and.w	r3, r3, #8
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 80004f8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fe:	2302      	movs	r3, #2
 8000500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000502:	2303      	movs	r3, #3
 8000504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	480b      	ldr	r0, [pc, #44]	; (800053c <HAL_SPI_MspInit+0x94>)
 800050e:	f000 f9cd 	bl	80008ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8000512:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <HAL_SPI_MspInit+0x94>)
 8000528:	f000 f9c0 	bl	80008ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40003800 	.word	0x40003800
 8000538:	40021000 	.word	0x40021000
 800053c:	40010c00 	.word	0x40010c00

08000540 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08c      	sub	sp, #48	; 0x30
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	2019      	movs	r0, #25
 8000556:	f000 f97e 	bl	8000856 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800055a:	2019      	movs	r0, #25
 800055c:	f000 f997 	bl	800088e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <HAL_InitTick+0x9c>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a1d      	ldr	r2, [pc, #116]	; (80005dc <HAL_InitTick+0x9c>)
 8000566:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <HAL_InitTick+0x9c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000578:	f107 0210 	add.w	r2, r7, #16
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4611      	mov	r1, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f000 feee 	bl	8001364 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000588:	f000 fed8 	bl	800133c <HAL_RCC_GetPCLK2Freq>
 800058c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800058e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <HAL_InitTick+0xa0>)
 8000592:	fba2 2303 	umull	r2, r3, r2, r3
 8000596:	0c9b      	lsrs	r3, r3, #18
 8000598:	3b01      	subs	r3, #1
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <HAL_InitTick+0xa4>)
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <HAL_InitTick+0xa8>)
 80005a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <HAL_InitTick+0xa4>)
 80005a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <HAL_InitTick+0xa4>)
 80005ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_InitTick+0xa4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <HAL_InitTick+0xa4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <HAL_InitTick+0xa4>)
 80005be:	f000 ffa3 	bl	8001508 <HAL_TIM_Base_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d104      	bne.n	80005d2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <HAL_InitTick+0xa4>)
 80005ca:	f000 fff5 	bl	80015b8 <HAL_TIM_Base_Start_IT>
 80005ce:	4603      	mov	r3, r0
 80005d0:	e000      	b.n	80005d4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3730      	adds	r7, #48	; 0x30
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	431bde83 	.word	0x431bde83
 80005e4:	20001028 	.word	0x20001028
 80005e8:	40012c00 	.word	0x40012c00

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <HardFault_Handler+0x4>

080005fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <MemManage_Handler+0x4>

08000604 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <BusFault_Handler+0x4>

0800060a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <UsageFault_Handler+0x4>

08000610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <TIM1_UP_IRQHandler+0x10>)
 8000622:	f001 f81b 	bl	800165c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20001028 	.word	0x20001028

08000630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800063c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800063e:	e003      	b.n	8000648 <LoopCopyDataInit>

08000640 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000642:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000644:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000646:	3104      	adds	r1, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800064c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800064e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000650:	d3f6      	bcc.n	8000640 <CopyDataInit>
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000654:	e002      	b.n	800065c <LoopFillZerobss>

08000656 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000658:	f842 3b04 	str.w	r3, [r2], #4

0800065c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800065e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000660:	d3f9      	bcc.n	8000656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000662:	f7ff ffe5 	bl	8000630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000666:	f002 fb55 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f7ff fd89 	bl	8000180 <main>
  bx lr
 800066e:	4770      	bx	lr
  ldr r3, =_sidata
 8000670:	08002de8 	.word	0x08002de8
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000678:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800067c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000680:	20001074 	.word	0x20001074

08000684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_2_IRQHandler>
	...

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_Init+0x28>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_Init+0x28>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f8d1 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ff4e 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a4:	f7ff fec8 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40022000 	.word	0x40022000

080006b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x1c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x20>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a03      	ldr	r2, [pc, #12]	; (80006d4 <HAL_IncTick+0x20>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20001070 	.word	0x20001070

080006d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <HAL_GetTick+0x10>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	20001070 	.word	0x20001070

080006ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	db0b      	blt.n	800077a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f003 021f 	and.w	r2, r3, #31
 8000768:	4906      	ldr	r1, [pc, #24]	; (8000784 <__NVIC_EnableIRQ+0x34>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	095b      	lsrs	r3, r3, #5
 8000770:	2001      	movs	r0, #1
 8000772:	fa00 f202 	lsl.w	r2, r0, r2
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100

08000788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db0a      	blt.n	80007b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	490c      	ldr	r1, [pc, #48]	; (80007d4 <__NVIC_SetPriority+0x4c>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	0112      	lsls	r2, r2, #4
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	440b      	add	r3, r1
 80007ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b0:	e00a      	b.n	80007c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4908      	ldr	r1, [pc, #32]	; (80007d8 <__NVIC_SetPriority+0x50>)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	3b04      	subs	r3, #4
 80007c0:	0112      	lsls	r2, r2, #4
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	761a      	strb	r2, [r3, #24]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e100 	.word	0xe000e100
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	f1c3 0307 	rsb	r3, r3, #7
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	bf28      	it	cs
 80007fa:	2304      	movcs	r3, #4
 80007fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3304      	adds	r3, #4
 8000802:	2b06      	cmp	r3, #6
 8000804:	d902      	bls.n	800080c <NVIC_EncodePriority+0x30>
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3b03      	subs	r3, #3
 800080a:	e000      	b.n	800080e <NVIC_EncodePriority+0x32>
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	f04f 32ff 	mov.w	r2, #4294967295
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43da      	mvns	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	401a      	ands	r2, r3
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000824:	f04f 31ff 	mov.w	r1, #4294967295
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	43d9      	mvns	r1, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	4313      	orrs	r3, r2
         );
}
 8000836:	4618      	mov	r0, r3
 8000838:	3724      	adds	r7, #36	; 0x24
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff4f 	bl	80006ec <__NVIC_SetPriorityGrouping>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000868:	f7ff ff64 	bl	8000734 <__NVIC_GetPriorityGrouping>
 800086c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff ffb2 	bl	80007dc <NVIC_EncodePriority>
 8000878:	4602      	mov	r2, r0
 800087a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff81 	bl	8000788 <__NVIC_SetPriority>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff57 	bl	8000750 <__NVIC_EnableIRQ>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008be:	e127      	b.n	8000b10 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008c0:	2201      	movs	r2, #1
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	69fa      	ldr	r2, [r7, #28]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	429a      	cmp	r2, r3
 80008da:	f040 8116 	bne.w	8000b0a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b12      	cmp	r3, #18
 80008e4:	d034      	beq.n	8000950 <HAL_GPIO_Init+0xa4>
 80008e6:	2b12      	cmp	r3, #18
 80008e8:	d80d      	bhi.n	8000906 <HAL_GPIO_Init+0x5a>
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d02b      	beq.n	8000946 <HAL_GPIO_Init+0x9a>
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d804      	bhi.n	80008fc <HAL_GPIO_Init+0x50>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d031      	beq.n	800095a <HAL_GPIO_Init+0xae>
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d01c      	beq.n	8000934 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008fa:	e048      	b.n	800098e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d043      	beq.n	8000988 <HAL_GPIO_Init+0xdc>
 8000900:	2b11      	cmp	r3, #17
 8000902:	d01b      	beq.n	800093c <HAL_GPIO_Init+0x90>
          break;
 8000904:	e043      	b.n	800098e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000906:	4a89      	ldr	r2, [pc, #548]	; (8000b2c <HAL_GPIO_Init+0x280>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d026      	beq.n	800095a <HAL_GPIO_Init+0xae>
 800090c:	4a87      	ldr	r2, [pc, #540]	; (8000b2c <HAL_GPIO_Init+0x280>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d806      	bhi.n	8000920 <HAL_GPIO_Init+0x74>
 8000912:	4a87      	ldr	r2, [pc, #540]	; (8000b30 <HAL_GPIO_Init+0x284>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d020      	beq.n	800095a <HAL_GPIO_Init+0xae>
 8000918:	4a86      	ldr	r2, [pc, #536]	; (8000b34 <HAL_GPIO_Init+0x288>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d01d      	beq.n	800095a <HAL_GPIO_Init+0xae>
          break;
 800091e:	e036      	b.n	800098e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000920:	4a85      	ldr	r2, [pc, #532]	; (8000b38 <HAL_GPIO_Init+0x28c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d019      	beq.n	800095a <HAL_GPIO_Init+0xae>
 8000926:	4a85      	ldr	r2, [pc, #532]	; (8000b3c <HAL_GPIO_Init+0x290>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d016      	beq.n	800095a <HAL_GPIO_Init+0xae>
 800092c:	4a84      	ldr	r2, [pc, #528]	; (8000b40 <HAL_GPIO_Init+0x294>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d013      	beq.n	800095a <HAL_GPIO_Init+0xae>
          break;
 8000932:	e02c      	b.n	800098e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	623b      	str	r3, [r7, #32]
          break;
 800093a:	e028      	b.n	800098e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	3304      	adds	r3, #4
 8000942:	623b      	str	r3, [r7, #32]
          break;
 8000944:	e023      	b.n	800098e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	3308      	adds	r3, #8
 800094c:	623b      	str	r3, [r7, #32]
          break;
 800094e:	e01e      	b.n	800098e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	330c      	adds	r3, #12
 8000956:	623b      	str	r3, [r7, #32]
          break;
 8000958:	e019      	b.n	800098e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d102      	bne.n	8000968 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000962:	2304      	movs	r3, #4
 8000964:	623b      	str	r3, [r7, #32]
          break;
 8000966:	e012      	b.n	800098e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d105      	bne.n	800097c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000970:	2308      	movs	r3, #8
 8000972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	611a      	str	r2, [r3, #16]
          break;
 800097a:	e008      	b.n	800098e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800097c:	2308      	movs	r3, #8
 800097e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	615a      	str	r2, [r3, #20]
          break;
 8000986:	e002      	b.n	800098e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	2bff      	cmp	r3, #255	; 0xff
 8000992:	d801      	bhi.n	8000998 <HAL_GPIO_Init+0xec>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	e001      	b.n	800099c <HAL_GPIO_Init+0xf0>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3304      	adds	r3, #4
 800099c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	2bff      	cmp	r3, #255	; 0xff
 80009a2:	d802      	bhi.n	80009aa <HAL_GPIO_Init+0xfe>
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	e002      	b.n	80009b0 <HAL_GPIO_Init+0x104>
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	3b08      	subs	r3, #8
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	210f      	movs	r1, #15
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	401a      	ands	r2, r3
 80009c2:	6a39      	ldr	r1, [r7, #32]
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	431a      	orrs	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 8096 	beq.w	8000b0a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009de:	4b59      	ldr	r3, [pc, #356]	; (8000b44 <HAL_GPIO_Init+0x298>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	4a58      	ldr	r2, [pc, #352]	; (8000b44 <HAL_GPIO_Init+0x298>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6193      	str	r3, [r2, #24]
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <HAL_GPIO_Init+0x298>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f6:	4a54      	ldr	r2, [pc, #336]	; (8000b48 <HAL_GPIO_Init+0x29c>)
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	3302      	adds	r3, #2
 80009fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a02:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	f003 0303 	and.w	r3, r3, #3
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	4013      	ands	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4b      	ldr	r2, [pc, #300]	; (8000b4c <HAL_GPIO_Init+0x2a0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d013      	beq.n	8000a4a <HAL_GPIO_Init+0x19e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4a      	ldr	r2, [pc, #296]	; (8000b50 <HAL_GPIO_Init+0x2a4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d00d      	beq.n	8000a46 <HAL_GPIO_Init+0x19a>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a49      	ldr	r2, [pc, #292]	; (8000b54 <HAL_GPIO_Init+0x2a8>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d007      	beq.n	8000a42 <HAL_GPIO_Init+0x196>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a48      	ldr	r2, [pc, #288]	; (8000b58 <HAL_GPIO_Init+0x2ac>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d101      	bne.n	8000a3e <HAL_GPIO_Init+0x192>
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x1a0>
 8000a3e:	2304      	movs	r3, #4
 8000a40:	e004      	b.n	8000a4c <HAL_GPIO_Init+0x1a0>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e002      	b.n	8000a4c <HAL_GPIO_Init+0x1a0>
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <HAL_GPIO_Init+0x1a0>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a4e:	f002 0203 	and.w	r2, r2, #3
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	4093      	lsls	r3, r2
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a5c:	493a      	ldr	r1, [pc, #232]	; (8000b48 <HAL_GPIO_Init+0x29c>)
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3302      	adds	r3, #2
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d006      	beq.n	8000a84 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a76:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4938      	ldr	r1, [pc, #224]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	600b      	str	r3, [r1, #0]
 8000a82:	e006      	b.n	8000a92 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a84:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	4933      	ldr	r1, [pc, #204]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d006      	beq.n	8000aac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	492e      	ldr	r1, [pc, #184]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	604b      	str	r3, [r1, #4]
 8000aaa:	e006      	b.n	8000aba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	4929      	ldr	r1, [pc, #164]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	4924      	ldr	r1, [pc, #144]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	608b      	str	r3, [r1, #8]
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	491f      	ldr	r1, [pc, #124]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	491a      	ldr	r1, [pc, #104]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60cb      	str	r3, [r1, #12]
 8000afa:	e006      	b.n	8000b0a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4915      	ldr	r1, [pc, #84]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f47f aed0 	bne.w	80008c0 <HAL_GPIO_Init+0x14>
  }
}
 8000b20:	bf00      	nop
 8000b22:	372c      	adds	r7, #44	; 0x2c
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	10210000 	.word	0x10210000
 8000b30:	10110000 	.word	0x10110000
 8000b34:	10120000 	.word	0x10120000
 8000b38:	10310000 	.word	0x10310000
 8000b3c:	10320000 	.word	0x10320000
 8000b40:	10220000 	.word	0x10220000
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	40010c00 	.word	0x40010c00
 8000b54:	40011000 	.word	0x40011000
 8000b58:	40011400 	.word	0x40011400
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b70:	787b      	ldrb	r3, [r7, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b7c:	e003      	b.n	8000b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	041a      	lsls	r2, r3, #16
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	611a      	str	r2, [r3, #16]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e26c      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 8087 	beq.w	8000cbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bb0:	4b92      	ldr	r3, [pc, #584]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d00c      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bbc:	4b8f      	ldr	r3, [pc, #572]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d112      	bne.n	8000bee <HAL_RCC_OscConfig+0x5e>
 8000bc8:	4b8c      	ldr	r3, [pc, #560]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd4:	d10b      	bne.n	8000bee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd6:	4b89      	ldr	r3, [pc, #548]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d06c      	beq.n	8000cbc <HAL_RCC_OscConfig+0x12c>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d168      	bne.n	8000cbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e246      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf6:	d106      	bne.n	8000c06 <HAL_RCC_OscConfig+0x76>
 8000bf8:	4b80      	ldr	r3, [pc, #512]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a7f      	ldr	r2, [pc, #508]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	e02e      	b.n	8000c64 <HAL_RCC_OscConfig+0xd4>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10c      	bne.n	8000c28 <HAL_RCC_OscConfig+0x98>
 8000c0e:	4b7b      	ldr	r3, [pc, #492]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a7a      	ldr	r2, [pc, #488]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	4b78      	ldr	r3, [pc, #480]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a77      	ldr	r2, [pc, #476]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e01d      	b.n	8000c64 <HAL_RCC_OscConfig+0xd4>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c30:	d10c      	bne.n	8000c4c <HAL_RCC_OscConfig+0xbc>
 8000c32:	4b72      	ldr	r3, [pc, #456]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a71      	ldr	r2, [pc, #452]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b6f      	ldr	r3, [pc, #444]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a6e      	ldr	r2, [pc, #440]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e00b      	b.n	8000c64 <HAL_RCC_OscConfig+0xd4>
 8000c4c:	4b6b      	ldr	r3, [pc, #428]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a6a      	ldr	r2, [pc, #424]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b68      	ldr	r3, [pc, #416]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a67      	ldr	r2, [pc, #412]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d013      	beq.n	8000c94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fd34 	bl	80006d8 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fd30 	bl	80006d8 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	; 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e1fa      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c86:	4b5d      	ldr	r3, [pc, #372]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f0      	beq.n	8000c74 <HAL_RCC_OscConfig+0xe4>
 8000c92:	e014      	b.n	8000cbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fd20 	bl	80006d8 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fd1c 	bl	80006d8 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	; 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e1e6      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cae:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f0      	bne.n	8000c9c <HAL_RCC_OscConfig+0x10c>
 8000cba:	e000      	b.n	8000cbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d063      	beq.n	8000d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cca:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00b      	beq.n	8000cee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cd6:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d11c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x18c>
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d116      	bne.n	8000d1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cee:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d005      	beq.n	8000d06 <HAL_RCC_OscConfig+0x176>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d001      	beq.n	8000d06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e1ba      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d06:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4939      	ldr	r1, [pc, #228]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1a:	e03a      	b.n	8000d92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d020      	beq.n	8000d66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d24:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fcd5 	bl	80006d8 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d32:	f7ff fcd1 	bl	80006d8 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e19b      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d50:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4927      	ldr	r1, [pc, #156]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
 8000d64:	e015      	b.n	8000d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fcb4 	bl	80006d8 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d74:	f7ff fcb0 	bl	80006d8 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e17a      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f0      	bne.n	8000d74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d03a      	beq.n	8000e14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d019      	beq.n	8000dda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <HAL_RCC_OscConfig+0x274>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dac:	f7ff fc94 	bl	80006d8 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff fc90 	bl	80006d8 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e15a      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 faf6 	bl	80013c4 <RCC_Delay>
 8000dd8:	e01c      	b.n	8000e14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_RCC_OscConfig+0x274>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de0:	f7ff fc7a 	bl	80006d8 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de6:	e00f      	b.n	8000e08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de8:	f7ff fc76 	bl	80006d8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d908      	bls.n	8000e08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e140      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	42420000 	.word	0x42420000
 8000e04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e08:	4b9e      	ldr	r3, [pc, #632]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1e9      	bne.n	8000de8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80a6 	beq.w	8000f6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e26:	4b97      	ldr	r3, [pc, #604]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10d      	bne.n	8000e4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	4b94      	ldr	r3, [pc, #592]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a93      	ldr	r2, [pc, #588]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	61d3      	str	r3, [r2, #28]
 8000e3e:	4b91      	ldr	r3, [pc, #580]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4e:	4b8e      	ldr	r3, [pc, #568]	; (8001088 <HAL_RCC_OscConfig+0x4f8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d118      	bne.n	8000e8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5a:	4b8b      	ldr	r3, [pc, #556]	; (8001088 <HAL_RCC_OscConfig+0x4f8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a8a      	ldr	r2, [pc, #552]	; (8001088 <HAL_RCC_OscConfig+0x4f8>)
 8000e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e66:	f7ff fc37 	bl	80006d8 <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e6e:	f7ff fc33 	bl	80006d8 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b64      	cmp	r3, #100	; 0x64
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e0fd      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e80:	4b81      	ldr	r3, [pc, #516]	; (8001088 <HAL_RCC_OscConfig+0x4f8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f0      	beq.n	8000e6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d106      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x312>
 8000e94:	4b7b      	ldr	r3, [pc, #492]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4a7a      	ldr	r2, [pc, #488]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6213      	str	r3, [r2, #32]
 8000ea0:	e02d      	b.n	8000efe <HAL_RCC_OscConfig+0x36e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x334>
 8000eaa:	4b76      	ldr	r3, [pc, #472]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	4a75      	ldr	r2, [pc, #468]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6213      	str	r3, [r2, #32]
 8000eb6:	4b73      	ldr	r3, [pc, #460]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a72      	ldr	r2, [pc, #456]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	f023 0304 	bic.w	r3, r3, #4
 8000ec0:	6213      	str	r3, [r2, #32]
 8000ec2:	e01c      	b.n	8000efe <HAL_RCC_OscConfig+0x36e>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d10c      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x356>
 8000ecc:	4b6d      	ldr	r3, [pc, #436]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a6c      	ldr	r2, [pc, #432]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	6213      	str	r3, [r2, #32]
 8000ed8:	4b6a      	ldr	r3, [pc, #424]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a69      	ldr	r2, [pc, #420]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6213      	str	r3, [r2, #32]
 8000ee4:	e00b      	b.n	8000efe <HAL_RCC_OscConfig+0x36e>
 8000ee6:	4b67      	ldr	r3, [pc, #412]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4a66      	ldr	r2, [pc, #408]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000eec:	f023 0301 	bic.w	r3, r3, #1
 8000ef0:	6213      	str	r3, [r2, #32]
 8000ef2:	4b64      	ldr	r3, [pc, #400]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	4a63      	ldr	r2, [pc, #396]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	f023 0304 	bic.w	r3, r3, #4
 8000efc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d015      	beq.n	8000f32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fbe7 	bl	80006d8 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f0c:	e00a      	b.n	8000f24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0e:	f7ff fbe3 	bl	80006d8 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e0ab      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f24:	4b57      	ldr	r3, [pc, #348]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0ee      	beq.n	8000f0e <HAL_RCC_OscConfig+0x37e>
 8000f30:	e014      	b.n	8000f5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f32:	f7ff fbd1 	bl	80006d8 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f38:	e00a      	b.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3a:	f7ff fbcd 	bl	80006d8 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e095      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f50:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1ee      	bne.n	8000f3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d105      	bne.n	8000f6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f62:	4b48      	ldr	r3, [pc, #288]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a47      	ldr	r2, [pc, #284]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8081 	beq.w	800107a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f78:	4b42      	ldr	r3, [pc, #264]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d061      	beq.n	8001048 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d146      	bne.n	800101a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8c:	4b3f      	ldr	r3, [pc, #252]	; (800108c <HAL_RCC_OscConfig+0x4fc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f92:	f7ff fba1 	bl	80006d8 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9a:	f7ff fb9d 	bl	80006d8 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e067      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1f0      	bne.n	8000f9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc0:	d108      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	492d      	ldr	r1, [pc, #180]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a19      	ldr	r1, [r3, #32]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	4927      	ldr	r1, [pc, #156]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fec:	4b27      	ldr	r3, [pc, #156]	; (800108c <HAL_RCC_OscConfig+0x4fc>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff2:	f7ff fb71 	bl	80006d8 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffa:	f7ff fb6d 	bl	80006d8 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e037      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0x46a>
 8001018:	e02f      	b.n	800107a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_RCC_OscConfig+0x4fc>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fb5a 	bl	80006d8 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001028:	f7ff fb56 	bl	80006d8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e020      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0x498>
 8001046:	e018      	b.n	800107a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e013      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_RCC_OscConfig+0x4f4>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	429a      	cmp	r2, r3
 8001066:	d106      	bne.n	8001076 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001072:	429a      	cmp	r2, r3
 8001074:	d001      	beq.n	800107a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000
 8001088:	40007000 	.word	0x40007000
 800108c:	42420060 	.word	0x42420060

08001090 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0d0      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a4:	4b6a      	ldr	r3, [pc, #424]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d910      	bls.n	80010d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b2:	4b67      	ldr	r3, [pc, #412]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 0207 	bic.w	r2, r3, #7
 80010ba:	4965      	ldr	r1, [pc, #404]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	4313      	orrs	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c2:	4b63      	ldr	r3, [pc, #396]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d001      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0b8      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d020      	beq.n	8001122 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ec:	4b59      	ldr	r3, [pc, #356]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4a58      	ldr	r2, [pc, #352]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001104:	4b53      	ldr	r3, [pc, #332]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	4a52      	ldr	r2, [pc, #328]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800110e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001110:	4b50      	ldr	r3, [pc, #320]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	494d      	ldr	r1, [pc, #308]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	4313      	orrs	r3, r2
 8001120:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d040      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d107      	bne.n	8001146 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	4b47      	ldr	r3, [pc, #284]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d115      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e07f      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d107      	bne.n	800115e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e073      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115e:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e06b      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116e:	4b39      	ldr	r3, [pc, #228]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f023 0203 	bic.w	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4936      	ldr	r1, [pc, #216]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001180:	f7ff faaa 	bl	80006d8 <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001186:	e00a      	b.n	800119e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001188:	f7ff faa6 	bl	80006d8 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	f241 3288 	movw	r2, #5000	; 0x1388
 8001196:	4293      	cmp	r3, r2
 8001198:	d901      	bls.n	800119e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e053      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 020c 	and.w	r2, r3, #12
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d1eb      	bne.n	8001188 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d210      	bcs.n	80011e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 0207 	bic.w	r2, r3, #7
 80011c6:	4922      	ldr	r1, [pc, #136]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d001      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e032      	b.n	8001246 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4916      	ldr	r1, [pc, #88]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d009      	beq.n	800121e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	490e      	ldr	r1, [pc, #56]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	4313      	orrs	r3, r2
 800121c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800121e:	f000 f821 	bl	8001264 <HAL_RCC_GetSysClockFreq>
 8001222:	4601      	mov	r1, r0
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_RCC_ClockConfig+0x1c8>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	fa21 f303 	lsr.w	r3, r1, r3
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <HAL_RCC_ClockConfig+0x1cc>)
 8001238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_RCC_ClockConfig+0x1d0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f97e 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40022000 	.word	0x40022000
 8001254:	40021000 	.word	0x40021000
 8001258:	08002dc8 	.word	0x08002dc8
 800125c:	20000000 	.word	0x20000000
 8001260:	20000004 	.word	0x20000004

08001264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001264:	b490      	push	{r4, r7}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_RCC_GetSysClockFreq+0xb0>)
 800126c:	1d3c      	adds	r4, r7, #4
 800126e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d002      	beq.n	80012a4 <HAL_RCC_GetSysClockFreq+0x40>
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d003      	beq.n	80012aa <HAL_RCC_GetSysClockFreq+0x46>
 80012a2:	e02d      	b.n	8001300 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012a6:	623b      	str	r3, [r7, #32]
      break;
 80012a8:	e02d      	b.n	8001306 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	0c9b      	lsrs	r3, r3, #18
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012b6:	4413      	add	r3, r2
 80012b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	0c5b      	lsrs	r3, r3, #17
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012d6:	4413      	add	r3, r2
 80012d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012e2:	fb02 f203 	mul.w	r2, r2, r3
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
 80012ee:	e004      	b.n	80012fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	623b      	str	r3, [r7, #32]
      break;
 80012fe:	e002      	b.n	8001306 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001302:	623b      	str	r3, [r7, #32]
      break;
 8001304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001306:	6a3b      	ldr	r3, [r7, #32]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bc90      	pop	{r4, r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	08002dac 	.word	0x08002dac
 8001318:	08002dbc 	.word	0x08002dbc
 800131c:	40021000 	.word	0x40021000
 8001320:	007a1200 	.word	0x007a1200
 8001324:	003d0900 	.word	0x003d0900

08001328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800132c:	4b02      	ldr	r3, [pc, #8]	; (8001338 <HAL_RCC_GetHCLKFreq+0x10>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	20000000 	.word	0x20000000

0800133c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001340:	f7ff fff2 	bl	8001328 <HAL_RCC_GetHCLKFreq>
 8001344:	4601      	mov	r1, r0
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	0adb      	lsrs	r3, r3, #11
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	4a03      	ldr	r2, [pc, #12]	; (8001360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001358:	4618      	mov	r0, r3
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000
 8001360:	08002dd8 	.word	0x08002dd8

08001364 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	220f      	movs	r2, #15
 8001372:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_RCC_GetClockConfig+0x58>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0203 	and.w	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_RCC_GetClockConfig+0x58>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_GetClockConfig+0x58>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_RCC_GetClockConfig+0x58>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_RCC_GetClockConfig+0x5c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0207 	and.w	r2, r3, #7
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40022000 	.word	0x40022000

080013c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <RCC_Delay+0x34>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <RCC_Delay+0x38>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0a5b      	lsrs	r3, r3, #9
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013e0:	bf00      	nop
  }
  while (Delay --);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1e5a      	subs	r2, r3, #1
 80013e6:	60fa      	str	r2, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f9      	bne.n	80013e0 <RCC_Delay+0x1c>
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000000 	.word	0x20000000
 80013fc:	10624dd3 	.word	0x10624dd3

08001400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e076      	b.n	8001500 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	2b00      	cmp	r3, #0
 8001418:	d108      	bne.n	800142c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001422:	d009      	beq.n	8001438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
 800142a:	e005      	b.n	8001438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d106      	bne.n	8001458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff f828 	bl	80004a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2202      	movs	r2, #2
 800145c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800146e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014bc:	ea42 0103 	orr.w	r1, r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	0c1a      	lsrs	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f002 0204 	and.w	r2, r2, #4
 80014de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	69da      	ldr	r2, [r3, #28]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e041      	b.n	800159e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f839 	bl	80015a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2202      	movs	r2, #2
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3304      	adds	r3, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f000 f9b4 	bl	80018b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d001      	beq.n	80015d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e03a      	b.n	8001646 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a18      	ldr	r2, [pc, #96]	; (8001650 <HAL_TIM_Base_Start_IT+0x98>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00e      	beq.n	8001610 <HAL_TIM_Base_Start_IT+0x58>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015fa:	d009      	beq.n	8001610 <HAL_TIM_Base_Start_IT+0x58>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_TIM_Base_Start_IT+0x9c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d004      	beq.n	8001610 <HAL_TIM_Base_Start_IT+0x58>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a13      	ldr	r2, [pc, #76]	; (8001658 <HAL_TIM_Base_Start_IT+0xa0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d111      	bne.n	8001634 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b06      	cmp	r3, #6
 8001620:	d010      	beq.n	8001644 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0201 	orr.w	r2, r2, #1
 8001630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001632:	e007      	b.n	8001644 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	40012c00 	.word	0x40012c00
 8001654:	40000400 	.word	0x40000400
 8001658:	40000800 	.word	0x40000800

0800165c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b02      	cmp	r3, #2
 8001670:	d122      	bne.n	80016b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b02      	cmp	r3, #2
 800167e:	d11b      	bne.n	80016b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f06f 0202 	mvn.w	r2, #2
 8001688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f8ed 	bl	800187e <HAL_TIM_IC_CaptureCallback>
 80016a4:	e005      	b.n	80016b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f8e0 	bl	800186c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f8ef 	bl	8001890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d122      	bne.n	800170c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d11b      	bne.n	800170c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f06f 0204 	mvn.w	r2, #4
 80016dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2202      	movs	r2, #2
 80016e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f8c3 	bl	800187e <HAL_TIM_IC_CaptureCallback>
 80016f8:	e005      	b.n	8001706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f8b6 	bl	800186c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f8c5 	bl	8001890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b08      	cmp	r3, #8
 8001718:	d122      	bne.n	8001760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b08      	cmp	r3, #8
 8001726:	d11b      	bne.n	8001760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f06f 0208 	mvn.w	r2, #8
 8001730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2204      	movs	r2, #4
 8001736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f899 	bl	800187e <HAL_TIM_IC_CaptureCallback>
 800174c:	e005      	b.n	800175a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f88c 	bl	800186c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f89b 	bl	8001890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b10      	cmp	r3, #16
 800176c:	d122      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b10      	cmp	r3, #16
 800177a:	d11b      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0210 	mvn.w	r2, #16
 8001784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2208      	movs	r2, #8
 800178a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f86f 	bl	800187e <HAL_TIM_IC_CaptureCallback>
 80017a0:	e005      	b.n	80017ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f862 	bl	800186c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f871 	bl	8001890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10e      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d107      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0201 	mvn.w	r2, #1
 80017d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe fe14 	bl	8000408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b80      	cmp	r3, #128	; 0x80
 80017ec:	d10e      	bne.n	800180c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f8:	2b80      	cmp	r3, #128	; 0x80
 80017fa:	d107      	bne.n	800180c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f8bf 	bl	800198a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001816:	2b40      	cmp	r3, #64	; 0x40
 8001818:	d10e      	bne.n	8001838 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001824:	2b40      	cmp	r3, #64	; 0x40
 8001826:	d107      	bne.n	8001838 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f835 	bl	80018a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0320 	and.w	r3, r3, #32
 8001842:	2b20      	cmp	r3, #32
 8001844:	d10e      	bne.n	8001864 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b20      	cmp	r3, #32
 8001852:	d107      	bne.n	8001864 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0220 	mvn.w	r2, #32
 800185c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f88a 	bl	8001978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a29      	ldr	r2, [pc, #164]	; (800196c <TIM_Base_SetConfig+0xb8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d00b      	beq.n	80018e4 <TIM_Base_SetConfig+0x30>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d2:	d007      	beq.n	80018e4 <TIM_Base_SetConfig+0x30>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a26      	ldr	r2, [pc, #152]	; (8001970 <TIM_Base_SetConfig+0xbc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d003      	beq.n	80018e4 <TIM_Base_SetConfig+0x30>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a25      	ldr	r2, [pc, #148]	; (8001974 <TIM_Base_SetConfig+0xc0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d108      	bne.n	80018f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a1c      	ldr	r2, [pc, #112]	; (800196c <TIM_Base_SetConfig+0xb8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00b      	beq.n	8001916 <TIM_Base_SetConfig+0x62>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001904:	d007      	beq.n	8001916 <TIM_Base_SetConfig+0x62>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <TIM_Base_SetConfig+0xbc>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d003      	beq.n	8001916 <TIM_Base_SetConfig+0x62>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a18      	ldr	r2, [pc, #96]	; (8001974 <TIM_Base_SetConfig+0xc0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d108      	bne.n	8001928 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800191c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a07      	ldr	r2, [pc, #28]	; (800196c <TIM_Base_SetConfig+0xb8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d103      	bne.n	800195c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	615a      	str	r2, [r3, #20]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	40012c00 	.word	0x40012c00
 8001970:	40000400 	.word	0x40000400
 8001974:	40000800 	.word	0x40000800

08001978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ae:	2b84      	cmp	r3, #132	; 0x84
 80019b0:	d005      	beq.n	80019be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80019b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4413      	add	r3, r2
 80019ba:	3303      	adds	r3, #3
 80019bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80019ce:	f000 facd 	bl	8001f6c <vTaskStartScheduler>
  
  return osOK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af04      	add	r7, sp, #16
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d020      	beq.n	8001a2c <osThreadCreate+0x54>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d01c      	beq.n	8001a2c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685c      	ldr	r4, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681d      	ldr	r5, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691e      	ldr	r6, [r3, #16]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ffc9 	bl	800199c <makeFreeRtosPriority>
 8001a0a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a14:	9202      	str	r2, [sp, #8]
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	9100      	str	r1, [sp, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	4632      	mov	r2, r6
 8001a1e:	4629      	mov	r1, r5
 8001a20:	4620      	mov	r0, r4
 8001a22:	f000 f8e8 	bl	8001bf6 <xTaskCreateStatic>
 8001a26:	4603      	mov	r3, r0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e01c      	b.n	8001a66 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685c      	ldr	r4, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a38:	b29e      	uxth	r6, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ffab 	bl	800199c <makeFreeRtosPriority>
 8001a46:	4602      	mov	r2, r0
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	9200      	str	r2, [sp, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4632      	mov	r2, r6
 8001a54:	4629      	mov	r1, r5
 8001a56:	4620      	mov	r0, r4
 8001a58:	f000 f926 	bl	8001ca8 <xTaskCreate>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d001      	beq.n	8001a66 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <osDelay+0x16>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	e000      	b.n	8001a88 <osDelay+0x18>
 8001a86:	2301      	movs	r3, #1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 fa3b 	bl	8001f04 <vTaskDelay>
  
  return osOK;
 8001a8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f103 0208 	add.w	r2, r3, #8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f103 0208 	add.w	r2, r3, #8
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f103 0208 	add.w	r2, r3, #8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4a:	d103      	bne.n	8001b54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	e00c      	b.n	8001b6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3308      	adds	r3, #8
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e002      	b.n	8001b62 <vListInsert+0x2e>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d2f6      	bcs.n	8001b5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	601a      	str	r2, [r3, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6892      	ldr	r2, [r2, #8]
 8001bba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6852      	ldr	r2, [r2, #4]
 8001bc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d103      	bne.n	8001bd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1e5a      	subs	r2, r3, #1
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b08e      	sub	sp, #56	; 0x38
 8001bfa:	af04      	add	r7, sp, #16
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c0e:	f383 8811 	msr	BASEPRI, r3
 8001c12:	f3bf 8f6f 	isb	sy
 8001c16:	f3bf 8f4f 	dsb	sy
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	e7fe      	b.n	8001c1c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <xTaskCreateStatic+0x42>
 8001c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c28:	f383 8811 	msr	BASEPRI, r3
 8001c2c:	f3bf 8f6f 	isb	sy
 8001c30:	f3bf 8f4f 	dsb	sy
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e7fe      	b.n	8001c36 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001c38:	2354      	movs	r3, #84	; 0x54
 8001c3a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	2b54      	cmp	r3, #84	; 0x54
 8001c40:	d009      	beq.n	8001c56 <xTaskCreateStatic+0x60>
 8001c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c46:	f383 8811 	msr	BASEPRI, r3
 8001c4a:	f3bf 8f6f 	isb	sy
 8001c4e:	f3bf 8f4f 	dsb	sy
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	e7fe      	b.n	8001c54 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01e      	beq.n	8001c9a <xTaskCreateStatic+0xa4>
 8001c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01b      	beq.n	8001c9a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001c74:	2300      	movs	r3, #0
 8001c76:	9303      	str	r3, [sp, #12]
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	9302      	str	r3, [sp, #8]
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f850 	bl	8001d32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c94:	f000 f8cc 	bl	8001e30 <prvAddNewTaskToReadyList>
 8001c98:	e001      	b.n	8001c9e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001c9e:	697b      	ldr	r3, [r7, #20]
	}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af04      	add	r7, sp, #16
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fe55 	bl	800296c <pvPortMalloc>
 8001cc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00e      	beq.n	8001ce8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001cca:	2054      	movs	r0, #84	; 0x54
 8001ccc:	f000 fe4e 	bl	800296c <pvPortMalloc>
 8001cd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cde:	e005      	b.n	8001cec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001ce0:	6978      	ldr	r0, [r7, #20]
 8001ce2:	f000 ff05 	bl	8002af0 <vPortFree>
 8001ce6:	e001      	b.n	8001cec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d017      	beq.n	8001d22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001cfa:	88fa      	ldrh	r2, [r7, #6]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 f80e 	bl	8001d32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d16:	69f8      	ldr	r0, [r7, #28]
 8001d18:	f000 f88a 	bl	8001e30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	e002      	b.n	8001d28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d28:	69bb      	ldr	r3, [r7, #24]
	}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b088      	sub	sp, #32
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	f023 0307 	bic.w	r3, r3, #7
 8001d58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d009      	beq.n	8001d78 <prvInitialiseNewTask+0x46>
 8001d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d68:	f383 8811 	msr	BASEPRI, r3
 8001d6c:	f3bf 8f6f 	isb	sy
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	e7fe      	b.n	8001d76 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	e012      	b.n	8001da4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	4413      	add	r3, r2
 8001d84:	7819      	ldrb	r1, [r3, #0]
 8001d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3334      	adds	r3, #52	; 0x34
 8001d8e:	460a      	mov	r2, r1
 8001d90:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	4413      	add	r3, r2
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	d9e9      	bls.n	8001d7e <prvInitialiseNewTask+0x4c>
 8001daa:	e000      	b.n	8001dae <prvInitialiseNewTask+0x7c>
		{
			break;
 8001dac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	2b06      	cmp	r3, #6
 8001dba:	d901      	bls.n	8001dc0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001dbc:	2306      	movs	r3, #6
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	2200      	movs	r2, #0
 8001dd0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fe7d 	bl	8001ad6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dde:	3318      	adds	r3, #24
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fe78 	bl	8001ad6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	f1c3 0207 	rsb	r2, r3, #7
 8001df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfe:	2200      	movs	r2, #0
 8001e00:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	68f9      	ldr	r1, [r7, #12]
 8001e0e:	69b8      	ldr	r0, [r7, #24]
 8001e10:	f000 fc06 	bl	8002620 <pxPortInitialiseStack>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e26:	bf00      	nop
 8001e28:	3720      	adds	r7, #32
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001e38:	f000 fcde 	bl	80027f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <prvAddNewTaskToReadyList+0xb8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	4a29      	ldr	r2, [pc, #164]	; (8001ee8 <prvAddNewTaskToReadyList+0xb8>)
 8001e44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <prvAddNewTaskToReadyList+0xbc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001e4e:	4a27      	ldr	r2, [pc, #156]	; (8001eec <prvAddNewTaskToReadyList+0xbc>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <prvAddNewTaskToReadyList+0xb8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d110      	bne.n	8001e7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001e5c:	f000 fabc 	bl	80023d8 <prvInitialiseTaskLists>
 8001e60:	e00d      	b.n	8001e7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001e62:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <prvAddNewTaskToReadyList+0xc0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <prvAddNewTaskToReadyList+0xbc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d802      	bhi.n	8001e7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001e78:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <prvAddNewTaskToReadyList+0xbc>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <prvAddNewTaskToReadyList+0xc4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <prvAddNewTaskToReadyList+0xc4>)
 8001e86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <prvAddNewTaskToReadyList+0xc8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <prvAddNewTaskToReadyList+0xc8>)
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4a15      	ldr	r2, [pc, #84]	; (8001efc <prvAddNewTaskToReadyList+0xcc>)
 8001ea8:	441a      	add	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f7ff fe1c 	bl	8001aee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001eb6:	f000 fccd 	bl	8002854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <prvAddNewTaskToReadyList+0xc0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00e      	beq.n	8001ee0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <prvAddNewTaskToReadyList+0xbc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <prvAddNewTaskToReadyList+0xd0>)
 8001ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000380 	.word	0x20000380
 8001eec:	20000280 	.word	0x20000280
 8001ef0:	2000038c 	.word	0x2000038c
 8001ef4:	2000039c 	.word	0x2000039c
 8001ef8:	20000388 	.word	0x20000388
 8001efc:	20000284 	.word	0x20000284
 8001f00:	e000ed04 	.word	0xe000ed04

08001f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <vTaskDelay+0x60>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <vTaskDelay+0x2e>
 8001f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f22:	f383 8811 	msr	BASEPRI, r3
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	e7fe      	b.n	8001f30 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001f32:	f000 f879 	bl	8002028 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f36:	2100      	movs	r1, #0
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fb0b 	bl	8002554 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001f3e:	f000 f881 	bl	8002044 <xTaskResumeAll>
 8001f42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <vTaskDelay+0x64>)
 8001f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200003a8 	.word	0x200003a8
 8001f68:	e000ed04 	.word	0xe000ed04

08001f6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001f7a:	463a      	mov	r2, r7
 8001f7c:	1d39      	adds	r1, r7, #4
 8001f7e:	f107 0308 	add.w	r3, r7, #8
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f8e4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	9202      	str	r2, [sp, #8]
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	2300      	movs	r3, #0
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	491d      	ldr	r1, [pc, #116]	; (8002010 <vTaskStartScheduler+0xa4>)
 8001f9c:	481d      	ldr	r0, [pc, #116]	; (8002014 <vTaskStartScheduler+0xa8>)
 8001f9e:	f7ff fe2a 	bl	8001bf6 <xTaskCreateStatic>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <vTaskStartScheduler+0xac>)
 8001fa6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <vTaskStartScheduler+0xac>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	e001      	b.n	8001fba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d115      	bne.n	8001fec <vTaskStartScheduler+0x80>
 8001fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc4:	f383 8811 	msr	BASEPRI, r3
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <vTaskStartScheduler+0xb0>)
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <vTaskStartScheduler+0xb4>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <vTaskStartScheduler+0xb8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001fe6:	f000 fb97 	bl	8002718 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001fea:	e00d      	b.n	8002008 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff2:	d109      	bne.n	8002008 <vTaskStartScheduler+0x9c>
 8001ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff8:	f383 8811 	msr	BASEPRI, r3
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e7fe      	b.n	8002006 <vTaskStartScheduler+0x9a>
}
 8002008:	bf00      	nop
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	08002dc0 	.word	0x08002dc0
 8002014:	080023a9 	.word	0x080023a9
 8002018:	200003a4 	.word	0x200003a4
 800201c:	200003a0 	.word	0x200003a0
 8002020:	2000038c 	.word	0x2000038c
 8002024:	20000384 	.word	0x20000384

08002028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <vTaskSuspendAll+0x18>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	4a03      	ldr	r2, [pc, #12]	; (8002040 <vTaskSuspendAll+0x18>)
 8002034:	6013      	str	r3, [r2, #0]
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	200003a8 	.word	0x200003a8

08002044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <xTaskResumeAll+0x114>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <xTaskResumeAll+0x2a>
 800205a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205e:	f383 8811 	msr	BASEPRI, r3
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	e7fe      	b.n	800206c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800206e:	f000 fbc3 	bl	80027f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002072:	4b39      	ldr	r3, [pc, #228]	; (8002158 <xTaskResumeAll+0x114>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3b01      	subs	r3, #1
 8002078:	4a37      	ldr	r2, [pc, #220]	; (8002158 <xTaskResumeAll+0x114>)
 800207a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800207c:	4b36      	ldr	r3, [pc, #216]	; (8002158 <xTaskResumeAll+0x114>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d161      	bne.n	8002148 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002084:	4b35      	ldr	r3, [pc, #212]	; (800215c <xTaskResumeAll+0x118>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d05d      	beq.n	8002148 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800208c:	e02e      	b.n	80020ec <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800208e:	4b34      	ldr	r3, [pc, #208]	; (8002160 <xTaskResumeAll+0x11c>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3318      	adds	r3, #24
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fd82 	bl	8001ba4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3304      	adds	r3, #4
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fd7d 	bl	8001ba4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	2201      	movs	r2, #1
 80020b0:	409a      	lsls	r2, r3
 80020b2:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <xTaskResumeAll+0x120>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	4a2a      	ldr	r2, [pc, #168]	; (8002164 <xTaskResumeAll+0x120>)
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4a27      	ldr	r2, [pc, #156]	; (8002168 <xTaskResumeAll+0x124>)
 80020ca:	441a      	add	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3304      	adds	r3, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f7ff fd0b 	bl	8001aee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020dc:	4b23      	ldr	r3, [pc, #140]	; (800216c <xTaskResumeAll+0x128>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d302      	bcc.n	80020ec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <xTaskResumeAll+0x12c>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <xTaskResumeAll+0x11c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1cc      	bne.n	800208e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80020fa:	f000 fa07 	bl	800250c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <xTaskResumeAll+0x130>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d010      	beq.n	800212c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800210a:	f000 f837 	bl	800217c <xTaskIncrementTick>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <xTaskResumeAll+0x12c>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3b01      	subs	r3, #1
 800211e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f1      	bne.n	800210a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <xTaskResumeAll+0x130>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <xTaskResumeAll+0x12c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d009      	beq.n	8002148 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002134:	2301      	movs	r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <xTaskResumeAll+0x134>)
 800213a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002148:	f000 fb84 	bl	8002854 <vPortExitCritical>

	return xAlreadyYielded;
 800214c:	68bb      	ldr	r3, [r7, #8]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200003a8 	.word	0x200003a8
 800215c:	20000380 	.word	0x20000380
 8002160:	20000340 	.word	0x20000340
 8002164:	20000388 	.word	0x20000388
 8002168:	20000284 	.word	0x20000284
 800216c:	20000280 	.word	0x20000280
 8002170:	20000394 	.word	0x20000394
 8002174:	20000390 	.word	0x20000390
 8002178:	e000ed04 	.word	0xe000ed04

0800217c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002186:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <xTaskIncrementTick+0x14c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 808c 	bne.w	80022a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002190:	4b4e      	ldr	r3, [pc, #312]	; (80022cc <xTaskIncrementTick+0x150>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002198:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <xTaskIncrementTick+0x150>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d11f      	bne.n	80021e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80021a4:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <xTaskIncrementTick+0x154>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <xTaskIncrementTick+0x46>
 80021ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b2:	f383 8811 	msr	BASEPRI, r3
 80021b6:	f3bf 8f6f 	isb	sy
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	e7fe      	b.n	80021c0 <xTaskIncrementTick+0x44>
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <xTaskIncrementTick+0x154>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <xTaskIncrementTick+0x158>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a40      	ldr	r2, [pc, #256]	; (80022d0 <xTaskIncrementTick+0x154>)
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4a40      	ldr	r2, [pc, #256]	; (80022d4 <xTaskIncrementTick+0x158>)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <xTaskIncrementTick+0x15c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	4a3e      	ldr	r2, [pc, #248]	; (80022d8 <xTaskIncrementTick+0x15c>)
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	f000 f994 	bl	800250c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80021e4:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <xTaskIncrementTick+0x160>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d34d      	bcc.n	800228a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <xTaskIncrementTick+0x154>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <xTaskIncrementTick+0x80>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <xTaskIncrementTick+0x82>
 80021fc:	2300      	movs	r3, #0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <xTaskIncrementTick+0x160>)
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	601a      	str	r2, [r3, #0]
					break;
 800220a:	e03e      	b.n	800228a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <xTaskIncrementTick+0x154>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d203      	bcs.n	800222c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002224:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <xTaskIncrementTick+0x160>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
						break;
 800222a:	e02e      	b.n	800228a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	3304      	adds	r3, #4
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fcb7 	bl	8001ba4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	3318      	adds	r3, #24
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fcae 	bl	8001ba4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	2201      	movs	r2, #1
 800224e:	409a      	lsls	r2, r3
 8002250:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <xTaskIncrementTick+0x164>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4313      	orrs	r3, r2
 8002256:	4a22      	ldr	r2, [pc, #136]	; (80022e0 <xTaskIncrementTick+0x164>)
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <xTaskIncrementTick+0x168>)
 8002268:	441a      	add	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3304      	adds	r3, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4610      	mov	r0, r2
 8002272:	f7ff fc3c 	bl	8001aee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <xTaskIncrementTick+0x16c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	429a      	cmp	r2, r3
 8002282:	d3b4      	bcc.n	80021ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002284:	2301      	movs	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002288:	e7b1      	b.n	80021ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <xTaskIncrementTick+0x16c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002290:	4914      	ldr	r1, [pc, #80]	; (80022e4 <xTaskIncrementTick+0x168>)
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d907      	bls.n	80022b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80022a2:	2301      	movs	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e004      	b.n	80022b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80022a8:	4b10      	ldr	r3, [pc, #64]	; (80022ec <xTaskIncrementTick+0x170>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <xTaskIncrementTick+0x170>)
 80022b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <xTaskIncrementTick+0x174>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80022ba:	2301      	movs	r3, #1
 80022bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80022be:	697b      	ldr	r3, [r7, #20]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	200003a8 	.word	0x200003a8
 80022cc:	20000384 	.word	0x20000384
 80022d0:	20000338 	.word	0x20000338
 80022d4:	2000033c 	.word	0x2000033c
 80022d8:	20000398 	.word	0x20000398
 80022dc:	200003a0 	.word	0x200003a0
 80022e0:	20000388 	.word	0x20000388
 80022e4:	20000284 	.word	0x20000284
 80022e8:	20000280 	.word	0x20000280
 80022ec:	20000390 	.word	0x20000390
 80022f0:	20000394 	.word	0x20000394

080022f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <vTaskSwitchContext+0xa0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002302:	4b25      	ldr	r3, [pc, #148]	; (8002398 <vTaskSwitchContext+0xa4>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002308:	e03e      	b.n	8002388 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800230a:	4b23      	ldr	r3, [pc, #140]	; (8002398 <vTaskSwitchContext+0xa4>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002310:	4b22      	ldr	r3, [pc, #136]	; (800239c <vTaskSwitchContext+0xa8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800231e:	7afb      	ldrb	r3, [r7, #11]
 8002320:	f1c3 031f 	rsb	r3, r3, #31
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	491e      	ldr	r1, [pc, #120]	; (80023a0 <vTaskSwitchContext+0xac>)
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <vTaskSwitchContext+0x5a>
	__asm volatile
 800233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233e:	f383 8811 	msr	BASEPRI, r3
 8002342:	f3bf 8f6f 	isb	sy
 8002346:	f3bf 8f4f 	dsb	sy
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	e7fe      	b.n	800234c <vTaskSwitchContext+0x58>
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <vTaskSwitchContext+0xac>)
 800235a:	4413      	add	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	3308      	adds	r3, #8
 8002370:	429a      	cmp	r2, r3
 8002372:	d104      	bne.n	800237e <vTaskSwitchContext+0x8a>
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <vTaskSwitchContext+0xb0>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	200003a8 	.word	0x200003a8
 8002398:	20000394 	.word	0x20000394
 800239c:	20000388 	.word	0x20000388
 80023a0:	20000284 	.word	0x20000284
 80023a4:	20000280 	.word	0x20000280

080023a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80023b0:	f000 f852 	bl	8002458 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <prvIdleTask+0x28>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d9f9      	bls.n	80023b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <prvIdleTask+0x2c>)
 80023be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80023cc:	e7f0      	b.n	80023b0 <prvIdleTask+0x8>
 80023ce:	bf00      	nop
 80023d0:	20000284 	.word	0x20000284
 80023d4:	e000ed04 	.word	0xe000ed04

080023d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	e00c      	b.n	80023fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <prvInitialiseTaskLists+0x60>)
 80023f0:	4413      	add	r3, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fb50 	bl	8001a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3301      	adds	r3, #1
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b06      	cmp	r3, #6
 8002402:	d9ef      	bls.n	80023e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002404:	480d      	ldr	r0, [pc, #52]	; (800243c <prvInitialiseTaskLists+0x64>)
 8002406:	f7ff fb47 	bl	8001a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800240a:	480d      	ldr	r0, [pc, #52]	; (8002440 <prvInitialiseTaskLists+0x68>)
 800240c:	f7ff fb44 	bl	8001a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002410:	480c      	ldr	r0, [pc, #48]	; (8002444 <prvInitialiseTaskLists+0x6c>)
 8002412:	f7ff fb41 	bl	8001a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002416:	480c      	ldr	r0, [pc, #48]	; (8002448 <prvInitialiseTaskLists+0x70>)
 8002418:	f7ff fb3e 	bl	8001a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800241c:	480b      	ldr	r0, [pc, #44]	; (800244c <prvInitialiseTaskLists+0x74>)
 800241e:	f7ff fb3b 	bl	8001a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <prvInitialiseTaskLists+0x78>)
 8002424:	4a05      	ldr	r2, [pc, #20]	; (800243c <prvInitialiseTaskLists+0x64>)
 8002426:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <prvInitialiseTaskLists+0x7c>)
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <prvInitialiseTaskLists+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000284 	.word	0x20000284
 800243c:	20000310 	.word	0x20000310
 8002440:	20000324 	.word	0x20000324
 8002444:	20000340 	.word	0x20000340
 8002448:	20000354 	.word	0x20000354
 800244c:	2000036c 	.word	0x2000036c
 8002450:	20000338 	.word	0x20000338
 8002454:	2000033c 	.word	0x2000033c

08002458 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800245e:	e019      	b.n	8002494 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002460:	f000 f9ca 	bl	80027f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <prvCheckTasksWaitingTermination+0x4c>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fb97 	bl	8001ba4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <prvCheckTasksWaitingTermination+0x50>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3b01      	subs	r3, #1
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <prvCheckTasksWaitingTermination+0x50>)
 800247e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <prvCheckTasksWaitingTermination+0x54>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3b01      	subs	r3, #1
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <prvCheckTasksWaitingTermination+0x54>)
 8002488:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800248a:	f000 f9e3 	bl	8002854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f80e 	bl	80024b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <prvCheckTasksWaitingTermination+0x54>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e1      	bne.n	8002460 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000354 	.word	0x20000354
 80024a8:	20000380 	.word	0x20000380
 80024ac:	20000368 	.word	0x20000368

080024b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d108      	bne.n	80024d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 fb12 	bl	8002af0 <vPortFree>
				vPortFree( pxTCB );
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fb0f 	bl	8002af0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80024d2:	e017      	b.n	8002504 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d103      	bne.n	80024e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fb06 	bl	8002af0 <vPortFree>
	}
 80024e4:	e00e      	b.n	8002504 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d009      	beq.n	8002504 <prvDeleteTCB+0x54>
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	e7fe      	b.n	8002502 <prvDeleteTCB+0x52>
	}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <prvResetNextTaskUnblockTime+0x40>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <prvResetNextTaskUnblockTime+0x14>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <prvResetNextTaskUnblockTime+0x16>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <prvResetNextTaskUnblockTime+0x44>)
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800252e:	e008      	b.n	8002542 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <prvResetNextTaskUnblockTime+0x40>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <prvResetNextTaskUnblockTime+0x44>)
 8002540:	6013      	str	r3, [r2, #0]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	20000338 	.word	0x20000338
 8002550:	200003a0 	.word	0x200003a0

08002554 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800255e:	4b29      	ldr	r3, [pc, #164]	; (8002604 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3304      	adds	r3, #4
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fb1a 	bl	8001ba4 <uxListRemove>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10b      	bne.n	800258e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	2201      	movs	r2, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	4b21      	ldr	r3, [pc, #132]	; (800260c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4013      	ands	r3, r2
 800258a:	4a20      	ldr	r2, [pc, #128]	; (800260c <prvAddCurrentTaskToDelayedList+0xb8>)
 800258c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d10a      	bne.n	80025ac <prvAddCurrentTaskToDelayedList+0x58>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <prvAddCurrentTaskToDelayedList+0xb4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3304      	adds	r3, #4
 80025a2:	4619      	mov	r1, r3
 80025a4:	481a      	ldr	r0, [pc, #104]	; (8002610 <prvAddCurrentTaskToDelayedList+0xbc>)
 80025a6:	f7ff faa2 	bl	8001aee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80025aa:	e026      	b.n	80025fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d209      	bcs.n	80025d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <prvAddCurrentTaskToDelayedList+0xc0>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3304      	adds	r3, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f7ff faaf 	bl	8001b34 <vListInsert>
}
 80025d6:	e010      	b.n	80025fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <prvAddCurrentTaskToDelayedList+0xc4>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <prvAddCurrentTaskToDelayedList+0xb4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3304      	adds	r3, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4610      	mov	r0, r2
 80025e6:	f7ff faa5 	bl	8001b34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <prvAddCurrentTaskToDelayedList+0xc8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d202      	bcs.n	80025fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80025f4:	4a09      	ldr	r2, [pc, #36]	; (800261c <prvAddCurrentTaskToDelayedList+0xc8>)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	6013      	str	r3, [r2, #0]
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000384 	.word	0x20000384
 8002608:	20000280 	.word	0x20000280
 800260c:	20000388 	.word	0x20000388
 8002610:	2000036c 	.word	0x2000036c
 8002614:	2000033c 	.word	0x2000033c
 8002618:	20000338 	.word	0x20000338
 800261c:	200003a0 	.word	0x200003a0

08002620 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3b04      	subs	r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3b04      	subs	r3, #4
 800263e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f023 0201 	bic.w	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3b04      	subs	r3, #4
 800264e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002650:	4a08      	ldr	r2, [pc, #32]	; (8002674 <pxPortInitialiseStack+0x54>)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3b14      	subs	r3, #20
 800265a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3b20      	subs	r3, #32
 8002666:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	08002679 	.word	0x08002679

08002678 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <prvTaskExitError+0x4c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268a:	d009      	beq.n	80026a0 <prvTaskExitError+0x28>
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	e7fe      	b.n	800269e <prvTaskExitError+0x26>
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80026b2:	bf00      	nop
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0fc      	beq.n	80026b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	2000000c 	.word	0x2000000c
	...

080026d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <pxCurrentTCBConst2>)
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	6808      	ldr	r0, [r1, #0]
 80026d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80026da:	f380 8809 	msr	PSP, r0
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f04f 0000 	mov.w	r0, #0
 80026e6:	f380 8811 	msr	BASEPRI, r0
 80026ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80026ee:	4770      	bx	lr

080026f0 <pxCurrentTCBConst2>:
 80026f0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop

080026f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80026f8:	4806      	ldr	r0, [pc, #24]	; (8002714 <prvPortStartFirstTask+0x1c>)
 80026fa:	6800      	ldr	r0, [r0, #0]
 80026fc:	6800      	ldr	r0, [r0, #0]
 80026fe:	f380 8808 	msr	MSP, r0
 8002702:	b662      	cpsie	i
 8002704:	b661      	cpsie	f
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	df00      	svc	0
 8002710:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002712:	bf00      	nop
 8002714:	e000ed08 	.word	0xe000ed08

08002718 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800271e:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <xPortStartScheduler+0xcc>)
 8002720:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	22ff      	movs	r2, #255	; 0xff
 800272e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <xPortStartScheduler+0xd0>)
 8002744:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <xPortStartScheduler+0xd4>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800274c:	e009      	b.n	8002762 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800274e:	4b27      	ldr	r3, [pc, #156]	; (80027ec <xPortStartScheduler+0xd4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3b01      	subs	r3, #1
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <xPortStartScheduler+0xd4>)
 8002756:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276a:	2b80      	cmp	r3, #128	; 0x80
 800276c:	d0ef      	beq.n	800274e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <xPortStartScheduler+0xd4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	d009      	beq.n	800278e <xPortStartScheduler+0x76>
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	e7fe      	b.n	800278c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <xPortStartScheduler+0xd4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	4a15      	ldr	r2, [pc, #84]	; (80027ec <xPortStartScheduler+0xd4>)
 8002796:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <xPortStartScheduler+0xd4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <xPortStartScheduler+0xd4>)
 80027a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80027ac:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <xPortStartScheduler+0xd8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <xPortStartScheduler+0xd8>)
 80027b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <xPortStartScheduler+0xd8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <xPortStartScheduler+0xd8>)
 80027be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80027c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80027c4:	f000 f8b0 	bl	8002928 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <xPortStartScheduler+0xdc>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80027ce:	f7ff ff93 	bl	80026f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80027d2:	f7ff fd8f 	bl	80022f4 <vTaskSwitchContext>
	prvTaskExitError();
 80027d6:	f7ff ff4f 	bl	8002678 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	e000e400 	.word	0xe000e400
 80027e8:	200003ac 	.word	0x200003ac
 80027ec:	200003b0 	.word	0x200003b0
 80027f0:	e000ed20 	.word	0xe000ed20
 80027f4:	2000000c 	.word	0x2000000c

080027f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <vPortEnterCritical+0x54>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	4a0d      	ldr	r2, [pc, #52]	; (800284c <vPortEnterCritical+0x54>)
 8002818:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <vPortEnterCritical+0x54>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10e      	bne.n	8002840 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <vPortEnterCritical+0x58>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <vPortEnterCritical+0x48>
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	e7fe      	b.n	800283e <vPortEnterCritical+0x46>
	}
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	2000000c 	.word	0x2000000c
 8002850:	e000ed04 	.word	0xe000ed04

08002854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <vPortExitCritical+0x48>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <vPortExitCritical+0x22>
 8002862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	e7fe      	b.n	8002874 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <vPortExitCritical+0x48>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3b01      	subs	r3, #1
 800287c:	4a07      	ldr	r2, [pc, #28]	; (800289c <vPortExitCritical+0x48>)
 800287e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <vPortExitCritical+0x48>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <vPortExitCritical+0x3e>
 8002888:	2300      	movs	r3, #0
 800288a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	2000000c 	.word	0x2000000c

080028a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80028a0:	f3ef 8009 	mrs	r0, PSP
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <pxCurrentTCBConst>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028b0:	6010      	str	r0, [r2, #0]
 80028b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80028b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028ba:	f380 8811 	msr	BASEPRI, r0
 80028be:	f7ff fd19 	bl	80022f4 <vTaskSwitchContext>
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f380 8811 	msr	BASEPRI, r0
 80028ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	6808      	ldr	r0, [r1, #0]
 80028d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028d6:	f380 8809 	msr	PSP, r0
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	4770      	bx	lr

080028e0 <pxCurrentTCBConst>:
 80028e0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop

080028e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
	__asm volatile
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002900:	f7ff fc3c 	bl	800217c <xTaskIncrementTick>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <SysTick_Handler+0x3c>)
 800290c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <vPortSetupTimerInterrupt+0x30>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <vPortSetupTimerInterrupt+0x34>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <vPortSetupTimerInterrupt+0x38>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a09      	ldr	r2, [pc, #36]	; (8002964 <vPortSetupTimerInterrupt+0x3c>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	099b      	lsrs	r3, r3, #6
 8002944:	4a08      	ldr	r2, [pc, #32]	; (8002968 <vPortSetupTimerInterrupt+0x40>)
 8002946:	3b01      	subs	r3, #1
 8002948:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800294a:	4b03      	ldr	r3, [pc, #12]	; (8002958 <vPortSetupTimerInterrupt+0x30>)
 800294c:	2207      	movs	r2, #7
 800294e:	601a      	str	r2, [r3, #0]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	e000e010 	.word	0xe000e010
 800295c:	e000e018 	.word	0xe000e018
 8002960:	20000000 	.word	0x20000000
 8002964:	10624dd3 	.word	0x10624dd3
 8002968:	e000e014 	.word	0xe000e014

0800296c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002978:	f7ff fb56 	bl	8002028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800297c:	4b57      	ldr	r3, [pc, #348]	; (8002adc <pvPortMalloc+0x170>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002984:	f000 f90c 	bl	8002ba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002988:	4b55      	ldr	r3, [pc, #340]	; (8002ae0 <pvPortMalloc+0x174>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 808c 	bne.w	8002aae <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01c      	beq.n	80029d6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800299c:	2208      	movs	r2, #8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d013      	beq.n	80029d6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f023 0307 	bic.w	r3, r3, #7
 80029b4:	3308      	adds	r3, #8
 80029b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <pvPortMalloc+0x6a>
	__asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e7fe      	b.n	80029d4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d068      	beq.n	8002aae <pvPortMalloc+0x142>
 80029dc:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <pvPortMalloc+0x178>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d863      	bhi.n	8002aae <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80029e6:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <pvPortMalloc+0x17c>)
 80029e8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80029ea:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <pvPortMalloc+0x17c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029f0:	e004      	b.n	80029fc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d903      	bls.n	8002a0e <pvPortMalloc+0xa2>
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f1      	bne.n	80029f2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a0e:	4b33      	ldr	r3, [pc, #204]	; (8002adc <pvPortMalloc+0x170>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d04a      	beq.n	8002aae <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	4413      	add	r3, r2
 8002a20:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	1ad2      	subs	r2, r2, r3
 8002a32:	2308      	movs	r3, #8
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d91e      	bls.n	8002a78 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <pvPortMalloc+0xf4>
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	e7fe      	b.n	8002a5e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	1ad2      	subs	r2, r2, r3
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a72:	69b8      	ldr	r0, [r7, #24]
 8002a74:	f000 f8f6 	bl	8002c64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <pvPortMalloc+0x178>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <pvPortMalloc+0x178>)
 8002a84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <pvPortMalloc+0x178>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <pvPortMalloc+0x180>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d203      	bcs.n	8002a9a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <pvPortMalloc+0x178>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a15      	ldr	r2, [pc, #84]	; (8002aec <pvPortMalloc+0x180>)
 8002a98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <pvPortMalloc+0x174>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002aae:	f7ff fac9 	bl	8002044 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <pvPortMalloc+0x164>
 8002abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	e7fe      	b.n	8002ace <pvPortMalloc+0x162>
	return pvReturn;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3728      	adds	r7, #40	; 0x28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000fbc 	.word	0x20000fbc
 8002ae0:	20000fc8 	.word	0x20000fc8
 8002ae4:	20000fc0 	.word	0x20000fc0
 8002ae8:	20000fb4 	.word	0x20000fb4
 8002aec:	20000fc4 	.word	0x20000fc4

08002af0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d046      	beq.n	8002b90 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b02:	2308      	movs	r3, #8
 8002b04:	425b      	negs	r3, r3
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4413      	add	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <vPortFree+0xa8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <vPortFree+0x42>
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e7fe      	b.n	8002b30 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <vPortFree+0x5e>
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	e7fe      	b.n	8002b4c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <vPortFree+0xa8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d019      	beq.n	8002b90 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d115      	bne.n	8002b90 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <vPortFree+0xa8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	401a      	ands	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b74:	f7ff fa58 	bl	8002028 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <vPortFree+0xac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	4a06      	ldr	r2, [pc, #24]	; (8002b9c <vPortFree+0xac>)
 8002b84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b86:	6938      	ldr	r0, [r7, #16]
 8002b88:	f000 f86c 	bl	8002c64 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002b8c:	f7ff fa5a 	bl	8002044 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002b90:	bf00      	nop
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000fc8 	.word	0x20000fc8
 8002b9c:	20000fc0 	.word	0x20000fc0

08002ba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002ba6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002baa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002bac:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <prvHeapInit+0xac>)
 8002bae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00c      	beq.n	8002bd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3307      	adds	r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <prvHeapInit+0xac>)
 8002bd0:	4413      	add	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <prvHeapInit+0xb0>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <prvHeapInit+0xb0>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	4413      	add	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002bec:	2208      	movs	r2, #8
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0307 	bic.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <prvHeapInit+0xb4>)
 8002c00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <prvHeapInit+0xb4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <prvHeapInit+0xb4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <prvHeapInit+0xb4>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <prvHeapInit+0xb8>)
 8002c2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <prvHeapInit+0xbc>)
 8002c36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <prvHeapInit+0xc0>)
 8002c3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c3e:	601a      	str	r2, [r3, #0]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	200003b4 	.word	0x200003b4
 8002c50:	20000fb4 	.word	0x20000fb4
 8002c54:	20000fbc 	.word	0x20000fbc
 8002c58:	20000fc4 	.word	0x20000fc4
 8002c5c:	20000fc0 	.word	0x20000fc0
 8002c60:	20000fc8 	.word	0x20000fc8

08002c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <prvInsertBlockIntoFreeList+0xa8>)
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e002      	b.n	8002c78 <prvInsertBlockIntoFreeList+0x14>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d8f7      	bhi.n	8002c72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d108      	bne.n	8002ca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	441a      	add	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	441a      	add	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d118      	bne.n	8002cec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <prvInsertBlockIntoFreeList+0xac>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d00d      	beq.n	8002ce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e008      	b.n	8002cf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <prvInsertBlockIntoFreeList+0xac>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e003      	b.n	8002cf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d002      	beq.n	8002d02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	20000fb4 	.word	0x20000fb4
 8002d10:	20000fbc 	.word	0x20000fbc

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	2500      	movs	r5, #0
 8002d18:	4e0c      	ldr	r6, [pc, #48]	; (8002d4c <__libc_init_array+0x38>)
 8002d1a:	4c0d      	ldr	r4, [pc, #52]	; (8002d50 <__libc_init_array+0x3c>)
 8002d1c:	1ba4      	subs	r4, r4, r6
 8002d1e:	10a4      	asrs	r4, r4, #2
 8002d20:	42a5      	cmp	r5, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	f000 f822 	bl	8002d6c <_init>
 8002d28:	2500      	movs	r5, #0
 8002d2a:	4e0a      	ldr	r6, [pc, #40]	; (8002d54 <__libc_init_array+0x40>)
 8002d2c:	4c0a      	ldr	r4, [pc, #40]	; (8002d58 <__libc_init_array+0x44>)
 8002d2e:	1ba4      	subs	r4, r4, r6
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	42a5      	cmp	r5, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d3c:	4798      	blx	r3
 8002d3e:	3501      	adds	r5, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d46:	4798      	blx	r3
 8002d48:	3501      	adds	r5, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	08002de0 	.word	0x08002de0
 8002d50:	08002de0 	.word	0x08002de0
 8002d54:	08002de0 	.word	0x08002de0
 8002d58:	08002de4 	.word	0x08002de4

08002d5c <memset>:
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4402      	add	r2, r0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memset+0xa>
 8002d64:	4770      	bx	lr
 8002d66:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6a:	e7f9      	b.n	8002d60 <memset+0x4>

08002d6c <_init>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	bf00      	nop
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr

08002d78 <_fini>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr
